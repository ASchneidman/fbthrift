<%!

  Copyright (c) Facebook, Inc. and its affiliates.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

%>class <%service:name%>ServiceInfoHolder : public apache::thrift::ServiceInfoHolder {
  public:
   apache::thrift::ServiceRequestInfoMap const& requestInfoMap() const override;
   static apache::thrift::ServiceRequestInfoMap staticRequestInfoMap();
};

class <%^service:interaction?%><%service:name%>SvIf : <%#service:extends%>virtual public <% > common/namespace_cpp2%><%service:name%>SvIf<%/service:extends%><%^service:extends%>public apache::thrift::ServerInterface<%/service:extends%><%/service:interaction?%><%!
%><%#service:interaction?%><%service:name%>If : public apache::thrift::<%#interaction:serial?%>SerialInteraction<%/interaction:serial?%>Tile, public apache::thrift::ServerInterface<%/service:interaction?%> {
 public:
  std::string_view getGeneratedName() const override { return "<%service:name%>"; }

  typedef <%service:parent_service_name%>AsyncProcessor ProcessorType;
<%^service:interaction?%>
  std::unique_ptr<apache::thrift::AsyncProcessor> getProcessor() override;
  CreateMethodMetadataResult createMethodMetadata() override;
  std::optional<std::reference_wrapper<apache::thrift::ServiceRequestInfoMap const>> getServiceRequestInfoMap() const override;
<%#service:interactions%>
<% > service_h/service_interface%>
<%/service:interactions%>

<%/service:interaction?%><%#service:interaction?%>
  virtual ~<%service:name%>If() = default;
  std::unique_ptr<apache::thrift::AsyncProcessor> getProcessor() override {
    std::terminate();
  }
  CreateMethodMetadataResult createMethodMetadata() override {
    std::terminate();
  }
  std::optional<std::reference_wrapper<apache::thrift::ServiceRequestInfoMap const>> getServiceRequestInfoMap() const override {
    std::terminate();
  }
<%/service:interaction?%>
<%#service:functions%><%#function:return_type%><%^function:starts_interaction?%>
<%^function:eb%>
  virtual <% > service_common/function_return_type%> <%function:cpp_name%>(<% > service_common/function_return_param%><% > service_common/function_param_list_commented_out%>);
<%^service:interaction?%>
  virtual folly::Future<<% > service_common/async_return_type%>> future_<%function:cpp_name%>(<% > service_common/function_param_list%>);
<%/service:interaction?%>
  virtual folly::SemiFuture<<% > service_common/async_return_type%>> semifuture_<%function:cpp_name%>(<% > service_common/function_param_list%>);
<%#function:coroutine?%>
#if FOLLY_HAS_COROUTINES
  virtual folly::coro::Task<<% > service_common/callback_type%>> co_<%function:cpp_name%>(<% > service_common/function_param_list%>);
  virtual folly::coro::Task<<% > service_common/callback_type%>> co_<%function:cpp_name%>(apache::thrift::RequestParams params<%function:comma%><% > service_common/function_param_list%>);
#endif
<%/function:coroutine?%>
<%/function:eb%>
<%#function:oneway?%>
  virtual void async_<%#function:eb%>eb<%/function:eb%><%^function:eb%>tm<%/function:eb%>_<%function:cpp_name%>(std::unique_ptr<apache::thrift::HandlerCallbackBase> callback<%function:comma%><% > service_common/function_param_list%>);
<%/function:oneway?%>
<%^function:oneway?%>
  virtual void async_<%#function:eb%>eb<%/function:eb%><%^function:eb%>tm<%/function:eb%>_<%function:cpp_name%>(std::unique_ptr<apache::thrift::HandlerCallback<<% > types/unique_ptr_type%>>> callback<%function:comma%><% > service_common/function_param_list%>);
<%/function:oneway?%>
<%/function:starts_interaction?%><%#function:starts_interaction?%>
  virtual std::unique_ptr<<%type:name%>If> <%function:cpp_name%>() = 0;
<%/function:starts_interaction?%>
<%/function:return_type%>
<%/service:functions%>
 private:
<%^service:interaction?%>
  static <%service:name%>ServiceInfoHolder __fbthrift_serviceInfoHolder;
<%/service:interaction?%>
<%#service:functions%>
<%^function:eb%>
  std::atomic<apache::thrift::detail::si::InvocationType> __fbthrift_invocation_<%function:cpp_name%>{apache::thrift::detail::si::InvocationType::AsyncTm};
<%/function:eb%>
<%/service:functions%>
};
