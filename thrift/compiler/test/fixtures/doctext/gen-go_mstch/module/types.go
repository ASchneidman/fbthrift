// @generated by Thrift for thrift/compiler/test/fixtures/doctext/src/module.thrift
// This file is probably not the place you want to edit!

package module // thrift/compiler/test/fixtures/doctext/src/module.thrift

import (
  "fmt"

  "github.com/facebook/fbthrift/thrift/lib/go/thrift"
)


// (needed to ensure safety because of naive import list construction)
var _ = fmt.Printf
var _ = thrift.ZERO


type Lanyard = string

type Number = int32

type B int32

const (
    B_HELLO B = 0
)

// Enum value maps for B
var (
    B_name = map[B]string {
        B_HELLO: "HELLO",
    }

    B_value = map[string]B {
        "HELLO": B_HELLO,
    }

    // Deprecated: Use B_name instead.
    BToName = B_name

    // Deprecated: Use B_value instead.
    BToValue = B_value

    // Deprecated: Use B_name instead (e.g. `for name, _ := range B_name {}`).
    BNames = []string{
        "HELLO",
    }

    // Deprecated: Use B_value instead (e.g. `for value, _ := range B_value {}`).
    BValues = []B{
        0,
    }
)

func (x B) String() string {
    if v, ok := BToName[x]; ok {
        return v
    }
    return "<UNSET>"
}

func (x B) Ptr() *B {
    return &x
}

// Deprecated: Use B_value instead (e.g. `x, ok := B_value["name"]`).
func BFromString(s string) (B, error) {
    if v, ok := B_value[s]; ok {
        return v, nil
    }
    return B(0), fmt.Errorf("not a valid B string")
}

// Deprecated: Use B.Ptr() instead.
func BPtr(v B) *B {
    return &v
}


type A struct {
    UselessField int32 `thrift:"useless_field,1" json:"useless_field" db:"useless_field"`
}
// Compile time interface enforcer
var _ thrift.Struct = &A{}

func NewA() *A {
    return (&A{})
}
func (x *A) GetUselessField() int32 {
    return x.UselessField
}

func (x *A) SetUselessField(uselessField int32) *A {
    x.UselessField = uselessField
    return x
}


func (x *A) writeField1(p thrift.Protocol) error {  // UselessField
    if err := p.WriteFieldBegin("useless_field", thrift.I32, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetUselessField()
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *A) readField1(p thrift.Protocol) error {  // UselessField
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.SetUselessField(result)
    return nil
}


// Deprecated: Use A.Set* methods instead or set the fields directly.
type ABuilder struct {
    obj *A
}

func NewABuilder() *ABuilder {
    return &ABuilder{
        obj: NewA(),
    }
}

func (x *ABuilder) UselessField(uselessField int32) *ABuilder {
    x.obj.UselessField = uselessField
    return x
}

func (x *ABuilder) Emit() *A {
    var objCopy A = *x.obj
    return &objCopy
}

func (x *A) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("A"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *A) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // useless_field
            if err := x.readField1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type U struct {
    I *int32 `thrift:"i,1" json:"i" db:"i"`
    S *string `thrift:"s,2" json:"s" db:"s"`
}
// Compile time interface enforcer
var _ thrift.Struct = &U{}

func NewU() *U {
    return (&U{})
}
func (x *U) GetI() *int32 {
    return x.I
}

func (x *U) GetS() *string {
    return x.S
}

func (x *U) SetI(i int32) *U {
    x.I = &i
    return x
}

func (x *U) SetS(s string) *U {
    x.S = &s
    return x
}

func (x *U) IsSetI() bool {
    return x.I != nil
}

func (x *U) IsSetS() bool {
    return x.S != nil
}

func (x *U) writeField1(p thrift.Protocol) error {  // I
    if !x.IsSetI() {
        return nil
    }

    if err := p.WriteFieldBegin("i", thrift.I32, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetI()
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *U) writeField2(p thrift.Protocol) error {  // S
    if !x.IsSetS() {
        return nil
    }

    if err := p.WriteFieldBegin("s", thrift.STRING, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetS()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *U) readField1(p thrift.Protocol) error {  // I
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.SetI(result)
    return nil
}

func (x *U) readField2(p thrift.Protocol) error {  // S
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetS(result)
    return nil
}



func (x *U) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("U"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *U) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // i
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // s
            if err := x.readField2(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type Bang struct {
    Message string `thrift:"message,1" json:"message" db:"message"`
}
// Compile time interface enforcer
var _ thrift.Struct = &Bang{}

func NewBang() *Bang {
    return (&Bang{})
}
func (x *Bang) GetMessage() string {
    return x.Message
}

func (x *Bang) SetMessage(message string) *Bang {
    x.Message = message
    return x
}


func (x *Bang) writeField1(p thrift.Protocol) error {  // Message
    if err := p.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetMessage()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Bang) readField1(p thrift.Protocol) error {  // Message
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetMessage(result)
    return nil
}

func (x *Bang) String() string {
    return fmt.Sprintf("%+v", x)
}

func (x *Bang) Error() string {
    return x.String()
}


// Deprecated: Use Bang.Set* methods instead or set the fields directly.
type BangBuilder struct {
    obj *Bang
}

func NewBangBuilder() *BangBuilder {
    return &BangBuilder{
        obj: NewBang(),
    }
}

func (x *BangBuilder) Message(message string) *BangBuilder {
    x.obj.Message = message
    return x
}

func (x *BangBuilder) Emit() *Bang {
    var objCopy Bang = *x.obj
    return &objCopy
}

func (x *Bang) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("Bang"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *Bang) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // message
            if err := x.readField1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}
