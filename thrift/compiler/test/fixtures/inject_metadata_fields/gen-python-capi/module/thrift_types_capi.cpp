
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT
 *  @generated
 *
 */

#include <folly/python/import.h>
#include <thrift/lib/python/capi/iobuf.h>
#include <thrift/lib/python/types.h>

#include <thrift/compiler/test/fixtures/inject_metadata_fields/src/gen-python-capi/module/thrift_types_api.h>
#include <thrift/compiler/test/fixtures/inject_metadata_fields/src/gen-python-capi/module/thrift_types_capi.h>


namespace apache {
namespace thrift {
namespace python {
namespace capi {
namespace {
bool ensure_module_imported() {
  static ::folly::python::import_cache_nocapture import((
      ::import_module__thrift_types_capi));
  return import();
}
} // namespace

ExtractorResult<::cpp2::Fields>
Extractor<::cpp2::Fields>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::Fields>(
      "Module module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__module__Fields(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::cpp2::Fields>(
        "Thrift serialize error: Fields");
  }
  return detail::deserialize_iobuf<::cpp2::Fields>(std::move(val));
}


ExtractorResult<::cpp2::Fields>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::cpp2::Fields>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::Fields>(
      "Module module import error");
  }
  auto obj = StrongRef(init__module__Fields(fbthrift_data));
  if (!obj) {
      return extractorError<::cpp2::Fields>(
          "Init from fbthrift error: Fields");
  }
  return Extractor<::cpp2::Fields>{}(*obj);
}

int Extractor<::cpp2::Fields>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module module import error");
  }
  int result =
      can_extract__module__Fields(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: Fields");
  }
  return result;
}


PyObject* Constructor<::cpp2::Fields>::operator()(
    const ::cpp2::Fields& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__module__Fields(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::Fields>>::operator()(
    const ::cpp2::Fields& val) {
  auto obj = StrongRef(Constructor<::cpp2::Fields>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::cpp2::FieldsInjectedToEmptyStruct>
Extractor<::cpp2::FieldsInjectedToEmptyStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::FieldsInjectedToEmptyStruct>(
      "Module module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__module__FieldsInjectedToEmptyStruct(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::cpp2::FieldsInjectedToEmptyStruct>(
        "Thrift serialize error: FieldsInjectedToEmptyStruct");
  }
  return detail::deserialize_iobuf<::cpp2::FieldsInjectedToEmptyStruct>(std::move(val));
}


ExtractorResult<::cpp2::FieldsInjectedToEmptyStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::cpp2::FieldsInjectedToEmptyStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::FieldsInjectedToEmptyStruct>(
      "Module module import error");
  }
  auto obj = StrongRef(init__module__FieldsInjectedToEmptyStruct(fbthrift_data));
  if (!obj) {
      return extractorError<::cpp2::FieldsInjectedToEmptyStruct>(
          "Init from fbthrift error: FieldsInjectedToEmptyStruct");
  }
  return Extractor<::cpp2::FieldsInjectedToEmptyStruct>{}(*obj);
}

int Extractor<::cpp2::FieldsInjectedToEmptyStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module module import error");
  }
  int result =
      can_extract__module__FieldsInjectedToEmptyStruct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: FieldsInjectedToEmptyStruct");
  }
  return result;
}


PyObject* Constructor<::cpp2::FieldsInjectedToEmptyStruct>::operator()(
    const ::cpp2::FieldsInjectedToEmptyStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__module__FieldsInjectedToEmptyStruct(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::FieldsInjectedToEmptyStruct>>::operator()(
    const ::cpp2::FieldsInjectedToEmptyStruct& val) {
  auto obj = StrongRef(Constructor<::cpp2::FieldsInjectedToEmptyStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::cpp2::FieldsInjectedToStruct>
Extractor<::cpp2::FieldsInjectedToStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::FieldsInjectedToStruct>(
      "Module module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__module__FieldsInjectedToStruct(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::cpp2::FieldsInjectedToStruct>(
        "Thrift serialize error: FieldsInjectedToStruct");
  }
  return detail::deserialize_iobuf<::cpp2::FieldsInjectedToStruct>(std::move(val));
}


ExtractorResult<::cpp2::FieldsInjectedToStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::cpp2::FieldsInjectedToStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::FieldsInjectedToStruct>(
      "Module module import error");
  }
  auto obj = StrongRef(init__module__FieldsInjectedToStruct(fbthrift_data));
  if (!obj) {
      return extractorError<::cpp2::FieldsInjectedToStruct>(
          "Init from fbthrift error: FieldsInjectedToStruct");
  }
  return Extractor<::cpp2::FieldsInjectedToStruct>{}(*obj);
}

int Extractor<::cpp2::FieldsInjectedToStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module module import error");
  }
  int result =
      can_extract__module__FieldsInjectedToStruct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: FieldsInjectedToStruct");
  }
  return result;
}


PyObject* Constructor<::cpp2::FieldsInjectedToStruct>::operator()(
    const ::cpp2::FieldsInjectedToStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__module__FieldsInjectedToStruct(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::FieldsInjectedToStruct>>::operator()(
    const ::cpp2::FieldsInjectedToStruct& val) {
  auto obj = StrongRef(Constructor<::cpp2::FieldsInjectedToStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::cpp2::FieldsInjectedWithIncludedStruct>
Extractor<::cpp2::FieldsInjectedWithIncludedStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::FieldsInjectedWithIncludedStruct>(
      "Module module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__module__FieldsInjectedWithIncludedStruct(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::cpp2::FieldsInjectedWithIncludedStruct>(
        "Thrift serialize error: FieldsInjectedWithIncludedStruct");
  }
  return detail::deserialize_iobuf<::cpp2::FieldsInjectedWithIncludedStruct>(std::move(val));
}


ExtractorResult<::cpp2::FieldsInjectedWithIncludedStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::cpp2::FieldsInjectedWithIncludedStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::FieldsInjectedWithIncludedStruct>(
      "Module module import error");
  }
  auto obj = StrongRef(init__module__FieldsInjectedWithIncludedStruct(fbthrift_data));
  if (!obj) {
      return extractorError<::cpp2::FieldsInjectedWithIncludedStruct>(
          "Init from fbthrift error: FieldsInjectedWithIncludedStruct");
  }
  return Extractor<::cpp2::FieldsInjectedWithIncludedStruct>{}(*obj);
}

int Extractor<::cpp2::FieldsInjectedWithIncludedStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module module import error");
  }
  int result =
      can_extract__module__FieldsInjectedWithIncludedStruct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: FieldsInjectedWithIncludedStruct");
  }
  return result;
}


PyObject* Constructor<::cpp2::FieldsInjectedWithIncludedStruct>::operator()(
    const ::cpp2::FieldsInjectedWithIncludedStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__module__FieldsInjectedWithIncludedStruct(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::FieldsInjectedWithIncludedStruct>>::operator()(
    const ::cpp2::FieldsInjectedWithIncludedStruct& val) {
  auto obj = StrongRef(Constructor<::cpp2::FieldsInjectedWithIncludedStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

} // namespace capi
} // namespace python
} // namespace thrift
} // namespace apache
