
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT
 *  @generated
 *
 */

#include <folly/python/import.h>
#include <thrift/lib/python/capi/iobuf.h>
#include <thrift/lib/python/types.h>

#include <thrift/compiler/test/fixtures/mixin/src/gen-python-capi/module/thrift_types_api.h>
#include <thrift/compiler/test/fixtures/mixin/src/gen-python-capi/module/thrift_types_capi.h>


namespace apache {
namespace thrift {
namespace python {
namespace capi {
namespace {
bool ensure_module_imported() {
  static ::folly::python::import_cache_nocapture import((
      ::import_module__thrift_types_capi));
  return import();
}
} // namespace

ExtractorResult<::cpp2::Mixin1>
Extractor<::cpp2::Mixin1>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::Mixin1>(
      "Module module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__module__Mixin1(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::cpp2::Mixin1>(
        "Thrift serialize error: Mixin1");
  }
  return detail::deserialize_iobuf<::cpp2::Mixin1>(std::move(val));
}


ExtractorResult<::cpp2::Mixin1>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::cpp2::Mixin1>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::Mixin1>(
      "Module module import error");
  }
  auto obj = StrongRef(init__module__Mixin1(fbthrift_data));
  if (!obj) {
      return extractorError<::cpp2::Mixin1>(
          "Init from fbthrift error: Mixin1");
  }
  return Extractor<::cpp2::Mixin1>{}(*obj);
}

int Extractor<::cpp2::Mixin1>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module module import error");
  }
  int result =
      can_extract__module__Mixin1(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: Mixin1");
  }
  return result;
}


PyObject* Constructor<::cpp2::Mixin1>::operator()(
    const ::cpp2::Mixin1& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__module__Mixin1(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::Mixin1>>::operator()(
    const ::cpp2::Mixin1& val) {
  auto obj = StrongRef(Constructor<::cpp2::Mixin1>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::cpp2::Mixin2>
Extractor<::cpp2::Mixin2>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::Mixin2>(
      "Module module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__module__Mixin2(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::cpp2::Mixin2>(
        "Thrift serialize error: Mixin2");
  }
  return detail::deserialize_iobuf<::cpp2::Mixin2>(std::move(val));
}


ExtractorResult<::cpp2::Mixin2>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::cpp2::Mixin2>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::Mixin2>(
      "Module module import error");
  }
  auto obj = StrongRef(init__module__Mixin2(fbthrift_data));
  if (!obj) {
      return extractorError<::cpp2::Mixin2>(
          "Init from fbthrift error: Mixin2");
  }
  return Extractor<::cpp2::Mixin2>{}(*obj);
}

int Extractor<::cpp2::Mixin2>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module module import error");
  }
  int result =
      can_extract__module__Mixin2(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: Mixin2");
  }
  return result;
}


PyObject* Constructor<::cpp2::Mixin2>::operator()(
    const ::cpp2::Mixin2& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__module__Mixin2(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::Mixin2>>::operator()(
    const ::cpp2::Mixin2& val) {
  auto obj = StrongRef(Constructor<::cpp2::Mixin2>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::cpp2::Mixin3Base>
Extractor<::cpp2::Mixin3Base>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::Mixin3Base>(
      "Module module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__module__Mixin3Base(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::cpp2::Mixin3Base>(
        "Thrift serialize error: Mixin3Base");
  }
  return detail::deserialize_iobuf<::cpp2::Mixin3Base>(std::move(val));
}


ExtractorResult<::cpp2::Mixin3Base>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::cpp2::Mixin3Base>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::Mixin3Base>(
      "Module module import error");
  }
  auto obj = StrongRef(init__module__Mixin3Base(fbthrift_data));
  if (!obj) {
      return extractorError<::cpp2::Mixin3Base>(
          "Init from fbthrift error: Mixin3Base");
  }
  return Extractor<::cpp2::Mixin3Base>{}(*obj);
}

int Extractor<::cpp2::Mixin3Base>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module module import error");
  }
  int result =
      can_extract__module__Mixin3Base(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: Mixin3Base");
  }
  return result;
}


PyObject* Constructor<::cpp2::Mixin3Base>::operator()(
    const ::cpp2::Mixin3Base& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__module__Mixin3Base(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::Mixin3Base>>::operator()(
    const ::cpp2::Mixin3Base& val) {
  auto obj = StrongRef(Constructor<::cpp2::Mixin3Base>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::cpp2::Foo>
Extractor<::cpp2::Foo>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::Foo>(
      "Module module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__module__Foo(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::cpp2::Foo>(
        "Thrift serialize error: Foo");
  }
  return detail::deserialize_iobuf<::cpp2::Foo>(std::move(val));
}


ExtractorResult<::cpp2::Foo>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::cpp2::Foo>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::Foo>(
      "Module module import error");
  }
  auto obj = StrongRef(init__module__Foo(fbthrift_data));
  if (!obj) {
      return extractorError<::cpp2::Foo>(
          "Init from fbthrift error: Foo");
  }
  return Extractor<::cpp2::Foo>{}(*obj);
}

int Extractor<::cpp2::Foo>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module module import error");
  }
  int result =
      can_extract__module__Foo(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: Foo");
  }
  return result;
}


PyObject* Constructor<::cpp2::Foo>::operator()(
    const ::cpp2::Foo& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__module__Foo(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::Foo>>::operator()(
    const ::cpp2::Foo& val) {
  auto obj = StrongRef(Constructor<::cpp2::Foo>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

} // namespace capi
} // namespace python
} // namespace thrift
} // namespace apache
