#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

import typing as _typing

import folly.iobuf as _fbthrift_iobuf
import thrift.py3.builder

import patch.types as _patch_types
import patch.builders as _patch_builders

import module.types as _module_types


class MyData_Builder(thrift.py3.builder.StructBuilder):
    data1: _typing.Optional[str]
    data2: _typing.Optional[int]

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Any]]: ...


class MyStruct_Builder(thrift.py3.builder.StructBuilder):
    boolVal: _typing.Optional[bool]
    byteVal: _typing.Optional[int]
    i16Val: _typing.Optional[int]
    i32Val: _typing.Optional[int]
    i64Val: _typing.Optional[int]
    floatVal: _typing.Optional[float]
    doubleVal: _typing.Optional[float]
    stringVal: _typing.Optional[str]
    binaryVal: _typing.Optional[bytes]
    structVal: _typing.Any
    optBoolVal: _typing.Optional[bool]
    optByteVal: _typing.Optional[int]
    optI16Val: _typing.Optional[int]
    optI32Val: _typing.Optional[int]
    optI64Val: _typing.Optional[int]
    optFloatVal: _typing.Optional[float]
    optDoubleVal: _typing.Optional[float]
    optStringVal: _typing.Optional[str]
    optBinaryVal: _typing.Optional[bytes]
    optStructVal: _typing.Any

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Any]]: ...


class MyDataPatch_Builder(thrift.py3.builder.StructBuilder):
    data1: _typing.Any
    data2: _typing.Any

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Any]]: ...


class MyDataValuePatch_Builder(thrift.py3.builder.StructBuilder):
    assign: _typing.Any
    clear: _typing.Optional[bool]
    patch: _typing.Any

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Any]]: ...


class OptionalMyDataValuePatch_Builder(thrift.py3.builder.StructBuilder):
    clear: _typing.Optional[bool]
    patch: _typing.Any
    ensure: _typing.Any
    patchAfter: _typing.Any

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Any]]: ...


class MyStructPatch_Builder(thrift.py3.builder.StructBuilder):
    boolVal: _typing.Any
    byteVal: _typing.Any
    i16Val: _typing.Any
    i32Val: _typing.Any
    i64Val: _typing.Any
    floatVal: _typing.Any
    doubleVal: _typing.Any
    stringVal: _typing.Any
    binaryVal: _typing.Any
    structVal: _typing.Any
    optBoolVal: _typing.Any
    optByteVal: _typing.Any
    optI16Val: _typing.Any
    optI32Val: _typing.Any
    optI64Val: _typing.Any
    optFloatVal: _typing.Any
    optDoubleVal: _typing.Any
    optStringVal: _typing.Any
    optBinaryVal: _typing.Any
    optStructVal: _typing.Any

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Any]]: ...


class MyStructValuePatch_Builder(thrift.py3.builder.StructBuilder):
    assign: _typing.Any
    clear: _typing.Optional[bool]
    patch: _typing.Any

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Any]]: ...


class OptionalMyStructValuePatch_Builder(thrift.py3.builder.StructBuilder):
    clear: _typing.Optional[bool]
    patch: _typing.Any
    ensure: _typing.Any
    patchAfter: _typing.Any

    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Any]]: ...


