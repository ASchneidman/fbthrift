/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#pragma once

#include <functional>
#include <folly/Range.h>

#include <thrift/lib/py3/enums.h>
#include "src/gen-cpp2/module_data.h"
#include "src/gen-cpp2/module_types.h"
#include "src/gen-cpp2/module_metadata.h"
namespace thrift {
namespace py3 {



template<>
void reset_field<::cpp2::MyStruct>(
    ::cpp2::MyStruct& obj, uint16_t index) {
  switch (index) {
    case 0:
      obj.boolVal_ref().copy_from(default_inst<::cpp2::MyStruct>().boolVal_ref());
      return;
    case 1:
      obj.byteVal_ref().copy_from(default_inst<::cpp2::MyStruct>().byteVal_ref());
      return;
    case 2:
      obj.i16Val_ref().copy_from(default_inst<::cpp2::MyStruct>().i16Val_ref());
      return;
    case 3:
      obj.i32Val_ref().copy_from(default_inst<::cpp2::MyStruct>().i32Val_ref());
      return;
    case 4:
      obj.i64Val_ref().copy_from(default_inst<::cpp2::MyStruct>().i64Val_ref());
      return;
    case 5:
      obj.floatVal_ref().copy_from(default_inst<::cpp2::MyStruct>().floatVal_ref());
      return;
    case 6:
      obj.doubleVal_ref().copy_from(default_inst<::cpp2::MyStruct>().doubleVal_ref());
      return;
    case 7:
      obj.stringVal_ref().copy_from(default_inst<::cpp2::MyStruct>().stringVal_ref());
      return;
    case 8:
      obj.binaryVal_ref().copy_from(default_inst<::cpp2::MyStruct>().binaryVal_ref());
      return;
  }
}

template<>
void reset_field<::cpp2::MyStructPatch>(
    ::cpp2::MyStructPatch& obj, uint16_t index) {
  switch (index) {
    case 0:
      obj.boolVal_ref().copy_from(default_inst<::cpp2::MyStructPatch>().boolVal_ref());
      return;
    case 1:
      obj.byteVal_ref().copy_from(default_inst<::cpp2::MyStructPatch>().byteVal_ref());
      return;
    case 2:
      obj.i16Val_ref().copy_from(default_inst<::cpp2::MyStructPatch>().i16Val_ref());
      return;
    case 3:
      obj.i32Val_ref().copy_from(default_inst<::cpp2::MyStructPatch>().i32Val_ref());
      return;
    case 4:
      obj.i64Val_ref().copy_from(default_inst<::cpp2::MyStructPatch>().i64Val_ref());
      return;
    case 5:
      obj.floatVal_ref().copy_from(default_inst<::cpp2::MyStructPatch>().floatVal_ref());
      return;
    case 6:
      obj.doubleVal_ref().copy_from(default_inst<::cpp2::MyStructPatch>().doubleVal_ref());
      return;
    case 7:
      obj.stringVal_ref().copy_from(default_inst<::cpp2::MyStructPatch>().stringVal_ref());
      return;
    case 8:
      obj.binaryVal_ref().copy_from(default_inst<::cpp2::MyStructPatch>().binaryVal_ref());
      return;
  }
}

template<>
void reset_field<::cpp2::MyStructValuePatch>(
    ::cpp2::MyStructValuePatch& obj, uint16_t index) {
  switch (index) {
    case 0:
      obj.assign_ref().copy_from(default_inst<::cpp2::MyStructValuePatch>().assign_ref());
      return;
    case 1:
      obj.clear_ref().copy_from(default_inst<::cpp2::MyStructValuePatch>().clear_ref());
      return;
    case 2:
      obj.patch_ref().copy_from(default_inst<::cpp2::MyStructValuePatch>().patch_ref());
      return;
  }
}

template<>
const std::unordered_map<std::string_view, std::string_view>& PyStructTraits<
    ::cpp2::MyStruct>::namesmap() {
  static const folly::Indestructible<NamesMap> map {
    {
    }
  };
  return *map;
}

template<>
const std::unordered_map<std::string_view, std::string_view>& PyStructTraits<
    ::cpp2::MyStructPatch>::namesmap() {
  static const folly::Indestructible<NamesMap> map {
    {
    }
  };
  return *map;
}

template<>
const std::unordered_map<std::string_view, std::string_view>& PyStructTraits<
    ::cpp2::MyStructValuePatch>::namesmap() {
  static const folly::Indestructible<NamesMap> map {
    {
    }
  };
  return *map;
}
} // namespace py3
} // namespace thrift
