#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#
cimport cython as __cython
from cpython.object cimport PyTypeObject, Py_LT, Py_LE, Py_EQ, Py_NE, Py_GT, Py_GE
from libcpp.memory cimport shared_ptr, make_shared, unique_ptr, make_unique
from libcpp.string cimport string
from libcpp cimport bool as cbool
from libcpp.iterator cimport inserter as cinserter
from cpython cimport bool as pbool
from cython.operator cimport dereference as deref, preincrement as inc, address as ptr_address
import thrift.py3.types
cimport thrift.py3.types
cimport thrift.py3.exceptions
from thrift.py3.std_libcpp cimport sv_to_str as __sv_to_str, string_view as __cstring_view
from thrift.py3.types cimport (
    cSetOp as __cSetOp,
    richcmp as __richcmp,
    set_op as __set_op,
    setcmp as __setcmp,
    list_index as __list_index,
    list_count as __list_count,
    list_slice as __list_slice,
    list_getitem as __list_getitem,
    set_iter as __set_iter,
    map_iter as __map_iter,
    map_contains as __map_contains,
    map_getitem as __map_getitem,
    reference_shared_ptr as __reference_shared_ptr,
    get_field_name_by_index as __get_field_name_by_index,
    reset_field as __reset_field,
    translate_cpp_enum_to_python,
    SetMetaClass as __SetMetaClass,
    const_pointer_cast,
    constant_shared_ptr,
    NOTSET as __NOTSET,
    EnumData as __EnumData,
    EnumFlagsData as __EnumFlagsData,
    UnionTypeEnumData as __UnionTypeEnumData,
    createEnumDataForUnionType as __createEnumDataForUnionType,
)
cimport thrift.py3.std_libcpp as std_libcpp
cimport thrift.py3.serializer as serializer
import folly.iobuf as _fbthrift_iobuf
from folly.optional cimport cOptional
from folly.memory cimport to_shared_ptr as __to_shared_ptr
from folly.range cimport Range as __cRange

import sys
from collections.abc import Sequence, Set, Mapping, Iterable
import weakref as __weakref
import builtins as _builtins
cimport patch.types as _patch_types
import patch.types as _patch_types

cimport module.types_reflection as _types_reflection



@__cython.auto_pickle(False)
cdef class MyStruct(thrift.py3.types.Struct):
    def __init__(MyStruct self, **kwargs):
        self._cpp_obj = make_shared[cMyStruct]()
        self._fields_setter = _fbthrift_types_fields.__MyStruct_FieldsSetter._fbthrift_create(self._cpp_obj.get())
        super().__init__(**kwargs)

    def __call__(MyStruct self, **kwargs):
        if not kwargs:
            return self
        cdef MyStruct __fbthrift_inst = MyStruct.__new__(MyStruct)
        __fbthrift_inst._cpp_obj = make_shared[cMyStruct](deref(self._cpp_obj))
        __fbthrift_inst._fields_setter = _fbthrift_types_fields.__MyStruct_FieldsSetter._fbthrift_create(__fbthrift_inst._cpp_obj.get())
        for __fbthrift_name, _fbthrift_value in kwargs.items():
            __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
        return __fbthrift_inst

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return thrift.py3.types._IsSet("MyStruct", {
          "boolVal": deref(self._cpp_obj).boolVal_ref().has_value(),
          "byteVal": deref(self._cpp_obj).byteVal_ref().has_value(),
          "i16Val": deref(self._cpp_obj).i16Val_ref().has_value(),
          "i32Val": deref(self._cpp_obj).i32Val_ref().has_value(),
          "i64Val": deref(self._cpp_obj).i64Val_ref().has_value(),
          "floatVal": deref(self._cpp_obj).floatVal_ref().has_value(),
          "doubleVal": deref(self._cpp_obj).doubleVal_ref().has_value(),
          "stringVal": deref(self._cpp_obj).stringVal_ref().has_value(),
          "binaryVal": deref(self._cpp_obj).binaryVal_ref().has_value(),
        })

    @staticmethod
    cdef _fbthrift_create(shared_ptr[cMyStruct] cpp_obj):
        __fbthrift_inst = <MyStruct>MyStruct.__new__(MyStruct)
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        return __fbthrift_inst

    cdef inline boolVal_impl(self):

        return <pbool> deref(self._cpp_obj).boolVal_ref().value()

    @property
    def boolVal(self):
        return self.boolVal_impl()

    cdef inline byteVal_impl(self):

        return deref(self._cpp_obj).byteVal_ref().value()

    @property
    def byteVal(self):
        return self.byteVal_impl()

    cdef inline i16Val_impl(self):

        return deref(self._cpp_obj).i16Val_ref().value()

    @property
    def i16Val(self):
        return self.i16Val_impl()

    cdef inline i32Val_impl(self):

        return deref(self._cpp_obj).i32Val_ref().value()

    @property
    def i32Val(self):
        return self.i32Val_impl()

    cdef inline i64Val_impl(self):

        return deref(self._cpp_obj).i64Val_ref().value()

    @property
    def i64Val(self):
        return self.i64Val_impl()

    cdef inline floatVal_impl(self):

        return deref(self._cpp_obj).floatVal_ref().value()

    @property
    def floatVal(self):
        return self.floatVal_impl()

    cdef inline doubleVal_impl(self):

        return deref(self._cpp_obj).doubleVal_ref().value()

    @property
    def doubleVal(self):
        return self.doubleVal_impl()

    cdef inline stringVal_impl(self):

        return (<bytes>deref(self._cpp_obj).stringVal_ref().value()).decode('UTF-8')

    @property
    def stringVal(self):
        return self.stringVal_impl()

    cdef inline binaryVal_impl(self):

        return (<const char*>deref(self._cpp_obj).binaryVal_ref().value().data())[:deref(self._cpp_obj).binaryVal_ref().value().size()]

    @property
    def binaryVal(self):
        return self.binaryVal_impl()


    def __hash__(MyStruct self):
        return super().__hash__()

    def __repr__(MyStruct self):
        return super().__repr__()

    def __str__(MyStruct self):
        return super().__str__()


    def __copy__(MyStruct self):
        cdef shared_ptr[cMyStruct] cpp_obj = make_shared[cMyStruct](
            deref(self._cpp_obj)
        )
        return MyStruct._fbthrift_create(cmove(cpp_obj))

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[cMyStruct](
            self._cpp_obj,
            (<MyStruct>other)._cpp_obj,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__MyStruct()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        StructMetadata[cMyStruct].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.MyStruct"

    cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):
        return __get_field_name_by_index[cMyStruct](idx)

    def __cinit__(self):
        self._fbthrift_struct_size = 9

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(MyStruct self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[cMyStruct](self._cpp_obj.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(MyStruct self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cMyStruct]()
        with nogil:
            needed = serializer.cdeserialize[cMyStruct](buf, self._cpp_obj.get(), proto)
        return needed


@__cython.auto_pickle(False)
cdef class MyStructPatch(thrift.py3.types.Struct):
    def __init__(MyStructPatch self, **kwargs):
        self._cpp_obj = make_shared[cMyStructPatch]()
        self._fields_setter = _fbthrift_types_fields.__MyStructPatch_FieldsSetter._fbthrift_create(self._cpp_obj.get())
        super().__init__(**kwargs)

    def __call__(MyStructPatch self, **kwargs):
        if not kwargs:
            return self
        cdef MyStructPatch __fbthrift_inst = MyStructPatch.__new__(MyStructPatch)
        __fbthrift_inst._cpp_obj = make_shared[cMyStructPatch](deref(self._cpp_obj))
        __fbthrift_inst._fields_setter = _fbthrift_types_fields.__MyStructPatch_FieldsSetter._fbthrift_create(__fbthrift_inst._cpp_obj.get())
        for __fbthrift_name, _fbthrift_value in kwargs.items():
            __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
        return __fbthrift_inst

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return thrift.py3.types._IsSet("MyStructPatch", {
          "boolVal": deref(self._cpp_obj).boolVal_ref().has_value(),
          "byteVal": deref(self._cpp_obj).byteVal_ref().has_value(),
          "i16Val": deref(self._cpp_obj).i16Val_ref().has_value(),
          "i32Val": deref(self._cpp_obj).i32Val_ref().has_value(),
          "i64Val": deref(self._cpp_obj).i64Val_ref().has_value(),
          "floatVal": deref(self._cpp_obj).floatVal_ref().has_value(),
          "doubleVal": deref(self._cpp_obj).doubleVal_ref().has_value(),
          "stringVal": deref(self._cpp_obj).stringVal_ref().has_value(),
          "binaryVal": deref(self._cpp_obj).binaryVal_ref().has_value(),
        })

    @staticmethod
    cdef _fbthrift_create(shared_ptr[cMyStructPatch] cpp_obj):
        __fbthrift_inst = <MyStructPatch>MyStructPatch.__new__(MyStructPatch)
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        return __fbthrift_inst

    cdef inline boolVal_impl(self):

        if self.__fbthrift_cached_boolVal is None:
            self.__fbthrift_cached_boolVal = _patch_types.BoolPatch._fbthrift_create(__reference_shared_ptr(deref(self._cpp_obj).boolVal_ref().ref(), self._cpp_obj))
        return self.__fbthrift_cached_boolVal

    @property
    def boolVal(self):
        return self.boolVal_impl()

    cdef inline byteVal_impl(self):

        if self.__fbthrift_cached_byteVal is None:
            self.__fbthrift_cached_byteVal = _patch_types.BytePatch._fbthrift_create(__reference_shared_ptr(deref(self._cpp_obj).byteVal_ref().ref(), self._cpp_obj))
        return self.__fbthrift_cached_byteVal

    @property
    def byteVal(self):
        return self.byteVal_impl()

    cdef inline i16Val_impl(self):

        if self.__fbthrift_cached_i16Val is None:
            self.__fbthrift_cached_i16Val = _patch_types.I16Patch._fbthrift_create(__reference_shared_ptr(deref(self._cpp_obj).i16Val_ref().ref(), self._cpp_obj))
        return self.__fbthrift_cached_i16Val

    @property
    def i16Val(self):
        return self.i16Val_impl()

    cdef inline i32Val_impl(self):

        if self.__fbthrift_cached_i32Val is None:
            self.__fbthrift_cached_i32Val = _patch_types.I32Patch._fbthrift_create(__reference_shared_ptr(deref(self._cpp_obj).i32Val_ref().ref(), self._cpp_obj))
        return self.__fbthrift_cached_i32Val

    @property
    def i32Val(self):
        return self.i32Val_impl()

    cdef inline i64Val_impl(self):

        if self.__fbthrift_cached_i64Val is None:
            self.__fbthrift_cached_i64Val = _patch_types.I64Patch._fbthrift_create(__reference_shared_ptr(deref(self._cpp_obj).i64Val_ref().ref(), self._cpp_obj))
        return self.__fbthrift_cached_i64Val

    @property
    def i64Val(self):
        return self.i64Val_impl()

    cdef inline floatVal_impl(self):

        if self.__fbthrift_cached_floatVal is None:
            self.__fbthrift_cached_floatVal = _patch_types.FloatPatch._fbthrift_create(__reference_shared_ptr(deref(self._cpp_obj).floatVal_ref().ref(), self._cpp_obj))
        return self.__fbthrift_cached_floatVal

    @property
    def floatVal(self):
        return self.floatVal_impl()

    cdef inline doubleVal_impl(self):

        if self.__fbthrift_cached_doubleVal is None:
            self.__fbthrift_cached_doubleVal = _patch_types.DoublePatch._fbthrift_create(__reference_shared_ptr(deref(self._cpp_obj).doubleVal_ref().ref(), self._cpp_obj))
        return self.__fbthrift_cached_doubleVal

    @property
    def doubleVal(self):
        return self.doubleVal_impl()

    cdef inline stringVal_impl(self):

        if self.__fbthrift_cached_stringVal is None:
            self.__fbthrift_cached_stringVal = _patch_types.StringPatch._fbthrift_create(__reference_shared_ptr(deref(self._cpp_obj).stringVal_ref().ref(), self._cpp_obj))
        return self.__fbthrift_cached_stringVal

    @property
    def stringVal(self):
        return self.stringVal_impl()

    cdef inline binaryVal_impl(self):

        if self.__fbthrift_cached_binaryVal is None:
            self.__fbthrift_cached_binaryVal = _patch_types.BinaryPatch._fbthrift_create(__reference_shared_ptr(deref(self._cpp_obj).binaryVal_ref().ref(), self._cpp_obj))
        return self.__fbthrift_cached_binaryVal

    @property
    def binaryVal(self):
        return self.binaryVal_impl()


    def __hash__(MyStructPatch self):
        return super().__hash__()

    def __repr__(MyStructPatch self):
        return super().__repr__()

    def __str__(MyStructPatch self):
        return super().__str__()


    def __copy__(MyStructPatch self):
        cdef shared_ptr[cMyStructPatch] cpp_obj = make_shared[cMyStructPatch](
            deref(self._cpp_obj)
        )
        return MyStructPatch._fbthrift_create(cmove(cpp_obj))

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[cMyStructPatch](
            self._cpp_obj,
            (<MyStructPatch>other)._cpp_obj,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__MyStructPatch()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        StructMetadata[cMyStructPatch].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.MyStructPatch"

    cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):
        return __get_field_name_by_index[cMyStructPatch](idx)

    def __cinit__(self):
        self._fbthrift_struct_size = 9

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(MyStructPatch self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[cMyStructPatch](self._cpp_obj.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(MyStructPatch self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cMyStructPatch]()
        with nogil:
            needed = serializer.cdeserialize[cMyStructPatch](buf, self._cpp_obj.get(), proto)
        return needed


@__cython.auto_pickle(False)
cdef class MyStructValuePatch(thrift.py3.types.Struct):
    def __init__(MyStructValuePatch self, **kwargs):
        self._cpp_obj = make_shared[cMyStructValuePatch]()
        self._fields_setter = _fbthrift_types_fields.__MyStructValuePatch_FieldsSetter._fbthrift_create(self._cpp_obj.get())
        super().__init__(**kwargs)

    def __call__(MyStructValuePatch self, **kwargs):
        if not kwargs:
            return self
        cdef MyStructValuePatch __fbthrift_inst = MyStructValuePatch.__new__(MyStructValuePatch)
        __fbthrift_inst._cpp_obj = make_shared[cMyStructValuePatch](deref(self._cpp_obj))
        __fbthrift_inst._fields_setter = _fbthrift_types_fields.__MyStructValuePatch_FieldsSetter._fbthrift_create(__fbthrift_inst._cpp_obj.get())
        for __fbthrift_name, _fbthrift_value in kwargs.items():
            __fbthrift_inst._fbthrift_set_field(__fbthrift_name, _fbthrift_value)
        return __fbthrift_inst

    cdef void _fbthrift_set_field(self, str name, object value) except *:
        self._fields_setter.set_field(name.encode("utf-8"), value)

    cdef object _fbthrift_isset(self):
        return thrift.py3.types._IsSet("MyStructValuePatch", {
          "assign": deref(self._cpp_obj).assign_ref().has_value(),
          "clear": deref(self._cpp_obj).clear_ref().has_value(),
          "patch": deref(self._cpp_obj).patch_ref().has_value(),
        })

    @staticmethod
    cdef _fbthrift_create(shared_ptr[cMyStructValuePatch] cpp_obj):
        __fbthrift_inst = <MyStructValuePatch>MyStructValuePatch.__new__(MyStructValuePatch)
        __fbthrift_inst._cpp_obj = cmove(cpp_obj)
        return __fbthrift_inst

    cdef inline assign_impl(self):
        if not deref(self._cpp_obj).assign_ref().has_value():
            return None

        if self.__fbthrift_cached_assign is None:
            self.__fbthrift_cached_assign = MyStruct._fbthrift_create(__reference_shared_ptr(deref(self._cpp_obj).assign_ref().ref(), self._cpp_obj))
        return self.__fbthrift_cached_assign

    @property
    def assign(self):
        return self.assign_impl()

    cdef inline clear_impl(self):

        return <pbool> deref(self._cpp_obj).clear_ref().value()

    @property
    def clear(self):
        return self.clear_impl()

    cdef inline patch_impl(self):

        if self.__fbthrift_cached_patch is None:
            self.__fbthrift_cached_patch = MyStructPatch._fbthrift_create(__reference_shared_ptr(deref(self._cpp_obj).patch_ref().ref(), self._cpp_obj))
        return self.__fbthrift_cached_patch

    @property
    def patch(self):
        return self.patch_impl()


    def __hash__(MyStructValuePatch self):
        return super().__hash__()

    def __repr__(MyStructValuePatch self):
        return super().__repr__()

    def __str__(MyStructValuePatch self):
        return super().__str__()


    def __copy__(MyStructValuePatch self):
        cdef shared_ptr[cMyStructValuePatch] cpp_obj = make_shared[cMyStructValuePatch](
            deref(self._cpp_obj)
        )
        return MyStructValuePatch._fbthrift_create(cmove(cpp_obj))

    def __richcmp__(self, other, int op):
        r = self._fbthrift_cmp_sametype(other, op)
        return __richcmp[cMyStructValuePatch](
            self._cpp_obj,
            (<MyStructValuePatch>other)._cpp_obj,
            op,
        ) if r is None else r

    @staticmethod
    def __get_reflection__():
        return _types_reflection.get_reflection__MyStructValuePatch()

    @staticmethod
    def __get_metadata__():
        cdef __fbthrift_cThriftMetadata meta
        StructMetadata[cMyStructValuePatch].gen(meta)
        return __MetadataBox.box(cmove(meta))

    @staticmethod
    def __get_thrift_name__():
        return "module.MyStructValuePatch"

    cdef __cstring_view _fbthrift_get_field_name_by_index(self, size_t idx):
        return __get_field_name_by_index[cMyStructValuePatch](idx)

    def __cinit__(self):
        self._fbthrift_struct_size = 3

    cdef _fbthrift_iobuf.IOBuf _fbthrift_serialize(MyStructValuePatch self, __Protocol proto):
        cdef unique_ptr[_fbthrift_iobuf.cIOBuf] data
        with nogil:
            data = cmove(serializer.cserialize[cMyStructValuePatch](self._cpp_obj.get(), proto))
        return _fbthrift_iobuf.from_unique_ptr(cmove(data))

    cdef cuint32_t _fbthrift_deserialize(MyStructValuePatch self, const _fbthrift_iobuf.cIOBuf* buf, __Protocol proto) except? 0:
        cdef cuint32_t needed
        self._cpp_obj = make_shared[cMyStructValuePatch]()
        with nogil:
            needed = serializer.cdeserialize[cMyStructValuePatch](buf, self._cpp_obj.get(), proto)
        return needed


