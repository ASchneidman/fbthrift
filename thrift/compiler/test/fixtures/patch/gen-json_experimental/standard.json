{
  "__fbthrift": "@generated",
  "thrift_module" : "standard",
  "includes": {
    "cpp": "thrift/annotation/cpp.thrift",
    "java": "thrift/annotation/java.thrift",
    "thrift": "thrift/annotation/thrift.thrift"
  },
  "namespaces": {
    "cpp2": "apache.thrift.type",
    "go": "thrift.lib.thrift.standard",
    "java": "com.facebook.thrift.type",
    "java.swift": "com.facebook.thrift.standard_type",
    "js": "apache.thrift.type",
    "php": "apache_thrift_type_standard",
    "py": "thrift.lib.thrift.standard",
    "py.asyncio": "apache_thrift_asyncio.standard",
    "py3": "apache.thrift.type"
  },
  "global_docstring": "The **standard** types all Thrift implementations support.\n",
  "typedefs": {
      "ByteString": {
        "name": "ByteString",
        "type": "binary",
        "is_exception": false,
        "lineno": 49
      },
      "ByteBuffer": {
        "name": "ByteBuffer",
        "type": "binary",
        "is_exception": false,
        "lineno": 63
      },
      "Fraction": {
        "name": "Fraction",
        "type": {
  "type" : "struct",
  "name" : "FractionStruct"
},
        "is_exception": false,
        "lineno": 121
      },
      "SimpleFraction": {
        "name": "SimpleFraction",
        "type": {
  "type" : "struct",
  "name" : "FractionStruct"
},
        "is_exception": false,
        "lineno": 129
      },
      "Uuid": {
        "name": "Uuid",
        "type": "binary",
        "is_exception": false,
        "lineno": 140
      },
      "UuidString": {
        "name": "UuidString",
        "type": "string",
        "is_exception": false,
        "lineno": 154
      },
      "Path": {
        "name": "Path",
        "type": "string",
        "is_exception": false,
        "lineno": 160
      },
      "PathSegments": {
        "name": "PathSegments",
        "type": {
  "type" : "list",
  "inner_type" : "string"
},
        "is_exception": false,
        "lineno": 168
      },
      "Domain": {
        "name": "Domain",
        "type": "string",
        "is_exception": false,
        "lineno": 176
      },
      "DomainLabels": {
        "name": "DomainLabels",
        "type": {
  "type" : "list",
  "inner_type" : "string"
},
        "is_exception": false,
        "lineno": 184
      },
      "QueryString": {
        "name": "QueryString",
        "type": "string",
        "is_exception": false,
        "lineno": 194
      },
      "QueryArgs": {
        "name": "QueryArgs",
        "type": {
  "type" : "map",
  "key_type" : "string",
  "value_type" : "string"
},
        "is_exception": false,
        "lineno": 203
      },
      "Uri": {
        "name": "Uri",
        "type": "string",
        "is_exception": false,
        "lineno": 214
      },
      "JsonString": {
        "name": "JsonString",
        "type": "string",
        "is_exception": false,
        "lineno": 246
      },
      "Json": {
        "name": "Json",
        "type": {
  "type" : "struct",
  "name" : "JsonValue"
},
        "is_exception": false,
        "lineno": 250
      },
      "JsonObject": {
        "name": "JsonObject",
        "type": {
  "type" : "map",
  "key_type" : "string",
  "value_type" : {
  "type" : "struct",
  "name" : "JsonValue"
}
},
        "is_exception": false,
        "lineno": 318
      },
      "JsonArray": {
        "name": "JsonArray",
        "type": {
  "type" : "list",
  "inner_type" : {
  "type" : "struct",
  "name" : "JsonValue"
}
},
        "is_exception": false,
        "lineno": 322
      }
  },
  "enumerations" :
  {
      "Void" : {
        "name" : "Void",
        "constants" : {
          "NoValue" : {
            "name" : "NoValue",
            "lineno" : 41,
            "value" : 0
          }
        },
        "lineno" : 40
      },
      "JsonType" : {
        "name" : "JsonType",
        "constants" : {
          "Null" : {
            "name" : "Null",
            "lineno" : 255,
            "value" : 0
          },
          "Boolean" : {
            "name" : "Boolean",
            "lineno" : 256,
            "value" : 1
          },
          "Number" : {
            "name" : "Number",
            "lineno" : 257,
            "value" : 2
          },
          "String" : {
            "name" : "String",
            "lineno" : 258,
            "value" : 4
          },
          "Array" : {
            "name" : "Array",
            "lineno" : 259,
            "value" : 5
          },
          "Object" : {
            "name" : "Object",
            "lineno" : 260,
            "value" : 6
          }
        },
        "docstring" : "The types availible in JSON, as defined by https://www.json.org.\n",
        "lineno" : 254
      },
      "StandardProtocol" : {
        "name" : "StandardProtocol",
        "constants" : {
          "Custom" : {
            "name" : "Custom",
            "lineno" : 383,
            "value" : 0
          },
          "Binary" : {
            "name" : "Binary",
            "lineno" : 386,
            "value" : 1
          },
          "Compact" : {
            "name" : "Compact",
            "lineno" : 387,
            "value" : 2
          },
          "Json" : {
            "name" : "Json",
            "lineno" : 390,
            "value" : 3
          },
          "SimpleJson" : {
            "name" : "SimpleJson",
            "lineno" : 391,
            "value" : 4
          }
        },
        "docstring" : "The standard Thrift protocols.\n",
        "lineno" : 382
      }
      },
  "structs" :
  {
      "DurationStruct" : {
        "name" : "DurationStruct",
        "docstring" : "A fixed-length span of time, represented as a signed count of seconds and\nnanoseconds (nanos).\n\nConsidered 'normal', when `nanos` is in the range 0 to 999'999'999\ninclusive, or `seconds` is 0 and `nanos` is in the range -999'999'999 to\n999'999'999 inclusive.\n",
        "fields" : {
          "seconds" : {
            "name" : "seconds",
            "docstring" : "The count of seconds.\n",
            "key" : 1,
            "lineno" : 79,
            "required" : "opt-in-req-out",
            "type" : "i64"
                  },
          "nanos" : {
            "name" : "nanos",
            "default_value" : 0,
            "docstring" : "The count of nanoseconds.\n",
            "key" : 2,
            "lineno" : 82,
            "required" : "opt-in-req-out",
            "type" : "i32"
                  }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 77
      },
      "TimeStruct" : {
        "name" : "TimeStruct",
        "docstring" : "An instant in time encoded as a count of seconds and nanoseconds (nanos)\nsince midnight on January 1, 1970 UTC (i.e. Unix epoch).\n\nConsidered 'normal', when `nanos` is in the range 0 to 999'999'999 inclusive.\n",
        "fields" : {
          "seconds" : {
            "name" : "seconds",
            "docstring" : "The count of seconds.\n",
            "key" : 1,
            "lineno" : 95,
            "required" : "opt-in-req-out",
            "type" : "i64"
                  },
          "nanos" : {
            "name" : "nanos",
            "docstring" : "The count of nanoseconds.\n",
            "key" : 2,
            "lineno" : 97,
            "required" : "opt-in-req-out",
            "type" : "i32"
                  }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 93
      },
      "FractionStruct" : {
        "name" : "FractionStruct",
        "docstring" : "A integer fraction of the form {numerator} / {denominator}\n\nUseful for representing ratios, rates, and metric accumulators.\n\nConsidered 'normal' when the denominator is positive.\nConsidered 'simple' when `normal` and the greatest common divisor of the\nand `numerator` and `denominator`, is 1.\n",
        "fields" : {
          "numerator" : {
            "name" : "numerator",
            "docstring" : "The numerator/dividend/antecedent/upper integer.\n",
            "key" : 1,
            "lineno" : 111,
            "required" : "opt-in-req-out",
            "type" : "i64"
                  },
          "denominator" : {
            "name" : "denominator",
            "docstring" : "The denominator/divisor/consequent/lower integer.\n",
            "key" : 2,
            "lineno" : 113,
            "required" : "opt-in-req-out",
            "type" : "i64"
                  }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 109
      },
      "UriStruct" : {
        "name" : "UriStruct",
        "structured_annotations": {
          "thrift.Experimental" : {
        "type" : {
  "type" : "struct",
  "name" : "Experimental",
  "path" : "thrift/annotation/thrift.thrift"
},
        "value" : {}
      }
        },
        "docstring" : "A decoded URI.\n\n  {scheme}://{domain}/{path}?{query}#{fragment}\n\n@see Uri For the encoded version.\n",
        "fields" : {
          "scheme" : {
            "name" : "scheme",
            "docstring" : "The scheme, if present.\n",
            "key" : 1,
            "lineno" : 230,
            "required" : "opt-in-req-out",
            "type" : "string"
                  },
          "domain" : {
            "name" : "domain",
            "docstring" : "The domain, for example \"meta.com\" -> [\"meta\", \"com\"]\n",
            "key" : 2,
            "lineno" : 233,
            "required" : "opt-in-req-out",
            "type" : {
  "type" : "list",
  "inner_type" : "string"
}
                  },
          "path" : {
            "name" : "path",
            "docstring" : "The path, for example \"path/to/file\" -> [\"path\", \"to\", \"file\"]\n",
            "key" : 4,
            "lineno" : 236,
            "required" : "opt-in-req-out",
            "type" : {
  "type" : "list",
  "inner_type" : "string"
}
                  },
          "query" : {
            "name" : "query",
            "docstring" : "The query args.\n",
            "key" : 5,
            "lineno" : 239,
            "required" : "opt-in-req-out",
            "type" : {
  "type" : "map",
  "key_type" : "string",
  "value_type" : "string"
}
                  },
          "fragment" : {
            "name" : "fragment",
            "docstring" : "The fragment, if present.\n",
            "key" : 6,
            "lineno" : 242,
            "required" : "opt-in-req-out",
            "type" : "string"
                  }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 227
      },
      "JsonValue" : {
        "name" : "JsonValue",
        "structured_annotations": {
          "cpp.Adapter" : {
        "type" : {
  "type" : "struct",
  "name" : "Adapter",
  "path" : "thrift/annotation/cpp.thrift"
},
        "value" : {"name": "::apache::thrift::type::detail::JsonAdapter<::apache::thrift::type::JsonType>", "adaptedType": "::apache::thrift::type::detail::Json<::apache::thrift::type::JsonType, ::apache::thrift::type::detail::JsonValue>"}
      },
          "cpp.UseOpEncode" : {
        "type" : {
  "type" : "struct",
  "name" : "UseOpEncode",
  "path" : "thrift/annotation/cpp.thrift"
},
        "value" : {}
      },
          "thrift.Experimental" : {
        "type" : {
  "type" : "struct",
  "name" : "Experimental",
  "path" : "thrift/annotation/thrift.thrift"
},
        "value" : {}
      }
        },
        "docstring" : "A decoded JSON Value.\n\nConsidered 'normal' if all contained `floatValue` are not representable\nlosslessly in `intValue`.\n\nNote: This type is wire compatibile with `dynamic.Dynamic`, for all valid\nJSON values.\n\n@see JsonString For the encoded version.\n",
        "fields" : {
          "boolValue" : {
            "name" : "boolValue",
            "docstring" : "JSON \"true\" and \"false\" values represented as a boolean value.\n",
            "key" : 1,
            "lineno" : 282,
            "required" : "opt-in-req-out",
            "type" : "bool"
                  },
          "intValue" : {
            "name" : "intValue",
            "docstring" : "A JSON number represented as an integer value.\n\n@see #floatValue\n",
            "key" : 2,
            "lineno" : 289,
            "required" : "opt-in-req-out",
            "type" : "i64"
                  },
          "floatValue" : {
            "name" : "floatValue",
            "docstring" : "A floating point approximation of a JSON number.\n\nJSON does not specify a limit on the range or percision of numbers, so\na 64-bit flating point value is use to approximate any numbers that cannot\nbe represented losslessly in `intValue`.\n\nAny `floatValue` that can be represented losslessly in `intValue`, *should*\nbe stored there.\n\n@see #intValue\n",
            "key" : 3,
            "lineno" : 303,
            "required" : "opt-in-req-out",
            "type" : "double"
                  },
          "stringValue" : {
            "name" : "stringValue",
            "docstring" : "A JSON string value.\n",
            "key" : 4,
            "lineno" : 306,
            "required" : "opt-in-req-out",
            "type" : "string"
                  },
          "arrayValue" : {
            "name" : "arrayValue",
            "docstring" : "A JSON array value.\n",
            "key" : 5,
            "lineno" : 309,
            "required" : "opt-in-req-out",
            "type" : {
  "type" : "list",
  "inner_type" : {
  "type" : "struct",
  "name" : "JsonValue"
}
}
            ,
            "structured_annotations": {
              "thrift.Box" : {
            "type" : {
  "type" : "struct",
  "name" : "Box",
  "path" : "thrift/annotation/thrift.thrift"
},
            "value" : {}
          }
                }
          },
          "objectValue" : {
            "name" : "objectValue",
            "docstring" : "A JSON object value.\n",
            "key" : 6,
            "lineno" : 313,
            "required" : "opt-in-req-out",
            "type" : {
  "type" : "map",
  "key_type" : "string",
  "value_type" : {
  "type" : "struct",
  "name" : "JsonValue"
}
}
            ,
            "structured_annotations": {
              "thrift.Box" : {
            "type" : {
  "type" : "struct",
  "name" : "Box",
  "path" : "thrift/annotation/thrift.thrift"
},
            "value" : {}
          }
                }
          }
        },
        "is_exception" : false,
        "is_union" : true,
        "lineno" : 274
      },
      "TypeUri" : {
        "name" : "TypeUri",
        "docstring" : "The uri of an IDL defined type.\n",
        "fields" : {
          "uri" : {
            "name" : "uri",
            "docstring" : "The unique Thrift URI for this type.\n",
            "key" : 1,
            "lineno" : 327,
            "required" : "opt-in-req-out",
            "type" : "string"
                  },
          "typeHashPrefixSha2_256" : {
            "name" : "typeHashPrefixSha2_256",
            "docstring" : "A prefix of the SHA2-256 hash of the URI.\n",
            "key" : 2,
            "lineno" : 329,
            "required" : "opt-in-req-out",
            "type" : "binary"
                  }
        },
        "is_exception" : false,
        "is_union" : true,
        "lineno" : 325
      },
      "TypeName" : {
        "name" : "TypeName",
        "docstring" : "Uniquely identifies a Thrift type.\n",
        "fields" : {
          "boolType" : {
            "name" : "boolType",
            "docstring" : "True(1) or False(0)\n",
            "key" : 1,
            "lineno" : 335,
            "required" : "opt-in-req-out",
            "type" : {
  "type" : "enum",
  "name" : "Void"
}
                  },
          "byteType" : {
            "name" : "byteType",
            "docstring" : "8-bit signed integer\n",
            "key" : 2,
            "lineno" : 338,
            "required" : "opt-in-req-out",
            "type" : {
  "type" : "enum",
  "name" : "Void"
}
                  },
          "i16Type" : {
            "name" : "i16Type",
            "docstring" : "16-bit signed integer\n",
            "key" : 3,
            "lineno" : 341,
            "required" : "opt-in-req-out",
            "type" : {
  "type" : "enum",
  "name" : "Void"
}
                  },
          "i32Type" : {
            "name" : "i32Type",
            "docstring" : "32-bit signed integer\n",
            "key" : 4,
            "lineno" : 344,
            "required" : "opt-in-req-out",
            "type" : {
  "type" : "enum",
  "name" : "Void"
}
                  },
          "i64Type" : {
            "name" : "i64Type",
            "docstring" : "64-bit signed integer\n",
            "key" : 5,
            "lineno" : 347,
            "required" : "opt-in-req-out",
            "type" : {
  "type" : "enum",
  "name" : "Void"
}
                  },
          "floatType" : {
            "name" : "floatType",
            "docstring" : "32-bit floating point\n",
            "key" : 6,
            "lineno" : 350,
            "required" : "opt-in-req-out",
            "type" : {
  "type" : "enum",
  "name" : "Void"
}
                  },
          "doubleType" : {
            "name" : "doubleType",
            "docstring" : "64-bit floating point\n",
            "key" : 7,
            "lineno" : 353,
            "required" : "opt-in-req-out",
            "type" : {
  "type" : "enum",
  "name" : "Void"
}
                  },
          "stringType" : {
            "name" : "stringType",
            "docstring" : "UTF-8 encoded string\n",
            "key" : 8,
            "lineno" : 356,
            "required" : "opt-in-req-out",
            "type" : {
  "type" : "enum",
  "name" : "Void"
}
                  },
          "binaryType" : {
            "name" : "binaryType",
            "docstring" : "Arbitrary byte string\n",
            "key" : 9,
            "lineno" : 359,
            "required" : "opt-in-req-out",
            "type" : {
  "type" : "enum",
  "name" : "Void"
}
                  },
          "enumType" : {
            "name" : "enumType",
            "docstring" : "32-bit signed integer, with named values.\n",
            "key" : 10,
            "lineno" : 362,
            "required" : "opt-in-req-out",
            "type" : {
  "type" : "struct",
  "name" : "TypeUri"
}
                  },
          "typedefType" : {
            "name" : "typedefType",
            "docstring" : "`typedef` definition\n",
            "key" : 17,
            "lineno" : 365,
            "required" : "opt-in-req-out",
            "type" : {
  "type" : "struct",
  "name" : "TypeUri"
}
                  },
          "structType" : {
            "name" : "structType",
            "docstring" : "`struct` definition\n",
            "key" : 11,
            "lineno" : 367,
            "required" : "opt-in-req-out",
            "type" : {
  "type" : "struct",
  "name" : "TypeUri"
}
                  },
          "unionType" : {
            "name" : "unionType",
            "docstring" : "`union` definition\n",
            "key" : 12,
            "lineno" : 369,
            "required" : "opt-in-req-out",
            "type" : {
  "type" : "struct",
  "name" : "TypeUri"
}
                  },
          "exceptionType" : {
            "name" : "exceptionType",
            "docstring" : "`exception` definition\n",
            "key" : 13,
            "lineno" : 371,
            "required" : "opt-in-req-out",
            "type" : {
  "type" : "struct",
  "name" : "TypeUri"
}
                  },
          "listType" : {
            "name" : "listType",
            "docstring" : "`list<V>` definition\n",
            "key" : 14,
            "lineno" : 374,
            "required" : "opt-in-req-out",
            "type" : {
  "type" : "enum",
  "name" : "Void"
}
                  },
          "setType" : {
            "name" : "setType",
            "docstring" : "`set<K>` definition\n",
            "key" : 15,
            "lineno" : 376,
            "required" : "opt-in-req-out",
            "type" : {
  "type" : "enum",
  "name" : "Void"
}
                  },
          "mapType" : {
            "name" : "mapType",
            "docstring" : "`map<K, V>` definition\n",
            "key" : 16,
            "lineno" : 378,
            "required" : "opt-in-req-out",
            "type" : {
  "type" : "enum",
  "name" : "Void"
}
                  }
        },
        "is_exception" : false,
        "is_union" : true,
        "lineno" : 333
      }
      },
  "source_path" : "thrift/lib/thrift/standard",
  "py_namespace" : "thrift.lib.thrift.standard"
}
