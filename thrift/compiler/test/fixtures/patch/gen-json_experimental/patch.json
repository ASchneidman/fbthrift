{
  "__fbthrift": "@generated",
  "thrift_module" : "patch",
  "namespaces": {
    "cpp2": "apache.thrift.op",
    "go": "thrift.lib.thrift.patch",
    "java": "com.facebook.thrift.op",
    "java.swift": "com.facebook.thrift.op",
    "py": "thrift.lib.thrift.patch",
    "py.asyncio": "apache_thrift_asyncio.patch",
    "py3": "apache.thrift.op"
  },
  "enumerations" :
  {
      "PatchOp" : {
        "name" : "PatchOp",
        "constants" : {
          "Assign" : {
            "name" : "Assign",
            "docstring" : "Set the value. Supersedes all other ops.\n",
            "lineno" : 260,
            "value" : 1
          },
          "Clear" : {
            "name" : "Clear",
            "docstring" : "Set to the intrinsic default (which might be 'unset').\n",
            "lineno" : 263,
            "value" : 2
          },
          "Patch" : {
            "name" : "Patch",
            "docstring" : "Apply a field/value-wise patch.\n",
            "lineno" : 266,
            "value" : 3
          },
          "EnsureUnion" : {
            "name" : "EnsureUnion",
            "docstring" : "Set to the given default, if not already of the same type.\n\nIn a dynamic context this means the ids/values must match exactly:\n    ensureUnion(Object ensureUnion, Object value) {\n      if (ensureUnion.ids() != value.ids())\n        value = ensureUnion;\n    }\n",
            "lineno" : 277,
            "value" : 4
          },
          "EnsureStruct" : {
            "name" : "EnsureStruct",
            "docstring" : " * A pair-wise ensure operation.\n *\n * For maps this is an \"add if key not present\".\n *\n * For structs, this can be use to encodes the default state of the fields, based\n * on thier qualifier type:\n * - optional: absent\n * - terse: intrinsic default\n * - fill: custom default\n*\n",
            "lineno" : 290,
            "value" : 5
          },
          "PatchAfter" : {
            "name" : "PatchAfter",
            "docstring" : "Apply a field/value-wise patch after all other ops.\n",
            "lineno" : 295,
            "value" : 6
          },
          "Remove" : {
            "name" : "Remove",
            "docstring" : "Remove if present.\n\nA key/value-based remove for set/list, 'saturating subtract' for\nnumeric/'counting' types, and 'remove by key' for maps.\n",
            "lineno" : 303,
            "value" : 7
          },
          "Add" : {
            "name" : "Add",
            "docstring" : "Add/prepend a value,with the following semantics:\n- Key/value-based 'add' for set;\n- 'prepend' for list, string, or binary; and\n- saturating 'add' for numeric/counting types.\n",
            "lineno" : 311,
            "value" : 8
          },
          "Put" : {
            "name" : "Put",
            "docstring" : "Put/append/invert a value, with the following semantics:\n- Identical to 'add' for set;\n- 'update or insert' for maps;\n- 'append' for list, string or binary; and\n- 'invert' for boolean.\n",
            "lineno" : 320,
            "value" : 9
          },
          "Unspecified" : {
            "name" : "Unspecified",
            "lineno" : 0,
            "value" : 0
          }
        },
        "docstring" : "The meaning of the patch op field ids, in all properly formulated patch\ndefinitions.\n\nPatch field ids are interpreted at runtime, as a dynamic patch protocol,\nwithout any additional schema derived from IDL patch definitions.\n",
        "lineno" : 257
      }
      },
  "structs" :
  {
      "GeneratePatch" : {
        "name" : "GeneratePatch",
        "docstring" : "An annotation that indicates a patch representation\nshould be generated for the associated definition.\n",
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 39
      },
      "GenerateOptionalPatch" : {
        "name" : "GenerateOptionalPatch",
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 43
      },
      "BoolPatch" : {
        "name" : "BoolPatch",
        "docstring" : "A patch for a boolean value.\n",
        "fields" : {
          "assign" : {
            "name" : "assign",
            "docstring" : "Assign to a given value.\n\nIf set, all other patch operations are ignored.\n",
            "key" : 1,
            "lineno" : 59,
            "required" : "optional",
            "type" : "bool"
          },
          "clear" : {
            "name" : "clear",
            "docstring" : "Clear any set value.\n",
            "key" : 2,
            "lineno" : 62,
            "required" : "opt-in-req-out",
            "type" : "bool"
          },
          "invert" : {
            "name" : "invert",
            "docstring" : "If the bool value should be inverted.\n",
            "key" : 9,
            "lineno" : 65,
            "required" : "opt-in-req-out",
            "type" : "bool"
          }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 47
      },
      "BytePatch" : {
        "name" : "BytePatch",
        "docstring" : "A patch for an 8-bit integer value.\n",
        "fields" : {
          "assign" : {
            "name" : "assign",
            "docstring" : "Assign to a given value.\n\nIf set, all other patch operations are ignored.\n",
            "key" : 1,
            "lineno" : 81,
            "required" : "optional",
            "type" : "byte"
          },
          "clear" : {
            "name" : "clear",
            "docstring" : "Clear any set value.\n",
            "key" : 2,
            "lineno" : 84,
            "required" : "opt-in-req-out",
            "type" : "bool"
          },
          "add" : {
            "name" : "add",
            "docstring" : "Add to a given value.\n",
            "key" : 8,
            "lineno" : 87,
            "required" : "opt-in-req-out",
            "type" : "byte"
          }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 69
      },
      "I16Patch" : {
        "name" : "I16Patch",
        "docstring" : "A patch for a 16-bit integer value.\n",
        "fields" : {
          "assign" : {
            "name" : "assign",
            "docstring" : "Assign to a given value.\n\nIf set, all other patch operations are ignored.\n",
            "key" : 1,
            "lineno" : 103,
            "required" : "optional",
            "type" : "i16"
          },
          "clear" : {
            "name" : "clear",
            "docstring" : "Clear any set value.\n",
            "key" : 2,
            "lineno" : 106,
            "required" : "opt-in-req-out",
            "type" : "bool"
          },
          "add" : {
            "name" : "add",
            "docstring" : "Add to a given value.\n",
            "key" : 8,
            "lineno" : 109,
            "required" : "opt-in-req-out",
            "type" : "i16"
          }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 91
      },
      "I32Patch" : {
        "name" : "I32Patch",
        "docstring" : "A patch for a 32-bit integer value.\n",
        "fields" : {
          "assign" : {
            "name" : "assign",
            "docstring" : "Assign to a given value.\n\nIf set, all other patch operations are ignored.\n",
            "key" : 1,
            "lineno" : 125,
            "required" : "optional",
            "type" : "i32"
          },
          "clear" : {
            "name" : "clear",
            "docstring" : "Clear any set value.\n",
            "key" : 2,
            "lineno" : 128,
            "required" : "opt-in-req-out",
            "type" : "bool"
          },
          "add" : {
            "name" : "add",
            "docstring" : "Add to a given value.\n",
            "key" : 8,
            "lineno" : 131,
            "required" : "opt-in-req-out",
            "type" : "i32"
          }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 113
      },
      "I64Patch" : {
        "name" : "I64Patch",
        "docstring" : "A patch for a 64-bit integer value.\n",
        "fields" : {
          "assign" : {
            "name" : "assign",
            "docstring" : "Assign to a given value.\n\nIf set, all other patch operations are ignored.\n",
            "key" : 1,
            "lineno" : 147,
            "required" : "optional",
            "type" : "i64"
          },
          "clear" : {
            "name" : "clear",
            "docstring" : "Clear any set value.\n",
            "key" : 2,
            "lineno" : 150,
            "required" : "opt-in-req-out",
            "type" : "bool"
          },
          "add" : {
            "name" : "add",
            "docstring" : "Add to a given value.\n",
            "key" : 8,
            "lineno" : 153,
            "required" : "opt-in-req-out",
            "type" : "i64"
          }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 135
      },
      "FloatPatch" : {
        "name" : "FloatPatch",
        "docstring" : "A patch for a 32-bit floating point value.\n",
        "fields" : {
          "assign" : {
            "name" : "assign",
            "docstring" : "Assign to a given value.\n\nIf set, all other patch operations are ignored.\n",
            "key" : 1,
            "lineno" : 169,
            "required" : "optional",
            "type" : "float"
          },
          "clear" : {
            "name" : "clear",
            "docstring" : "Clear any set value.\n",
            "key" : 2,
            "lineno" : 172,
            "required" : "opt-in-req-out",
            "type" : "bool"
          },
          "add" : {
            "name" : "add",
            "docstring" : "Add to a given value.\n",
            "key" : 8,
            "lineno" : 175,
            "required" : "opt-in-req-out",
            "type" : "float"
          }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 157
      },
      "DoublePatch" : {
        "name" : "DoublePatch",
        "docstring" : "A patch for an 64-bit floating point value.\n",
        "fields" : {
          "assign" : {
            "name" : "assign",
            "docstring" : "Assign to a given value.\n\nIf set, all other patch operations are ignored.\n",
            "key" : 1,
            "lineno" : 191,
            "required" : "optional",
            "type" : "double"
          },
          "clear" : {
            "name" : "clear",
            "docstring" : "Clear any set value.\n",
            "key" : 2,
            "lineno" : 194,
            "required" : "opt-in-req-out",
            "type" : "bool"
          },
          "add" : {
            "name" : "add",
            "docstring" : "Add to a given value.\n",
            "key" : 8,
            "lineno" : 197,
            "required" : "opt-in-req-out",
            "type" : "double"
          }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 179
      },
      "StringPatch" : {
        "name" : "StringPatch",
        "docstring" : "A patch for a string value.\n",
        "fields" : {
          "assign" : {
            "name" : "assign",
            "docstring" : "Assign to a given value.\n\nIf set, all other patch operations are ignored.\n",
            "key" : 1,
            "lineno" : 213,
            "required" : "optional",
            "type" : "string"
          },
          "clear" : {
            "name" : "clear",
            "docstring" : "Clear a given string.\n",
            "key" : 2,
            "lineno" : 216,
            "required" : "opt-in-req-out",
            "type" : "bool"
          },
          "prepend" : {
            "name" : "prepend",
            "docstring" : "Prepend to a given value.\n",
            "key" : 8,
            "lineno" : 219,
            "required" : "opt-in-req-out",
            "type" : "string"
          },
          "append" : {
            "name" : "append",
            "docstring" : "Append to a given value.\n",
            "key" : 9,
            "lineno" : 222,
            "required" : "opt-in-req-out",
            "type" : "string"
          }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 201
      },
      "BinaryPatch" : {
        "name" : "BinaryPatch",
        "docstring" : "A patch for a binary value.\n",
        "fields" : {
          "assign" : {
            "name" : "assign",
            "docstring" : "Assign to a given value.\n\nIf set, all other patch operations are ignored.\n",
            "key" : 1,
            "lineno" : 238,
            "required" : "optional",
            "type" : "binary"
          },
          "clear" : {
            "name" : "clear",
            "docstring" : "Clear a given binary.\n",
            "key" : 2,
            "lineno" : 241,
            "required" : "opt-in-req-out",
            "type" : "bool"
          },
          "prepend" : {
            "name" : "prepend",
            "docstring" : "Prepend to a given value.\n",
            "key" : 8,
            "lineno" : 244,
            "required" : "opt-in-req-out",
            "type" : "binary"
          },
          "append" : {
            "name" : "append",
            "docstring" : "Append to a given value.\n",
            "key" : 9,
            "lineno" : 247,
            "required" : "opt-in-req-out",
            "type" : "binary"
          }
        },
        "is_exception" : false,
        "is_union" : false,
        "lineno" : 226
      }
      },
  "source_path" : "thrift/lib/thrift/patch",
  "py_namespace" : "thrift.lib.thrift.patch"
}
