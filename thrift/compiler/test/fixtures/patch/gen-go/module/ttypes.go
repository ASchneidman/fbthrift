// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package module

import (
	"bytes"
	"context"
	"sync"
	"fmt"
	thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
	patch0 "patch"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal
var _ = context.Background

var _ = patch0.GoUnusedProtection__
var GoUnusedProtection__ int;

// Attributes:
//  - BoolVal
//  - ByteVal
//  - I16Val
//  - I32Val
//  - I64Val
//  - FloatVal
//  - DoubleVal
//  - StringVal
//  - BinaryVal
type MyStruct struct {
  BoolVal bool `thrift:"boolVal,1" db:"boolVal" json:"boolVal"`
  ByteVal int8 `thrift:"byteVal,2" db:"byteVal" json:"byteVal"`
  I16Val int16 `thrift:"i16Val,3" db:"i16Val" json:"i16Val"`
  I32Val int32 `thrift:"i32Val,4" db:"i32Val" json:"i32Val"`
  I64Val int64 `thrift:"i64Val,5" db:"i64Val" json:"i64Val"`
  FloatVal float32 `thrift:"floatVal,6" db:"floatVal" json:"floatVal"`
  DoubleVal float64 `thrift:"doubleVal,7" db:"doubleVal" json:"doubleVal"`
  StringVal string `thrift:"stringVal,8" db:"stringVal" json:"stringVal"`
  BinaryVal []byte `thrift:"binaryVal,9" db:"binaryVal" json:"binaryVal"`
}

func NewMyStruct() *MyStruct {
  return &MyStruct{}
}


func (p *MyStruct) GetBoolVal() bool {
  return p.BoolVal
}

func (p *MyStruct) GetByteVal() int8 {
  return p.ByteVal
}

func (p *MyStruct) GetI16Val() int16 {
  return p.I16Val
}

func (p *MyStruct) GetI32Val() int32 {
  return p.I32Val
}

func (p *MyStruct) GetI64Val() int64 {
  return p.I64Val
}

func (p *MyStruct) GetFloatVal() float32 {
  return p.FloatVal
}

func (p *MyStruct) GetDoubleVal() float64 {
  return p.DoubleVal
}

func (p *MyStruct) GetStringVal() string {
  return p.StringVal
}

func (p *MyStruct) GetBinaryVal() []byte {
  return p.BinaryVal
}
type MyStructBuilder struct {
  obj *MyStruct
}

func NewMyStructBuilder() *MyStructBuilder{
  return &MyStructBuilder{
    obj: NewMyStruct(),
  }
}

func (p MyStructBuilder) Emit() *MyStruct{
  return &MyStruct{
    BoolVal: p.obj.BoolVal,
    ByteVal: p.obj.ByteVal,
    I16Val: p.obj.I16Val,
    I32Val: p.obj.I32Val,
    I64Val: p.obj.I64Val,
    FloatVal: p.obj.FloatVal,
    DoubleVal: p.obj.DoubleVal,
    StringVal: p.obj.StringVal,
    BinaryVal: p.obj.BinaryVal,
  }
}

func (m *MyStructBuilder) BoolVal(boolVal bool) *MyStructBuilder {
  m.obj.BoolVal = boolVal
  return m
}

func (m *MyStructBuilder) ByteVal(byteVal int8) *MyStructBuilder {
  m.obj.ByteVal = byteVal
  return m
}

func (m *MyStructBuilder) I16Val(i16Val int16) *MyStructBuilder {
  m.obj.I16Val = i16Val
  return m
}

func (m *MyStructBuilder) I32Val(i32Val int32) *MyStructBuilder {
  m.obj.I32Val = i32Val
  return m
}

func (m *MyStructBuilder) I64Val(i64Val int64) *MyStructBuilder {
  m.obj.I64Val = i64Val
  return m
}

func (m *MyStructBuilder) FloatVal(floatVal float32) *MyStructBuilder {
  m.obj.FloatVal = floatVal
  return m
}

func (m *MyStructBuilder) DoubleVal(doubleVal float64) *MyStructBuilder {
  m.obj.DoubleVal = doubleVal
  return m
}

func (m *MyStructBuilder) StringVal(stringVal string) *MyStructBuilder {
  m.obj.StringVal = stringVal
  return m
}

func (m *MyStructBuilder) BinaryVal(binaryVal []byte) *MyStructBuilder {
  m.obj.BinaryVal = binaryVal
  return m
}

func (m *MyStruct) SetBoolVal(boolVal bool) *MyStruct {
  m.BoolVal = boolVal
  return m
}

func (m *MyStruct) SetByteVal(byteVal int8) *MyStruct {
  m.ByteVal = byteVal
  return m
}

func (m *MyStruct) SetI16Val(i16Val int16) *MyStruct {
  m.I16Val = i16Val
  return m
}

func (m *MyStruct) SetI32Val(i32Val int32) *MyStruct {
  m.I32Val = i32Val
  return m
}

func (m *MyStruct) SetI64Val(i64Val int64) *MyStruct {
  m.I64Val = i64Val
  return m
}

func (m *MyStruct) SetFloatVal(floatVal float32) *MyStruct {
  m.FloatVal = floatVal
  return m
}

func (m *MyStruct) SetDoubleVal(doubleVal float64) *MyStruct {
  m.DoubleVal = doubleVal
  return m
}

func (m *MyStruct) SetStringVal(stringVal string) *MyStruct {
  m.StringVal = stringVal
  return m
}

func (m *MyStruct) SetBinaryVal(binaryVal []byte) *MyStruct {
  m.BinaryVal = binaryVal
  return m
}

func (p *MyStruct) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyStruct)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.BoolVal = v
  }
  return nil
}

func (p *MyStruct)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadByte(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    temp := int8(v)
    p.ByteVal = temp
  }
  return nil
}

func (p *MyStruct)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI16(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.I16Val = v
  }
  return nil
}

func (p *MyStruct)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.I32Val = v
  }
  return nil
}

func (p *MyStruct)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 5: ", err)
  } else {
    p.I64Val = v
  }
  return nil
}

func (p *MyStruct)  ReadField6(iprot thrift.Protocol) error {
  if v, err := iprot.ReadFloat(); err != nil {
    return thrift.PrependError("error reading field 6: ", err)
  } else {
    p.FloatVal = v
  }
  return nil
}

func (p *MyStruct)  ReadField7(iprot thrift.Protocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
    return thrift.PrependError("error reading field 7: ", err)
  } else {
    p.DoubleVal = v
  }
  return nil
}

func (p *MyStruct)  ReadField8(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 8: ", err)
  } else {
    p.StringVal = v
  }
  return nil
}

func (p *MyStruct)  ReadField9(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 9: ", err)
  } else {
    p.BinaryVal = v
  }
  return nil
}

func (p *MyStruct) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := p.writeField8(oprot); err != nil { return err }
  if err := p.writeField9(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyStruct) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("boolVal", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:boolVal: ", p), err) }
  if err := oprot.WriteBool(bool(p.BoolVal)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.boolVal (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:boolVal: ", p), err) }
  return err
}

func (p *MyStruct) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("byteVal", thrift.BYTE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:byteVal: ", p), err) }
  if err := oprot.WriteByte(byte(p.ByteVal)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.byteVal (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:byteVal: ", p), err) }
  return err
}

func (p *MyStruct) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("i16Val", thrift.I16, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:i16Val: ", p), err) }
  if err := oprot.WriteI16(int16(p.I16Val)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.i16Val (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:i16Val: ", p), err) }
  return err
}

func (p *MyStruct) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("i32Val", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:i32Val: ", p), err) }
  if err := oprot.WriteI32(int32(p.I32Val)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.i32Val (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:i32Val: ", p), err) }
  return err
}

func (p *MyStruct) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("i64Val", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:i64Val: ", p), err) }
  if err := oprot.WriteI64(int64(p.I64Val)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.i64Val (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:i64Val: ", p), err) }
  return err
}

func (p *MyStruct) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("floatVal", thrift.FLOAT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:floatVal: ", p), err) }
  if err := oprot.WriteFloat(float32(p.FloatVal)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.floatVal (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:floatVal: ", p), err) }
  return err
}

func (p *MyStruct) writeField7(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("doubleVal", thrift.DOUBLE, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:doubleVal: ", p), err) }
  if err := oprot.WriteDouble(float64(p.DoubleVal)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.doubleVal (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:doubleVal: ", p), err) }
  return err
}

func (p *MyStruct) writeField8(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("stringVal", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:stringVal: ", p), err) }
  if err := oprot.WriteString(string(p.StringVal)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stringVal (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:stringVal: ", p), err) }
  return err
}

func (p *MyStruct) writeField9(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("binaryVal", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:binaryVal: ", p), err) }
  if err := oprot.WriteBinary(p.BinaryVal); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.binaryVal (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:binaryVal: ", p), err) }
  return err
}

func (p *MyStruct) String() string {
  if p == nil {
    return "<nil>"
  }

  boolValVal := fmt.Sprintf("%v", p.BoolVal)
  byteValVal := fmt.Sprintf("%v", p.ByteVal)
  i16ValVal := fmt.Sprintf("%v", p.I16Val)
  i32ValVal := fmt.Sprintf("%v", p.I32Val)
  i64ValVal := fmt.Sprintf("%v", p.I64Val)
  floatValVal := fmt.Sprintf("%v", p.FloatVal)
  doubleValVal := fmt.Sprintf("%v", p.DoubleVal)
  stringValVal := fmt.Sprintf("%v", p.StringVal)
  binaryValVal := fmt.Sprintf("%v", p.BinaryVal)
  return fmt.Sprintf("MyStruct({BoolVal:%s ByteVal:%s I16Val:%s I32Val:%s I64Val:%s FloatVal:%s DoubleVal:%s StringVal:%s BinaryVal:%s})", boolValVal, byteValVal, i16ValVal, i32ValVal, i64ValVal, floatValVal, doubleValVal, stringValVal, binaryValVal)
}

// Attributes:
//  - BoolVal
//  - ByteVal
//  - I16Val
//  - I32Val
//  - I64Val
//  - FloatVal
//  - DoubleVal
//  - StringVal
//  - BinaryVal
type MyStructPatch struct {
  BoolVal *patch0.BoolPatch `thrift:"boolVal,1" db:"boolVal" json:"boolVal"`
  ByteVal *patch0.BytePatch `thrift:"byteVal,2" db:"byteVal" json:"byteVal"`
  I16Val *patch0.I16Patch `thrift:"i16Val,3" db:"i16Val" json:"i16Val"`
  I32Val *patch0.I32Patch `thrift:"i32Val,4" db:"i32Val" json:"i32Val"`
  I64Val *patch0.I64Patch `thrift:"i64Val,5" db:"i64Val" json:"i64Val"`
  FloatVal *patch0.FloatPatch `thrift:"floatVal,6" db:"floatVal" json:"floatVal"`
  DoubleVal *patch0.DoublePatch `thrift:"doubleVal,7" db:"doubleVal" json:"doubleVal"`
  StringVal *patch0.StringPatch `thrift:"stringVal,8" db:"stringVal" json:"stringVal"`
  BinaryVal *patch0.BinaryPatch `thrift:"binaryVal,9" db:"binaryVal" json:"binaryVal"`
}

func NewMyStructPatch() *MyStructPatch {
  return &MyStructPatch{
    BoolVal: patch0.NewBoolPatch(),
    ByteVal: patch0.NewBytePatch(),
    I16Val: patch0.NewI16Patch(),
    I32Val: patch0.NewI32Patch(),
    I64Val: patch0.NewI64Patch(),
    FloatVal: patch0.NewFloatPatch(),
    DoubleVal: patch0.NewDoublePatch(),
    StringVal: patch0.NewStringPatch(),
    BinaryVal: patch0.NewBinaryPatch(),
  }
}

var MyStructPatch_BoolVal_DEFAULT *patch0.BoolPatch
func (p *MyStructPatch) GetBoolVal() *patch0.BoolPatch {
  if !p.IsSetBoolVal() {
    return MyStructPatch_BoolVal_DEFAULT
  }
return p.BoolVal
}
var MyStructPatch_ByteVal_DEFAULT *patch0.BytePatch
func (p *MyStructPatch) GetByteVal() *patch0.BytePatch {
  if !p.IsSetByteVal() {
    return MyStructPatch_ByteVal_DEFAULT
  }
return p.ByteVal
}
var MyStructPatch_I16Val_DEFAULT *patch0.I16Patch
func (p *MyStructPatch) GetI16Val() *patch0.I16Patch {
  if !p.IsSetI16Val() {
    return MyStructPatch_I16Val_DEFAULT
  }
return p.I16Val
}
var MyStructPatch_I32Val_DEFAULT *patch0.I32Patch
func (p *MyStructPatch) GetI32Val() *patch0.I32Patch {
  if !p.IsSetI32Val() {
    return MyStructPatch_I32Val_DEFAULT
  }
return p.I32Val
}
var MyStructPatch_I64Val_DEFAULT *patch0.I64Patch
func (p *MyStructPatch) GetI64Val() *patch0.I64Patch {
  if !p.IsSetI64Val() {
    return MyStructPatch_I64Val_DEFAULT
  }
return p.I64Val
}
var MyStructPatch_FloatVal_DEFAULT *patch0.FloatPatch
func (p *MyStructPatch) GetFloatVal() *patch0.FloatPatch {
  if !p.IsSetFloatVal() {
    return MyStructPatch_FloatVal_DEFAULT
  }
return p.FloatVal
}
var MyStructPatch_DoubleVal_DEFAULT *patch0.DoublePatch
func (p *MyStructPatch) GetDoubleVal() *patch0.DoublePatch {
  if !p.IsSetDoubleVal() {
    return MyStructPatch_DoubleVal_DEFAULT
  }
return p.DoubleVal
}
var MyStructPatch_StringVal_DEFAULT *patch0.StringPatch
func (p *MyStructPatch) GetStringVal() *patch0.StringPatch {
  if !p.IsSetStringVal() {
    return MyStructPatch_StringVal_DEFAULT
  }
return p.StringVal
}
var MyStructPatch_BinaryVal_DEFAULT *patch0.BinaryPatch
func (p *MyStructPatch) GetBinaryVal() *patch0.BinaryPatch {
  if !p.IsSetBinaryVal() {
    return MyStructPatch_BinaryVal_DEFAULT
  }
return p.BinaryVal
}
func (p *MyStructPatch) IsSetBoolVal() bool {
  return p != nil && p.BoolVal != nil
}

func (p *MyStructPatch) IsSetByteVal() bool {
  return p != nil && p.ByteVal != nil
}

func (p *MyStructPatch) IsSetI16Val() bool {
  return p != nil && p.I16Val != nil
}

func (p *MyStructPatch) IsSetI32Val() bool {
  return p != nil && p.I32Val != nil
}

func (p *MyStructPatch) IsSetI64Val() bool {
  return p != nil && p.I64Val != nil
}

func (p *MyStructPatch) IsSetFloatVal() bool {
  return p != nil && p.FloatVal != nil
}

func (p *MyStructPatch) IsSetDoubleVal() bool {
  return p != nil && p.DoubleVal != nil
}

func (p *MyStructPatch) IsSetStringVal() bool {
  return p != nil && p.StringVal != nil
}

func (p *MyStructPatch) IsSetBinaryVal() bool {
  return p != nil && p.BinaryVal != nil
}

type MyStructPatchBuilder struct {
  obj *MyStructPatch
}

func NewMyStructPatchBuilder() *MyStructPatchBuilder{
  return &MyStructPatchBuilder{
    obj: NewMyStructPatch(),
  }
}

func (p MyStructPatchBuilder) Emit() *MyStructPatch{
  return &MyStructPatch{
    BoolVal: p.obj.BoolVal,
    ByteVal: p.obj.ByteVal,
    I16Val: p.obj.I16Val,
    I32Val: p.obj.I32Val,
    I64Val: p.obj.I64Val,
    FloatVal: p.obj.FloatVal,
    DoubleVal: p.obj.DoubleVal,
    StringVal: p.obj.StringVal,
    BinaryVal: p.obj.BinaryVal,
  }
}

func (m *MyStructPatchBuilder) BoolVal(boolVal *patch0.BoolPatch) *MyStructPatchBuilder {
  m.obj.BoolVal = boolVal
  return m
}

func (m *MyStructPatchBuilder) ByteVal(byteVal *patch0.BytePatch) *MyStructPatchBuilder {
  m.obj.ByteVal = byteVal
  return m
}

func (m *MyStructPatchBuilder) I16Val(i16Val *patch0.I16Patch) *MyStructPatchBuilder {
  m.obj.I16Val = i16Val
  return m
}

func (m *MyStructPatchBuilder) I32Val(i32Val *patch0.I32Patch) *MyStructPatchBuilder {
  m.obj.I32Val = i32Val
  return m
}

func (m *MyStructPatchBuilder) I64Val(i64Val *patch0.I64Patch) *MyStructPatchBuilder {
  m.obj.I64Val = i64Val
  return m
}

func (m *MyStructPatchBuilder) FloatVal(floatVal *patch0.FloatPatch) *MyStructPatchBuilder {
  m.obj.FloatVal = floatVal
  return m
}

func (m *MyStructPatchBuilder) DoubleVal(doubleVal *patch0.DoublePatch) *MyStructPatchBuilder {
  m.obj.DoubleVal = doubleVal
  return m
}

func (m *MyStructPatchBuilder) StringVal(stringVal *patch0.StringPatch) *MyStructPatchBuilder {
  m.obj.StringVal = stringVal
  return m
}

func (m *MyStructPatchBuilder) BinaryVal(binaryVal *patch0.BinaryPatch) *MyStructPatchBuilder {
  m.obj.BinaryVal = binaryVal
  return m
}

func (m *MyStructPatch) SetBoolVal(boolVal *patch0.BoolPatch) *MyStructPatch {
  m.BoolVal = boolVal
  return m
}

func (m *MyStructPatch) SetByteVal(byteVal *patch0.BytePatch) *MyStructPatch {
  m.ByteVal = byteVal
  return m
}

func (m *MyStructPatch) SetI16Val(i16Val *patch0.I16Patch) *MyStructPatch {
  m.I16Val = i16Val
  return m
}

func (m *MyStructPatch) SetI32Val(i32Val *patch0.I32Patch) *MyStructPatch {
  m.I32Val = i32Val
  return m
}

func (m *MyStructPatch) SetI64Val(i64Val *patch0.I64Patch) *MyStructPatch {
  m.I64Val = i64Val
  return m
}

func (m *MyStructPatch) SetFloatVal(floatVal *patch0.FloatPatch) *MyStructPatch {
  m.FloatVal = floatVal
  return m
}

func (m *MyStructPatch) SetDoubleVal(doubleVal *patch0.DoublePatch) *MyStructPatch {
  m.DoubleVal = doubleVal
  return m
}

func (m *MyStructPatch) SetStringVal(stringVal *patch0.StringPatch) *MyStructPatch {
  m.StringVal = stringVal
  return m
}

func (m *MyStructPatch) SetBinaryVal(binaryVal *patch0.BinaryPatch) *MyStructPatch {
  m.BinaryVal = binaryVal
  return m
}

func (p *MyStructPatch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyStructPatch)  ReadField1(iprot thrift.Protocol) error {
  p.BoolVal = patch0.NewBoolPatch()
  if err := p.BoolVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BoolVal), err)
  }
  return nil
}

func (p *MyStructPatch)  ReadField2(iprot thrift.Protocol) error {
  p.ByteVal = patch0.NewBytePatch()
  if err := p.ByteVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ByteVal), err)
  }
  return nil
}

func (p *MyStructPatch)  ReadField3(iprot thrift.Protocol) error {
  p.I16Val = patch0.NewI16Patch()
  if err := p.I16Val.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.I16Val), err)
  }
  return nil
}

func (p *MyStructPatch)  ReadField4(iprot thrift.Protocol) error {
  p.I32Val = patch0.NewI32Patch()
  if err := p.I32Val.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.I32Val), err)
  }
  return nil
}

func (p *MyStructPatch)  ReadField5(iprot thrift.Protocol) error {
  p.I64Val = patch0.NewI64Patch()
  if err := p.I64Val.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.I64Val), err)
  }
  return nil
}

func (p *MyStructPatch)  ReadField6(iprot thrift.Protocol) error {
  p.FloatVal = patch0.NewFloatPatch()
  if err := p.FloatVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FloatVal), err)
  }
  return nil
}

func (p *MyStructPatch)  ReadField7(iprot thrift.Protocol) error {
  p.DoubleVal = patch0.NewDoublePatch()
  if err := p.DoubleVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DoubleVal), err)
  }
  return nil
}

func (p *MyStructPatch)  ReadField8(iprot thrift.Protocol) error {
  p.StringVal = patch0.NewStringPatch()
  if err := p.StringVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StringVal), err)
  }
  return nil
}

func (p *MyStructPatch)  ReadField9(iprot thrift.Protocol) error {
  p.BinaryVal = patch0.NewBinaryPatch()
  if err := p.BinaryVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BinaryVal), err)
  }
  return nil
}

func (p *MyStructPatch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyStructPatch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := p.writeField8(oprot); err != nil { return err }
  if err := p.writeField9(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyStructPatch) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("boolVal", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:boolVal: ", p), err) }
  if err := p.BoolVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BoolVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:boolVal: ", p), err) }
  return err
}

func (p *MyStructPatch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("byteVal", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:byteVal: ", p), err) }
  if err := p.ByteVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ByteVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:byteVal: ", p), err) }
  return err
}

func (p *MyStructPatch) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("i16Val", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:i16Val: ", p), err) }
  if err := p.I16Val.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.I16Val), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:i16Val: ", p), err) }
  return err
}

func (p *MyStructPatch) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("i32Val", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:i32Val: ", p), err) }
  if err := p.I32Val.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.I32Val), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:i32Val: ", p), err) }
  return err
}

func (p *MyStructPatch) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("i64Val", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:i64Val: ", p), err) }
  if err := p.I64Val.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.I64Val), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:i64Val: ", p), err) }
  return err
}

func (p *MyStructPatch) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("floatVal", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:floatVal: ", p), err) }
  if err := p.FloatVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FloatVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:floatVal: ", p), err) }
  return err
}

func (p *MyStructPatch) writeField7(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("doubleVal", thrift.STRUCT, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:doubleVal: ", p), err) }
  if err := p.DoubleVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DoubleVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:doubleVal: ", p), err) }
  return err
}

func (p *MyStructPatch) writeField8(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("stringVal", thrift.STRUCT, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:stringVal: ", p), err) }
  if err := p.StringVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StringVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:stringVal: ", p), err) }
  return err
}

func (p *MyStructPatch) writeField9(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("binaryVal", thrift.STRUCT, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:binaryVal: ", p), err) }
  if err := p.BinaryVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BinaryVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:binaryVal: ", p), err) }
  return err
}

func (p *MyStructPatch) String() string {
  if p == nil {
    return "<nil>"
  }

  var boolValVal string
  if p.BoolVal == nil {
    boolValVal = "<nil>"
  } else {
    boolValVal = fmt.Sprintf("%v", p.BoolVal)
  }
  var byteValVal string
  if p.ByteVal == nil {
    byteValVal = "<nil>"
  } else {
    byteValVal = fmt.Sprintf("%v", p.ByteVal)
  }
  var i16ValVal string
  if p.I16Val == nil {
    i16ValVal = "<nil>"
  } else {
    i16ValVal = fmt.Sprintf("%v", p.I16Val)
  }
  var i32ValVal string
  if p.I32Val == nil {
    i32ValVal = "<nil>"
  } else {
    i32ValVal = fmt.Sprintf("%v", p.I32Val)
  }
  var i64ValVal string
  if p.I64Val == nil {
    i64ValVal = "<nil>"
  } else {
    i64ValVal = fmt.Sprintf("%v", p.I64Val)
  }
  var floatValVal string
  if p.FloatVal == nil {
    floatValVal = "<nil>"
  } else {
    floatValVal = fmt.Sprintf("%v", p.FloatVal)
  }
  var doubleValVal string
  if p.DoubleVal == nil {
    doubleValVal = "<nil>"
  } else {
    doubleValVal = fmt.Sprintf("%v", p.DoubleVal)
  }
  var stringValVal string
  if p.StringVal == nil {
    stringValVal = "<nil>"
  } else {
    stringValVal = fmt.Sprintf("%v", p.StringVal)
  }
  var binaryValVal string
  if p.BinaryVal == nil {
    binaryValVal = "<nil>"
  } else {
    binaryValVal = fmt.Sprintf("%v", p.BinaryVal)
  }
  return fmt.Sprintf("MyStructPatch({BoolVal:%s ByteVal:%s I16Val:%s I32Val:%s I64Val:%s FloatVal:%s DoubleVal:%s StringVal:%s BinaryVal:%s})", boolValVal, byteValVal, i16ValVal, i32ValVal, i64ValVal, floatValVal, doubleValVal, stringValVal, binaryValVal)
}

// Attributes:
//  - Assign: Assigns to a given struct. If set, all other operations are ignored.
//  - Clear: Clears a given struct. Applied first.
//  - Patch: Patches a given struct. Applied second.
type MyStructValuePatch struct {
  Assign *MyStruct `thrift:"assign,1,optional" db:"assign" json:"assign,omitempty"`
  Clear bool `thrift:"clear,2" db:"clear" json:"clear"`
  Patch *MyStructPatch `thrift:"patch,3" db:"patch" json:"patch"`
}

func NewMyStructValuePatch() *MyStructValuePatch {
  return &MyStructValuePatch{
    Patch: NewMyStructPatch(),
  }
}

var MyStructValuePatch_Assign_DEFAULT *MyStruct
func (p *MyStructValuePatch) GetAssign() *MyStruct {
  if !p.IsSetAssign() {
    return MyStructValuePatch_Assign_DEFAULT
  }
return p.Assign
}

func (p *MyStructValuePatch) GetClear() bool {
  return p.Clear
}
var MyStructValuePatch_Patch_DEFAULT *MyStructPatch
func (p *MyStructValuePatch) GetPatch() *MyStructPatch {
  if !p.IsSetPatch() {
    return MyStructValuePatch_Patch_DEFAULT
  }
return p.Patch
}
func (p *MyStructValuePatch) IsSetAssign() bool {
  return p != nil && p.Assign != nil
}

func (p *MyStructValuePatch) IsSetPatch() bool {
  return p != nil && p.Patch != nil
}

type MyStructValuePatchBuilder struct {
  obj *MyStructValuePatch
}

func NewMyStructValuePatchBuilder() *MyStructValuePatchBuilder{
  return &MyStructValuePatchBuilder{
    obj: NewMyStructValuePatch(),
  }
}

func (p MyStructValuePatchBuilder) Emit() *MyStructValuePatch{
  return &MyStructValuePatch{
    Assign: p.obj.Assign,
    Clear: p.obj.Clear,
    Patch: p.obj.Patch,
  }
}

func (m *MyStructValuePatchBuilder) Assign(assign *MyStruct) *MyStructValuePatchBuilder {
  m.obj.Assign = assign
  return m
}

func (m *MyStructValuePatchBuilder) Clear(clear bool) *MyStructValuePatchBuilder {
  m.obj.Clear = clear
  return m
}

func (m *MyStructValuePatchBuilder) Patch(patch *MyStructPatch) *MyStructValuePatchBuilder {
  m.obj.Patch = patch
  return m
}

func (m *MyStructValuePatch) SetAssign(assign *MyStruct) *MyStructValuePatch {
  m.Assign = assign
  return m
}

func (m *MyStructValuePatch) SetClear(clear bool) *MyStructValuePatch {
  m.Clear = clear
  return m
}

func (m *MyStructValuePatch) SetPatch(patch *MyStructPatch) *MyStructValuePatch {
  m.Patch = patch
  return m
}

func (p *MyStructValuePatch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyStructValuePatch)  ReadField1(iprot thrift.Protocol) error {
  p.Assign = NewMyStruct()
  if err := p.Assign.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Assign), err)
  }
  return nil
}

func (p *MyStructValuePatch)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Clear = v
  }
  return nil
}

func (p *MyStructValuePatch)  ReadField3(iprot thrift.Protocol) error {
  p.Patch = NewMyStructPatch()
  if err := p.Patch.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Patch), err)
  }
  return nil
}

func (p *MyStructValuePatch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyStructValuePatch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyStructValuePatch) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetAssign() {
    if err := oprot.WriteFieldBegin("assign", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:assign: ", p), err) }
    if err := p.Assign.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Assign), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:assign: ", p), err) }
  }
  return err
}

func (p *MyStructValuePatch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clear: ", p), err) }
  if err := oprot.WriteBool(bool(p.Clear)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clear (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clear: ", p), err) }
  return err
}

func (p *MyStructValuePatch) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patch", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:patch: ", p), err) }
  if err := p.Patch.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Patch), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:patch: ", p), err) }
  return err
}

func (p *MyStructValuePatch) String() string {
  if p == nil {
    return "<nil>"
  }

  var assignVal string
  if p.Assign == nil {
    assignVal = "<nil>"
  } else {
    assignVal = fmt.Sprintf("%v", p.Assign)
  }
  clearVal := fmt.Sprintf("%v", p.Clear)
  var patchVal string
  if p.Patch == nil {
    patchVal = "<nil>"
  } else {
    patchVal = fmt.Sprintf("%v", p.Patch)
  }
  return fmt.Sprintf("MyStructValuePatch({Assign:%s Clear:%s Patch:%s})", assignVal, clearVal, patchVal)
}

