// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package module

import (
	"bytes"
	"context"
	"sync"
	"fmt"
	thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
	thrift0 "thrift/annotation/thrift"
	patch1 "thrift/lib/thrift/patch"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = sync.Mutex{}
var _ = bytes.Equal
var _ = context.Background

var _ = thrift0.GoUnusedProtection__
var _ = patch1.GoUnusedProtection__
var GoUnusedProtection__ int;

// Attributes:
//  - Data1
//  - Data2
type MyData struct {
  Data1 string `thrift:"data1,1" db:"data1" json:"data1"`
  Data2 int32 `thrift:"data2,2" db:"data2" json:"data2"`
}

func NewMyData() *MyData {
  return &MyData{}
}


func (p *MyData) GetData1() string {
  return p.Data1
}

func (p *MyData) GetData2() int32 {
  return p.Data2
}
type MyDataBuilder struct {
  obj *MyData
}

func NewMyDataBuilder() *MyDataBuilder{
  return &MyDataBuilder{
    obj: NewMyData(),
  }
}

func (p MyDataBuilder) Emit() *MyData{
  return &MyData{
    Data1: p.obj.Data1,
    Data2: p.obj.Data2,
  }
}

func (m *MyDataBuilder) Data1(data1 string) *MyDataBuilder {
  m.obj.Data1 = data1
  return m
}

func (m *MyDataBuilder) Data2(data2 int32) *MyDataBuilder {
  m.obj.Data2 = data2
  return m
}

func (m *MyData) SetData1(data1 string) *MyData {
  m.Data1 = data1
  return m
}

func (m *MyData) SetData2(data2 int32) *MyData {
  m.Data2 = data2
  return m
}

func (p *MyData) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyData)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Data1 = v
  }
  return nil
}

func (p *MyData)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Data2 = v
  }
  return nil
}

func (p *MyData) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyData) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("data1", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:data1: ", p), err) }
  if err := oprot.WriteString(string(p.Data1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.data1 (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:data1: ", p), err) }
  return err
}

func (p *MyData) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("data2", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data2: ", p), err) }
  if err := oprot.WriteI32(int32(p.Data2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.data2 (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data2: ", p), err) }
  return err
}

func (p *MyData) String() string {
  if p == nil {
    return "<nil>"
  }

  data1Val := fmt.Sprintf("%v", p.Data1)
  data2Val := fmt.Sprintf("%v", p.Data2)
  return fmt.Sprintf("MyData({Data1:%s Data2:%s})", data1Val, data2Val)
}

// Attributes:
//  - Option1
//  - Option2
type MyUnion struct {
  Option1 *string `thrift:"option1,1,optional" db:"option1" json:"option1,omitempty"`
  Option2 *int32 `thrift:"option2,2,optional" db:"option2" json:"option2,omitempty"`
}

func NewMyUnion() *MyUnion {
  return &MyUnion{}
}

var MyUnion_Option1_DEFAULT string
func (p *MyUnion) GetOption1() string {
  if !p.IsSetOption1() {
    return MyUnion_Option1_DEFAULT
  }
return *p.Option1
}
var MyUnion_Option2_DEFAULT int32
func (p *MyUnion) GetOption2() int32 {
  if !p.IsSetOption2() {
    return MyUnion_Option2_DEFAULT
  }
return *p.Option2
}
func (p *MyUnion) CountSetFieldsMyUnion() int {
  count := 0
  if (p.IsSetOption1()) {
    count++
  }
  if (p.IsSetOption2()) {
    count++
  }
  return count

}

func (p *MyUnion) IsSetOption1() bool {
  return p != nil && p.Option1 != nil
}

func (p *MyUnion) IsSetOption2() bool {
  return p != nil && p.Option2 != nil
}

type MyUnionBuilder struct {
  obj *MyUnion
}

func NewMyUnionBuilder() *MyUnionBuilder{
  return &MyUnionBuilder{
    obj: NewMyUnion(),
  }
}

func (p MyUnionBuilder) Emit() *MyUnion{
  return &MyUnion{
    Option1: p.obj.Option1,
    Option2: p.obj.Option2,
  }
}

func (m *MyUnionBuilder) Option1(option1 *string) *MyUnionBuilder {
  m.obj.Option1 = option1
  return m
}

func (m *MyUnionBuilder) Option2(option2 *int32) *MyUnionBuilder {
  m.obj.Option2 = option2
  return m
}

func (m *MyUnion) SetOption1(option1 *string) *MyUnion {
  m.Option1 = option1
  return m
}

func (m *MyUnion) SetOption2(option2 *int32) *MyUnion {
  m.Option2 = option2
  return m
}

func (p *MyUnion) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyUnion)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.Option1 = &v
  }
  return nil
}

func (p *MyUnion)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Option2 = &v
  }
  return nil
}

func (p *MyUnion) Write(oprot thrift.Protocol) error {
  if c := p.CountSetFieldsMyUnion(); c > 1 {
    return fmt.Errorf("%T write union: no more than one field must be set (%d set).", p, c)
  }
  if err := oprot.WriteStructBegin("MyUnion"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyUnion) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetOption1() {
    if err := oprot.WriteFieldBegin("option1", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:option1: ", p), err) }
    if err := oprot.WriteString(string(*p.Option1)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.option1 (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:option1: ", p), err) }
  }
  return err
}

func (p *MyUnion) writeField2(oprot thrift.Protocol) (err error) {
  if p.IsSetOption2() {
    if err := oprot.WriteFieldBegin("option2", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:option2: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Option2)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.option2 (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:option2: ", p), err) }
  }
  return err
}

func (p *MyUnion) String() string {
  if p == nil {
    return "<nil>"
  }

  var option1Val string
  if p.Option1 == nil {
    option1Val = "<nil>"
  } else {
    option1Val = fmt.Sprintf("%v", *p.Option1)
  }
  var option2Val string
  if p.Option2 == nil {
    option2Val = "<nil>"
  } else {
    option2Val = fmt.Sprintf("%v", *p.Option2)
  }
  return fmt.Sprintf("MyUnion({Option1:%s Option2:%s})", option1Val, option2Val)
}

// Attributes:
//  - BoolVal
//  - ByteVal
//  - I16Val
//  - I32Val
//  - I64Val
//  - FloatVal
//  - DoubleVal
//  - StringVal
//  - BinaryVal
//  - StructVal
//  - OptBoolVal
//  - OptByteVal
//  - OptI16Val
//  - OptI32Val
//  - OptI64Val
//  - OptFloatVal
//  - OptDoubleVal
//  - OptStringVal
//  - OptBinaryVal
//  - OptStructVal
//  - OptListVal
//  - OptSetVal
//  - OptMapVal
//  - UnionVal
type MyStruct struct {
  BoolVal bool `thrift:"boolVal,1" db:"boolVal" json:"boolVal"`
  ByteVal int8 `thrift:"byteVal,2" db:"byteVal" json:"byteVal"`
  I16Val int16 `thrift:"i16Val,3" db:"i16Val" json:"i16Val"`
  I32Val int32 `thrift:"i32Val,4" db:"i32Val" json:"i32Val"`
  I64Val int64 `thrift:"i64Val,5" db:"i64Val" json:"i64Val"`
  FloatVal float32 `thrift:"floatVal,6" db:"floatVal" json:"floatVal"`
  DoubleVal float64 `thrift:"doubleVal,7" db:"doubleVal" json:"doubleVal"`
  StringVal string `thrift:"stringVal,8" db:"stringVal" json:"stringVal"`
  BinaryVal []byte `thrift:"binaryVal,9" db:"binaryVal" json:"binaryVal"`
  StructVal *MyData `thrift:"structVal,10" db:"structVal" json:"structVal"`
  OptBoolVal *bool `thrift:"optBoolVal,11,optional" db:"optBoolVal" json:"optBoolVal,omitempty"`
  OptByteVal *int8 `thrift:"optByteVal,12,optional" db:"optByteVal" json:"optByteVal,omitempty"`
  OptI16Val *int16 `thrift:"optI16Val,13,optional" db:"optI16Val" json:"optI16Val,omitempty"`
  OptI32Val *int32 `thrift:"optI32Val,14,optional" db:"optI32Val" json:"optI32Val,omitempty"`
  OptI64Val *int64 `thrift:"optI64Val,15,optional" db:"optI64Val" json:"optI64Val,omitempty"`
  OptFloatVal *float32 `thrift:"optFloatVal,16,optional" db:"optFloatVal" json:"optFloatVal,omitempty"`
  OptDoubleVal *float64 `thrift:"optDoubleVal,17,optional" db:"optDoubleVal" json:"optDoubleVal,omitempty"`
  OptStringVal *string `thrift:"optStringVal,18,optional" db:"optStringVal" json:"optStringVal,omitempty"`
  OptBinaryVal []byte `thrift:"optBinaryVal,19,optional" db:"optBinaryVal" json:"optBinaryVal,omitempty"`
  OptStructVal *MyData `thrift:"optStructVal,20,optional" db:"optStructVal" json:"optStructVal,omitempty"`
  OptListVal []int16 `thrift:"optListVal,21,optional" db:"optListVal" json:"optListVal,omitempty"`
  OptSetVal []string `thrift:"optSetVal,22,optional" db:"optSetVal" json:"optSetVal,omitempty"`
  OptMapVal map[string]string `thrift:"optMapVal,23,optional" db:"optMapVal" json:"optMapVal,omitempty"`
  // unused fields # 24 to 29
  UnionVal *MyUnion `thrift:"unionVal,30" db:"unionVal" json:"unionVal"`
}

func NewMyStruct() *MyStruct {
  return &MyStruct{
    StructVal: NewMyData(),
  }
}


func (p *MyStruct) GetBoolVal() bool {
  return p.BoolVal
}

func (p *MyStruct) GetByteVal() int8 {
  return p.ByteVal
}

func (p *MyStruct) GetI16Val() int16 {
  return p.I16Val
}

func (p *MyStruct) GetI32Val() int32 {
  return p.I32Val
}

func (p *MyStruct) GetI64Val() int64 {
  return p.I64Val
}

func (p *MyStruct) GetFloatVal() float32 {
  return p.FloatVal
}

func (p *MyStruct) GetDoubleVal() float64 {
  return p.DoubleVal
}

func (p *MyStruct) GetStringVal() string {
  return p.StringVal
}

func (p *MyStruct) GetBinaryVal() []byte {
  return p.BinaryVal
}
var MyStruct_StructVal_DEFAULT *MyData
func (p *MyStruct) GetStructVal() *MyData {
  if !p.IsSetStructVal() {
    return MyStruct_StructVal_DEFAULT
  }
return p.StructVal
}
var MyStruct_OptBoolVal_DEFAULT bool
func (p *MyStruct) GetOptBoolVal() bool {
  if !p.IsSetOptBoolVal() {
    return MyStruct_OptBoolVal_DEFAULT
  }
return *p.OptBoolVal
}
var MyStruct_OptByteVal_DEFAULT int8
func (p *MyStruct) GetOptByteVal() int8 {
  if !p.IsSetOptByteVal() {
    return MyStruct_OptByteVal_DEFAULT
  }
return *p.OptByteVal
}
var MyStruct_OptI16Val_DEFAULT int16
func (p *MyStruct) GetOptI16Val() int16 {
  if !p.IsSetOptI16Val() {
    return MyStruct_OptI16Val_DEFAULT
  }
return *p.OptI16Val
}
var MyStruct_OptI32Val_DEFAULT int32
func (p *MyStruct) GetOptI32Val() int32 {
  if !p.IsSetOptI32Val() {
    return MyStruct_OptI32Val_DEFAULT
  }
return *p.OptI32Val
}
var MyStruct_OptI64Val_DEFAULT int64
func (p *MyStruct) GetOptI64Val() int64 {
  if !p.IsSetOptI64Val() {
    return MyStruct_OptI64Val_DEFAULT
  }
return *p.OptI64Val
}
var MyStruct_OptFloatVal_DEFAULT float32
func (p *MyStruct) GetOptFloatVal() float32 {
  if !p.IsSetOptFloatVal() {
    return MyStruct_OptFloatVal_DEFAULT
  }
return *p.OptFloatVal
}
var MyStruct_OptDoubleVal_DEFAULT float64
func (p *MyStruct) GetOptDoubleVal() float64 {
  if !p.IsSetOptDoubleVal() {
    return MyStruct_OptDoubleVal_DEFAULT
  }
return *p.OptDoubleVal
}
var MyStruct_OptStringVal_DEFAULT string
func (p *MyStruct) GetOptStringVal() string {
  if !p.IsSetOptStringVal() {
    return MyStruct_OptStringVal_DEFAULT
  }
return *p.OptStringVal
}
var MyStruct_OptBinaryVal_DEFAULT []byte

func (p *MyStruct) GetOptBinaryVal() []byte {
  return p.OptBinaryVal
}
var MyStruct_OptStructVal_DEFAULT *MyData
func (p *MyStruct) GetOptStructVal() *MyData {
  if !p.IsSetOptStructVal() {
    return MyStruct_OptStructVal_DEFAULT
  }
return p.OptStructVal
}
var MyStruct_OptListVal_DEFAULT []int16

func (p *MyStruct) GetOptListVal() []int16 {
  return p.OptListVal
}
var MyStruct_OptSetVal_DEFAULT []string

func (p *MyStruct) GetOptSetVal() []string {
  return p.OptSetVal
}
var MyStruct_OptMapVal_DEFAULT map[string]string

func (p *MyStruct) GetOptMapVal() map[string]string {
  return p.OptMapVal
}
var MyStruct_UnionVal_DEFAULT *MyUnion
func (p *MyStruct) GetUnionVal() *MyUnion {
  if !p.IsSetUnionVal() {
    return MyStruct_UnionVal_DEFAULT
  }
return p.UnionVal
}
func (p *MyStruct) IsSetStructVal() bool {
  return p != nil && p.StructVal != nil
}

func (p *MyStruct) IsSetOptBoolVal() bool {
  return p != nil && p.OptBoolVal != nil
}

func (p *MyStruct) IsSetOptByteVal() bool {
  return p != nil && p.OptByteVal != nil
}

func (p *MyStruct) IsSetOptI16Val() bool {
  return p != nil && p.OptI16Val != nil
}

func (p *MyStruct) IsSetOptI32Val() bool {
  return p != nil && p.OptI32Val != nil
}

func (p *MyStruct) IsSetOptI64Val() bool {
  return p != nil && p.OptI64Val != nil
}

func (p *MyStruct) IsSetOptFloatVal() bool {
  return p != nil && p.OptFloatVal != nil
}

func (p *MyStruct) IsSetOptDoubleVal() bool {
  return p != nil && p.OptDoubleVal != nil
}

func (p *MyStruct) IsSetOptStringVal() bool {
  return p != nil && p.OptStringVal != nil
}

func (p *MyStruct) IsSetOptBinaryVal() bool {
  return p != nil && p.OptBinaryVal != nil
}

func (p *MyStruct) IsSetOptStructVal() bool {
  return p != nil && p.OptStructVal != nil
}

func (p *MyStruct) IsSetOptListVal() bool {
  return p != nil && p.OptListVal != nil
}

func (p *MyStruct) IsSetOptSetVal() bool {
  return p != nil && p.OptSetVal != nil
}

func (p *MyStruct) IsSetOptMapVal() bool {
  return p != nil && p.OptMapVal != nil
}

func (p *MyStruct) IsSetUnionVal() bool {
  return p != nil && p.UnionVal != nil
}

type MyStructBuilder struct {
  obj *MyStruct
}

func NewMyStructBuilder() *MyStructBuilder{
  return &MyStructBuilder{
    obj: NewMyStruct(),
  }
}

func (p MyStructBuilder) Emit() *MyStruct{
  return &MyStruct{
    BoolVal: p.obj.BoolVal,
    ByteVal: p.obj.ByteVal,
    I16Val: p.obj.I16Val,
    I32Val: p.obj.I32Val,
    I64Val: p.obj.I64Val,
    FloatVal: p.obj.FloatVal,
    DoubleVal: p.obj.DoubleVal,
    StringVal: p.obj.StringVal,
    BinaryVal: p.obj.BinaryVal,
    StructVal: p.obj.StructVal,
    OptBoolVal: p.obj.OptBoolVal,
    OptByteVal: p.obj.OptByteVal,
    OptI16Val: p.obj.OptI16Val,
    OptI32Val: p.obj.OptI32Val,
    OptI64Val: p.obj.OptI64Val,
    OptFloatVal: p.obj.OptFloatVal,
    OptDoubleVal: p.obj.OptDoubleVal,
    OptStringVal: p.obj.OptStringVal,
    OptBinaryVal: p.obj.OptBinaryVal,
    OptStructVal: p.obj.OptStructVal,
    OptListVal: p.obj.OptListVal,
    OptSetVal: p.obj.OptSetVal,
    OptMapVal: p.obj.OptMapVal,
    UnionVal: p.obj.UnionVal,
  }
}

func (m *MyStructBuilder) BoolVal(boolVal bool) *MyStructBuilder {
  m.obj.BoolVal = boolVal
  return m
}

func (m *MyStructBuilder) ByteVal(byteVal int8) *MyStructBuilder {
  m.obj.ByteVal = byteVal
  return m
}

func (m *MyStructBuilder) I16Val(i16Val int16) *MyStructBuilder {
  m.obj.I16Val = i16Val
  return m
}

func (m *MyStructBuilder) I32Val(i32Val int32) *MyStructBuilder {
  m.obj.I32Val = i32Val
  return m
}

func (m *MyStructBuilder) I64Val(i64Val int64) *MyStructBuilder {
  m.obj.I64Val = i64Val
  return m
}

func (m *MyStructBuilder) FloatVal(floatVal float32) *MyStructBuilder {
  m.obj.FloatVal = floatVal
  return m
}

func (m *MyStructBuilder) DoubleVal(doubleVal float64) *MyStructBuilder {
  m.obj.DoubleVal = doubleVal
  return m
}

func (m *MyStructBuilder) StringVal(stringVal string) *MyStructBuilder {
  m.obj.StringVal = stringVal
  return m
}

func (m *MyStructBuilder) BinaryVal(binaryVal []byte) *MyStructBuilder {
  m.obj.BinaryVal = binaryVal
  return m
}

func (m *MyStructBuilder) StructVal(structVal *MyData) *MyStructBuilder {
  m.obj.StructVal = structVal
  return m
}

func (m *MyStructBuilder) OptBoolVal(optBoolVal *bool) *MyStructBuilder {
  m.obj.OptBoolVal = optBoolVal
  return m
}

func (m *MyStructBuilder) OptByteVal(optByteVal *int8) *MyStructBuilder {
  m.obj.OptByteVal = optByteVal
  return m
}

func (m *MyStructBuilder) OptI16Val(optI16Val *int16) *MyStructBuilder {
  m.obj.OptI16Val = optI16Val
  return m
}

func (m *MyStructBuilder) OptI32Val(optI32Val *int32) *MyStructBuilder {
  m.obj.OptI32Val = optI32Val
  return m
}

func (m *MyStructBuilder) OptI64Val(optI64Val *int64) *MyStructBuilder {
  m.obj.OptI64Val = optI64Val
  return m
}

func (m *MyStructBuilder) OptFloatVal(optFloatVal *float32) *MyStructBuilder {
  m.obj.OptFloatVal = optFloatVal
  return m
}

func (m *MyStructBuilder) OptDoubleVal(optDoubleVal *float64) *MyStructBuilder {
  m.obj.OptDoubleVal = optDoubleVal
  return m
}

func (m *MyStructBuilder) OptStringVal(optStringVal *string) *MyStructBuilder {
  m.obj.OptStringVal = optStringVal
  return m
}

func (m *MyStructBuilder) OptBinaryVal(optBinaryVal []byte) *MyStructBuilder {
  m.obj.OptBinaryVal = optBinaryVal
  return m
}

func (m *MyStructBuilder) OptStructVal(optStructVal *MyData) *MyStructBuilder {
  m.obj.OptStructVal = optStructVal
  return m
}

func (m *MyStructBuilder) OptListVal(optListVal []int16) *MyStructBuilder {
  m.obj.OptListVal = optListVal
  return m
}

func (m *MyStructBuilder) OptSetVal(optSetVal []string) *MyStructBuilder {
  m.obj.OptSetVal = optSetVal
  return m
}

func (m *MyStructBuilder) OptMapVal(optMapVal map[string]string) *MyStructBuilder {
  m.obj.OptMapVal = optMapVal
  return m
}

func (m *MyStructBuilder) UnionVal(unionVal *MyUnion) *MyStructBuilder {
  m.obj.UnionVal = unionVal
  return m
}

func (m *MyStruct) SetBoolVal(boolVal bool) *MyStruct {
  m.BoolVal = boolVal
  return m
}

func (m *MyStruct) SetByteVal(byteVal int8) *MyStruct {
  m.ByteVal = byteVal
  return m
}

func (m *MyStruct) SetI16Val(i16Val int16) *MyStruct {
  m.I16Val = i16Val
  return m
}

func (m *MyStruct) SetI32Val(i32Val int32) *MyStruct {
  m.I32Val = i32Val
  return m
}

func (m *MyStruct) SetI64Val(i64Val int64) *MyStruct {
  m.I64Val = i64Val
  return m
}

func (m *MyStruct) SetFloatVal(floatVal float32) *MyStruct {
  m.FloatVal = floatVal
  return m
}

func (m *MyStruct) SetDoubleVal(doubleVal float64) *MyStruct {
  m.DoubleVal = doubleVal
  return m
}

func (m *MyStruct) SetStringVal(stringVal string) *MyStruct {
  m.StringVal = stringVal
  return m
}

func (m *MyStruct) SetBinaryVal(binaryVal []byte) *MyStruct {
  m.BinaryVal = binaryVal
  return m
}

func (m *MyStruct) SetStructVal(structVal *MyData) *MyStruct {
  m.StructVal = structVal
  return m
}

func (m *MyStruct) SetOptBoolVal(optBoolVal *bool) *MyStruct {
  m.OptBoolVal = optBoolVal
  return m
}

func (m *MyStruct) SetOptByteVal(optByteVal *int8) *MyStruct {
  m.OptByteVal = optByteVal
  return m
}

func (m *MyStruct) SetOptI16Val(optI16Val *int16) *MyStruct {
  m.OptI16Val = optI16Val
  return m
}

func (m *MyStruct) SetOptI32Val(optI32Val *int32) *MyStruct {
  m.OptI32Val = optI32Val
  return m
}

func (m *MyStruct) SetOptI64Val(optI64Val *int64) *MyStruct {
  m.OptI64Val = optI64Val
  return m
}

func (m *MyStruct) SetOptFloatVal(optFloatVal *float32) *MyStruct {
  m.OptFloatVal = optFloatVal
  return m
}

func (m *MyStruct) SetOptDoubleVal(optDoubleVal *float64) *MyStruct {
  m.OptDoubleVal = optDoubleVal
  return m
}

func (m *MyStruct) SetOptStringVal(optStringVal *string) *MyStruct {
  m.OptStringVal = optStringVal
  return m
}

func (m *MyStruct) SetOptBinaryVal(optBinaryVal []byte) *MyStruct {
  m.OptBinaryVal = optBinaryVal
  return m
}

func (m *MyStruct) SetOptStructVal(optStructVal *MyData) *MyStruct {
  m.OptStructVal = optStructVal
  return m
}

func (m *MyStruct) SetOptListVal(optListVal []int16) *MyStruct {
  m.OptListVal = optListVal
  return m
}

func (m *MyStruct) SetOptSetVal(optSetVal []string) *MyStruct {
  m.OptSetVal = optSetVal
  return m
}

func (m *MyStruct) SetOptMapVal(optMapVal map[string]string) *MyStruct {
  m.OptMapVal = optMapVal
  return m
}

func (m *MyStruct) SetUnionVal(unionVal *MyUnion) *MyStruct {
  m.UnionVal = unionVal
  return m
}

func (p *MyStruct) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 11:
      if err := p.ReadField11(iprot); err != nil {
        return err
      }
    case 12:
      if err := p.ReadField12(iprot); err != nil {
        return err
      }
    case 13:
      if err := p.ReadField13(iprot); err != nil {
        return err
      }
    case 14:
      if err := p.ReadField14(iprot); err != nil {
        return err
      }
    case 15:
      if err := p.ReadField15(iprot); err != nil {
        return err
      }
    case 16:
      if err := p.ReadField16(iprot); err != nil {
        return err
      }
    case 17:
      if err := p.ReadField17(iprot); err != nil {
        return err
      }
    case 18:
      if err := p.ReadField18(iprot); err != nil {
        return err
      }
    case 19:
      if err := p.ReadField19(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 21:
      if err := p.ReadField21(iprot); err != nil {
        return err
      }
    case 22:
      if err := p.ReadField22(iprot); err != nil {
        return err
      }
    case 23:
      if err := p.ReadField23(iprot); err != nil {
        return err
      }
    case 30:
      if err := p.ReadField30(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyStruct)  ReadField1(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 1: ", err)
  } else {
    p.BoolVal = v
  }
  return nil
}

func (p *MyStruct)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadByte(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    temp := int8(v)
    p.ByteVal = temp
  }
  return nil
}

func (p *MyStruct)  ReadField3(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI16(); err != nil {
    return thrift.PrependError("error reading field 3: ", err)
  } else {
    p.I16Val = v
  }
  return nil
}

func (p *MyStruct)  ReadField4(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 4: ", err)
  } else {
    p.I32Val = v
  }
  return nil
}

func (p *MyStruct)  ReadField5(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 5: ", err)
  } else {
    p.I64Val = v
  }
  return nil
}

func (p *MyStruct)  ReadField6(iprot thrift.Protocol) error {
  if v, err := iprot.ReadFloat(); err != nil {
    return thrift.PrependError("error reading field 6: ", err)
  } else {
    p.FloatVal = v
  }
  return nil
}

func (p *MyStruct)  ReadField7(iprot thrift.Protocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
    return thrift.PrependError("error reading field 7: ", err)
  } else {
    p.DoubleVal = v
  }
  return nil
}

func (p *MyStruct)  ReadField8(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 8: ", err)
  } else {
    p.StringVal = v
  }
  return nil
}

func (p *MyStruct)  ReadField9(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 9: ", err)
  } else {
    p.BinaryVal = v
  }
  return nil
}

func (p *MyStruct)  ReadField10(iprot thrift.Protocol) error {
  p.StructVal = NewMyData()
  if err := p.StructVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StructVal), err)
  }
  return nil
}

func (p *MyStruct)  ReadField11(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 11: ", err)
  } else {
    p.OptBoolVal = &v
  }
  return nil
}

func (p *MyStruct)  ReadField12(iprot thrift.Protocol) error {
  if v, err := iprot.ReadByte(); err != nil {
    return thrift.PrependError("error reading field 12: ", err)
  } else {
    temp := int8(v)
    p.OptByteVal = &temp
  }
  return nil
}

func (p *MyStruct)  ReadField13(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI16(); err != nil {
    return thrift.PrependError("error reading field 13: ", err)
  } else {
    p.OptI16Val = &v
  }
  return nil
}

func (p *MyStruct)  ReadField14(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 14: ", err)
  } else {
    p.OptI32Val = &v
  }
  return nil
}

func (p *MyStruct)  ReadField15(iprot thrift.Protocol) error {
  if v, err := iprot.ReadI64(); err != nil {
    return thrift.PrependError("error reading field 15: ", err)
  } else {
    p.OptI64Val = &v
  }
  return nil
}

func (p *MyStruct)  ReadField16(iprot thrift.Protocol) error {
  if v, err := iprot.ReadFloat(); err != nil {
    return thrift.PrependError("error reading field 16: ", err)
  } else {
    p.OptFloatVal = &v
  }
  return nil
}

func (p *MyStruct)  ReadField17(iprot thrift.Protocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
    return thrift.PrependError("error reading field 17: ", err)
  } else {
    p.OptDoubleVal = &v
  }
  return nil
}

func (p *MyStruct)  ReadField18(iprot thrift.Protocol) error {
  if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 18: ", err)
  } else {
    p.OptStringVal = &v
  }
  return nil
}

func (p *MyStruct)  ReadField19(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 19: ", err)
  } else {
    p.OptBinaryVal = v
  }
  return nil
}

func (p *MyStruct)  ReadField20(iprot thrift.Protocol) error {
  p.OptStructVal = NewMyData()
  if err := p.OptStructVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OptStructVal), err)
  }
  return nil
}

func (p *MyStruct)  ReadField21(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int16, 0, size)
  p.OptListVal =  tSlice
  for i := 0; i < size; i ++ {
    var _elem2 int16
    if v, err := iprot.ReadI16(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem2 = v
    }
    p.OptListVal = append(p.OptListVal, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MyStruct)  ReadField22(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.OptSetVal =  tSet
  for i := 0; i < size; i ++ {
    var _elem3 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem3 = v
    }
    p.OptSetVal = append(p.OptSetVal, _elem3)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *MyStruct)  ReadField23(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.OptMapVal =  tMap
  for i := 0; i < size; i ++ {
    var _key4 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key4 = v
    }
    var _val5 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _val5 = v
    }
    p.OptMapVal[_key4] = _val5
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MyStruct)  ReadField30(iprot thrift.Protocol) error {
  p.UnionVal = NewMyUnion()
  if err := p.UnionVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UnionVal), err)
  }
  return nil
}

func (p *MyStruct) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyStruct"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := p.writeField8(oprot); err != nil { return err }
  if err := p.writeField9(oprot); err != nil { return err }
  if err := p.writeField10(oprot); err != nil { return err }
  if err := p.writeField11(oprot); err != nil { return err }
  if err := p.writeField12(oprot); err != nil { return err }
  if err := p.writeField13(oprot); err != nil { return err }
  if err := p.writeField14(oprot); err != nil { return err }
  if err := p.writeField15(oprot); err != nil { return err }
  if err := p.writeField16(oprot); err != nil { return err }
  if err := p.writeField17(oprot); err != nil { return err }
  if err := p.writeField18(oprot); err != nil { return err }
  if err := p.writeField19(oprot); err != nil { return err }
  if err := p.writeField20(oprot); err != nil { return err }
  if err := p.writeField21(oprot); err != nil { return err }
  if err := p.writeField22(oprot); err != nil { return err }
  if err := p.writeField23(oprot); err != nil { return err }
  if err := p.writeField30(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyStruct) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("boolVal", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:boolVal: ", p), err) }
  if err := oprot.WriteBool(bool(p.BoolVal)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.boolVal (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:boolVal: ", p), err) }
  return err
}

func (p *MyStruct) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("byteVal", thrift.BYTE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:byteVal: ", p), err) }
  if err := oprot.WriteByte(byte(p.ByteVal)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.byteVal (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:byteVal: ", p), err) }
  return err
}

func (p *MyStruct) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("i16Val", thrift.I16, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:i16Val: ", p), err) }
  if err := oprot.WriteI16(int16(p.I16Val)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.i16Val (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:i16Val: ", p), err) }
  return err
}

func (p *MyStruct) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("i32Val", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:i32Val: ", p), err) }
  if err := oprot.WriteI32(int32(p.I32Val)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.i32Val (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:i32Val: ", p), err) }
  return err
}

func (p *MyStruct) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("i64Val", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:i64Val: ", p), err) }
  if err := oprot.WriteI64(int64(p.I64Val)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.i64Val (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:i64Val: ", p), err) }
  return err
}

func (p *MyStruct) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("floatVal", thrift.FLOAT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:floatVal: ", p), err) }
  if err := oprot.WriteFloat(float32(p.FloatVal)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.floatVal (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:floatVal: ", p), err) }
  return err
}

func (p *MyStruct) writeField7(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("doubleVal", thrift.DOUBLE, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:doubleVal: ", p), err) }
  if err := oprot.WriteDouble(float64(p.DoubleVal)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.doubleVal (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:doubleVal: ", p), err) }
  return err
}

func (p *MyStruct) writeField8(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("stringVal", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:stringVal: ", p), err) }
  if err := oprot.WriteString(string(p.StringVal)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stringVal (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:stringVal: ", p), err) }
  return err
}

func (p *MyStruct) writeField9(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("binaryVal", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:binaryVal: ", p), err) }
  if err := oprot.WriteBinary(p.BinaryVal); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.binaryVal (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:binaryVal: ", p), err) }
  return err
}

func (p *MyStruct) writeField10(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("structVal", thrift.STRUCT, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:structVal: ", p), err) }
  if err := p.StructVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StructVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:structVal: ", p), err) }
  return err
}

func (p *MyStruct) writeField11(oprot thrift.Protocol) (err error) {
  if p.IsSetOptBoolVal() {
    if err := oprot.WriteFieldBegin("optBoolVal", thrift.BOOL, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:optBoolVal: ", p), err) }
    if err := oprot.WriteBool(bool(*p.OptBoolVal)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.optBoolVal (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:optBoolVal: ", p), err) }
  }
  return err
}

func (p *MyStruct) writeField12(oprot thrift.Protocol) (err error) {
  if p.IsSetOptByteVal() {
    if err := oprot.WriteFieldBegin("optByteVal", thrift.BYTE, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:optByteVal: ", p), err) }
    if err := oprot.WriteByte(byte(*p.OptByteVal)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.optByteVal (12) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:optByteVal: ", p), err) }
  }
  return err
}

func (p *MyStruct) writeField13(oprot thrift.Protocol) (err error) {
  if p.IsSetOptI16Val() {
    if err := oprot.WriteFieldBegin("optI16Val", thrift.I16, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:optI16Val: ", p), err) }
    if err := oprot.WriteI16(int16(*p.OptI16Val)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.optI16Val (13) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:optI16Val: ", p), err) }
  }
  return err
}

func (p *MyStruct) writeField14(oprot thrift.Protocol) (err error) {
  if p.IsSetOptI32Val() {
    if err := oprot.WriteFieldBegin("optI32Val", thrift.I32, 14); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:optI32Val: ", p), err) }
    if err := oprot.WriteI32(int32(*p.OptI32Val)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.optI32Val (14) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 14:optI32Val: ", p), err) }
  }
  return err
}

func (p *MyStruct) writeField15(oprot thrift.Protocol) (err error) {
  if p.IsSetOptI64Val() {
    if err := oprot.WriteFieldBegin("optI64Val", thrift.I64, 15); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:optI64Val: ", p), err) }
    if err := oprot.WriteI64(int64(*p.OptI64Val)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.optI64Val (15) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 15:optI64Val: ", p), err) }
  }
  return err
}

func (p *MyStruct) writeField16(oprot thrift.Protocol) (err error) {
  if p.IsSetOptFloatVal() {
    if err := oprot.WriteFieldBegin("optFloatVal", thrift.FLOAT, 16); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:optFloatVal: ", p), err) }
    if err := oprot.WriteFloat(float32(*p.OptFloatVal)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.optFloatVal (16) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 16:optFloatVal: ", p), err) }
  }
  return err
}

func (p *MyStruct) writeField17(oprot thrift.Protocol) (err error) {
  if p.IsSetOptDoubleVal() {
    if err := oprot.WriteFieldBegin("optDoubleVal", thrift.DOUBLE, 17); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:optDoubleVal: ", p), err) }
    if err := oprot.WriteDouble(float64(*p.OptDoubleVal)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.optDoubleVal (17) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 17:optDoubleVal: ", p), err) }
  }
  return err
}

func (p *MyStruct) writeField18(oprot thrift.Protocol) (err error) {
  if p.IsSetOptStringVal() {
    if err := oprot.WriteFieldBegin("optStringVal", thrift.STRING, 18); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:optStringVal: ", p), err) }
    if err := oprot.WriteString(string(*p.OptStringVal)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.optStringVal (18) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 18:optStringVal: ", p), err) }
  }
  return err
}

func (p *MyStruct) writeField19(oprot thrift.Protocol) (err error) {
  if p.IsSetOptBinaryVal() {
    if err := oprot.WriteFieldBegin("optBinaryVal", thrift.STRING, 19); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:optBinaryVal: ", p), err) }
    if err := oprot.WriteBinary(p.OptBinaryVal); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.optBinaryVal (19) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 19:optBinaryVal: ", p), err) }
  }
  return err
}

func (p *MyStruct) writeField20(oprot thrift.Protocol) (err error) {
  if p.IsSetOptStructVal() {
    if err := oprot.WriteFieldBegin("optStructVal", thrift.STRUCT, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:optStructVal: ", p), err) }
    if err := p.OptStructVal.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OptStructVal), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:optStructVal: ", p), err) }
  }
  return err
}

func (p *MyStruct) writeField21(oprot thrift.Protocol) (err error) {
  if p.IsSetOptListVal() {
    if err := oprot.WriteFieldBegin("optListVal", thrift.LIST, 21); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:optListVal: ", p), err) }
    if err := oprot.WriteListBegin(thrift.I16, len(p.OptListVal)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.OptListVal {
      if err := oprot.WriteI16(int16(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 21:optListVal: ", p), err) }
  }
  return err
}

func (p *MyStruct) writeField22(oprot thrift.Protocol) (err error) {
  if p.IsSetOptSetVal() {
    if err := oprot.WriteFieldBegin("optSetVal", thrift.SET, 22); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:optSetVal: ", p), err) }
    if err := oprot.WriteSetBegin(thrift.STRING, len(p.OptSetVal)); err != nil {
      return thrift.PrependError("error writing set begin: ", err)
    }
    set := make(map[string]bool, len(p.OptSetVal))
    for _, v := range p.OptSetVal {
      if ok := set[v]; ok {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", v))
      }
      set[v] = true
    }
    for _, v := range p.OptSetVal {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteSetEnd(); err != nil {
      return thrift.PrependError("error writing set end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 22:optSetVal: ", p), err) }
  }
  return err
}

func (p *MyStruct) writeField23(oprot thrift.Protocol) (err error) {
  if p.IsSetOptMapVal() {
    if err := oprot.WriteFieldBegin("optMapVal", thrift.MAP, 23); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:optMapVal: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.OptMapVal)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.OptMapVal {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 23:optMapVal: ", p), err) }
  }
  return err
}

func (p *MyStruct) writeField30(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("unionVal", thrift.STRUCT, 30); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:unionVal: ", p), err) }
  if err := p.UnionVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UnionVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 30:unionVal: ", p), err) }
  return err
}

func (p *MyStruct) String() string {
  if p == nil {
    return "<nil>"
  }

  boolValVal := fmt.Sprintf("%v", p.BoolVal)
  byteValVal := fmt.Sprintf("%v", p.ByteVal)
  i16ValVal := fmt.Sprintf("%v", p.I16Val)
  i32ValVal := fmt.Sprintf("%v", p.I32Val)
  i64ValVal := fmt.Sprintf("%v", p.I64Val)
  floatValVal := fmt.Sprintf("%v", p.FloatVal)
  doubleValVal := fmt.Sprintf("%v", p.DoubleVal)
  stringValVal := fmt.Sprintf("%v", p.StringVal)
  binaryValVal := fmt.Sprintf("%v", p.BinaryVal)
  var structValVal string
  if p.StructVal == nil {
    structValVal = "<nil>"
  } else {
    structValVal = fmt.Sprintf("%v", p.StructVal)
  }
  var optBoolValVal string
  if p.OptBoolVal == nil {
    optBoolValVal = "<nil>"
  } else {
    optBoolValVal = fmt.Sprintf("%v", *p.OptBoolVal)
  }
  var optByteValVal string
  if p.OptByteVal == nil {
    optByteValVal = "<nil>"
  } else {
    optByteValVal = fmt.Sprintf("%v", *p.OptByteVal)
  }
  var optI16ValVal string
  if p.OptI16Val == nil {
    optI16ValVal = "<nil>"
  } else {
    optI16ValVal = fmt.Sprintf("%v", *p.OptI16Val)
  }
  var optI32ValVal string
  if p.OptI32Val == nil {
    optI32ValVal = "<nil>"
  } else {
    optI32ValVal = fmt.Sprintf("%v", *p.OptI32Val)
  }
  var optI64ValVal string
  if p.OptI64Val == nil {
    optI64ValVal = "<nil>"
  } else {
    optI64ValVal = fmt.Sprintf("%v", *p.OptI64Val)
  }
  var optFloatValVal string
  if p.OptFloatVal == nil {
    optFloatValVal = "<nil>"
  } else {
    optFloatValVal = fmt.Sprintf("%v", *p.OptFloatVal)
  }
  var optDoubleValVal string
  if p.OptDoubleVal == nil {
    optDoubleValVal = "<nil>"
  } else {
    optDoubleValVal = fmt.Sprintf("%v", *p.OptDoubleVal)
  }
  var optStringValVal string
  if p.OptStringVal == nil {
    optStringValVal = "<nil>"
  } else {
    optStringValVal = fmt.Sprintf("%v", *p.OptStringVal)
  }
  optBinaryValVal := fmt.Sprintf("%v", p.OptBinaryVal)
  var optStructValVal string
  if p.OptStructVal == nil {
    optStructValVal = "<nil>"
  } else {
    optStructValVal = fmt.Sprintf("%v", p.OptStructVal)
  }
  optListValVal := fmt.Sprintf("%v", p.OptListVal)
  optSetValVal := fmt.Sprintf("%v", p.OptSetVal)
  optMapValVal := fmt.Sprintf("%v", p.OptMapVal)
  var unionValVal string
  if p.UnionVal == nil {
    unionValVal = "<nil>"
  } else {
    unionValVal = fmt.Sprintf("%v", p.UnionVal)
  }
  return fmt.Sprintf("MyStruct({BoolVal:%s ByteVal:%s I16Val:%s I32Val:%s I64Val:%s FloatVal:%s DoubleVal:%s StringVal:%s BinaryVal:%s StructVal:%s OptBoolVal:%s OptByteVal:%s OptI16Val:%s OptI32Val:%s OptI64Val:%s OptFloatVal:%s OptDoubleVal:%s OptStringVal:%s OptBinaryVal:%s OptStructVal:%s OptListVal:%s OptSetVal:%s OptMapVal:%s UnionVal:%s})", boolValVal, byteValVal, i16ValVal, i32ValVal, i64ValVal, floatValVal, doubleValVal, stringValVal, binaryValVal, structValVal, optBoolValVal, optByteValVal, optI16ValVal, optI32ValVal, optI64ValVal, optFloatValVal, optDoubleValVal, optStringValVal, optBinaryValVal, optStructValVal, optListValVal, optSetValVal, optMapValVal, unionValVal)
}

// Attributes:
//  - Data1
//  - Data2
type MyDataPatch struct {
  Data1 *patch1.StringPatch `thrift:"data1,1" db:"data1" json:"data1"`
  Data2 *patch1.I32Patch `thrift:"data2,2" db:"data2" json:"data2"`
}

func NewMyDataPatch() *MyDataPatch {
  return &MyDataPatch{
    Data1: patch1.NewStringPatch(),
    Data2: patch1.NewI32Patch(),
  }
}

var MyDataPatch_Data1_DEFAULT *patch1.StringPatch
func (p *MyDataPatch) GetData1() *patch1.StringPatch {
  if !p.IsSetData1() {
    return MyDataPatch_Data1_DEFAULT
  }
return p.Data1
}
var MyDataPatch_Data2_DEFAULT *patch1.I32Patch
func (p *MyDataPatch) GetData2() *patch1.I32Patch {
  if !p.IsSetData2() {
    return MyDataPatch_Data2_DEFAULT
  }
return p.Data2
}
func (p *MyDataPatch) IsSetData1() bool {
  return p != nil && p.Data1 != nil
}

func (p *MyDataPatch) IsSetData2() bool {
  return p != nil && p.Data2 != nil
}

type MyDataPatchBuilder struct {
  obj *MyDataPatch
}

func NewMyDataPatchBuilder() *MyDataPatchBuilder{
  return &MyDataPatchBuilder{
    obj: NewMyDataPatch(),
  }
}

func (p MyDataPatchBuilder) Emit() *MyDataPatch{
  return &MyDataPatch{
    Data1: p.obj.Data1,
    Data2: p.obj.Data2,
  }
}

func (m *MyDataPatchBuilder) Data1(data1 *patch1.StringPatch) *MyDataPatchBuilder {
  m.obj.Data1 = data1
  return m
}

func (m *MyDataPatchBuilder) Data2(data2 *patch1.I32Patch) *MyDataPatchBuilder {
  m.obj.Data2 = data2
  return m
}

func (m *MyDataPatch) SetData1(data1 *patch1.StringPatch) *MyDataPatch {
  m.Data1 = data1
  return m
}

func (m *MyDataPatch) SetData2(data2 *patch1.I32Patch) *MyDataPatch {
  m.Data2 = data2
  return m
}

func (p *MyDataPatch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyDataPatch)  ReadField1(iprot thrift.Protocol) error {
  p.Data1 = patch1.NewStringPatch()
  if err := p.Data1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Data1), err)
  }
  return nil
}

func (p *MyDataPatch)  ReadField2(iprot thrift.Protocol) error {
  p.Data2 = patch1.NewI32Patch()
  if err := p.Data2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Data2), err)
  }
  return nil
}

func (p *MyDataPatch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyDataPatch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyDataPatch) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("data1", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:data1: ", p), err) }
  if err := p.Data1.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Data1), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:data1: ", p), err) }
  return err
}

func (p *MyDataPatch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("data2", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:data2: ", p), err) }
  if err := p.Data2.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Data2), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:data2: ", p), err) }
  return err
}

func (p *MyDataPatch) String() string {
  if p == nil {
    return "<nil>"
  }

  var data1Val string
  if p.Data1 == nil {
    data1Val = "<nil>"
  } else {
    data1Val = fmt.Sprintf("%v", p.Data1)
  }
  var data2Val string
  if p.Data2 == nil {
    data2Val = "<nil>"
  } else {
    data2Val = fmt.Sprintf("%v", p.Data2)
  }
  return fmt.Sprintf("MyDataPatch({Data1:%s Data2:%s})", data1Val, data2Val)
}

// Attributes:
//  - Assign: Assigns a value. If set, all other operations are ignored.
//  - Clear: Clears a value. Applies first.
//  - Patch: Patches a value. Applies second.
type MyDataValuePatch struct {
  Assign *MyData `thrift:"assign,1,optional" db:"assign" json:"assign,omitempty"`
  Clear bool `thrift:"clear,2" db:"clear" json:"clear"`
  Patch *MyDataPatch `thrift:"patch,3" db:"patch" json:"patch"`
}

func NewMyDataValuePatch() *MyDataValuePatch {
  return &MyDataValuePatch{
    Patch: NewMyDataPatch(),
  }
}

var MyDataValuePatch_Assign_DEFAULT *MyData
func (p *MyDataValuePatch) GetAssign() *MyData {
  if !p.IsSetAssign() {
    return MyDataValuePatch_Assign_DEFAULT
  }
return p.Assign
}

func (p *MyDataValuePatch) GetClear() bool {
  return p.Clear
}
var MyDataValuePatch_Patch_DEFAULT *MyDataPatch
func (p *MyDataValuePatch) GetPatch() *MyDataPatch {
  if !p.IsSetPatch() {
    return MyDataValuePatch_Patch_DEFAULT
  }
return p.Patch
}
func (p *MyDataValuePatch) IsSetAssign() bool {
  return p != nil && p.Assign != nil
}

func (p *MyDataValuePatch) IsSetPatch() bool {
  return p != nil && p.Patch != nil
}

type MyDataValuePatchBuilder struct {
  obj *MyDataValuePatch
}

func NewMyDataValuePatchBuilder() *MyDataValuePatchBuilder{
  return &MyDataValuePatchBuilder{
    obj: NewMyDataValuePatch(),
  }
}

func (p MyDataValuePatchBuilder) Emit() *MyDataValuePatch{
  return &MyDataValuePatch{
    Assign: p.obj.Assign,
    Clear: p.obj.Clear,
    Patch: p.obj.Patch,
  }
}

func (m *MyDataValuePatchBuilder) Assign(assign *MyData) *MyDataValuePatchBuilder {
  m.obj.Assign = assign
  return m
}

func (m *MyDataValuePatchBuilder) Clear(clear bool) *MyDataValuePatchBuilder {
  m.obj.Clear = clear
  return m
}

func (m *MyDataValuePatchBuilder) Patch(patch *MyDataPatch) *MyDataValuePatchBuilder {
  m.obj.Patch = patch
  return m
}

func (m *MyDataValuePatch) SetAssign(assign *MyData) *MyDataValuePatch {
  m.Assign = assign
  return m
}

func (m *MyDataValuePatch) SetClear(clear bool) *MyDataValuePatch {
  m.Clear = clear
  return m
}

func (m *MyDataValuePatch) SetPatch(patch *MyDataPatch) *MyDataValuePatch {
  m.Patch = patch
  return m
}

func (p *MyDataValuePatch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyDataValuePatch)  ReadField1(iprot thrift.Protocol) error {
  p.Assign = NewMyData()
  if err := p.Assign.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Assign), err)
  }
  return nil
}

func (p *MyDataValuePatch)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Clear = v
  }
  return nil
}

func (p *MyDataValuePatch)  ReadField3(iprot thrift.Protocol) error {
  p.Patch = NewMyDataPatch()
  if err := p.Patch.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Patch), err)
  }
  return nil
}

func (p *MyDataValuePatch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyDataValuePatch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyDataValuePatch) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetAssign() {
    if err := oprot.WriteFieldBegin("assign", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:assign: ", p), err) }
    if err := p.Assign.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Assign), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:assign: ", p), err) }
  }
  return err
}

func (p *MyDataValuePatch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clear: ", p), err) }
  if err := oprot.WriteBool(bool(p.Clear)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clear (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clear: ", p), err) }
  return err
}

func (p *MyDataValuePatch) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patch", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:patch: ", p), err) }
  if err := p.Patch.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Patch), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:patch: ", p), err) }
  return err
}

func (p *MyDataValuePatch) String() string {
  if p == nil {
    return "<nil>"
  }

  var assignVal string
  if p.Assign == nil {
    assignVal = "<nil>"
  } else {
    assignVal = fmt.Sprintf("%v", p.Assign)
  }
  clearVal := fmt.Sprintf("%v", p.Clear)
  var patchVal string
  if p.Patch == nil {
    patchVal = "<nil>"
  } else {
    patchVal = fmt.Sprintf("%v", p.Patch)
  }
  return fmt.Sprintf("MyDataValuePatch({Assign:%s Clear:%s Patch:%s})", assignVal, clearVal, patchVal)
}

// Attributes:
//  - Clear: Clears any set value. Applies first.
//  - Patch: Patches any set value. Applies second.
//  - Ensure: Assigns the value, if not already set. Applies third.
//  - PatchAfter: Patches any set value, including newly set values. Applies fourth.
type OptionalMyDataValuePatch struct {
  // unused field # 1
  Clear bool `thrift:"clear,2" db:"clear" json:"clear"`
  Patch *MyDataValuePatch `thrift:"patch,3" db:"patch" json:"patch"`
  Ensure *MyData `thrift:"ensure,4,optional" db:"ensure" json:"ensure,omitempty"`
  PatchAfter *MyDataValuePatch `thrift:"patchAfter,5" db:"patchAfter" json:"patchAfter"`
}

func NewOptionalMyDataValuePatch() *OptionalMyDataValuePatch {
  return &OptionalMyDataValuePatch{
    Patch: NewMyDataValuePatch(),
    PatchAfter: NewMyDataValuePatch(),
  }
}


func (p *OptionalMyDataValuePatch) GetClear() bool {
  return p.Clear
}
var OptionalMyDataValuePatch_Patch_DEFAULT *MyDataValuePatch
func (p *OptionalMyDataValuePatch) GetPatch() *MyDataValuePatch {
  if !p.IsSetPatch() {
    return OptionalMyDataValuePatch_Patch_DEFAULT
  }
return p.Patch
}
var OptionalMyDataValuePatch_Ensure_DEFAULT *MyData
func (p *OptionalMyDataValuePatch) GetEnsure() *MyData {
  if !p.IsSetEnsure() {
    return OptionalMyDataValuePatch_Ensure_DEFAULT
  }
return p.Ensure
}
var OptionalMyDataValuePatch_PatchAfter_DEFAULT *MyDataValuePatch
func (p *OptionalMyDataValuePatch) GetPatchAfter() *MyDataValuePatch {
  if !p.IsSetPatchAfter() {
    return OptionalMyDataValuePatch_PatchAfter_DEFAULT
  }
return p.PatchAfter
}
func (p *OptionalMyDataValuePatch) IsSetPatch() bool {
  return p != nil && p.Patch != nil
}

func (p *OptionalMyDataValuePatch) IsSetEnsure() bool {
  return p != nil && p.Ensure != nil
}

func (p *OptionalMyDataValuePatch) IsSetPatchAfter() bool {
  return p != nil && p.PatchAfter != nil
}

type OptionalMyDataValuePatchBuilder struct {
  obj *OptionalMyDataValuePatch
}

func NewOptionalMyDataValuePatchBuilder() *OptionalMyDataValuePatchBuilder{
  return &OptionalMyDataValuePatchBuilder{
    obj: NewOptionalMyDataValuePatch(),
  }
}

func (p OptionalMyDataValuePatchBuilder) Emit() *OptionalMyDataValuePatch{
  return &OptionalMyDataValuePatch{
    Clear: p.obj.Clear,
    Patch: p.obj.Patch,
    Ensure: p.obj.Ensure,
    PatchAfter: p.obj.PatchAfter,
  }
}

func (o *OptionalMyDataValuePatchBuilder) Clear(clear bool) *OptionalMyDataValuePatchBuilder {
  o.obj.Clear = clear
  return o
}

func (o *OptionalMyDataValuePatchBuilder) Patch(patch *MyDataValuePatch) *OptionalMyDataValuePatchBuilder {
  o.obj.Patch = patch
  return o
}

func (o *OptionalMyDataValuePatchBuilder) Ensure(ensure *MyData) *OptionalMyDataValuePatchBuilder {
  o.obj.Ensure = ensure
  return o
}

func (o *OptionalMyDataValuePatchBuilder) PatchAfter(patchAfter *MyDataValuePatch) *OptionalMyDataValuePatchBuilder {
  o.obj.PatchAfter = patchAfter
  return o
}

func (o *OptionalMyDataValuePatch) SetClear(clear bool) *OptionalMyDataValuePatch {
  o.Clear = clear
  return o
}

func (o *OptionalMyDataValuePatch) SetPatch(patch *MyDataValuePatch) *OptionalMyDataValuePatch {
  o.Patch = patch
  return o
}

func (o *OptionalMyDataValuePatch) SetEnsure(ensure *MyData) *OptionalMyDataValuePatch {
  o.Ensure = ensure
  return o
}

func (o *OptionalMyDataValuePatch) SetPatchAfter(patchAfter *MyDataValuePatch) *OptionalMyDataValuePatch {
  o.PatchAfter = patchAfter
  return o
}

func (p *OptionalMyDataValuePatch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OptionalMyDataValuePatch)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Clear = v
  }
  return nil
}

func (p *OptionalMyDataValuePatch)  ReadField3(iprot thrift.Protocol) error {
  p.Patch = NewMyDataValuePatch()
  if err := p.Patch.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Patch), err)
  }
  return nil
}

func (p *OptionalMyDataValuePatch)  ReadField4(iprot thrift.Protocol) error {
  p.Ensure = NewMyData()
  if err := p.Ensure.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ensure), err)
  }
  return nil
}

func (p *OptionalMyDataValuePatch)  ReadField5(iprot thrift.Protocol) error {
  p.PatchAfter = NewMyDataValuePatch()
  if err := p.PatchAfter.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PatchAfter), err)
  }
  return nil
}

func (p *OptionalMyDataValuePatch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("OptionalMyDataValuePatch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OptionalMyDataValuePatch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clear: ", p), err) }
  if err := oprot.WriteBool(bool(p.Clear)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clear (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clear: ", p), err) }
  return err
}

func (p *OptionalMyDataValuePatch) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patch", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:patch: ", p), err) }
  if err := p.Patch.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Patch), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:patch: ", p), err) }
  return err
}

func (p *OptionalMyDataValuePatch) writeField4(oprot thrift.Protocol) (err error) {
  if p.IsSetEnsure() {
    if err := oprot.WriteFieldBegin("ensure", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ensure: ", p), err) }
    if err := p.Ensure.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ensure), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ensure: ", p), err) }
  }
  return err
}

func (p *OptionalMyDataValuePatch) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patchAfter", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:patchAfter: ", p), err) }
  if err := p.PatchAfter.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PatchAfter), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:patchAfter: ", p), err) }
  return err
}

func (p *OptionalMyDataValuePatch) String() string {
  if p == nil {
    return "<nil>"
  }

  clearVal := fmt.Sprintf("%v", p.Clear)
  var patchVal string
  if p.Patch == nil {
    patchVal = "<nil>"
  } else {
    patchVal = fmt.Sprintf("%v", p.Patch)
  }
  var ensureVal string
  if p.Ensure == nil {
    ensureVal = "<nil>"
  } else {
    ensureVal = fmt.Sprintf("%v", p.Ensure)
  }
  var patchAfterVal string
  if p.PatchAfter == nil {
    patchAfterVal = "<nil>"
  } else {
    patchAfterVal = fmt.Sprintf("%v", p.PatchAfter)
  }
  return fmt.Sprintf("OptionalMyDataValuePatch({Clear:%s Patch:%s Ensure:%s PatchAfter:%s})", clearVal, patchVal, ensureVal, patchAfterVal)
}

// Attributes:
//  - Option1
//  - Option2
type MyUnionPatch struct {
  Option1 *patch1.StringPatch `thrift:"option1,1" db:"option1" json:"option1"`
  Option2 *patch1.I32Patch `thrift:"option2,2" db:"option2" json:"option2"`
}

func NewMyUnionPatch() *MyUnionPatch {
  return &MyUnionPatch{
    Option1: patch1.NewStringPatch(),
    Option2: patch1.NewI32Patch(),
  }
}

var MyUnionPatch_Option1_DEFAULT *patch1.StringPatch
func (p *MyUnionPatch) GetOption1() *patch1.StringPatch {
  if !p.IsSetOption1() {
    return MyUnionPatch_Option1_DEFAULT
  }
return p.Option1
}
var MyUnionPatch_Option2_DEFAULT *patch1.I32Patch
func (p *MyUnionPatch) GetOption2() *patch1.I32Patch {
  if !p.IsSetOption2() {
    return MyUnionPatch_Option2_DEFAULT
  }
return p.Option2
}
func (p *MyUnionPatch) IsSetOption1() bool {
  return p != nil && p.Option1 != nil
}

func (p *MyUnionPatch) IsSetOption2() bool {
  return p != nil && p.Option2 != nil
}

type MyUnionPatchBuilder struct {
  obj *MyUnionPatch
}

func NewMyUnionPatchBuilder() *MyUnionPatchBuilder{
  return &MyUnionPatchBuilder{
    obj: NewMyUnionPatch(),
  }
}

func (p MyUnionPatchBuilder) Emit() *MyUnionPatch{
  return &MyUnionPatch{
    Option1: p.obj.Option1,
    Option2: p.obj.Option2,
  }
}

func (m *MyUnionPatchBuilder) Option1(option1 *patch1.StringPatch) *MyUnionPatchBuilder {
  m.obj.Option1 = option1
  return m
}

func (m *MyUnionPatchBuilder) Option2(option2 *patch1.I32Patch) *MyUnionPatchBuilder {
  m.obj.Option2 = option2
  return m
}

func (m *MyUnionPatch) SetOption1(option1 *patch1.StringPatch) *MyUnionPatch {
  m.Option1 = option1
  return m
}

func (m *MyUnionPatch) SetOption2(option2 *patch1.I32Patch) *MyUnionPatch {
  m.Option2 = option2
  return m
}

func (p *MyUnionPatch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyUnionPatch)  ReadField1(iprot thrift.Protocol) error {
  p.Option1 = patch1.NewStringPatch()
  if err := p.Option1.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Option1), err)
  }
  return nil
}

func (p *MyUnionPatch)  ReadField2(iprot thrift.Protocol) error {
  p.Option2 = patch1.NewI32Patch()
  if err := p.Option2.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Option2), err)
  }
  return nil
}

func (p *MyUnionPatch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyUnionPatch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyUnionPatch) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("option1", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:option1: ", p), err) }
  if err := p.Option1.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Option1), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:option1: ", p), err) }
  return err
}

func (p *MyUnionPatch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("option2", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:option2: ", p), err) }
  if err := p.Option2.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Option2), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:option2: ", p), err) }
  return err
}

func (p *MyUnionPatch) String() string {
  if p == nil {
    return "<nil>"
  }

  var option1Val string
  if p.Option1 == nil {
    option1Val = "<nil>"
  } else {
    option1Val = fmt.Sprintf("%v", p.Option1)
  }
  var option2Val string
  if p.Option2 == nil {
    option2Val = "<nil>"
  } else {
    option2Val = fmt.Sprintf("%v", p.Option2)
  }
  return fmt.Sprintf("MyUnionPatch({Option1:%s Option2:%s})", option1Val, option2Val)
}

// Attributes:
//  - Clear: Clears any set value. Applies first.
//  - Patch: Patches any set value. Applies second.
//  - Ensure: Assigns the value, if not already set. Applies third.
//  - PatchAfter: Patches any set value, including newly set values. Applies fourth.
type MyUnionValuePatch struct {
  // unused field # 1
  Clear bool `thrift:"clear,2" db:"clear" json:"clear"`
  Patch *MyUnionPatch `thrift:"patch,3" db:"patch" json:"patch"`
  Ensure *MyUnion `thrift:"ensure,4" db:"ensure" json:"ensure"`
  PatchAfter *MyUnionPatch `thrift:"patchAfter,5" db:"patchAfter" json:"patchAfter"`
}

func NewMyUnionValuePatch() *MyUnionValuePatch {
  return &MyUnionValuePatch{
    Patch: NewMyUnionPatch(),
    PatchAfter: NewMyUnionPatch(),
  }
}


func (p *MyUnionValuePatch) GetClear() bool {
  return p.Clear
}
var MyUnionValuePatch_Patch_DEFAULT *MyUnionPatch
func (p *MyUnionValuePatch) GetPatch() *MyUnionPatch {
  if !p.IsSetPatch() {
    return MyUnionValuePatch_Patch_DEFAULT
  }
return p.Patch
}
var MyUnionValuePatch_Ensure_DEFAULT *MyUnion
func (p *MyUnionValuePatch) GetEnsure() *MyUnion {
  if !p.IsSetEnsure() {
    return MyUnionValuePatch_Ensure_DEFAULT
  }
return p.Ensure
}
var MyUnionValuePatch_PatchAfter_DEFAULT *MyUnionPatch
func (p *MyUnionValuePatch) GetPatchAfter() *MyUnionPatch {
  if !p.IsSetPatchAfter() {
    return MyUnionValuePatch_PatchAfter_DEFAULT
  }
return p.PatchAfter
}
func (p *MyUnionValuePatch) IsSetPatch() bool {
  return p != nil && p.Patch != nil
}

func (p *MyUnionValuePatch) IsSetEnsure() bool {
  return p != nil && p.Ensure != nil
}

func (p *MyUnionValuePatch) IsSetPatchAfter() bool {
  return p != nil && p.PatchAfter != nil
}

type MyUnionValuePatchBuilder struct {
  obj *MyUnionValuePatch
}

func NewMyUnionValuePatchBuilder() *MyUnionValuePatchBuilder{
  return &MyUnionValuePatchBuilder{
    obj: NewMyUnionValuePatch(),
  }
}

func (p MyUnionValuePatchBuilder) Emit() *MyUnionValuePatch{
  return &MyUnionValuePatch{
    Clear: p.obj.Clear,
    Patch: p.obj.Patch,
    Ensure: p.obj.Ensure,
    PatchAfter: p.obj.PatchAfter,
  }
}

func (m *MyUnionValuePatchBuilder) Clear(clear bool) *MyUnionValuePatchBuilder {
  m.obj.Clear = clear
  return m
}

func (m *MyUnionValuePatchBuilder) Patch(patch *MyUnionPatch) *MyUnionValuePatchBuilder {
  m.obj.Patch = patch
  return m
}

func (m *MyUnionValuePatchBuilder) Ensure(ensure *MyUnion) *MyUnionValuePatchBuilder {
  m.obj.Ensure = ensure
  return m
}

func (m *MyUnionValuePatchBuilder) PatchAfter(patchAfter *MyUnionPatch) *MyUnionValuePatchBuilder {
  m.obj.PatchAfter = patchAfter
  return m
}

func (m *MyUnionValuePatch) SetClear(clear bool) *MyUnionValuePatch {
  m.Clear = clear
  return m
}

func (m *MyUnionValuePatch) SetPatch(patch *MyUnionPatch) *MyUnionValuePatch {
  m.Patch = patch
  return m
}

func (m *MyUnionValuePatch) SetEnsure(ensure *MyUnion) *MyUnionValuePatch {
  m.Ensure = ensure
  return m
}

func (m *MyUnionValuePatch) SetPatchAfter(patchAfter *MyUnionPatch) *MyUnionValuePatch {
  m.PatchAfter = patchAfter
  return m
}

func (p *MyUnionValuePatch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyUnionValuePatch)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Clear = v
  }
  return nil
}

func (p *MyUnionValuePatch)  ReadField3(iprot thrift.Protocol) error {
  p.Patch = NewMyUnionPatch()
  if err := p.Patch.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Patch), err)
  }
  return nil
}

func (p *MyUnionValuePatch)  ReadField4(iprot thrift.Protocol) error {
  p.Ensure = NewMyUnion()
  if err := p.Ensure.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ensure), err)
  }
  return nil
}

func (p *MyUnionValuePatch)  ReadField5(iprot thrift.Protocol) error {
  p.PatchAfter = NewMyUnionPatch()
  if err := p.PatchAfter.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PatchAfter), err)
  }
  return nil
}

func (p *MyUnionValuePatch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyUnionValuePatch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyUnionValuePatch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clear: ", p), err) }
  if err := oprot.WriteBool(bool(p.Clear)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clear (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clear: ", p), err) }
  return err
}

func (p *MyUnionValuePatch) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patch", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:patch: ", p), err) }
  if err := p.Patch.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Patch), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:patch: ", p), err) }
  return err
}

func (p *MyUnionValuePatch) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("ensure", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ensure: ", p), err) }
  if err := p.Ensure.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ensure), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ensure: ", p), err) }
  return err
}

func (p *MyUnionValuePatch) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patchAfter", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:patchAfter: ", p), err) }
  if err := p.PatchAfter.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PatchAfter), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:patchAfter: ", p), err) }
  return err
}

func (p *MyUnionValuePatch) String() string {
  if p == nil {
    return "<nil>"
  }

  clearVal := fmt.Sprintf("%v", p.Clear)
  var patchVal string
  if p.Patch == nil {
    patchVal = "<nil>"
  } else {
    patchVal = fmt.Sprintf("%v", p.Patch)
  }
  var ensureVal string
  if p.Ensure == nil {
    ensureVal = "<nil>"
  } else {
    ensureVal = fmt.Sprintf("%v", p.Ensure)
  }
  var patchAfterVal string
  if p.PatchAfter == nil {
    patchAfterVal = "<nil>"
  } else {
    patchAfterVal = fmt.Sprintf("%v", p.PatchAfter)
  }
  return fmt.Sprintf("MyUnionValuePatch({Clear:%s Patch:%s Ensure:%s PatchAfter:%s})", clearVal, patchVal, ensureVal, patchAfterVal)
}

// Attributes:
//  - Clear: Clears any set value. Applies first.
//  - Patch: Patches any set value. Applies second.
//  - Ensure: Assigns the value, if not already set. Applies third.
//  - PatchAfter: Patches any set value, including newly set values. Applies fourth.
type OptionalMyUnionValuePatch struct {
  // unused field # 1
  Clear bool `thrift:"clear,2" db:"clear" json:"clear"`
  Patch *MyUnionValuePatch `thrift:"patch,3" db:"patch" json:"patch"`
  Ensure *MyUnion `thrift:"ensure,4,optional" db:"ensure" json:"ensure,omitempty"`
  PatchAfter *MyUnionValuePatch `thrift:"patchAfter,5" db:"patchAfter" json:"patchAfter"`
}

func NewOptionalMyUnionValuePatch() *OptionalMyUnionValuePatch {
  return &OptionalMyUnionValuePatch{
    Patch: NewMyUnionValuePatch(),
    PatchAfter: NewMyUnionValuePatch(),
  }
}


func (p *OptionalMyUnionValuePatch) GetClear() bool {
  return p.Clear
}
var OptionalMyUnionValuePatch_Patch_DEFAULT *MyUnionValuePatch
func (p *OptionalMyUnionValuePatch) GetPatch() *MyUnionValuePatch {
  if !p.IsSetPatch() {
    return OptionalMyUnionValuePatch_Patch_DEFAULT
  }
return p.Patch
}
var OptionalMyUnionValuePatch_Ensure_DEFAULT *MyUnion
func (p *OptionalMyUnionValuePatch) GetEnsure() *MyUnion {
  if !p.IsSetEnsure() {
    return OptionalMyUnionValuePatch_Ensure_DEFAULT
  }
return p.Ensure
}
var OptionalMyUnionValuePatch_PatchAfter_DEFAULT *MyUnionValuePatch
func (p *OptionalMyUnionValuePatch) GetPatchAfter() *MyUnionValuePatch {
  if !p.IsSetPatchAfter() {
    return OptionalMyUnionValuePatch_PatchAfter_DEFAULT
  }
return p.PatchAfter
}
func (p *OptionalMyUnionValuePatch) IsSetPatch() bool {
  return p != nil && p.Patch != nil
}

func (p *OptionalMyUnionValuePatch) IsSetEnsure() bool {
  return p != nil && p.Ensure != nil
}

func (p *OptionalMyUnionValuePatch) IsSetPatchAfter() bool {
  return p != nil && p.PatchAfter != nil
}

type OptionalMyUnionValuePatchBuilder struct {
  obj *OptionalMyUnionValuePatch
}

func NewOptionalMyUnionValuePatchBuilder() *OptionalMyUnionValuePatchBuilder{
  return &OptionalMyUnionValuePatchBuilder{
    obj: NewOptionalMyUnionValuePatch(),
  }
}

func (p OptionalMyUnionValuePatchBuilder) Emit() *OptionalMyUnionValuePatch{
  return &OptionalMyUnionValuePatch{
    Clear: p.obj.Clear,
    Patch: p.obj.Patch,
    Ensure: p.obj.Ensure,
    PatchAfter: p.obj.PatchAfter,
  }
}

func (o *OptionalMyUnionValuePatchBuilder) Clear(clear bool) *OptionalMyUnionValuePatchBuilder {
  o.obj.Clear = clear
  return o
}

func (o *OptionalMyUnionValuePatchBuilder) Patch(patch *MyUnionValuePatch) *OptionalMyUnionValuePatchBuilder {
  o.obj.Patch = patch
  return o
}

func (o *OptionalMyUnionValuePatchBuilder) Ensure(ensure *MyUnion) *OptionalMyUnionValuePatchBuilder {
  o.obj.Ensure = ensure
  return o
}

func (o *OptionalMyUnionValuePatchBuilder) PatchAfter(patchAfter *MyUnionValuePatch) *OptionalMyUnionValuePatchBuilder {
  o.obj.PatchAfter = patchAfter
  return o
}

func (o *OptionalMyUnionValuePatch) SetClear(clear bool) *OptionalMyUnionValuePatch {
  o.Clear = clear
  return o
}

func (o *OptionalMyUnionValuePatch) SetPatch(patch *MyUnionValuePatch) *OptionalMyUnionValuePatch {
  o.Patch = patch
  return o
}

func (o *OptionalMyUnionValuePatch) SetEnsure(ensure *MyUnion) *OptionalMyUnionValuePatch {
  o.Ensure = ensure
  return o
}

func (o *OptionalMyUnionValuePatch) SetPatchAfter(patchAfter *MyUnionValuePatch) *OptionalMyUnionValuePatch {
  o.PatchAfter = patchAfter
  return o
}

func (p *OptionalMyUnionValuePatch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OptionalMyUnionValuePatch)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Clear = v
  }
  return nil
}

func (p *OptionalMyUnionValuePatch)  ReadField3(iprot thrift.Protocol) error {
  p.Patch = NewMyUnionValuePatch()
  if err := p.Patch.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Patch), err)
  }
  return nil
}

func (p *OptionalMyUnionValuePatch)  ReadField4(iprot thrift.Protocol) error {
  p.Ensure = NewMyUnion()
  if err := p.Ensure.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ensure), err)
  }
  return nil
}

func (p *OptionalMyUnionValuePatch)  ReadField5(iprot thrift.Protocol) error {
  p.PatchAfter = NewMyUnionValuePatch()
  if err := p.PatchAfter.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PatchAfter), err)
  }
  return nil
}

func (p *OptionalMyUnionValuePatch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("OptionalMyUnionValuePatch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OptionalMyUnionValuePatch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clear: ", p), err) }
  if err := oprot.WriteBool(bool(p.Clear)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clear (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clear: ", p), err) }
  return err
}

func (p *OptionalMyUnionValuePatch) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patch", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:patch: ", p), err) }
  if err := p.Patch.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Patch), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:patch: ", p), err) }
  return err
}

func (p *OptionalMyUnionValuePatch) writeField4(oprot thrift.Protocol) (err error) {
  if p.IsSetEnsure() {
    if err := oprot.WriteFieldBegin("ensure", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ensure: ", p), err) }
    if err := p.Ensure.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ensure), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ensure: ", p), err) }
  }
  return err
}

func (p *OptionalMyUnionValuePatch) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patchAfter", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:patchAfter: ", p), err) }
  if err := p.PatchAfter.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PatchAfter), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:patchAfter: ", p), err) }
  return err
}

func (p *OptionalMyUnionValuePatch) String() string {
  if p == nil {
    return "<nil>"
  }

  clearVal := fmt.Sprintf("%v", p.Clear)
  var patchVal string
  if p.Patch == nil {
    patchVal = "<nil>"
  } else {
    patchVal = fmt.Sprintf("%v", p.Patch)
  }
  var ensureVal string
  if p.Ensure == nil {
    ensureVal = "<nil>"
  } else {
    ensureVal = fmt.Sprintf("%v", p.Ensure)
  }
  var patchAfterVal string
  if p.PatchAfter == nil {
    patchAfterVal = "<nil>"
  } else {
    patchAfterVal = fmt.Sprintf("%v", p.PatchAfter)
  }
  return fmt.Sprintf("OptionalMyUnionValuePatch({Clear:%s Patch:%s Ensure:%s PatchAfter:%s})", clearVal, patchVal, ensureVal, patchAfterVal)
}

// Attributes:
//  - BoolVal
//  - ByteVal
//  - I16Val
//  - I32Val
//  - I64Val
//  - FloatVal
//  - DoubleVal
//  - StringVal
//  - BinaryVal
//  - StructVal
//  - OptBoolVal
//  - OptByteVal
//  - OptI16Val
//  - OptI32Val
//  - OptI64Val
//  - OptFloatVal
//  - OptDoubleVal
//  - OptStringVal
//  - OptBinaryVal
//  - OptStructVal
//  - OptListVal
//  - OptSetVal
//  - OptMapVal
//  - UnionVal
type MyStructPatch struct {
  BoolVal *patch1.BoolPatch `thrift:"boolVal,1" db:"boolVal" json:"boolVal"`
  ByteVal *patch1.BytePatch `thrift:"byteVal,2" db:"byteVal" json:"byteVal"`
  I16Val *patch1.I16Patch `thrift:"i16Val,3" db:"i16Val" json:"i16Val"`
  I32Val *patch1.I32Patch `thrift:"i32Val,4" db:"i32Val" json:"i32Val"`
  I64Val *patch1.I64Patch `thrift:"i64Val,5" db:"i64Val" json:"i64Val"`
  FloatVal *patch1.FloatPatch `thrift:"floatVal,6" db:"floatVal" json:"floatVal"`
  DoubleVal *patch1.DoublePatch `thrift:"doubleVal,7" db:"doubleVal" json:"doubleVal"`
  StringVal *patch1.StringPatch `thrift:"stringVal,8" db:"stringVal" json:"stringVal"`
  BinaryVal *patch1.BinaryPatch `thrift:"binaryVal,9" db:"binaryVal" json:"binaryVal"`
  StructVal *MyDataValuePatch `thrift:"structVal,10" db:"structVal" json:"structVal"`
  OptBoolVal *patch1.OptionalBoolPatch `thrift:"optBoolVal,11" db:"optBoolVal" json:"optBoolVal"`
  OptByteVal *patch1.OptionalBytePatch `thrift:"optByteVal,12" db:"optByteVal" json:"optByteVal"`
  OptI16Val *patch1.OptionalI16Patch `thrift:"optI16Val,13" db:"optI16Val" json:"optI16Val"`
  OptI32Val *patch1.OptionalI32Patch `thrift:"optI32Val,14" db:"optI32Val" json:"optI32Val"`
  OptI64Val *patch1.OptionalI64Patch `thrift:"optI64Val,15" db:"optI64Val" json:"optI64Val"`
  OptFloatVal *patch1.OptionalFloatPatch `thrift:"optFloatVal,16" db:"optFloatVal" json:"optFloatVal"`
  OptDoubleVal *patch1.OptionalDoublePatch `thrift:"optDoubleVal,17" db:"optDoubleVal" json:"optDoubleVal"`
  OptStringVal *patch1.OptionalStringPatch `thrift:"optStringVal,18" db:"optStringVal" json:"optStringVal"`
  OptBinaryVal *patch1.OptionalBinaryPatch `thrift:"optBinaryVal,19" db:"optBinaryVal" json:"optBinaryVal"`
  OptStructVal *OptionalMyDataValuePatch `thrift:"optStructVal,20" db:"optStructVal" json:"optStructVal"`
  OptListVal *OptionalMyStructField21Patch `thrift:"optListVal,21" db:"optListVal" json:"optListVal"`
  OptSetVal *OptionalMyStructField22Patch `thrift:"optSetVal,22" db:"optSetVal" json:"optSetVal"`
  OptMapVal *OptionalMyStructField23Patch `thrift:"optMapVal,23" db:"optMapVal" json:"optMapVal"`
  // unused fields # 24 to 29
  UnionVal *MyUnionValuePatch `thrift:"unionVal,30" db:"unionVal" json:"unionVal"`
}

func NewMyStructPatch() *MyStructPatch {
  return &MyStructPatch{
    BoolVal: patch1.NewBoolPatch(),
    ByteVal: patch1.NewBytePatch(),
    I16Val: patch1.NewI16Patch(),
    I32Val: patch1.NewI32Patch(),
    I64Val: patch1.NewI64Patch(),
    FloatVal: patch1.NewFloatPatch(),
    DoubleVal: patch1.NewDoublePatch(),
    StringVal: patch1.NewStringPatch(),
    BinaryVal: patch1.NewBinaryPatch(),
    StructVal: NewMyDataValuePatch(),
    OptBoolVal: patch1.NewOptionalBoolPatch(),
    OptByteVal: patch1.NewOptionalBytePatch(),
    OptI16Val: patch1.NewOptionalI16Patch(),
    OptI32Val: patch1.NewOptionalI32Patch(),
    OptI64Val: patch1.NewOptionalI64Patch(),
    OptFloatVal: patch1.NewOptionalFloatPatch(),
    OptDoubleVal: patch1.NewOptionalDoublePatch(),
    OptStringVal: patch1.NewOptionalStringPatch(),
    OptBinaryVal: patch1.NewOptionalBinaryPatch(),
    OptStructVal: NewOptionalMyDataValuePatch(),
    OptListVal: NewOptionalMyStructField21Patch(),
    OptSetVal: NewOptionalMyStructField22Patch(),
    OptMapVal: NewOptionalMyStructField23Patch(),
    UnionVal: NewMyUnionValuePatch(),
  }
}

var MyStructPatch_BoolVal_DEFAULT *patch1.BoolPatch
func (p *MyStructPatch) GetBoolVal() *patch1.BoolPatch {
  if !p.IsSetBoolVal() {
    return MyStructPatch_BoolVal_DEFAULT
  }
return p.BoolVal
}
var MyStructPatch_ByteVal_DEFAULT *patch1.BytePatch
func (p *MyStructPatch) GetByteVal() *patch1.BytePatch {
  if !p.IsSetByteVal() {
    return MyStructPatch_ByteVal_DEFAULT
  }
return p.ByteVal
}
var MyStructPatch_I16Val_DEFAULT *patch1.I16Patch
func (p *MyStructPatch) GetI16Val() *patch1.I16Patch {
  if !p.IsSetI16Val() {
    return MyStructPatch_I16Val_DEFAULT
  }
return p.I16Val
}
var MyStructPatch_I32Val_DEFAULT *patch1.I32Patch
func (p *MyStructPatch) GetI32Val() *patch1.I32Patch {
  if !p.IsSetI32Val() {
    return MyStructPatch_I32Val_DEFAULT
  }
return p.I32Val
}
var MyStructPatch_I64Val_DEFAULT *patch1.I64Patch
func (p *MyStructPatch) GetI64Val() *patch1.I64Patch {
  if !p.IsSetI64Val() {
    return MyStructPatch_I64Val_DEFAULT
  }
return p.I64Val
}
var MyStructPatch_FloatVal_DEFAULT *patch1.FloatPatch
func (p *MyStructPatch) GetFloatVal() *patch1.FloatPatch {
  if !p.IsSetFloatVal() {
    return MyStructPatch_FloatVal_DEFAULT
  }
return p.FloatVal
}
var MyStructPatch_DoubleVal_DEFAULT *patch1.DoublePatch
func (p *MyStructPatch) GetDoubleVal() *patch1.DoublePatch {
  if !p.IsSetDoubleVal() {
    return MyStructPatch_DoubleVal_DEFAULT
  }
return p.DoubleVal
}
var MyStructPatch_StringVal_DEFAULT *patch1.StringPatch
func (p *MyStructPatch) GetStringVal() *patch1.StringPatch {
  if !p.IsSetStringVal() {
    return MyStructPatch_StringVal_DEFAULT
  }
return p.StringVal
}
var MyStructPatch_BinaryVal_DEFAULT *patch1.BinaryPatch
func (p *MyStructPatch) GetBinaryVal() *patch1.BinaryPatch {
  if !p.IsSetBinaryVal() {
    return MyStructPatch_BinaryVal_DEFAULT
  }
return p.BinaryVal
}
var MyStructPatch_StructVal_DEFAULT *MyDataValuePatch
func (p *MyStructPatch) GetStructVal() *MyDataValuePatch {
  if !p.IsSetStructVal() {
    return MyStructPatch_StructVal_DEFAULT
  }
return p.StructVal
}
var MyStructPatch_OptBoolVal_DEFAULT *patch1.OptionalBoolPatch
func (p *MyStructPatch) GetOptBoolVal() *patch1.OptionalBoolPatch {
  if !p.IsSetOptBoolVal() {
    return MyStructPatch_OptBoolVal_DEFAULT
  }
return p.OptBoolVal
}
var MyStructPatch_OptByteVal_DEFAULT *patch1.OptionalBytePatch
func (p *MyStructPatch) GetOptByteVal() *patch1.OptionalBytePatch {
  if !p.IsSetOptByteVal() {
    return MyStructPatch_OptByteVal_DEFAULT
  }
return p.OptByteVal
}
var MyStructPatch_OptI16Val_DEFAULT *patch1.OptionalI16Patch
func (p *MyStructPatch) GetOptI16Val() *patch1.OptionalI16Patch {
  if !p.IsSetOptI16Val() {
    return MyStructPatch_OptI16Val_DEFAULT
  }
return p.OptI16Val
}
var MyStructPatch_OptI32Val_DEFAULT *patch1.OptionalI32Patch
func (p *MyStructPatch) GetOptI32Val() *patch1.OptionalI32Patch {
  if !p.IsSetOptI32Val() {
    return MyStructPatch_OptI32Val_DEFAULT
  }
return p.OptI32Val
}
var MyStructPatch_OptI64Val_DEFAULT *patch1.OptionalI64Patch
func (p *MyStructPatch) GetOptI64Val() *patch1.OptionalI64Patch {
  if !p.IsSetOptI64Val() {
    return MyStructPatch_OptI64Val_DEFAULT
  }
return p.OptI64Val
}
var MyStructPatch_OptFloatVal_DEFAULT *patch1.OptionalFloatPatch
func (p *MyStructPatch) GetOptFloatVal() *patch1.OptionalFloatPatch {
  if !p.IsSetOptFloatVal() {
    return MyStructPatch_OptFloatVal_DEFAULT
  }
return p.OptFloatVal
}
var MyStructPatch_OptDoubleVal_DEFAULT *patch1.OptionalDoublePatch
func (p *MyStructPatch) GetOptDoubleVal() *patch1.OptionalDoublePatch {
  if !p.IsSetOptDoubleVal() {
    return MyStructPatch_OptDoubleVal_DEFAULT
  }
return p.OptDoubleVal
}
var MyStructPatch_OptStringVal_DEFAULT *patch1.OptionalStringPatch
func (p *MyStructPatch) GetOptStringVal() *patch1.OptionalStringPatch {
  if !p.IsSetOptStringVal() {
    return MyStructPatch_OptStringVal_DEFAULT
  }
return p.OptStringVal
}
var MyStructPatch_OptBinaryVal_DEFAULT *patch1.OptionalBinaryPatch
func (p *MyStructPatch) GetOptBinaryVal() *patch1.OptionalBinaryPatch {
  if !p.IsSetOptBinaryVal() {
    return MyStructPatch_OptBinaryVal_DEFAULT
  }
return p.OptBinaryVal
}
var MyStructPatch_OptStructVal_DEFAULT *OptionalMyDataValuePatch
func (p *MyStructPatch) GetOptStructVal() *OptionalMyDataValuePatch {
  if !p.IsSetOptStructVal() {
    return MyStructPatch_OptStructVal_DEFAULT
  }
return p.OptStructVal
}
var MyStructPatch_OptListVal_DEFAULT *OptionalMyStructField21Patch
func (p *MyStructPatch) GetOptListVal() *OptionalMyStructField21Patch {
  if !p.IsSetOptListVal() {
    return MyStructPatch_OptListVal_DEFAULT
  }
return p.OptListVal
}
var MyStructPatch_OptSetVal_DEFAULT *OptionalMyStructField22Patch
func (p *MyStructPatch) GetOptSetVal() *OptionalMyStructField22Patch {
  if !p.IsSetOptSetVal() {
    return MyStructPatch_OptSetVal_DEFAULT
  }
return p.OptSetVal
}
var MyStructPatch_OptMapVal_DEFAULT *OptionalMyStructField23Patch
func (p *MyStructPatch) GetOptMapVal() *OptionalMyStructField23Patch {
  if !p.IsSetOptMapVal() {
    return MyStructPatch_OptMapVal_DEFAULT
  }
return p.OptMapVal
}
var MyStructPatch_UnionVal_DEFAULT *MyUnionValuePatch
func (p *MyStructPatch) GetUnionVal() *MyUnionValuePatch {
  if !p.IsSetUnionVal() {
    return MyStructPatch_UnionVal_DEFAULT
  }
return p.UnionVal
}
func (p *MyStructPatch) IsSetBoolVal() bool {
  return p != nil && p.BoolVal != nil
}

func (p *MyStructPatch) IsSetByteVal() bool {
  return p != nil && p.ByteVal != nil
}

func (p *MyStructPatch) IsSetI16Val() bool {
  return p != nil && p.I16Val != nil
}

func (p *MyStructPatch) IsSetI32Val() bool {
  return p != nil && p.I32Val != nil
}

func (p *MyStructPatch) IsSetI64Val() bool {
  return p != nil && p.I64Val != nil
}

func (p *MyStructPatch) IsSetFloatVal() bool {
  return p != nil && p.FloatVal != nil
}

func (p *MyStructPatch) IsSetDoubleVal() bool {
  return p != nil && p.DoubleVal != nil
}

func (p *MyStructPatch) IsSetStringVal() bool {
  return p != nil && p.StringVal != nil
}

func (p *MyStructPatch) IsSetBinaryVal() bool {
  return p != nil && p.BinaryVal != nil
}

func (p *MyStructPatch) IsSetStructVal() bool {
  return p != nil && p.StructVal != nil
}

func (p *MyStructPatch) IsSetOptBoolVal() bool {
  return p != nil && p.OptBoolVal != nil
}

func (p *MyStructPatch) IsSetOptByteVal() bool {
  return p != nil && p.OptByteVal != nil
}

func (p *MyStructPatch) IsSetOptI16Val() bool {
  return p != nil && p.OptI16Val != nil
}

func (p *MyStructPatch) IsSetOptI32Val() bool {
  return p != nil && p.OptI32Val != nil
}

func (p *MyStructPatch) IsSetOptI64Val() bool {
  return p != nil && p.OptI64Val != nil
}

func (p *MyStructPatch) IsSetOptFloatVal() bool {
  return p != nil && p.OptFloatVal != nil
}

func (p *MyStructPatch) IsSetOptDoubleVal() bool {
  return p != nil && p.OptDoubleVal != nil
}

func (p *MyStructPatch) IsSetOptStringVal() bool {
  return p != nil && p.OptStringVal != nil
}

func (p *MyStructPatch) IsSetOptBinaryVal() bool {
  return p != nil && p.OptBinaryVal != nil
}

func (p *MyStructPatch) IsSetOptStructVal() bool {
  return p != nil && p.OptStructVal != nil
}

func (p *MyStructPatch) IsSetOptListVal() bool {
  return p != nil && p.OptListVal != nil
}

func (p *MyStructPatch) IsSetOptSetVal() bool {
  return p != nil && p.OptSetVal != nil
}

func (p *MyStructPatch) IsSetOptMapVal() bool {
  return p != nil && p.OptMapVal != nil
}

func (p *MyStructPatch) IsSetUnionVal() bool {
  return p != nil && p.UnionVal != nil
}

type MyStructPatchBuilder struct {
  obj *MyStructPatch
}

func NewMyStructPatchBuilder() *MyStructPatchBuilder{
  return &MyStructPatchBuilder{
    obj: NewMyStructPatch(),
  }
}

func (p MyStructPatchBuilder) Emit() *MyStructPatch{
  return &MyStructPatch{
    BoolVal: p.obj.BoolVal,
    ByteVal: p.obj.ByteVal,
    I16Val: p.obj.I16Val,
    I32Val: p.obj.I32Val,
    I64Val: p.obj.I64Val,
    FloatVal: p.obj.FloatVal,
    DoubleVal: p.obj.DoubleVal,
    StringVal: p.obj.StringVal,
    BinaryVal: p.obj.BinaryVal,
    StructVal: p.obj.StructVal,
    OptBoolVal: p.obj.OptBoolVal,
    OptByteVal: p.obj.OptByteVal,
    OptI16Val: p.obj.OptI16Val,
    OptI32Val: p.obj.OptI32Val,
    OptI64Val: p.obj.OptI64Val,
    OptFloatVal: p.obj.OptFloatVal,
    OptDoubleVal: p.obj.OptDoubleVal,
    OptStringVal: p.obj.OptStringVal,
    OptBinaryVal: p.obj.OptBinaryVal,
    OptStructVal: p.obj.OptStructVal,
    OptListVal: p.obj.OptListVal,
    OptSetVal: p.obj.OptSetVal,
    OptMapVal: p.obj.OptMapVal,
    UnionVal: p.obj.UnionVal,
  }
}

func (m *MyStructPatchBuilder) BoolVal(boolVal *patch1.BoolPatch) *MyStructPatchBuilder {
  m.obj.BoolVal = boolVal
  return m
}

func (m *MyStructPatchBuilder) ByteVal(byteVal *patch1.BytePatch) *MyStructPatchBuilder {
  m.obj.ByteVal = byteVal
  return m
}

func (m *MyStructPatchBuilder) I16Val(i16Val *patch1.I16Patch) *MyStructPatchBuilder {
  m.obj.I16Val = i16Val
  return m
}

func (m *MyStructPatchBuilder) I32Val(i32Val *patch1.I32Patch) *MyStructPatchBuilder {
  m.obj.I32Val = i32Val
  return m
}

func (m *MyStructPatchBuilder) I64Val(i64Val *patch1.I64Patch) *MyStructPatchBuilder {
  m.obj.I64Val = i64Val
  return m
}

func (m *MyStructPatchBuilder) FloatVal(floatVal *patch1.FloatPatch) *MyStructPatchBuilder {
  m.obj.FloatVal = floatVal
  return m
}

func (m *MyStructPatchBuilder) DoubleVal(doubleVal *patch1.DoublePatch) *MyStructPatchBuilder {
  m.obj.DoubleVal = doubleVal
  return m
}

func (m *MyStructPatchBuilder) StringVal(stringVal *patch1.StringPatch) *MyStructPatchBuilder {
  m.obj.StringVal = stringVal
  return m
}

func (m *MyStructPatchBuilder) BinaryVal(binaryVal *patch1.BinaryPatch) *MyStructPatchBuilder {
  m.obj.BinaryVal = binaryVal
  return m
}

func (m *MyStructPatchBuilder) StructVal(structVal *MyDataValuePatch) *MyStructPatchBuilder {
  m.obj.StructVal = structVal
  return m
}

func (m *MyStructPatchBuilder) OptBoolVal(optBoolVal *patch1.OptionalBoolPatch) *MyStructPatchBuilder {
  m.obj.OptBoolVal = optBoolVal
  return m
}

func (m *MyStructPatchBuilder) OptByteVal(optByteVal *patch1.OptionalBytePatch) *MyStructPatchBuilder {
  m.obj.OptByteVal = optByteVal
  return m
}

func (m *MyStructPatchBuilder) OptI16Val(optI16Val *patch1.OptionalI16Patch) *MyStructPatchBuilder {
  m.obj.OptI16Val = optI16Val
  return m
}

func (m *MyStructPatchBuilder) OptI32Val(optI32Val *patch1.OptionalI32Patch) *MyStructPatchBuilder {
  m.obj.OptI32Val = optI32Val
  return m
}

func (m *MyStructPatchBuilder) OptI64Val(optI64Val *patch1.OptionalI64Patch) *MyStructPatchBuilder {
  m.obj.OptI64Val = optI64Val
  return m
}

func (m *MyStructPatchBuilder) OptFloatVal(optFloatVal *patch1.OptionalFloatPatch) *MyStructPatchBuilder {
  m.obj.OptFloatVal = optFloatVal
  return m
}

func (m *MyStructPatchBuilder) OptDoubleVal(optDoubleVal *patch1.OptionalDoublePatch) *MyStructPatchBuilder {
  m.obj.OptDoubleVal = optDoubleVal
  return m
}

func (m *MyStructPatchBuilder) OptStringVal(optStringVal *patch1.OptionalStringPatch) *MyStructPatchBuilder {
  m.obj.OptStringVal = optStringVal
  return m
}

func (m *MyStructPatchBuilder) OptBinaryVal(optBinaryVal *patch1.OptionalBinaryPatch) *MyStructPatchBuilder {
  m.obj.OptBinaryVal = optBinaryVal
  return m
}

func (m *MyStructPatchBuilder) OptStructVal(optStructVal *OptionalMyDataValuePatch) *MyStructPatchBuilder {
  m.obj.OptStructVal = optStructVal
  return m
}

func (m *MyStructPatchBuilder) OptListVal(optListVal *OptionalMyStructField21Patch) *MyStructPatchBuilder {
  m.obj.OptListVal = optListVal
  return m
}

func (m *MyStructPatchBuilder) OptSetVal(optSetVal *OptionalMyStructField22Patch) *MyStructPatchBuilder {
  m.obj.OptSetVal = optSetVal
  return m
}

func (m *MyStructPatchBuilder) OptMapVal(optMapVal *OptionalMyStructField23Patch) *MyStructPatchBuilder {
  m.obj.OptMapVal = optMapVal
  return m
}

func (m *MyStructPatchBuilder) UnionVal(unionVal *MyUnionValuePatch) *MyStructPatchBuilder {
  m.obj.UnionVal = unionVal
  return m
}

func (m *MyStructPatch) SetBoolVal(boolVal *patch1.BoolPatch) *MyStructPatch {
  m.BoolVal = boolVal
  return m
}

func (m *MyStructPatch) SetByteVal(byteVal *patch1.BytePatch) *MyStructPatch {
  m.ByteVal = byteVal
  return m
}

func (m *MyStructPatch) SetI16Val(i16Val *patch1.I16Patch) *MyStructPatch {
  m.I16Val = i16Val
  return m
}

func (m *MyStructPatch) SetI32Val(i32Val *patch1.I32Patch) *MyStructPatch {
  m.I32Val = i32Val
  return m
}

func (m *MyStructPatch) SetI64Val(i64Val *patch1.I64Patch) *MyStructPatch {
  m.I64Val = i64Val
  return m
}

func (m *MyStructPatch) SetFloatVal(floatVal *patch1.FloatPatch) *MyStructPatch {
  m.FloatVal = floatVal
  return m
}

func (m *MyStructPatch) SetDoubleVal(doubleVal *patch1.DoublePatch) *MyStructPatch {
  m.DoubleVal = doubleVal
  return m
}

func (m *MyStructPatch) SetStringVal(stringVal *patch1.StringPatch) *MyStructPatch {
  m.StringVal = stringVal
  return m
}

func (m *MyStructPatch) SetBinaryVal(binaryVal *patch1.BinaryPatch) *MyStructPatch {
  m.BinaryVal = binaryVal
  return m
}

func (m *MyStructPatch) SetStructVal(structVal *MyDataValuePatch) *MyStructPatch {
  m.StructVal = structVal
  return m
}

func (m *MyStructPatch) SetOptBoolVal(optBoolVal *patch1.OptionalBoolPatch) *MyStructPatch {
  m.OptBoolVal = optBoolVal
  return m
}

func (m *MyStructPatch) SetOptByteVal(optByteVal *patch1.OptionalBytePatch) *MyStructPatch {
  m.OptByteVal = optByteVal
  return m
}

func (m *MyStructPatch) SetOptI16Val(optI16Val *patch1.OptionalI16Patch) *MyStructPatch {
  m.OptI16Val = optI16Val
  return m
}

func (m *MyStructPatch) SetOptI32Val(optI32Val *patch1.OptionalI32Patch) *MyStructPatch {
  m.OptI32Val = optI32Val
  return m
}

func (m *MyStructPatch) SetOptI64Val(optI64Val *patch1.OptionalI64Patch) *MyStructPatch {
  m.OptI64Val = optI64Val
  return m
}

func (m *MyStructPatch) SetOptFloatVal(optFloatVal *patch1.OptionalFloatPatch) *MyStructPatch {
  m.OptFloatVal = optFloatVal
  return m
}

func (m *MyStructPatch) SetOptDoubleVal(optDoubleVal *patch1.OptionalDoublePatch) *MyStructPatch {
  m.OptDoubleVal = optDoubleVal
  return m
}

func (m *MyStructPatch) SetOptStringVal(optStringVal *patch1.OptionalStringPatch) *MyStructPatch {
  m.OptStringVal = optStringVal
  return m
}

func (m *MyStructPatch) SetOptBinaryVal(optBinaryVal *patch1.OptionalBinaryPatch) *MyStructPatch {
  m.OptBinaryVal = optBinaryVal
  return m
}

func (m *MyStructPatch) SetOptStructVal(optStructVal *OptionalMyDataValuePatch) *MyStructPatch {
  m.OptStructVal = optStructVal
  return m
}

func (m *MyStructPatch) SetOptListVal(optListVal *OptionalMyStructField21Patch) *MyStructPatch {
  m.OptListVal = optListVal
  return m
}

func (m *MyStructPatch) SetOptSetVal(optSetVal *OptionalMyStructField22Patch) *MyStructPatch {
  m.OptSetVal = optSetVal
  return m
}

func (m *MyStructPatch) SetOptMapVal(optMapVal *OptionalMyStructField23Patch) *MyStructPatch {
  m.OptMapVal = optMapVal
  return m
}

func (m *MyStructPatch) SetUnionVal(unionVal *MyUnionValuePatch) *MyStructPatch {
  m.UnionVal = unionVal
  return m
}

func (p *MyStructPatch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
    case 11:
      if err := p.ReadField11(iprot); err != nil {
        return err
      }
    case 12:
      if err := p.ReadField12(iprot); err != nil {
        return err
      }
    case 13:
      if err := p.ReadField13(iprot); err != nil {
        return err
      }
    case 14:
      if err := p.ReadField14(iprot); err != nil {
        return err
      }
    case 15:
      if err := p.ReadField15(iprot); err != nil {
        return err
      }
    case 16:
      if err := p.ReadField16(iprot); err != nil {
        return err
      }
    case 17:
      if err := p.ReadField17(iprot); err != nil {
        return err
      }
    case 18:
      if err := p.ReadField18(iprot); err != nil {
        return err
      }
    case 19:
      if err := p.ReadField19(iprot); err != nil {
        return err
      }
    case 20:
      if err := p.ReadField20(iprot); err != nil {
        return err
      }
    case 21:
      if err := p.ReadField21(iprot); err != nil {
        return err
      }
    case 22:
      if err := p.ReadField22(iprot); err != nil {
        return err
      }
    case 23:
      if err := p.ReadField23(iprot); err != nil {
        return err
      }
    case 30:
      if err := p.ReadField30(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyStructPatch)  ReadField1(iprot thrift.Protocol) error {
  p.BoolVal = patch1.NewBoolPatch()
  if err := p.BoolVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BoolVal), err)
  }
  return nil
}

func (p *MyStructPatch)  ReadField2(iprot thrift.Protocol) error {
  p.ByteVal = patch1.NewBytePatch()
  if err := p.ByteVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ByteVal), err)
  }
  return nil
}

func (p *MyStructPatch)  ReadField3(iprot thrift.Protocol) error {
  p.I16Val = patch1.NewI16Patch()
  if err := p.I16Val.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.I16Val), err)
  }
  return nil
}

func (p *MyStructPatch)  ReadField4(iprot thrift.Protocol) error {
  p.I32Val = patch1.NewI32Patch()
  if err := p.I32Val.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.I32Val), err)
  }
  return nil
}

func (p *MyStructPatch)  ReadField5(iprot thrift.Protocol) error {
  p.I64Val = patch1.NewI64Patch()
  if err := p.I64Val.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.I64Val), err)
  }
  return nil
}

func (p *MyStructPatch)  ReadField6(iprot thrift.Protocol) error {
  p.FloatVal = patch1.NewFloatPatch()
  if err := p.FloatVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.FloatVal), err)
  }
  return nil
}

func (p *MyStructPatch)  ReadField7(iprot thrift.Protocol) error {
  p.DoubleVal = patch1.NewDoublePatch()
  if err := p.DoubleVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.DoubleVal), err)
  }
  return nil
}

func (p *MyStructPatch)  ReadField8(iprot thrift.Protocol) error {
  p.StringVal = patch1.NewStringPatch()
  if err := p.StringVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StringVal), err)
  }
  return nil
}

func (p *MyStructPatch)  ReadField9(iprot thrift.Protocol) error {
  p.BinaryVal = patch1.NewBinaryPatch()
  if err := p.BinaryVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.BinaryVal), err)
  }
  return nil
}

func (p *MyStructPatch)  ReadField10(iprot thrift.Protocol) error {
  p.StructVal = NewMyDataValuePatch()
  if err := p.StructVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StructVal), err)
  }
  return nil
}

func (p *MyStructPatch)  ReadField11(iprot thrift.Protocol) error {
  p.OptBoolVal = patch1.NewOptionalBoolPatch()
  if err := p.OptBoolVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OptBoolVal), err)
  }
  return nil
}

func (p *MyStructPatch)  ReadField12(iprot thrift.Protocol) error {
  p.OptByteVal = patch1.NewOptionalBytePatch()
  if err := p.OptByteVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OptByteVal), err)
  }
  return nil
}

func (p *MyStructPatch)  ReadField13(iprot thrift.Protocol) error {
  p.OptI16Val = patch1.NewOptionalI16Patch()
  if err := p.OptI16Val.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OptI16Val), err)
  }
  return nil
}

func (p *MyStructPatch)  ReadField14(iprot thrift.Protocol) error {
  p.OptI32Val = patch1.NewOptionalI32Patch()
  if err := p.OptI32Val.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OptI32Val), err)
  }
  return nil
}

func (p *MyStructPatch)  ReadField15(iprot thrift.Protocol) error {
  p.OptI64Val = patch1.NewOptionalI64Patch()
  if err := p.OptI64Val.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OptI64Val), err)
  }
  return nil
}

func (p *MyStructPatch)  ReadField16(iprot thrift.Protocol) error {
  p.OptFloatVal = patch1.NewOptionalFloatPatch()
  if err := p.OptFloatVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OptFloatVal), err)
  }
  return nil
}

func (p *MyStructPatch)  ReadField17(iprot thrift.Protocol) error {
  p.OptDoubleVal = patch1.NewOptionalDoublePatch()
  if err := p.OptDoubleVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OptDoubleVal), err)
  }
  return nil
}

func (p *MyStructPatch)  ReadField18(iprot thrift.Protocol) error {
  p.OptStringVal = patch1.NewOptionalStringPatch()
  if err := p.OptStringVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OptStringVal), err)
  }
  return nil
}

func (p *MyStructPatch)  ReadField19(iprot thrift.Protocol) error {
  p.OptBinaryVal = patch1.NewOptionalBinaryPatch()
  if err := p.OptBinaryVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OptBinaryVal), err)
  }
  return nil
}

func (p *MyStructPatch)  ReadField20(iprot thrift.Protocol) error {
  p.OptStructVal = NewOptionalMyDataValuePatch()
  if err := p.OptStructVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OptStructVal), err)
  }
  return nil
}

func (p *MyStructPatch)  ReadField21(iprot thrift.Protocol) error {
  p.OptListVal = NewOptionalMyStructField21Patch()
  if err := p.OptListVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OptListVal), err)
  }
  return nil
}

func (p *MyStructPatch)  ReadField22(iprot thrift.Protocol) error {
  p.OptSetVal = NewOptionalMyStructField22Patch()
  if err := p.OptSetVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OptSetVal), err)
  }
  return nil
}

func (p *MyStructPatch)  ReadField23(iprot thrift.Protocol) error {
  p.OptMapVal = NewOptionalMyStructField23Patch()
  if err := p.OptMapVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.OptMapVal), err)
  }
  return nil
}

func (p *MyStructPatch)  ReadField30(iprot thrift.Protocol) error {
  p.UnionVal = NewMyUnionValuePatch()
  if err := p.UnionVal.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.UnionVal), err)
  }
  return nil
}

func (p *MyStructPatch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyStructPatch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := p.writeField6(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := p.writeField8(oprot); err != nil { return err }
  if err := p.writeField9(oprot); err != nil { return err }
  if err := p.writeField10(oprot); err != nil { return err }
  if err := p.writeField11(oprot); err != nil { return err }
  if err := p.writeField12(oprot); err != nil { return err }
  if err := p.writeField13(oprot); err != nil { return err }
  if err := p.writeField14(oprot); err != nil { return err }
  if err := p.writeField15(oprot); err != nil { return err }
  if err := p.writeField16(oprot); err != nil { return err }
  if err := p.writeField17(oprot); err != nil { return err }
  if err := p.writeField18(oprot); err != nil { return err }
  if err := p.writeField19(oprot); err != nil { return err }
  if err := p.writeField20(oprot); err != nil { return err }
  if err := p.writeField21(oprot); err != nil { return err }
  if err := p.writeField22(oprot); err != nil { return err }
  if err := p.writeField23(oprot); err != nil { return err }
  if err := p.writeField30(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyStructPatch) writeField1(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("boolVal", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:boolVal: ", p), err) }
  if err := p.BoolVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BoolVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:boolVal: ", p), err) }
  return err
}

func (p *MyStructPatch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("byteVal", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:byteVal: ", p), err) }
  if err := p.ByteVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ByteVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:byteVal: ", p), err) }
  return err
}

func (p *MyStructPatch) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("i16Val", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:i16Val: ", p), err) }
  if err := p.I16Val.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.I16Val), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:i16Val: ", p), err) }
  return err
}

func (p *MyStructPatch) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("i32Val", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:i32Val: ", p), err) }
  if err := p.I32Val.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.I32Val), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:i32Val: ", p), err) }
  return err
}

func (p *MyStructPatch) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("i64Val", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:i64Val: ", p), err) }
  if err := p.I64Val.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.I64Val), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:i64Val: ", p), err) }
  return err
}

func (p *MyStructPatch) writeField6(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("floatVal", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:floatVal: ", p), err) }
  if err := p.FloatVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.FloatVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:floatVal: ", p), err) }
  return err
}

func (p *MyStructPatch) writeField7(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("doubleVal", thrift.STRUCT, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:doubleVal: ", p), err) }
  if err := p.DoubleVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.DoubleVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:doubleVal: ", p), err) }
  return err
}

func (p *MyStructPatch) writeField8(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("stringVal", thrift.STRUCT, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:stringVal: ", p), err) }
  if err := p.StringVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StringVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:stringVal: ", p), err) }
  return err
}

func (p *MyStructPatch) writeField9(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("binaryVal", thrift.STRUCT, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:binaryVal: ", p), err) }
  if err := p.BinaryVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.BinaryVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:binaryVal: ", p), err) }
  return err
}

func (p *MyStructPatch) writeField10(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("structVal", thrift.STRUCT, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:structVal: ", p), err) }
  if err := p.StructVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StructVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:structVal: ", p), err) }
  return err
}

func (p *MyStructPatch) writeField11(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("optBoolVal", thrift.STRUCT, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:optBoolVal: ", p), err) }
  if err := p.OptBoolVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OptBoolVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:optBoolVal: ", p), err) }
  return err
}

func (p *MyStructPatch) writeField12(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("optByteVal", thrift.STRUCT, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:optByteVal: ", p), err) }
  if err := p.OptByteVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OptByteVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:optByteVal: ", p), err) }
  return err
}

func (p *MyStructPatch) writeField13(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("optI16Val", thrift.STRUCT, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:optI16Val: ", p), err) }
  if err := p.OptI16Val.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OptI16Val), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:optI16Val: ", p), err) }
  return err
}

func (p *MyStructPatch) writeField14(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("optI32Val", thrift.STRUCT, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:optI32Val: ", p), err) }
  if err := p.OptI32Val.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OptI32Val), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:optI32Val: ", p), err) }
  return err
}

func (p *MyStructPatch) writeField15(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("optI64Val", thrift.STRUCT, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:optI64Val: ", p), err) }
  if err := p.OptI64Val.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OptI64Val), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:optI64Val: ", p), err) }
  return err
}

func (p *MyStructPatch) writeField16(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("optFloatVal", thrift.STRUCT, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:optFloatVal: ", p), err) }
  if err := p.OptFloatVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OptFloatVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:optFloatVal: ", p), err) }
  return err
}

func (p *MyStructPatch) writeField17(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("optDoubleVal", thrift.STRUCT, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:optDoubleVal: ", p), err) }
  if err := p.OptDoubleVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OptDoubleVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:optDoubleVal: ", p), err) }
  return err
}

func (p *MyStructPatch) writeField18(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("optStringVal", thrift.STRUCT, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:optStringVal: ", p), err) }
  if err := p.OptStringVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OptStringVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:optStringVal: ", p), err) }
  return err
}

func (p *MyStructPatch) writeField19(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("optBinaryVal", thrift.STRUCT, 19); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:optBinaryVal: ", p), err) }
  if err := p.OptBinaryVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OptBinaryVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 19:optBinaryVal: ", p), err) }
  return err
}

func (p *MyStructPatch) writeField20(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("optStructVal", thrift.STRUCT, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:optStructVal: ", p), err) }
  if err := p.OptStructVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OptStructVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:optStructVal: ", p), err) }
  return err
}

func (p *MyStructPatch) writeField21(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("optListVal", thrift.STRUCT, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:optListVal: ", p), err) }
  if err := p.OptListVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OptListVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:optListVal: ", p), err) }
  return err
}

func (p *MyStructPatch) writeField22(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("optSetVal", thrift.STRUCT, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:optSetVal: ", p), err) }
  if err := p.OptSetVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OptSetVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:optSetVal: ", p), err) }
  return err
}

func (p *MyStructPatch) writeField23(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("optMapVal", thrift.STRUCT, 23); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:optMapVal: ", p), err) }
  if err := p.OptMapVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.OptMapVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 23:optMapVal: ", p), err) }
  return err
}

func (p *MyStructPatch) writeField30(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("unionVal", thrift.STRUCT, 30); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:unionVal: ", p), err) }
  if err := p.UnionVal.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.UnionVal), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 30:unionVal: ", p), err) }
  return err
}

func (p *MyStructPatch) String() string {
  if p == nil {
    return "<nil>"
  }

  var boolValVal string
  if p.BoolVal == nil {
    boolValVal = "<nil>"
  } else {
    boolValVal = fmt.Sprintf("%v", p.BoolVal)
  }
  var byteValVal string
  if p.ByteVal == nil {
    byteValVal = "<nil>"
  } else {
    byteValVal = fmt.Sprintf("%v", p.ByteVal)
  }
  var i16ValVal string
  if p.I16Val == nil {
    i16ValVal = "<nil>"
  } else {
    i16ValVal = fmt.Sprintf("%v", p.I16Val)
  }
  var i32ValVal string
  if p.I32Val == nil {
    i32ValVal = "<nil>"
  } else {
    i32ValVal = fmt.Sprintf("%v", p.I32Val)
  }
  var i64ValVal string
  if p.I64Val == nil {
    i64ValVal = "<nil>"
  } else {
    i64ValVal = fmt.Sprintf("%v", p.I64Val)
  }
  var floatValVal string
  if p.FloatVal == nil {
    floatValVal = "<nil>"
  } else {
    floatValVal = fmt.Sprintf("%v", p.FloatVal)
  }
  var doubleValVal string
  if p.DoubleVal == nil {
    doubleValVal = "<nil>"
  } else {
    doubleValVal = fmt.Sprintf("%v", p.DoubleVal)
  }
  var stringValVal string
  if p.StringVal == nil {
    stringValVal = "<nil>"
  } else {
    stringValVal = fmt.Sprintf("%v", p.StringVal)
  }
  var binaryValVal string
  if p.BinaryVal == nil {
    binaryValVal = "<nil>"
  } else {
    binaryValVal = fmt.Sprintf("%v", p.BinaryVal)
  }
  var structValVal string
  if p.StructVal == nil {
    structValVal = "<nil>"
  } else {
    structValVal = fmt.Sprintf("%v", p.StructVal)
  }
  var optBoolValVal string
  if p.OptBoolVal == nil {
    optBoolValVal = "<nil>"
  } else {
    optBoolValVal = fmt.Sprintf("%v", p.OptBoolVal)
  }
  var optByteValVal string
  if p.OptByteVal == nil {
    optByteValVal = "<nil>"
  } else {
    optByteValVal = fmt.Sprintf("%v", p.OptByteVal)
  }
  var optI16ValVal string
  if p.OptI16Val == nil {
    optI16ValVal = "<nil>"
  } else {
    optI16ValVal = fmt.Sprintf("%v", p.OptI16Val)
  }
  var optI32ValVal string
  if p.OptI32Val == nil {
    optI32ValVal = "<nil>"
  } else {
    optI32ValVal = fmt.Sprintf("%v", p.OptI32Val)
  }
  var optI64ValVal string
  if p.OptI64Val == nil {
    optI64ValVal = "<nil>"
  } else {
    optI64ValVal = fmt.Sprintf("%v", p.OptI64Val)
  }
  var optFloatValVal string
  if p.OptFloatVal == nil {
    optFloatValVal = "<nil>"
  } else {
    optFloatValVal = fmt.Sprintf("%v", p.OptFloatVal)
  }
  var optDoubleValVal string
  if p.OptDoubleVal == nil {
    optDoubleValVal = "<nil>"
  } else {
    optDoubleValVal = fmt.Sprintf("%v", p.OptDoubleVal)
  }
  var optStringValVal string
  if p.OptStringVal == nil {
    optStringValVal = "<nil>"
  } else {
    optStringValVal = fmt.Sprintf("%v", p.OptStringVal)
  }
  var optBinaryValVal string
  if p.OptBinaryVal == nil {
    optBinaryValVal = "<nil>"
  } else {
    optBinaryValVal = fmt.Sprintf("%v", p.OptBinaryVal)
  }
  var optStructValVal string
  if p.OptStructVal == nil {
    optStructValVal = "<nil>"
  } else {
    optStructValVal = fmt.Sprintf("%v", p.OptStructVal)
  }
  var optListValVal string
  if p.OptListVal == nil {
    optListValVal = "<nil>"
  } else {
    optListValVal = fmt.Sprintf("%v", p.OptListVal)
  }
  var optSetValVal string
  if p.OptSetVal == nil {
    optSetValVal = "<nil>"
  } else {
    optSetValVal = fmt.Sprintf("%v", p.OptSetVal)
  }
  var optMapValVal string
  if p.OptMapVal == nil {
    optMapValVal = "<nil>"
  } else {
    optMapValVal = fmt.Sprintf("%v", p.OptMapVal)
  }
  var unionValVal string
  if p.UnionVal == nil {
    unionValVal = "<nil>"
  } else {
    unionValVal = fmt.Sprintf("%v", p.UnionVal)
  }
  return fmt.Sprintf("MyStructPatch({BoolVal:%s ByteVal:%s I16Val:%s I32Val:%s I64Val:%s FloatVal:%s DoubleVal:%s StringVal:%s BinaryVal:%s StructVal:%s OptBoolVal:%s OptByteVal:%s OptI16Val:%s OptI32Val:%s OptI64Val:%s OptFloatVal:%s OptDoubleVal:%s OptStringVal:%s OptBinaryVal:%s OptStructVal:%s OptListVal:%s OptSetVal:%s OptMapVal:%s UnionVal:%s})", boolValVal, byteValVal, i16ValVal, i32ValVal, i64ValVal, floatValVal, doubleValVal, stringValVal, binaryValVal, structValVal, optBoolValVal, optByteValVal, optI16ValVal, optI32ValVal, optI64ValVal, optFloatValVal, optDoubleValVal, optStringValVal, optBinaryValVal, optStructValVal, optListValVal, optSetValVal, optMapValVal, unionValVal)
}

// Attributes:
//  - Assign: Assigns a value. If set, all other operations are ignored.
//  - Clear: Clears a value. Applies first.
//  - Prepend: Prepends to the front of a given list.
//  - Append: Appends to the back of a given list.
type MyStructField21Patch struct {
  Assign []int16 `thrift:"assign,1,optional" db:"assign" json:"assign,omitempty"`
  Clear bool `thrift:"clear,2" db:"clear" json:"clear"`
  // unused field # 3
  Prepend []int16 `thrift:"prepend,4" db:"prepend" json:"prepend"`
  Append []int16 `thrift:"append,5" db:"append" json:"append"`
}

func NewMyStructField21Patch() *MyStructField21Patch {
  return &MyStructField21Patch{}
}

var MyStructField21Patch_Assign_DEFAULT []int16

func (p *MyStructField21Patch) GetAssign() []int16 {
  return p.Assign
}

func (p *MyStructField21Patch) GetClear() bool {
  return p.Clear
}

func (p *MyStructField21Patch) GetPrepend() []int16 {
  return p.Prepend
}

func (p *MyStructField21Patch) GetAppend() []int16 {
  return p.Append
}
func (p *MyStructField21Patch) IsSetAssign() bool {
  return p != nil && p.Assign != nil
}

type MyStructField21PatchBuilder struct {
  obj *MyStructField21Patch
}

func NewMyStructField21PatchBuilder() *MyStructField21PatchBuilder{
  return &MyStructField21PatchBuilder{
    obj: NewMyStructField21Patch(),
  }
}

func (p MyStructField21PatchBuilder) Emit() *MyStructField21Patch{
  return &MyStructField21Patch{
    Assign: p.obj.Assign,
    Clear: p.obj.Clear,
    Prepend: p.obj.Prepend,
    Append: p.obj.Append,
  }
}

func (m *MyStructField21PatchBuilder) Assign(assign []int16) *MyStructField21PatchBuilder {
  m.obj.Assign = assign
  return m
}

func (m *MyStructField21PatchBuilder) Clear(clear bool) *MyStructField21PatchBuilder {
  m.obj.Clear = clear
  return m
}

func (m *MyStructField21PatchBuilder) Prepend(prepend []int16) *MyStructField21PatchBuilder {
  m.obj.Prepend = prepend
  return m
}

func (m *MyStructField21PatchBuilder) Append(append []int16) *MyStructField21PatchBuilder {
  m.obj.Append = append
  return m
}

func (m *MyStructField21Patch) SetAssign(assign []int16) *MyStructField21Patch {
  m.Assign = assign
  return m
}

func (m *MyStructField21Patch) SetClear(clear bool) *MyStructField21Patch {
  m.Clear = clear
  return m
}

func (m *MyStructField21Patch) SetPrepend(prepend []int16) *MyStructField21Patch {
  m.Prepend = prepend
  return m
}

func (m *MyStructField21Patch) SetAppend(append []int16) *MyStructField21Patch {
  m.Append = append
  return m
}

func (p *MyStructField21Patch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyStructField21Patch)  ReadField1(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int16, 0, size)
  p.Assign =  tSlice
  for i := 0; i < size; i ++ {
    var _elem6 int16
    if v, err := iprot.ReadI16(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem6 = v
    }
    p.Assign = append(p.Assign, _elem6)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MyStructField21Patch)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Clear = v
  }
  return nil
}

func (p *MyStructField21Patch)  ReadField4(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int16, 0, size)
  p.Prepend =  tSlice
  for i := 0; i < size; i ++ {
    var _elem7 int16
    if v, err := iprot.ReadI16(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem7 = v
    }
    p.Prepend = append(p.Prepend, _elem7)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MyStructField21Patch)  ReadField5(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int16, 0, size)
  p.Append =  tSlice
  for i := 0; i < size; i ++ {
    var _elem8 int16
    if v, err := iprot.ReadI16(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem8 = v
    }
    p.Append = append(p.Append, _elem8)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *MyStructField21Patch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyStructField21Patch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyStructField21Patch) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetAssign() {
    if err := oprot.WriteFieldBegin("assign", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:assign: ", p), err) }
    if err := oprot.WriteListBegin(thrift.I16, len(p.Assign)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Assign {
      if err := oprot.WriteI16(int16(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:assign: ", p), err) }
  }
  return err
}

func (p *MyStructField21Patch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clear: ", p), err) }
  if err := oprot.WriteBool(bool(p.Clear)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clear (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clear: ", p), err) }
  return err
}

func (p *MyStructField21Patch) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("prepend", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:prepend: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I16, len(p.Prepend)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Prepend {
    if err := oprot.WriteI16(int16(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:prepend: ", p), err) }
  return err
}

func (p *MyStructField21Patch) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("append", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:append: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I16, len(p.Append)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Append {
    if err := oprot.WriteI16(int16(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:append: ", p), err) }
  return err
}

func (p *MyStructField21Patch) String() string {
  if p == nil {
    return "<nil>"
  }

  assignVal := fmt.Sprintf("%v", p.Assign)
  clearVal := fmt.Sprintf("%v", p.Clear)
  prependVal := fmt.Sprintf("%v", p.Prepend)
  appendVal := fmt.Sprintf("%v", p.Append)
  return fmt.Sprintf("MyStructField21Patch({Assign:%s Clear:%s Prepend:%s Append:%s})", assignVal, clearVal, prependVal, appendVal)
}

// Attributes:
//  - Clear: Clears any set value. Applies first.
//  - Patch: Patches any set value. Applies second.
//  - Ensure: Assigns the value, if not already set. Applies third.
//  - PatchAfter: Patches any set value, including newly set values. Applies fourth.
type OptionalMyStructField21Patch struct {
  // unused field # 1
  Clear bool `thrift:"clear,2" db:"clear" json:"clear"`
  Patch *MyStructField21Patch `thrift:"patch,3" db:"patch" json:"patch"`
  Ensure []int16 `thrift:"ensure,4,optional" db:"ensure" json:"ensure,omitempty"`
  PatchAfter *MyStructField21Patch `thrift:"patchAfter,5" db:"patchAfter" json:"patchAfter"`
}

func NewOptionalMyStructField21Patch() *OptionalMyStructField21Patch {
  return &OptionalMyStructField21Patch{
    Patch: NewMyStructField21Patch(),
    PatchAfter: NewMyStructField21Patch(),
  }
}


func (p *OptionalMyStructField21Patch) GetClear() bool {
  return p.Clear
}
var OptionalMyStructField21Patch_Patch_DEFAULT *MyStructField21Patch
func (p *OptionalMyStructField21Patch) GetPatch() *MyStructField21Patch {
  if !p.IsSetPatch() {
    return OptionalMyStructField21Patch_Patch_DEFAULT
  }
return p.Patch
}
var OptionalMyStructField21Patch_Ensure_DEFAULT []int16

func (p *OptionalMyStructField21Patch) GetEnsure() []int16 {
  return p.Ensure
}
var OptionalMyStructField21Patch_PatchAfter_DEFAULT *MyStructField21Patch
func (p *OptionalMyStructField21Patch) GetPatchAfter() *MyStructField21Patch {
  if !p.IsSetPatchAfter() {
    return OptionalMyStructField21Patch_PatchAfter_DEFAULT
  }
return p.PatchAfter
}
func (p *OptionalMyStructField21Patch) IsSetPatch() bool {
  return p != nil && p.Patch != nil
}

func (p *OptionalMyStructField21Patch) IsSetEnsure() bool {
  return p != nil && p.Ensure != nil
}

func (p *OptionalMyStructField21Patch) IsSetPatchAfter() bool {
  return p != nil && p.PatchAfter != nil
}

type OptionalMyStructField21PatchBuilder struct {
  obj *OptionalMyStructField21Patch
}

func NewOptionalMyStructField21PatchBuilder() *OptionalMyStructField21PatchBuilder{
  return &OptionalMyStructField21PatchBuilder{
    obj: NewOptionalMyStructField21Patch(),
  }
}

func (p OptionalMyStructField21PatchBuilder) Emit() *OptionalMyStructField21Patch{
  return &OptionalMyStructField21Patch{
    Clear: p.obj.Clear,
    Patch: p.obj.Patch,
    Ensure: p.obj.Ensure,
    PatchAfter: p.obj.PatchAfter,
  }
}

func (o *OptionalMyStructField21PatchBuilder) Clear(clear bool) *OptionalMyStructField21PatchBuilder {
  o.obj.Clear = clear
  return o
}

func (o *OptionalMyStructField21PatchBuilder) Patch(patch *MyStructField21Patch) *OptionalMyStructField21PatchBuilder {
  o.obj.Patch = patch
  return o
}

func (o *OptionalMyStructField21PatchBuilder) Ensure(ensure []int16) *OptionalMyStructField21PatchBuilder {
  o.obj.Ensure = ensure
  return o
}

func (o *OptionalMyStructField21PatchBuilder) PatchAfter(patchAfter *MyStructField21Patch) *OptionalMyStructField21PatchBuilder {
  o.obj.PatchAfter = patchAfter
  return o
}

func (o *OptionalMyStructField21Patch) SetClear(clear bool) *OptionalMyStructField21Patch {
  o.Clear = clear
  return o
}

func (o *OptionalMyStructField21Patch) SetPatch(patch *MyStructField21Patch) *OptionalMyStructField21Patch {
  o.Patch = patch
  return o
}

func (o *OptionalMyStructField21Patch) SetEnsure(ensure []int16) *OptionalMyStructField21Patch {
  o.Ensure = ensure
  return o
}

func (o *OptionalMyStructField21Patch) SetPatchAfter(patchAfter *MyStructField21Patch) *OptionalMyStructField21Patch {
  o.PatchAfter = patchAfter
  return o
}

func (p *OptionalMyStructField21Patch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OptionalMyStructField21Patch)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Clear = v
  }
  return nil
}

func (p *OptionalMyStructField21Patch)  ReadField3(iprot thrift.Protocol) error {
  p.Patch = NewMyStructField21Patch()
  if err := p.Patch.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Patch), err)
  }
  return nil
}

func (p *OptionalMyStructField21Patch)  ReadField4(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int16, 0, size)
  p.Ensure =  tSlice
  for i := 0; i < size; i ++ {
    var _elem9 int16
    if v, err := iprot.ReadI16(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem9 = v
    }
    p.Ensure = append(p.Ensure, _elem9)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *OptionalMyStructField21Patch)  ReadField5(iprot thrift.Protocol) error {
  p.PatchAfter = NewMyStructField21Patch()
  if err := p.PatchAfter.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PatchAfter), err)
  }
  return nil
}

func (p *OptionalMyStructField21Patch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("OptionalMyStructField21Patch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OptionalMyStructField21Patch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clear: ", p), err) }
  if err := oprot.WriteBool(bool(p.Clear)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clear (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clear: ", p), err) }
  return err
}

func (p *OptionalMyStructField21Patch) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patch", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:patch: ", p), err) }
  if err := p.Patch.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Patch), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:patch: ", p), err) }
  return err
}

func (p *OptionalMyStructField21Patch) writeField4(oprot thrift.Protocol) (err error) {
  if p.IsSetEnsure() {
    if err := oprot.WriteFieldBegin("ensure", thrift.LIST, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ensure: ", p), err) }
    if err := oprot.WriteListBegin(thrift.I16, len(p.Ensure)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Ensure {
      if err := oprot.WriteI16(int16(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ensure: ", p), err) }
  }
  return err
}

func (p *OptionalMyStructField21Patch) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patchAfter", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:patchAfter: ", p), err) }
  if err := p.PatchAfter.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PatchAfter), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:patchAfter: ", p), err) }
  return err
}

func (p *OptionalMyStructField21Patch) String() string {
  if p == nil {
    return "<nil>"
  }

  clearVal := fmt.Sprintf("%v", p.Clear)
  var patchVal string
  if p.Patch == nil {
    patchVal = "<nil>"
  } else {
    patchVal = fmt.Sprintf("%v", p.Patch)
  }
  ensureVal := fmt.Sprintf("%v", p.Ensure)
  var patchAfterVal string
  if p.PatchAfter == nil {
    patchAfterVal = "<nil>"
  } else {
    patchAfterVal = fmt.Sprintf("%v", p.PatchAfter)
  }
  return fmt.Sprintf("OptionalMyStructField21Patch({Clear:%s Patch:%s Ensure:%s PatchAfter:%s})", clearVal, patchVal, ensureVal, patchAfterVal)
}

// Attributes:
//  - Assign: Assigns a value. If set, all other operations are ignored.
//  - Clear: Clears a value. Applies first.
//  - Remove: Removes entries, if present. Applies thrid.
//  - Add: Adds entries, if not already present. Applies fourth.
type MyStructField22Patch struct {
  Assign []string `thrift:"assign,1,optional" db:"assign" json:"assign,omitempty"`
  Clear bool `thrift:"clear,2" db:"clear" json:"clear"`
  // unused field # 3
  Remove []string `thrift:"remove,4" db:"remove" json:"remove"`
  Add []string `thrift:"add,5" db:"add" json:"add"`
}

func NewMyStructField22Patch() *MyStructField22Patch {
  return &MyStructField22Patch{}
}

var MyStructField22Patch_Assign_DEFAULT []string

func (p *MyStructField22Patch) GetAssign() []string {
  return p.Assign
}

func (p *MyStructField22Patch) GetClear() bool {
  return p.Clear
}

func (p *MyStructField22Patch) GetRemove() []string {
  return p.Remove
}

func (p *MyStructField22Patch) GetAdd() []string {
  return p.Add
}
func (p *MyStructField22Patch) IsSetAssign() bool {
  return p != nil && p.Assign != nil
}

type MyStructField22PatchBuilder struct {
  obj *MyStructField22Patch
}

func NewMyStructField22PatchBuilder() *MyStructField22PatchBuilder{
  return &MyStructField22PatchBuilder{
    obj: NewMyStructField22Patch(),
  }
}

func (p MyStructField22PatchBuilder) Emit() *MyStructField22Patch{
  return &MyStructField22Patch{
    Assign: p.obj.Assign,
    Clear: p.obj.Clear,
    Remove: p.obj.Remove,
    Add: p.obj.Add,
  }
}

func (m *MyStructField22PatchBuilder) Assign(assign []string) *MyStructField22PatchBuilder {
  m.obj.Assign = assign
  return m
}

func (m *MyStructField22PatchBuilder) Clear(clear bool) *MyStructField22PatchBuilder {
  m.obj.Clear = clear
  return m
}

func (m *MyStructField22PatchBuilder) Remove(remove []string) *MyStructField22PatchBuilder {
  m.obj.Remove = remove
  return m
}

func (m *MyStructField22PatchBuilder) Add(add []string) *MyStructField22PatchBuilder {
  m.obj.Add = add
  return m
}

func (m *MyStructField22Patch) SetAssign(assign []string) *MyStructField22Patch {
  m.Assign = assign
  return m
}

func (m *MyStructField22Patch) SetClear(clear bool) *MyStructField22Patch {
  m.Clear = clear
  return m
}

func (m *MyStructField22Patch) SetRemove(remove []string) *MyStructField22Patch {
  m.Remove = remove
  return m
}

func (m *MyStructField22Patch) SetAdd(add []string) *MyStructField22Patch {
  m.Add = add
  return m
}

func (p *MyStructField22Patch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyStructField22Patch)  ReadField1(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.Assign =  tSet
  for i := 0; i < size; i ++ {
    var _elem10 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem10 = v
    }
    p.Assign = append(p.Assign, _elem10)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *MyStructField22Patch)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Clear = v
  }
  return nil
}

func (p *MyStructField22Patch)  ReadField4(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.Remove =  tSet
  for i := 0; i < size; i ++ {
    var _elem11 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem11 = v
    }
    p.Remove = append(p.Remove, _elem11)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *MyStructField22Patch)  ReadField5(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.Add =  tSet
  for i := 0; i < size; i ++ {
    var _elem12 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem12 = v
    }
    p.Add = append(p.Add, _elem12)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *MyStructField22Patch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyStructField22Patch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyStructField22Patch) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetAssign() {
    if err := oprot.WriteFieldBegin("assign", thrift.SET, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:assign: ", p), err) }
    if err := oprot.WriteSetBegin(thrift.STRING, len(p.Assign)); err != nil {
      return thrift.PrependError("error writing set begin: ", err)
    }
    set := make(map[string]bool, len(p.Assign))
    for _, v := range p.Assign {
      if ok := set[v]; ok {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", v))
      }
      set[v] = true
    }
    for _, v := range p.Assign {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteSetEnd(); err != nil {
      return thrift.PrependError("error writing set end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:assign: ", p), err) }
  }
  return err
}

func (p *MyStructField22Patch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clear: ", p), err) }
  if err := oprot.WriteBool(bool(p.Clear)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clear (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clear: ", p), err) }
  return err
}

func (p *MyStructField22Patch) writeField4(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("remove", thrift.SET, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:remove: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.STRING, len(p.Remove)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  set := make(map[string]bool, len(p.Remove))
  for _, v := range p.Remove {
    if ok := set[v]; ok {
      return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", v))
    }
    set[v] = true
  }
  for _, v := range p.Remove {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:remove: ", p), err) }
  return err
}

func (p *MyStructField22Patch) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("add", thrift.SET, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:add: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.STRING, len(p.Add)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  set := make(map[string]bool, len(p.Add))
  for _, v := range p.Add {
    if ok := set[v]; ok {
      return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", v))
    }
    set[v] = true
  }
  for _, v := range p.Add {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:add: ", p), err) }
  return err
}

func (p *MyStructField22Patch) String() string {
  if p == nil {
    return "<nil>"
  }

  assignVal := fmt.Sprintf("%v", p.Assign)
  clearVal := fmt.Sprintf("%v", p.Clear)
  removeVal := fmt.Sprintf("%v", p.Remove)
  addVal := fmt.Sprintf("%v", p.Add)
  return fmt.Sprintf("MyStructField22Patch({Assign:%s Clear:%s Remove:%s Add:%s})", assignVal, clearVal, removeVal, addVal)
}

// Attributes:
//  - Clear: Clears any set value. Applies first.
//  - Patch: Patches any set value. Applies second.
//  - Ensure: Assigns the value, if not already set. Applies third.
//  - PatchAfter: Patches any set value, including newly set values. Applies fourth.
type OptionalMyStructField22Patch struct {
  // unused field # 1
  Clear bool `thrift:"clear,2" db:"clear" json:"clear"`
  Patch *MyStructField22Patch `thrift:"patch,3" db:"patch" json:"patch"`
  Ensure []string `thrift:"ensure,4,optional" db:"ensure" json:"ensure,omitempty"`
  PatchAfter *MyStructField22Patch `thrift:"patchAfter,5" db:"patchAfter" json:"patchAfter"`
}

func NewOptionalMyStructField22Patch() *OptionalMyStructField22Patch {
  return &OptionalMyStructField22Patch{
    Patch: NewMyStructField22Patch(),
    PatchAfter: NewMyStructField22Patch(),
  }
}


func (p *OptionalMyStructField22Patch) GetClear() bool {
  return p.Clear
}
var OptionalMyStructField22Patch_Patch_DEFAULT *MyStructField22Patch
func (p *OptionalMyStructField22Patch) GetPatch() *MyStructField22Patch {
  if !p.IsSetPatch() {
    return OptionalMyStructField22Patch_Patch_DEFAULT
  }
return p.Patch
}
var OptionalMyStructField22Patch_Ensure_DEFAULT []string

func (p *OptionalMyStructField22Patch) GetEnsure() []string {
  return p.Ensure
}
var OptionalMyStructField22Patch_PatchAfter_DEFAULT *MyStructField22Patch
func (p *OptionalMyStructField22Patch) GetPatchAfter() *MyStructField22Patch {
  if !p.IsSetPatchAfter() {
    return OptionalMyStructField22Patch_PatchAfter_DEFAULT
  }
return p.PatchAfter
}
func (p *OptionalMyStructField22Patch) IsSetPatch() bool {
  return p != nil && p.Patch != nil
}

func (p *OptionalMyStructField22Patch) IsSetEnsure() bool {
  return p != nil && p.Ensure != nil
}

func (p *OptionalMyStructField22Patch) IsSetPatchAfter() bool {
  return p != nil && p.PatchAfter != nil
}

type OptionalMyStructField22PatchBuilder struct {
  obj *OptionalMyStructField22Patch
}

func NewOptionalMyStructField22PatchBuilder() *OptionalMyStructField22PatchBuilder{
  return &OptionalMyStructField22PatchBuilder{
    obj: NewOptionalMyStructField22Patch(),
  }
}

func (p OptionalMyStructField22PatchBuilder) Emit() *OptionalMyStructField22Patch{
  return &OptionalMyStructField22Patch{
    Clear: p.obj.Clear,
    Patch: p.obj.Patch,
    Ensure: p.obj.Ensure,
    PatchAfter: p.obj.PatchAfter,
  }
}

func (o *OptionalMyStructField22PatchBuilder) Clear(clear bool) *OptionalMyStructField22PatchBuilder {
  o.obj.Clear = clear
  return o
}

func (o *OptionalMyStructField22PatchBuilder) Patch(patch *MyStructField22Patch) *OptionalMyStructField22PatchBuilder {
  o.obj.Patch = patch
  return o
}

func (o *OptionalMyStructField22PatchBuilder) Ensure(ensure []string) *OptionalMyStructField22PatchBuilder {
  o.obj.Ensure = ensure
  return o
}

func (o *OptionalMyStructField22PatchBuilder) PatchAfter(patchAfter *MyStructField22Patch) *OptionalMyStructField22PatchBuilder {
  o.obj.PatchAfter = patchAfter
  return o
}

func (o *OptionalMyStructField22Patch) SetClear(clear bool) *OptionalMyStructField22Patch {
  o.Clear = clear
  return o
}

func (o *OptionalMyStructField22Patch) SetPatch(patch *MyStructField22Patch) *OptionalMyStructField22Patch {
  o.Patch = patch
  return o
}

func (o *OptionalMyStructField22Patch) SetEnsure(ensure []string) *OptionalMyStructField22Patch {
  o.Ensure = ensure
  return o
}

func (o *OptionalMyStructField22Patch) SetPatchAfter(patchAfter *MyStructField22Patch) *OptionalMyStructField22Patch {
  o.PatchAfter = patchAfter
  return o
}

func (p *OptionalMyStructField22Patch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OptionalMyStructField22Patch)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Clear = v
  }
  return nil
}

func (p *OptionalMyStructField22Patch)  ReadField3(iprot thrift.Protocol) error {
  p.Patch = NewMyStructField22Patch()
  if err := p.Patch.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Patch), err)
  }
  return nil
}

func (p *OptionalMyStructField22Patch)  ReadField4(iprot thrift.Protocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.Ensure =  tSet
  for i := 0; i < size; i ++ {
    var _elem13 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _elem13 = v
    }
    p.Ensure = append(p.Ensure, _elem13)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *OptionalMyStructField22Patch)  ReadField5(iprot thrift.Protocol) error {
  p.PatchAfter = NewMyStructField22Patch()
  if err := p.PatchAfter.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PatchAfter), err)
  }
  return nil
}

func (p *OptionalMyStructField22Patch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("OptionalMyStructField22Patch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OptionalMyStructField22Patch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clear: ", p), err) }
  if err := oprot.WriteBool(bool(p.Clear)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clear (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clear: ", p), err) }
  return err
}

func (p *OptionalMyStructField22Patch) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patch", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:patch: ", p), err) }
  if err := p.Patch.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Patch), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:patch: ", p), err) }
  return err
}

func (p *OptionalMyStructField22Patch) writeField4(oprot thrift.Protocol) (err error) {
  if p.IsSetEnsure() {
    if err := oprot.WriteFieldBegin("ensure", thrift.SET, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ensure: ", p), err) }
    if err := oprot.WriteSetBegin(thrift.STRING, len(p.Ensure)); err != nil {
      return thrift.PrependError("error writing set begin: ", err)
    }
    set := make(map[string]bool, len(p.Ensure))
    for _, v := range p.Ensure {
      if ok := set[v]; ok {
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", v))
      }
      set[v] = true
    }
    for _, v := range p.Ensure {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteSetEnd(); err != nil {
      return thrift.PrependError("error writing set end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ensure: ", p), err) }
  }
  return err
}

func (p *OptionalMyStructField22Patch) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patchAfter", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:patchAfter: ", p), err) }
  if err := p.PatchAfter.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PatchAfter), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:patchAfter: ", p), err) }
  return err
}

func (p *OptionalMyStructField22Patch) String() string {
  if p == nil {
    return "<nil>"
  }

  clearVal := fmt.Sprintf("%v", p.Clear)
  var patchVal string
  if p.Patch == nil {
    patchVal = "<nil>"
  } else {
    patchVal = fmt.Sprintf("%v", p.Patch)
  }
  ensureVal := fmt.Sprintf("%v", p.Ensure)
  var patchAfterVal string
  if p.PatchAfter == nil {
    patchAfterVal = "<nil>"
  } else {
    patchAfterVal = fmt.Sprintf("%v", p.PatchAfter)
  }
  return fmt.Sprintf("OptionalMyStructField22Patch({Clear:%s Patch:%s Ensure:%s PatchAfter:%s})", clearVal, patchVal, ensureVal, patchAfterVal)
}

// Attributes:
//  - Assign: Assigns a value. If set, all other operations are ignored.
//  - Clear: Clears a value. Applies first.
//  - Put: Adds or replaces the given key/value pairs. Applies Second.
type MyStructField23Patch struct {
  Assign map[string]string `thrift:"assign,1,optional" db:"assign" json:"assign,omitempty"`
  Clear bool `thrift:"clear,2" db:"clear" json:"clear"`
  // unused fields # 3 to 6
  Put map[string]string `thrift:"put,7" db:"put" json:"put"`
}

func NewMyStructField23Patch() *MyStructField23Patch {
  return &MyStructField23Patch{}
}

var MyStructField23Patch_Assign_DEFAULT map[string]string

func (p *MyStructField23Patch) GetAssign() map[string]string {
  return p.Assign
}

func (p *MyStructField23Patch) GetClear() bool {
  return p.Clear
}

func (p *MyStructField23Patch) GetPut() map[string]string {
  return p.Put
}
func (p *MyStructField23Patch) IsSetAssign() bool {
  return p != nil && p.Assign != nil
}

type MyStructField23PatchBuilder struct {
  obj *MyStructField23Patch
}

func NewMyStructField23PatchBuilder() *MyStructField23PatchBuilder{
  return &MyStructField23PatchBuilder{
    obj: NewMyStructField23Patch(),
  }
}

func (p MyStructField23PatchBuilder) Emit() *MyStructField23Patch{
  return &MyStructField23Patch{
    Assign: p.obj.Assign,
    Clear: p.obj.Clear,
    Put: p.obj.Put,
  }
}

func (m *MyStructField23PatchBuilder) Assign(assign map[string]string) *MyStructField23PatchBuilder {
  m.obj.Assign = assign
  return m
}

func (m *MyStructField23PatchBuilder) Clear(clear bool) *MyStructField23PatchBuilder {
  m.obj.Clear = clear
  return m
}

func (m *MyStructField23PatchBuilder) Put(put map[string]string) *MyStructField23PatchBuilder {
  m.obj.Put = put
  return m
}

func (m *MyStructField23Patch) SetAssign(assign map[string]string) *MyStructField23Patch {
  m.Assign = assign
  return m
}

func (m *MyStructField23Patch) SetClear(clear bool) *MyStructField23Patch {
  m.Clear = clear
  return m
}

func (m *MyStructField23Patch) SetPut(put map[string]string) *MyStructField23Patch {
  m.Put = put
  return m
}

func (p *MyStructField23Patch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyStructField23Patch)  ReadField1(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Assign =  tMap
  for i := 0; i < size; i ++ {
    var _key14 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key14 = v
    }
    var _val15 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _val15 = v
    }
    p.Assign[_key14] = _val15
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MyStructField23Patch)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Clear = v
  }
  return nil
}

func (p *MyStructField23Patch)  ReadField7(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Put =  tMap
  for i := 0; i < size; i ++ {
    var _key16 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key16 = v
    }
    var _val17 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _val17 = v
    }
    p.Put[_key16] = _val17
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *MyStructField23Patch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyStructField23Patch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField7(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyStructField23Patch) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetAssign() {
    if err := oprot.WriteFieldBegin("assign", thrift.MAP, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:assign: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Assign)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Assign {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:assign: ", p), err) }
  }
  return err
}

func (p *MyStructField23Patch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clear: ", p), err) }
  if err := oprot.WriteBool(bool(p.Clear)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clear (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clear: ", p), err) }
  return err
}

func (p *MyStructField23Patch) writeField7(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("put", thrift.MAP, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:put: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Put)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Put {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:put: ", p), err) }
  return err
}

func (p *MyStructField23Patch) String() string {
  if p == nil {
    return "<nil>"
  }

  assignVal := fmt.Sprintf("%v", p.Assign)
  clearVal := fmt.Sprintf("%v", p.Clear)
  putVal := fmt.Sprintf("%v", p.Put)
  return fmt.Sprintf("MyStructField23Patch({Assign:%s Clear:%s Put:%s})", assignVal, clearVal, putVal)
}

// Attributes:
//  - Clear: Clears any set value. Applies first.
//  - Patch: Patches any set value. Applies second.
//  - Ensure: Assigns the value, if not already set. Applies third.
//  - PatchAfter: Patches any set value, including newly set values. Applies fourth.
type OptionalMyStructField23Patch struct {
  // unused field # 1
  Clear bool `thrift:"clear,2" db:"clear" json:"clear"`
  Patch *MyStructField23Patch `thrift:"patch,3" db:"patch" json:"patch"`
  Ensure map[string]string `thrift:"ensure,4,optional" db:"ensure" json:"ensure,omitempty"`
  PatchAfter *MyStructField23Patch `thrift:"patchAfter,5" db:"patchAfter" json:"patchAfter"`
}

func NewOptionalMyStructField23Patch() *OptionalMyStructField23Patch {
  return &OptionalMyStructField23Patch{
    Patch: NewMyStructField23Patch(),
    PatchAfter: NewMyStructField23Patch(),
  }
}


func (p *OptionalMyStructField23Patch) GetClear() bool {
  return p.Clear
}
var OptionalMyStructField23Patch_Patch_DEFAULT *MyStructField23Patch
func (p *OptionalMyStructField23Patch) GetPatch() *MyStructField23Patch {
  if !p.IsSetPatch() {
    return OptionalMyStructField23Patch_Patch_DEFAULT
  }
return p.Patch
}
var OptionalMyStructField23Patch_Ensure_DEFAULT map[string]string

func (p *OptionalMyStructField23Patch) GetEnsure() map[string]string {
  return p.Ensure
}
var OptionalMyStructField23Patch_PatchAfter_DEFAULT *MyStructField23Patch
func (p *OptionalMyStructField23Patch) GetPatchAfter() *MyStructField23Patch {
  if !p.IsSetPatchAfter() {
    return OptionalMyStructField23Patch_PatchAfter_DEFAULT
  }
return p.PatchAfter
}
func (p *OptionalMyStructField23Patch) IsSetPatch() bool {
  return p != nil && p.Patch != nil
}

func (p *OptionalMyStructField23Patch) IsSetEnsure() bool {
  return p != nil && p.Ensure != nil
}

func (p *OptionalMyStructField23Patch) IsSetPatchAfter() bool {
  return p != nil && p.PatchAfter != nil
}

type OptionalMyStructField23PatchBuilder struct {
  obj *OptionalMyStructField23Patch
}

func NewOptionalMyStructField23PatchBuilder() *OptionalMyStructField23PatchBuilder{
  return &OptionalMyStructField23PatchBuilder{
    obj: NewOptionalMyStructField23Patch(),
  }
}

func (p OptionalMyStructField23PatchBuilder) Emit() *OptionalMyStructField23Patch{
  return &OptionalMyStructField23Patch{
    Clear: p.obj.Clear,
    Patch: p.obj.Patch,
    Ensure: p.obj.Ensure,
    PatchAfter: p.obj.PatchAfter,
  }
}

func (o *OptionalMyStructField23PatchBuilder) Clear(clear bool) *OptionalMyStructField23PatchBuilder {
  o.obj.Clear = clear
  return o
}

func (o *OptionalMyStructField23PatchBuilder) Patch(patch *MyStructField23Patch) *OptionalMyStructField23PatchBuilder {
  o.obj.Patch = patch
  return o
}

func (o *OptionalMyStructField23PatchBuilder) Ensure(ensure map[string]string) *OptionalMyStructField23PatchBuilder {
  o.obj.Ensure = ensure
  return o
}

func (o *OptionalMyStructField23PatchBuilder) PatchAfter(patchAfter *MyStructField23Patch) *OptionalMyStructField23PatchBuilder {
  o.obj.PatchAfter = patchAfter
  return o
}

func (o *OptionalMyStructField23Patch) SetClear(clear bool) *OptionalMyStructField23Patch {
  o.Clear = clear
  return o
}

func (o *OptionalMyStructField23Patch) SetPatch(patch *MyStructField23Patch) *OptionalMyStructField23Patch {
  o.Patch = patch
  return o
}

func (o *OptionalMyStructField23Patch) SetEnsure(ensure map[string]string) *OptionalMyStructField23Patch {
  o.Ensure = ensure
  return o
}

func (o *OptionalMyStructField23Patch) SetPatchAfter(patchAfter *MyStructField23Patch) *OptionalMyStructField23Patch {
  o.PatchAfter = patchAfter
  return o
}

func (p *OptionalMyStructField23Patch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OptionalMyStructField23Patch)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Clear = v
  }
  return nil
}

func (p *OptionalMyStructField23Patch)  ReadField3(iprot thrift.Protocol) error {
  p.Patch = NewMyStructField23Patch()
  if err := p.Patch.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Patch), err)
  }
  return nil
}

func (p *OptionalMyStructField23Patch)  ReadField4(iprot thrift.Protocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Ensure =  tMap
  for i := 0; i < size; i ++ {
    var _key18 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _key18 = v
    }
    var _val19 string
    if v, err := iprot.ReadString(); err != nil {
      return thrift.PrependError("error reading field 0: ", err)
    } else {
      _val19 = v
    }
    p.Ensure[_key18] = _val19
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *OptionalMyStructField23Patch)  ReadField5(iprot thrift.Protocol) error {
  p.PatchAfter = NewMyStructField23Patch()
  if err := p.PatchAfter.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PatchAfter), err)
  }
  return nil
}

func (p *OptionalMyStructField23Patch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("OptionalMyStructField23Patch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OptionalMyStructField23Patch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clear: ", p), err) }
  if err := oprot.WriteBool(bool(p.Clear)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clear (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clear: ", p), err) }
  return err
}

func (p *OptionalMyStructField23Patch) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patch", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:patch: ", p), err) }
  if err := p.Patch.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Patch), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:patch: ", p), err) }
  return err
}

func (p *OptionalMyStructField23Patch) writeField4(oprot thrift.Protocol) (err error) {
  if p.IsSetEnsure() {
    if err := oprot.WriteFieldBegin("ensure", thrift.MAP, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ensure: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Ensure)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.Ensure {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ensure: ", p), err) }
  }
  return err
}

func (p *OptionalMyStructField23Patch) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patchAfter", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:patchAfter: ", p), err) }
  if err := p.PatchAfter.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PatchAfter), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:patchAfter: ", p), err) }
  return err
}

func (p *OptionalMyStructField23Patch) String() string {
  if p == nil {
    return "<nil>"
  }

  clearVal := fmt.Sprintf("%v", p.Clear)
  var patchVal string
  if p.Patch == nil {
    patchVal = "<nil>"
  } else {
    patchVal = fmt.Sprintf("%v", p.Patch)
  }
  ensureVal := fmt.Sprintf("%v", p.Ensure)
  var patchAfterVal string
  if p.PatchAfter == nil {
    patchAfterVal = "<nil>"
  } else {
    patchAfterVal = fmt.Sprintf("%v", p.PatchAfter)
  }
  return fmt.Sprintf("OptionalMyStructField23Patch({Clear:%s Patch:%s Ensure:%s PatchAfter:%s})", clearVal, patchVal, ensureVal, patchAfterVal)
}

// Attributes:
//  - Assign: Assigns a value. If set, all other operations are ignored.
//  - Clear: Clears a value. Applies first.
//  - Patch: Patches a value. Applies second.
type MyStructValuePatch struct {
  Assign *MyStruct `thrift:"assign,1,optional" db:"assign" json:"assign,omitempty"`
  Clear bool `thrift:"clear,2" db:"clear" json:"clear"`
  Patch *MyStructPatch `thrift:"patch,3" db:"patch" json:"patch"`
}

func NewMyStructValuePatch() *MyStructValuePatch {
  return &MyStructValuePatch{
    Patch: NewMyStructPatch(),
  }
}

var MyStructValuePatch_Assign_DEFAULT *MyStruct
func (p *MyStructValuePatch) GetAssign() *MyStruct {
  if !p.IsSetAssign() {
    return MyStructValuePatch_Assign_DEFAULT
  }
return p.Assign
}

func (p *MyStructValuePatch) GetClear() bool {
  return p.Clear
}
var MyStructValuePatch_Patch_DEFAULT *MyStructPatch
func (p *MyStructValuePatch) GetPatch() *MyStructPatch {
  if !p.IsSetPatch() {
    return MyStructValuePatch_Patch_DEFAULT
  }
return p.Patch
}
func (p *MyStructValuePatch) IsSetAssign() bool {
  return p != nil && p.Assign != nil
}

func (p *MyStructValuePatch) IsSetPatch() bool {
  return p != nil && p.Patch != nil
}

type MyStructValuePatchBuilder struct {
  obj *MyStructValuePatch
}

func NewMyStructValuePatchBuilder() *MyStructValuePatchBuilder{
  return &MyStructValuePatchBuilder{
    obj: NewMyStructValuePatch(),
  }
}

func (p MyStructValuePatchBuilder) Emit() *MyStructValuePatch{
  return &MyStructValuePatch{
    Assign: p.obj.Assign,
    Clear: p.obj.Clear,
    Patch: p.obj.Patch,
  }
}

func (m *MyStructValuePatchBuilder) Assign(assign *MyStruct) *MyStructValuePatchBuilder {
  m.obj.Assign = assign
  return m
}

func (m *MyStructValuePatchBuilder) Clear(clear bool) *MyStructValuePatchBuilder {
  m.obj.Clear = clear
  return m
}

func (m *MyStructValuePatchBuilder) Patch(patch *MyStructPatch) *MyStructValuePatchBuilder {
  m.obj.Patch = patch
  return m
}

func (m *MyStructValuePatch) SetAssign(assign *MyStruct) *MyStructValuePatch {
  m.Assign = assign
  return m
}

func (m *MyStructValuePatch) SetClear(clear bool) *MyStructValuePatch {
  m.Clear = clear
  return m
}

func (m *MyStructValuePatch) SetPatch(patch *MyStructPatch) *MyStructValuePatch {
  m.Patch = patch
  return m
}

func (p *MyStructValuePatch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *MyStructValuePatch)  ReadField1(iprot thrift.Protocol) error {
  p.Assign = NewMyStruct()
  if err := p.Assign.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Assign), err)
  }
  return nil
}

func (p *MyStructValuePatch)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Clear = v
  }
  return nil
}

func (p *MyStructValuePatch)  ReadField3(iprot thrift.Protocol) error {
  p.Patch = NewMyStructPatch()
  if err := p.Patch.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Patch), err)
  }
  return nil
}

func (p *MyStructValuePatch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("MyStructValuePatch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField1(oprot); err != nil { return err }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *MyStructValuePatch) writeField1(oprot thrift.Protocol) (err error) {
  if p.IsSetAssign() {
    if err := oprot.WriteFieldBegin("assign", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:assign: ", p), err) }
    if err := p.Assign.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Assign), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:assign: ", p), err) }
  }
  return err
}

func (p *MyStructValuePatch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clear: ", p), err) }
  if err := oprot.WriteBool(bool(p.Clear)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clear (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clear: ", p), err) }
  return err
}

func (p *MyStructValuePatch) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patch", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:patch: ", p), err) }
  if err := p.Patch.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Patch), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:patch: ", p), err) }
  return err
}

func (p *MyStructValuePatch) String() string {
  if p == nil {
    return "<nil>"
  }

  var assignVal string
  if p.Assign == nil {
    assignVal = "<nil>"
  } else {
    assignVal = fmt.Sprintf("%v", p.Assign)
  }
  clearVal := fmt.Sprintf("%v", p.Clear)
  var patchVal string
  if p.Patch == nil {
    patchVal = "<nil>"
  } else {
    patchVal = fmt.Sprintf("%v", p.Patch)
  }
  return fmt.Sprintf("MyStructValuePatch({Assign:%s Clear:%s Patch:%s})", assignVal, clearVal, patchVal)
}

// Attributes:
//  - Clear: Clears any set value. Applies first.
//  - Patch: Patches any set value. Applies second.
//  - Ensure: Assigns the value, if not already set. Applies third.
//  - PatchAfter: Patches any set value, including newly set values. Applies fourth.
type OptionalMyStructValuePatch struct {
  // unused field # 1
  Clear bool `thrift:"clear,2" db:"clear" json:"clear"`
  Patch *MyStructValuePatch `thrift:"patch,3" db:"patch" json:"patch"`
  Ensure *MyStruct `thrift:"ensure,4,optional" db:"ensure" json:"ensure,omitempty"`
  PatchAfter *MyStructValuePatch `thrift:"patchAfter,5" db:"patchAfter" json:"patchAfter"`
}

func NewOptionalMyStructValuePatch() *OptionalMyStructValuePatch {
  return &OptionalMyStructValuePatch{
    Patch: NewMyStructValuePatch(),
    PatchAfter: NewMyStructValuePatch(),
  }
}


func (p *OptionalMyStructValuePatch) GetClear() bool {
  return p.Clear
}
var OptionalMyStructValuePatch_Patch_DEFAULT *MyStructValuePatch
func (p *OptionalMyStructValuePatch) GetPatch() *MyStructValuePatch {
  if !p.IsSetPatch() {
    return OptionalMyStructValuePatch_Patch_DEFAULT
  }
return p.Patch
}
var OptionalMyStructValuePatch_Ensure_DEFAULT *MyStruct
func (p *OptionalMyStructValuePatch) GetEnsure() *MyStruct {
  if !p.IsSetEnsure() {
    return OptionalMyStructValuePatch_Ensure_DEFAULT
  }
return p.Ensure
}
var OptionalMyStructValuePatch_PatchAfter_DEFAULT *MyStructValuePatch
func (p *OptionalMyStructValuePatch) GetPatchAfter() *MyStructValuePatch {
  if !p.IsSetPatchAfter() {
    return OptionalMyStructValuePatch_PatchAfter_DEFAULT
  }
return p.PatchAfter
}
func (p *OptionalMyStructValuePatch) IsSetPatch() bool {
  return p != nil && p.Patch != nil
}

func (p *OptionalMyStructValuePatch) IsSetEnsure() bool {
  return p != nil && p.Ensure != nil
}

func (p *OptionalMyStructValuePatch) IsSetPatchAfter() bool {
  return p != nil && p.PatchAfter != nil
}

type OptionalMyStructValuePatchBuilder struct {
  obj *OptionalMyStructValuePatch
}

func NewOptionalMyStructValuePatchBuilder() *OptionalMyStructValuePatchBuilder{
  return &OptionalMyStructValuePatchBuilder{
    obj: NewOptionalMyStructValuePatch(),
  }
}

func (p OptionalMyStructValuePatchBuilder) Emit() *OptionalMyStructValuePatch{
  return &OptionalMyStructValuePatch{
    Clear: p.obj.Clear,
    Patch: p.obj.Patch,
    Ensure: p.obj.Ensure,
    PatchAfter: p.obj.PatchAfter,
  }
}

func (o *OptionalMyStructValuePatchBuilder) Clear(clear bool) *OptionalMyStructValuePatchBuilder {
  o.obj.Clear = clear
  return o
}

func (o *OptionalMyStructValuePatchBuilder) Patch(patch *MyStructValuePatch) *OptionalMyStructValuePatchBuilder {
  o.obj.Patch = patch
  return o
}

func (o *OptionalMyStructValuePatchBuilder) Ensure(ensure *MyStruct) *OptionalMyStructValuePatchBuilder {
  o.obj.Ensure = ensure
  return o
}

func (o *OptionalMyStructValuePatchBuilder) PatchAfter(patchAfter *MyStructValuePatch) *OptionalMyStructValuePatchBuilder {
  o.obj.PatchAfter = patchAfter
  return o
}

func (o *OptionalMyStructValuePatch) SetClear(clear bool) *OptionalMyStructValuePatch {
  o.Clear = clear
  return o
}

func (o *OptionalMyStructValuePatch) SetPatch(patch *MyStructValuePatch) *OptionalMyStructValuePatch {
  o.Patch = patch
  return o
}

func (o *OptionalMyStructValuePatch) SetEnsure(ensure *MyStruct) *OptionalMyStructValuePatch {
  o.Ensure = ensure
  return o
}

func (o *OptionalMyStructValuePatch) SetPatchAfter(patchAfter *MyStructValuePatch) *OptionalMyStructValuePatch {
  o.PatchAfter = patchAfter
  return o
}

func (p *OptionalMyStructValuePatch) Read(iprot thrift.Protocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *OptionalMyStructValuePatch)  ReadField2(iprot thrift.Protocol) error {
  if v, err := iprot.ReadBool(); err != nil {
    return thrift.PrependError("error reading field 2: ", err)
  } else {
    p.Clear = v
  }
  return nil
}

func (p *OptionalMyStructValuePatch)  ReadField3(iprot thrift.Protocol) error {
  p.Patch = NewMyStructValuePatch()
  if err := p.Patch.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Patch), err)
  }
  return nil
}

func (p *OptionalMyStructValuePatch)  ReadField4(iprot thrift.Protocol) error {
  p.Ensure = NewMyStruct()
  if err := p.Ensure.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ensure), err)
  }
  return nil
}

func (p *OptionalMyStructValuePatch)  ReadField5(iprot thrift.Protocol) error {
  p.PatchAfter = NewMyStructValuePatch()
  if err := p.PatchAfter.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.PatchAfter), err)
  }
  return nil
}

func (p *OptionalMyStructValuePatch) Write(oprot thrift.Protocol) error {
  if err := oprot.WriteStructBegin("OptionalMyStructValuePatch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if err := p.writeField2(oprot); err != nil { return err }
  if err := p.writeField3(oprot); err != nil { return err }
  if err := p.writeField4(oprot); err != nil { return err }
  if err := p.writeField5(oprot); err != nil { return err }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *OptionalMyStructValuePatch) writeField2(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clear: ", p), err) }
  if err := oprot.WriteBool(bool(p.Clear)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clear (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clear: ", p), err) }
  return err
}

func (p *OptionalMyStructValuePatch) writeField3(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patch", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:patch: ", p), err) }
  if err := p.Patch.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Patch), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:patch: ", p), err) }
  return err
}

func (p *OptionalMyStructValuePatch) writeField4(oprot thrift.Protocol) (err error) {
  if p.IsSetEnsure() {
    if err := oprot.WriteFieldBegin("ensure", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ensure: ", p), err) }
    if err := p.Ensure.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ensure), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ensure: ", p), err) }
  }
  return err
}

func (p *OptionalMyStructValuePatch) writeField5(oprot thrift.Protocol) (err error) {
  if err := oprot.WriteFieldBegin("patchAfter", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:patchAfter: ", p), err) }
  if err := p.PatchAfter.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.PatchAfter), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:patchAfter: ", p), err) }
  return err
}

func (p *OptionalMyStructValuePatch) String() string {
  if p == nil {
    return "<nil>"
  }

  clearVal := fmt.Sprintf("%v", p.Clear)
  var patchVal string
  if p.Patch == nil {
    patchVal = "<nil>"
  } else {
    patchVal = fmt.Sprintf("%v", p.Patch)
  }
  var ensureVal string
  if p.Ensure == nil {
    ensureVal = "<nil>"
  } else {
    ensureVal = fmt.Sprintf("%v", p.Ensure)
  }
  var patchAfterVal string
  if p.PatchAfter == nil {
    patchAfterVal = "<nil>"
  } else {
    patchAfterVal = fmt.Sprintf("%v", p.PatchAfter)
  }
  return fmt.Sprintf("OptionalMyStructValuePatch({Clear:%s Patch:%s Ensure:%s PatchAfter:%s})", clearVal, patchVal, ensureVal, patchAfterVal)
}

