/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package test.fixtures.patch;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class MyStruct implements TBase, java.io.Serializable, Cloneable, Comparable<MyStruct> {
  private static final TStruct STRUCT_DESC = new TStruct("MyStruct");
  private static final TField BOOL_VAL_FIELD_DESC = new TField("boolVal", TType.BOOL, (short)1);
  private static final TField BYTE_VAL_FIELD_DESC = new TField("byteVal", TType.BYTE, (short)2);
  private static final TField I16_VAL_FIELD_DESC = new TField("i16Val", TType.I16, (short)3);
  private static final TField I32_VAL_FIELD_DESC = new TField("i32Val", TType.I32, (short)4);
  private static final TField I64_VAL_FIELD_DESC = new TField("i64Val", TType.I64, (short)5);
  private static final TField FLOAT_VAL_FIELD_DESC = new TField("floatVal", TType.FLOAT, (short)6);
  private static final TField DOUBLE_VAL_FIELD_DESC = new TField("doubleVal", TType.DOUBLE, (short)7);
  private static final TField STRING_VAL_FIELD_DESC = new TField("stringVal", TType.STRING, (short)8);
  private static final TField BINARY_VAL_FIELD_DESC = new TField("binaryVal", TType.STRING, (short)9);

  public boolean boolVal;
  public byte byteVal;
  public short i16Val;
  public int i32Val;
  public long i64Val;
  public float floatVal;
  public double doubleVal;
  public String stringVal;
  public byte[] binaryVal;
  public static final int BOOLVAL = 1;
  public static final int BYTEVAL = 2;
  public static final int I16VAL = 3;
  public static final int I32VAL = 4;
  public static final int I64VAL = 5;
  public static final int FLOATVAL = 6;
  public static final int DOUBLEVAL = 7;
  public static final int STRINGVAL = 8;
  public static final int BINARYVAL = 9;

  // isset id assignments
  private static final int __BOOLVAL_ISSET_ID = 0;
  private static final int __BYTEVAL_ISSET_ID = 1;
  private static final int __I16VAL_ISSET_ID = 2;
  private static final int __I32VAL_ISSET_ID = 3;
  private static final int __I64VAL_ISSET_ID = 4;
  private static final int __FLOATVAL_ISSET_ID = 5;
  private static final int __DOUBLEVAL_ISSET_ID = 6;
  private BitSet __isset_bit_vector = new BitSet(7);

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(BOOLVAL, new FieldMetaData("boolVal", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMetaDataMap.put(BYTEVAL, new FieldMetaData("byteVal", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BYTE)));
    tmpMetaDataMap.put(I16VAL, new FieldMetaData("i16Val", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I16)));
    tmpMetaDataMap.put(I32VAL, new FieldMetaData("i32Val", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(I64VAL, new FieldMetaData("i64Val", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMetaDataMap.put(FLOATVAL, new FieldMetaData("floatVal", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.FLOAT)));
    tmpMetaDataMap.put(DOUBLEVAL, new FieldMetaData("doubleVal", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.DOUBLE)));
    tmpMetaDataMap.put(STRINGVAL, new FieldMetaData("stringVal", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(BINARYVAL, new FieldMetaData("binaryVal", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(MyStruct.class, metaDataMap);
  }

  public MyStruct() {
  }

  public MyStruct(
      boolean boolVal,
      byte byteVal,
      short i16Val,
      int i32Val,
      long i64Val,
      float floatVal,
      double doubleVal,
      String stringVal,
      byte[] binaryVal) {
    this();
    this.boolVal = boolVal;
    setBoolValIsSet(true);
    this.byteVal = byteVal;
    setByteValIsSet(true);
    this.i16Val = i16Val;
    setI16ValIsSet(true);
    this.i32Val = i32Val;
    setI32ValIsSet(true);
    this.i64Val = i64Val;
    setI64ValIsSet(true);
    this.floatVal = floatVal;
    setFloatValIsSet(true);
    this.doubleVal = doubleVal;
    setDoubleValIsSet(true);
    this.stringVal = stringVal;
    this.binaryVal = binaryVal;
  }

  public static class Builder {
    private boolean boolVal;
    private byte byteVal;
    private short i16Val;
    private int i32Val;
    private long i64Val;
    private float floatVal;
    private double doubleVal;
    private String stringVal;
    private byte[] binaryVal;

    BitSet __optional_isset = new BitSet(7);

    public Builder() {
    }

    public Builder setBoolVal(final boolean boolVal) {
      this.boolVal = boolVal;
      __optional_isset.set(__BOOLVAL_ISSET_ID, true);
      return this;
    }

    public Builder setByteVal(final byte byteVal) {
      this.byteVal = byteVal;
      __optional_isset.set(__BYTEVAL_ISSET_ID, true);
      return this;
    }

    public Builder setI16Val(final short i16Val) {
      this.i16Val = i16Val;
      __optional_isset.set(__I16VAL_ISSET_ID, true);
      return this;
    }

    public Builder setI32Val(final int i32Val) {
      this.i32Val = i32Val;
      __optional_isset.set(__I32VAL_ISSET_ID, true);
      return this;
    }

    public Builder setI64Val(final long i64Val) {
      this.i64Val = i64Val;
      __optional_isset.set(__I64VAL_ISSET_ID, true);
      return this;
    }

    public Builder setFloatVal(final float floatVal) {
      this.floatVal = floatVal;
      __optional_isset.set(__FLOATVAL_ISSET_ID, true);
      return this;
    }

    public Builder setDoubleVal(final double doubleVal) {
      this.doubleVal = doubleVal;
      __optional_isset.set(__DOUBLEVAL_ISSET_ID, true);
      return this;
    }

    public Builder setStringVal(final String stringVal) {
      this.stringVal = stringVal;
      return this;
    }

    public Builder setBinaryVal(final byte[] binaryVal) {
      this.binaryVal = binaryVal;
      return this;
    }

    public MyStruct build() {
      MyStruct result = new MyStruct();
      if (__optional_isset.get(__BOOLVAL_ISSET_ID)) {
        result.setBoolVal(this.boolVal);
      }
      if (__optional_isset.get(__BYTEVAL_ISSET_ID)) {
        result.setByteVal(this.byteVal);
      }
      if (__optional_isset.get(__I16VAL_ISSET_ID)) {
        result.setI16Val(this.i16Val);
      }
      if (__optional_isset.get(__I32VAL_ISSET_ID)) {
        result.setI32Val(this.i32Val);
      }
      if (__optional_isset.get(__I64VAL_ISSET_ID)) {
        result.setI64Val(this.i64Val);
      }
      if (__optional_isset.get(__FLOATVAL_ISSET_ID)) {
        result.setFloatVal(this.floatVal);
      }
      if (__optional_isset.get(__DOUBLEVAL_ISSET_ID)) {
        result.setDoubleVal(this.doubleVal);
      }
      result.setStringVal(this.stringVal);
      result.setBinaryVal(this.binaryVal);
      return result;
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MyStruct(MyStruct other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.boolVal = TBaseHelper.deepCopy(other.boolVal);
    this.byteVal = TBaseHelper.deepCopy(other.byteVal);
    this.i16Val = TBaseHelper.deepCopy(other.i16Val);
    this.i32Val = TBaseHelper.deepCopy(other.i32Val);
    this.i64Val = TBaseHelper.deepCopy(other.i64Val);
    this.floatVal = TBaseHelper.deepCopy(other.floatVal);
    this.doubleVal = TBaseHelper.deepCopy(other.doubleVal);
    if (other.isSetStringVal()) {
      this.stringVal = TBaseHelper.deepCopy(other.stringVal);
    }
    if (other.isSetBinaryVal()) {
      this.binaryVal = TBaseHelper.deepCopy(other.binaryVal);
    }
  }

  public MyStruct deepCopy() {
    return new MyStruct(this);
  }

  public boolean isBoolVal() {
    return this.boolVal;
  }

  public MyStruct setBoolVal(boolean boolVal) {
    this.boolVal = boolVal;
    setBoolValIsSet(true);
    return this;
  }

  public void unsetBoolVal() {
    __isset_bit_vector.clear(__BOOLVAL_ISSET_ID);
  }

  // Returns true if field boolVal is set (has been assigned a value) and false otherwise
  public boolean isSetBoolVal() {
    return __isset_bit_vector.get(__BOOLVAL_ISSET_ID);
  }

  public void setBoolValIsSet(boolean __value) {
    __isset_bit_vector.set(__BOOLVAL_ISSET_ID, __value);
  }

  public byte getByteVal() {
    return this.byteVal;
  }

  public MyStruct setByteVal(byte byteVal) {
    this.byteVal = byteVal;
    setByteValIsSet(true);
    return this;
  }

  public void unsetByteVal() {
    __isset_bit_vector.clear(__BYTEVAL_ISSET_ID);
  }

  // Returns true if field byteVal is set (has been assigned a value) and false otherwise
  public boolean isSetByteVal() {
    return __isset_bit_vector.get(__BYTEVAL_ISSET_ID);
  }

  public void setByteValIsSet(boolean __value) {
    __isset_bit_vector.set(__BYTEVAL_ISSET_ID, __value);
  }

  public short getI16Val() {
    return this.i16Val;
  }

  public MyStruct setI16Val(short i16Val) {
    this.i16Val = i16Val;
    setI16ValIsSet(true);
    return this;
  }

  public void unsetI16Val() {
    __isset_bit_vector.clear(__I16VAL_ISSET_ID);
  }

  // Returns true if field i16Val is set (has been assigned a value) and false otherwise
  public boolean isSetI16Val() {
    return __isset_bit_vector.get(__I16VAL_ISSET_ID);
  }

  public void setI16ValIsSet(boolean __value) {
    __isset_bit_vector.set(__I16VAL_ISSET_ID, __value);
  }

  public int getI32Val() {
    return this.i32Val;
  }

  public MyStruct setI32Val(int i32Val) {
    this.i32Val = i32Val;
    setI32ValIsSet(true);
    return this;
  }

  public void unsetI32Val() {
    __isset_bit_vector.clear(__I32VAL_ISSET_ID);
  }

  // Returns true if field i32Val is set (has been assigned a value) and false otherwise
  public boolean isSetI32Val() {
    return __isset_bit_vector.get(__I32VAL_ISSET_ID);
  }

  public void setI32ValIsSet(boolean __value) {
    __isset_bit_vector.set(__I32VAL_ISSET_ID, __value);
  }

  public long getI64Val() {
    return this.i64Val;
  }

  public MyStruct setI64Val(long i64Val) {
    this.i64Val = i64Val;
    setI64ValIsSet(true);
    return this;
  }

  public void unsetI64Val() {
    __isset_bit_vector.clear(__I64VAL_ISSET_ID);
  }

  // Returns true if field i64Val is set (has been assigned a value) and false otherwise
  public boolean isSetI64Val() {
    return __isset_bit_vector.get(__I64VAL_ISSET_ID);
  }

  public void setI64ValIsSet(boolean __value) {
    __isset_bit_vector.set(__I64VAL_ISSET_ID, __value);
  }

  public float getFloatVal() {
    return this.floatVal;
  }

  public MyStruct setFloatVal(float floatVal) {
    this.floatVal = floatVal;
    setFloatValIsSet(true);
    return this;
  }

  public void unsetFloatVal() {
    __isset_bit_vector.clear(__FLOATVAL_ISSET_ID);
  }

  // Returns true if field floatVal is set (has been assigned a value) and false otherwise
  public boolean isSetFloatVal() {
    return __isset_bit_vector.get(__FLOATVAL_ISSET_ID);
  }

  public void setFloatValIsSet(boolean __value) {
    __isset_bit_vector.set(__FLOATVAL_ISSET_ID, __value);
  }

  public double getDoubleVal() {
    return this.doubleVal;
  }

  public MyStruct setDoubleVal(double doubleVal) {
    this.doubleVal = doubleVal;
    setDoubleValIsSet(true);
    return this;
  }

  public void unsetDoubleVal() {
    __isset_bit_vector.clear(__DOUBLEVAL_ISSET_ID);
  }

  // Returns true if field doubleVal is set (has been assigned a value) and false otherwise
  public boolean isSetDoubleVal() {
    return __isset_bit_vector.get(__DOUBLEVAL_ISSET_ID);
  }

  public void setDoubleValIsSet(boolean __value) {
    __isset_bit_vector.set(__DOUBLEVAL_ISSET_ID, __value);
  }

  public String getStringVal() {
    return this.stringVal;
  }

  public MyStruct setStringVal(String stringVal) {
    this.stringVal = stringVal;
    return this;
  }

  public void unsetStringVal() {
    this.stringVal = null;
  }

  // Returns true if field stringVal is set (has been assigned a value) and false otherwise
  public boolean isSetStringVal() {
    return this.stringVal != null;
  }

  public void setStringValIsSet(boolean __value) {
    if (!__value) {
      this.stringVal = null;
    }
  }

  public byte[] getBinaryVal() {
    return this.binaryVal;
  }

  public MyStruct setBinaryVal(byte[] binaryVal) {
    this.binaryVal = binaryVal;
    return this;
  }

  public void unsetBinaryVal() {
    this.binaryVal = null;
  }

  // Returns true if field binaryVal is set (has been assigned a value) and false otherwise
  public boolean isSetBinaryVal() {
    return this.binaryVal != null;
  }

  public void setBinaryValIsSet(boolean __value) {
    if (!__value) {
      this.binaryVal = null;
    }
  }

  public void setFieldValue(int fieldID, Object __value) {
    switch (fieldID) {
    case BOOLVAL:
      if (__value == null) {
        unsetBoolVal();
      } else {
        setBoolVal((Boolean)__value);
      }
      break;

    case BYTEVAL:
      if (__value == null) {
        unsetByteVal();
      } else {
        setByteVal((Byte)__value);
      }
      break;

    case I16VAL:
      if (__value == null) {
        unsetI16Val();
      } else {
        setI16Val((Short)__value);
      }
      break;

    case I32VAL:
      if (__value == null) {
        unsetI32Val();
      } else {
        setI32Val((Integer)__value);
      }
      break;

    case I64VAL:
      if (__value == null) {
        unsetI64Val();
      } else {
        setI64Val((Long)__value);
      }
      break;

    case FLOATVAL:
      if (__value == null) {
        unsetFloatVal();
      } else {
        setFloatVal((Float)__value);
      }
      break;

    case DOUBLEVAL:
      if (__value == null) {
        unsetDoubleVal();
      } else {
        setDoubleVal((Double)__value);
      }
      break;

    case STRINGVAL:
      if (__value == null) {
        unsetStringVal();
      } else {
        setStringVal((String)__value);
      }
      break;

    case BINARYVAL:
      if (__value == null) {
        unsetBinaryVal();
      } else {
        setBinaryVal((byte[])__value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case BOOLVAL:
      return new Boolean(isBoolVal());

    case BYTEVAL:
      return new Byte(getByteVal());

    case I16VAL:
      return new Short(getI16Val());

    case I32VAL:
      return new Integer(getI32Val());

    case I64VAL:
      return new Long(getI64Val());

    case FLOATVAL:
      return new Float(getFloatVal());

    case DOUBLEVAL:
      return new Double(getDoubleVal());

    case STRINGVAL:
      return getStringVal();

    case BINARYVAL:
      return getBinaryVal();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof MyStruct))
      return false;
    MyStruct that = (MyStruct)_that;

    if (!TBaseHelper.equalsNobinary(this.boolVal, that.boolVal)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.byteVal, that.byteVal)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.i16Val, that.i16Val)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.i32Val, that.i32Val)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.i64Val, that.i64Val)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.floatVal, that.floatVal)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.doubleVal, that.doubleVal)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetStringVal(), that.isSetStringVal(), this.stringVal, that.stringVal)) { return false; }

    if (!TBaseHelper.equalsSlow(this.isSetBinaryVal(), that.isSetBinaryVal(), this.binaryVal, that.binaryVal)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {boolVal, byteVal, i16Val, i32Val, i64Val, floatVal, doubleVal, stringVal, binaryVal});
  }

  @Override
  public int compareTo(MyStruct other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBoolVal()).compareTo(other.isSetBoolVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(boolVal, other.boolVal);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetByteVal()).compareTo(other.isSetByteVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(byteVal, other.byteVal);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetI16Val()).compareTo(other.isSetI16Val());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(i16Val, other.i16Val);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetI32Val()).compareTo(other.isSetI32Val());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(i32Val, other.i32Val);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetI64Val()).compareTo(other.isSetI64Val());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(i64Val, other.i64Val);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetFloatVal()).compareTo(other.isSetFloatVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(floatVal, other.floatVal);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetDoubleVal()).compareTo(other.isSetDoubleVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(doubleVal, other.doubleVal);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetStringVal()).compareTo(other.isSetStringVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(stringVal, other.stringVal);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetBinaryVal()).compareTo(other.isSetBinaryVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(binaryVal, other.binaryVal);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) {
        break;
      }
      switch (__field.id)
      {
        case BOOLVAL:
          if (__field.type == TType.BOOL) {
            this.boolVal = iprot.readBool();
            setBoolValIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case BYTEVAL:
          if (__field.type == TType.BYTE) {
            this.byteVal = iprot.readByte();
            setByteValIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case I16VAL:
          if (__field.type == TType.I16) {
            this.i16Val = iprot.readI16();
            setI16ValIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case I32VAL:
          if (__field.type == TType.I32) {
            this.i32Val = iprot.readI32();
            setI32ValIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case I64VAL:
          if (__field.type == TType.I64) {
            this.i64Val = iprot.readI64();
            setI64ValIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case FLOATVAL:
          if (__field.type == TType.FLOAT) {
            this.floatVal = iprot.readFloat();
            setFloatValIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case DOUBLEVAL:
          if (__field.type == TType.DOUBLE) {
            this.doubleVal = iprot.readDouble();
            setDoubleValIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case STRINGVAL:
          if (__field.type == TType.STRING) {
            this.stringVal = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case BINARYVAL:
          if (__field.type == TType.STRING) {
            this.binaryVal = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(BOOL_VAL_FIELD_DESC);
    oprot.writeBool(this.boolVal);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(BYTE_VAL_FIELD_DESC);
    oprot.writeByte(this.byteVal);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(I16_VAL_FIELD_DESC);
    oprot.writeI16(this.i16Val);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(I32_VAL_FIELD_DESC);
    oprot.writeI32(this.i32Val);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(I64_VAL_FIELD_DESC);
    oprot.writeI64(this.i64Val);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(FLOAT_VAL_FIELD_DESC);
    oprot.writeFloat(this.floatVal);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(DOUBLE_VAL_FIELD_DESC);
    oprot.writeDouble(this.doubleVal);
    oprot.writeFieldEnd();
    if (this.stringVal != null) {
      oprot.writeFieldBegin(STRING_VAL_FIELD_DESC);
      oprot.writeString(this.stringVal);
      oprot.writeFieldEnd();
    }
    if (this.binaryVal != null) {
      oprot.writeFieldBegin(BINARY_VAL_FIELD_DESC);
      oprot.writeBinary(this.binaryVal);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("MyStruct");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("boolVal");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.isBoolVal(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("byteVal");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getByteVal(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("i16Val");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getI16Val(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("i32Val");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getI32Val(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("i64Val");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getI64Val(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("floatVal");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getFloatVal(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("doubleVal");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getDoubleVal(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("stringVal");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getStringVal() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getStringVal(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("binaryVal");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getBinaryVal() == null) {
      sb.append("null");
    } else {
        int __binaryVal_size = Math.min(this.getBinaryVal().length, 128);
        for (int i = 0; i < __binaryVal_size; i++) {
          if (i != 0) sb.append(" ");
          sb.append(Integer.toHexString(this.getBinaryVal()[i]).length() > 1 ? Integer.toHexString(this.getBinaryVal()[i]).substring(Integer.toHexString(this.getBinaryVal()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.getBinaryVal()[i]).toUpperCase());
        }
        if (this.getBinaryVal().length > 128) sb.append(" ...");
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

