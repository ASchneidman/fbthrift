/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package test.fixtures.patch;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class MyStructField29Patch implements TBase, java.io.Serializable, Cloneable, Comparable<MyStructField29Patch> {
  private static final TStruct STRUCT_DESC = new TStruct("MyStructField29Patch");
  private static final TField ASSIGN_FIELD_DESC = new TField("assign", TType.LIST, (short)1);
  private static final TField CLEAR_FIELD_DESC = new TField("clear", TType.BOOL, (short)2);
  private static final TField PATCH_FIELD_DESC = new TField("patch", TType.MAP, (short)3);
  private static final TField REMOVE_FIELD_DESC = new TField("remove", TType.LIST, (short)7);
  private static final TField PREPEND_FIELD_DESC = new TField("prepend", TType.LIST, (short)8);
  private static final TField APPEND_FIELD_DESC = new TField("append", TType.LIST, (short)9);

  /**
   * Assigns to a (set) value.
   * 
   * If set, all other operations are ignored.
   * 
   * Note: Optional and union fields must be set before assigned.
   * 
   */
  public List<Map<String,Integer>> assign;
  /**
   * Clears a value. Applies first.
   */
  public boolean clear;
  /**
   * Patches list values by index. Applies second.
   */
  public Map<Integer,MyStructField29Patch1> patch;
  /**
   * Removes entries, if present. Applies third.
   */
  public List<Map<String,Integer>> remove;
  /**
   * Prepends to the front of a given list.
   */
  public List<Map<String,Integer>> prepend;
  /**
   * Appends to the back of a given list.
   */
  public List<Map<String,Integer>> append;
  public static final int ASSIGN = 1;
  public static final int CLEAR = 2;
  public static final int PATCH = 3;
  public static final int REMOVE = 7;
  public static final int PREPEND = 8;
  public static final int APPEND = 9;

  // isset id assignments
  private static final int __CLEAR_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(ASSIGN, new FieldMetaData("assign", TFieldRequirementType.OPTIONAL, 
        new ListMetaData(TType.LIST, 
            new MapMetaData(TType.MAP, 
                new FieldValueMetaData(TType.STRING), 
                new FieldValueMetaData(TType.I32)))));
    tmpMetaDataMap.put(CLEAR, new FieldMetaData("clear", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMetaDataMap.put(PATCH, new FieldMetaData("patch", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.I32), 
            new StructMetaData(TType.STRUCT, MyStructField29Patch1.class))));
    tmpMetaDataMap.put(REMOVE, new FieldMetaData("remove", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new MapMetaData(TType.MAP, 
                new FieldValueMetaData(TType.STRING), 
                new FieldValueMetaData(TType.I32)))));
    tmpMetaDataMap.put(PREPEND, new FieldMetaData("prepend", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new MapMetaData(TType.MAP, 
                new FieldValueMetaData(TType.STRING), 
                new FieldValueMetaData(TType.I32)))));
    tmpMetaDataMap.put(APPEND, new FieldMetaData("append", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new MapMetaData(TType.MAP, 
                new FieldValueMetaData(TType.STRING), 
                new FieldValueMetaData(TType.I32)))));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(MyStructField29Patch.class, metaDataMap);
  }

  public MyStructField29Patch() {
  }

  public MyStructField29Patch(
      boolean clear,
      Map<Integer,MyStructField29Patch1> patch,
      List<Map<String,Integer>> remove,
      List<Map<String,Integer>> prepend,
      List<Map<String,Integer>> append) {
    this();
    this.clear = clear;
    setClearIsSet(true);
    this.patch = patch;
    this.remove = remove;
    this.prepend = prepend;
    this.append = append;
  }

  public MyStructField29Patch(
      List<Map<String,Integer>> assign,
      boolean clear,
      Map<Integer,MyStructField29Patch1> patch,
      List<Map<String,Integer>> remove,
      List<Map<String,Integer>> prepend,
      List<Map<String,Integer>> append) {
    this();
    this.assign = assign;
    this.clear = clear;
    setClearIsSet(true);
    this.patch = patch;
    this.remove = remove;
    this.prepend = prepend;
    this.append = append;
  }

  public static class Builder {
    private List<Map<String,Integer>> assign;
    private boolean clear;
    private Map<Integer,MyStructField29Patch1> patch;
    private List<Map<String,Integer>> remove;
    private List<Map<String,Integer>> prepend;
    private List<Map<String,Integer>> append;

    BitSet __optional_isset = new BitSet(1);

    public Builder() {
    }

    public Builder setAssign(final List<Map<String,Integer>> assign) {
      this.assign = assign;
      return this;
    }

    public Builder setClear(final boolean clear) {
      this.clear = clear;
      __optional_isset.set(__CLEAR_ISSET_ID, true);
      return this;
    }

    public Builder setPatch(final Map<Integer,MyStructField29Patch1> patch) {
      this.patch = patch;
      return this;
    }

    public Builder setRemove(final List<Map<String,Integer>> remove) {
      this.remove = remove;
      return this;
    }

    public Builder setPrepend(final List<Map<String,Integer>> prepend) {
      this.prepend = prepend;
      return this;
    }

    public Builder setAppend(final List<Map<String,Integer>> append) {
      this.append = append;
      return this;
    }

    public MyStructField29Patch build() {
      MyStructField29Patch result = new MyStructField29Patch();
      result.setAssign(this.assign);
      if (__optional_isset.get(__CLEAR_ISSET_ID)) {
        result.setClear(this.clear);
      }
      result.setPatch(this.patch);
      result.setRemove(this.remove);
      result.setPrepend(this.prepend);
      result.setAppend(this.append);
      return result;
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MyStructField29Patch(MyStructField29Patch other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetAssign()) {
      this.assign = TBaseHelper.deepCopy(other.assign);
    }
    this.clear = TBaseHelper.deepCopy(other.clear);
    if (other.isSetPatch()) {
      this.patch = TBaseHelper.deepCopy(other.patch);
    }
    if (other.isSetRemove()) {
      this.remove = TBaseHelper.deepCopy(other.remove);
    }
    if (other.isSetPrepend()) {
      this.prepend = TBaseHelper.deepCopy(other.prepend);
    }
    if (other.isSetAppend()) {
      this.append = TBaseHelper.deepCopy(other.append);
    }
  }

  public MyStructField29Patch deepCopy() {
    return new MyStructField29Patch(this);
  }

  /**
   * Assigns to a (set) value.
   * 
   * If set, all other operations are ignored.
   * 
   * Note: Optional and union fields must be set before assigned.
   * 
   */
  public List<Map<String,Integer>> getAssign() {
    return this.assign;
  }

  /**
   * Assigns to a (set) value.
   * 
   * If set, all other operations are ignored.
   * 
   * Note: Optional and union fields must be set before assigned.
   * 
   */
  public MyStructField29Patch setAssign(List<Map<String,Integer>> assign) {
    this.assign = assign;
    return this;
  }

  public void unsetAssign() {
    this.assign = null;
  }

  // Returns true if field assign is set (has been assigned a value) and false otherwise
  public boolean isSetAssign() {
    return this.assign != null;
  }

  public void setAssignIsSet(boolean __value) {
    if (!__value) {
      this.assign = null;
    }
  }

  /**
   * Clears a value. Applies first.
   */
  public boolean isClear() {
    return this.clear;
  }

  /**
   * Clears a value. Applies first.
   */
  public MyStructField29Patch setClear(boolean clear) {
    this.clear = clear;
    setClearIsSet(true);
    return this;
  }

  public void unsetClear() {
    __isset_bit_vector.clear(__CLEAR_ISSET_ID);
  }

  // Returns true if field clear is set (has been assigned a value) and false otherwise
  public boolean isSetClear() {
    return __isset_bit_vector.get(__CLEAR_ISSET_ID);
  }

  public void setClearIsSet(boolean __value) {
    __isset_bit_vector.set(__CLEAR_ISSET_ID, __value);
  }

  /**
   * Patches list values by index. Applies second.
   */
  public Map<Integer,MyStructField29Patch1> getPatch() {
    return this.patch;
  }

  /**
   * Patches list values by index. Applies second.
   */
  public MyStructField29Patch setPatch(Map<Integer,MyStructField29Patch1> patch) {
    this.patch = patch;
    return this;
  }

  public void unsetPatch() {
    this.patch = null;
  }

  // Returns true if field patch is set (has been assigned a value) and false otherwise
  public boolean isSetPatch() {
    return this.patch != null;
  }

  public void setPatchIsSet(boolean __value) {
    if (!__value) {
      this.patch = null;
    }
  }

  /**
   * Removes entries, if present. Applies third.
   */
  public List<Map<String,Integer>> getRemove() {
    return this.remove;
  }

  /**
   * Removes entries, if present. Applies third.
   */
  public MyStructField29Patch setRemove(List<Map<String,Integer>> remove) {
    this.remove = remove;
    return this;
  }

  public void unsetRemove() {
    this.remove = null;
  }

  // Returns true if field remove is set (has been assigned a value) and false otherwise
  public boolean isSetRemove() {
    return this.remove != null;
  }

  public void setRemoveIsSet(boolean __value) {
    if (!__value) {
      this.remove = null;
    }
  }

  /**
   * Prepends to the front of a given list.
   */
  public List<Map<String,Integer>> getPrepend() {
    return this.prepend;
  }

  /**
   * Prepends to the front of a given list.
   */
  public MyStructField29Patch setPrepend(List<Map<String,Integer>> prepend) {
    this.prepend = prepend;
    return this;
  }

  public void unsetPrepend() {
    this.prepend = null;
  }

  // Returns true if field prepend is set (has been assigned a value) and false otherwise
  public boolean isSetPrepend() {
    return this.prepend != null;
  }

  public void setPrependIsSet(boolean __value) {
    if (!__value) {
      this.prepend = null;
    }
  }

  /**
   * Appends to the back of a given list.
   */
  public List<Map<String,Integer>> getAppend() {
    return this.append;
  }

  /**
   * Appends to the back of a given list.
   */
  public MyStructField29Patch setAppend(List<Map<String,Integer>> append) {
    this.append = append;
    return this;
  }

  public void unsetAppend() {
    this.append = null;
  }

  // Returns true if field append is set (has been assigned a value) and false otherwise
  public boolean isSetAppend() {
    return this.append != null;
  }

  public void setAppendIsSet(boolean __value) {
    if (!__value) {
      this.append = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object __value) {
    switch (fieldID) {
    case ASSIGN:
      if (__value == null) {
        unsetAssign();
      } else {
        setAssign((List<Map<String,Integer>>)__value);
      }
      break;

    case CLEAR:
      if (__value == null) {
        unsetClear();
      } else {
        setClear((Boolean)__value);
      }
      break;

    case PATCH:
      if (__value == null) {
        unsetPatch();
      } else {
        setPatch((Map<Integer,MyStructField29Patch1>)__value);
      }
      break;

    case REMOVE:
      if (__value == null) {
        unsetRemove();
      } else {
        setRemove((List<Map<String,Integer>>)__value);
      }
      break;

    case PREPEND:
      if (__value == null) {
        unsetPrepend();
      } else {
        setPrepend((List<Map<String,Integer>>)__value);
      }
      break;

    case APPEND:
      if (__value == null) {
        unsetAppend();
      } else {
        setAppend((List<Map<String,Integer>>)__value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case ASSIGN:
      return getAssign();

    case CLEAR:
      return new Boolean(isClear());

    case PATCH:
      return getPatch();

    case REMOVE:
      return getRemove();

    case PREPEND:
      return getPrepend();

    case APPEND:
      return getAppend();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof MyStructField29Patch))
      return false;
    MyStructField29Patch that = (MyStructField29Patch)_that;

    if (!TBaseHelper.equalsNobinary(this.isSetAssign(), that.isSetAssign(), this.assign, that.assign)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.clear, that.clear)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetPatch(), that.isSetPatch(), this.patch, that.patch)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetRemove(), that.isSetRemove(), this.remove, that.remove)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetPrepend(), that.isSetPrepend(), this.prepend, that.prepend)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetAppend(), that.isSetAppend(), this.append, that.append)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {assign, clear, patch, remove, prepend, append});
  }

  @Override
  public int compareTo(MyStructField29Patch other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAssign()).compareTo(other.isSetAssign());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(assign, other.assign);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetClear()).compareTo(other.isSetClear());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(clear, other.clear);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetPatch()).compareTo(other.isSetPatch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(patch, other.patch);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetRemove()).compareTo(other.isSetRemove());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(remove, other.remove);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetPrepend()).compareTo(other.isSetPrepend());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(prepend, other.prepend);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetAppend()).compareTo(other.isSetAppend());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(append, other.append);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) {
        break;
      }
      switch (__field.id)
      {
        case ASSIGN:
          if (__field.type == TType.LIST) {
            {
              TList _list131 = iprot.readListBegin();
              this.assign = new ArrayList<Map<String,Integer>>(Math.max(0, _list131.size));
              for (int _i132 = 0; 
                   (_list131.size < 0) ? iprot.peekList() : (_i132 < _list131.size); 
                   ++_i132)
              {
                Map<String,Integer> _elem133;
                {
                  TMap _map134 = iprot.readMapBegin();
                  _elem133 = new HashMap<String,Integer>(Math.max(0, 2*_map134.size));
                  for (int _i135 = 0; 
                       (_map134.size < 0) ? iprot.peekMap() : (_i135 < _map134.size); 
                       ++_i135)
                  {
                    String _key136;
                    int _val137;
                    _key136 = iprot.readString();
                    _val137 = iprot.readI32();
                    _elem133.put(_key136, _val137);
                  }
                  iprot.readMapEnd();
                }
                this.assign.add(_elem133);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case CLEAR:
          if (__field.type == TType.BOOL) {
            this.clear = iprot.readBool();
            setClearIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case PATCH:
          if (__field.type == TType.MAP) {
            {
              TMap _map138 = iprot.readMapBegin();
              this.patch = new HashMap<Integer,MyStructField29Patch1>(Math.max(0, 2*_map138.size));
              for (int _i139 = 0; 
                   (_map138.size < 0) ? iprot.peekMap() : (_i139 < _map138.size); 
                   ++_i139)
              {
                int _key140;
                MyStructField29Patch1 _val141;
                _key140 = iprot.readI32();
                _val141 = new MyStructField29Patch1();
                _val141.read(iprot);
                this.patch.put(_key140, _val141);
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case REMOVE:
          if (__field.type == TType.LIST) {
            {
              TList _list142 = iprot.readListBegin();
              this.remove = new ArrayList<Map<String,Integer>>(Math.max(0, _list142.size));
              for (int _i143 = 0; 
                   (_list142.size < 0) ? iprot.peekList() : (_i143 < _list142.size); 
                   ++_i143)
              {
                Map<String,Integer> _elem144;
                {
                  TMap _map145 = iprot.readMapBegin();
                  _elem144 = new HashMap<String,Integer>(Math.max(0, 2*_map145.size));
                  for (int _i146 = 0; 
                       (_map145.size < 0) ? iprot.peekMap() : (_i146 < _map145.size); 
                       ++_i146)
                  {
                    String _key147;
                    int _val148;
                    _key147 = iprot.readString();
                    _val148 = iprot.readI32();
                    _elem144.put(_key147, _val148);
                  }
                  iprot.readMapEnd();
                }
                this.remove.add(_elem144);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case PREPEND:
          if (__field.type == TType.LIST) {
            {
              TList _list149 = iprot.readListBegin();
              this.prepend = new ArrayList<Map<String,Integer>>(Math.max(0, _list149.size));
              for (int _i150 = 0; 
                   (_list149.size < 0) ? iprot.peekList() : (_i150 < _list149.size); 
                   ++_i150)
              {
                Map<String,Integer> _elem151;
                {
                  TMap _map152 = iprot.readMapBegin();
                  _elem151 = new HashMap<String,Integer>(Math.max(0, 2*_map152.size));
                  for (int _i153 = 0; 
                       (_map152.size < 0) ? iprot.peekMap() : (_i153 < _map152.size); 
                       ++_i153)
                  {
                    String _key154;
                    int _val155;
                    _key154 = iprot.readString();
                    _val155 = iprot.readI32();
                    _elem151.put(_key154, _val155);
                  }
                  iprot.readMapEnd();
                }
                this.prepend.add(_elem151);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case APPEND:
          if (__field.type == TType.LIST) {
            {
              TList _list156 = iprot.readListBegin();
              this.append = new ArrayList<Map<String,Integer>>(Math.max(0, _list156.size));
              for (int _i157 = 0; 
                   (_list156.size < 0) ? iprot.peekList() : (_i157 < _list156.size); 
                   ++_i157)
              {
                Map<String,Integer> _elem158;
                {
                  TMap _map159 = iprot.readMapBegin();
                  _elem158 = new HashMap<String,Integer>(Math.max(0, 2*_map159.size));
                  for (int _i160 = 0; 
                       (_map159.size < 0) ? iprot.peekMap() : (_i160 < _map159.size); 
                       ++_i160)
                  {
                    String _key161;
                    int _val162;
                    _key161 = iprot.readString();
                    _val162 = iprot.readI32();
                    _elem158.put(_key161, _val162);
                  }
                  iprot.readMapEnd();
                }
                this.append.add(_elem158);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.assign != null) {
      if (isSetAssign()) {
        oprot.writeFieldBegin(ASSIGN_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.MAP, this.assign.size()));
          for (Map<String,Integer> _iter163 : this.assign)          {
            {
              oprot.writeMapBegin(new TMap(TType.STRING, TType.I32, _iter163.size()));
              for (Map.Entry<String, Integer> _iter164 : _iter163.entrySet())              {
                oprot.writeString(_iter164.getKey());
                oprot.writeI32(_iter164.getValue());
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldBegin(CLEAR_FIELD_DESC);
    oprot.writeBool(this.clear);
    oprot.writeFieldEnd();
    if (this.patch != null) {
      oprot.writeFieldBegin(PATCH_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.I32, TType.STRUCT, this.patch.size()));
        for (Map.Entry<Integer, MyStructField29Patch1> _iter165 : this.patch.entrySet())        {
          oprot.writeI32(_iter165.getKey());
          _iter165.getValue().write(oprot);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.remove != null) {
      oprot.writeFieldBegin(REMOVE_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.MAP, this.remove.size()));
        for (Map<String,Integer> _iter166 : this.remove)        {
          {
            oprot.writeMapBegin(new TMap(TType.STRING, TType.I32, _iter166.size()));
            for (Map.Entry<String, Integer> _iter167 : _iter166.entrySet())            {
              oprot.writeString(_iter167.getKey());
              oprot.writeI32(_iter167.getValue());
            }
            oprot.writeMapEnd();
          }
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.prepend != null) {
      oprot.writeFieldBegin(PREPEND_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.MAP, this.prepend.size()));
        for (Map<String,Integer> _iter168 : this.prepend)        {
          {
            oprot.writeMapBegin(new TMap(TType.STRING, TType.I32, _iter168.size()));
            for (Map.Entry<String, Integer> _iter169 : _iter168.entrySet())            {
              oprot.writeString(_iter169.getKey());
              oprot.writeI32(_iter169.getValue());
            }
            oprot.writeMapEnd();
          }
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.append != null) {
      oprot.writeFieldBegin(APPEND_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.MAP, this.append.size()));
        for (Map<String,Integer> _iter170 : this.append)        {
          {
            oprot.writeMapBegin(new TMap(TType.STRING, TType.I32, _iter170.size()));
            for (Map.Entry<String, Integer> _iter171 : _iter170.entrySet())            {
              oprot.writeString(_iter171.getKey());
              oprot.writeI32(_iter171.getValue());
            }
            oprot.writeMapEnd();
          }
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("MyStructField29Patch");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    if (isSetAssign())
    {
      sb.append(indentStr);
      sb.append("assign");
      sb.append(space);
      sb.append(":").append(space);
      if (this.getAssign() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this.getAssign(), indent + 1, prettyPrint));
      }
      first = false;
    }
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("clear");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.isClear(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("patch");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getPatch() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getPatch(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("remove");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getRemove() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getRemove(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("prepend");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getPrepend() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getPrepend(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("append");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getAppend() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getAppend(), indent + 1, prettyPrint));
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

