// @generated by Thrift for thrift/compiler/test/fixtures/patch/src/module.thrift
// This file is probably not the place you want to edit!

package module // thrift/compiler/test/fixtures/patch/src/module.thrift

import (
  "fmt"

  thrift0 "thrift/annotation/thrift"
  patch "thrift/lib/thrift/patch"
  standard "thrift/lib/thrift/standard"
  "github.com/facebook/fbthrift/thrift/lib/go/thrift"
)

var _ = thrift0.GoUnusedProtection__
var _ = patch.GoUnusedProtection__
var _ = standard.GoUnusedProtection__

// (needed to ensure safety because of naive import list construction)
var _ = fmt.Printf
var _ = thrift.ZERO


type MyEnum int32

const (
    MyEnum_MyValue0 MyEnum = 0
)

// Enum value maps for MyEnum
var (
    MyEnum_name = map[MyEnum]string {
        MyEnum_MyValue0: "MyValue0",
    }

    MyEnum_value = map[string]MyEnum {
        "MyValue0": MyEnum_MyValue0,
    }

    // Deprecated: Use MyEnum_name instead.
    MyEnumToName = MyEnum_name

    // Deprecated: Use MyEnum_value instead.
    MyEnumToValue = MyEnum_value

    // Deprecated: Use MyEnum_name instead (e.g. `for name, _ := range MyEnum_name {}`).
    MyEnumNames = []string{
        "MyValue0",
    }

    // Deprecated: Use MyEnum_value instead (e.g. `for value, _ := range MyEnum_value {}`).
    MyEnumValues = []MyEnum{
        0,
    }
)

func (x MyEnum) String() string {
    if v, ok := MyEnumToName[x]; ok {
        return v
    }
    return "<UNSET>"
}

func (x MyEnum) Ptr() *MyEnum {
    return &x
}

// Deprecated: Use MyEnum_value instead (e.g. `x, ok := MyEnum_value["name"]`).
func MyEnumFromString(s string) (MyEnum, error) {
    if v, ok := MyEnum_value[s]; ok {
        return v, nil
    }
    return MyEnum(0), fmt.Errorf("not a valid MyEnum string")
}

// Deprecated: Use MyEnum.Ptr() instead.
func MyEnumPtr(v MyEnum) *MyEnum {
    return &v
}


type MyData struct {
    Data1 string `thrift:"data1,1" json:"data1" db:"data1"`
    Data2 int32 `thrift:"data2,2" json:"data2" db:"data2"`
}
// Compile time interface enforcer
var _ thrift.Struct = &MyData{}

func NewMyData() *MyData {
    return (&MyData{})
}
func (x *MyData) GetData1() string {
    return x.Data1
}

func (x *MyData) GetData2() int32 {
    return x.Data2
}

func (x *MyData) SetData1(data1 string) *MyData {
    x.Data1 = data1
    return x
}

func (x *MyData) SetData2(data2 int32) *MyData {
    x.Data2 = data2
    return x
}



func (x *MyData) writeField1(p thrift.Protocol) error {  // Data1
    if err := p.WriteFieldBegin("data1", thrift.STRING, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetData1()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyData) writeField2(p thrift.Protocol) error {  // Data2
    if err := p.WriteFieldBegin("data2", thrift.I32, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetData2()
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyData) readField1(p thrift.Protocol) error {  // Data1
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetData1(result)
    return nil
}

func (x *MyData) readField2(p thrift.Protocol) error {  // Data2
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.SetData2(result)
    return nil
}


// Deprecated: Use MyData.Set* methods instead or set the fields directly.
type MyDataBuilder struct {
    obj *MyData
}

func NewMyDataBuilder() *MyDataBuilder {
    return &MyDataBuilder{
        obj: NewMyData(),
    }
}

func (x *MyDataBuilder) Data1(data1 string) *MyDataBuilder {
    x.obj.Data1 = data1
    return x
}

func (x *MyDataBuilder) Data2(data2 int32) *MyDataBuilder {
    x.obj.Data2 = data2
    return x
}

func (x *MyDataBuilder) Emit() *MyData {
    var objCopy MyData = *x.obj
    return &objCopy
}

func (x *MyData) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("MyData"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyData) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // data1
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // data2
            if err := x.readField2(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type InnerUnion struct {
    InnerOption []byte `thrift:"innerOption,1" json:"innerOption" db:"innerOption"`
}
// Compile time interface enforcer
var _ thrift.Struct = &InnerUnion{}

func NewInnerUnion() *InnerUnion {
    return (&InnerUnion{})
}
func (x *InnerUnion) GetInnerOption() []byte {
    return x.InnerOption
}

func (x *InnerUnion) SetInnerOption(innerOption []byte) *InnerUnion {
    x.InnerOption = innerOption
    return x
}

func (x *InnerUnion) IsSetInnerOption() bool {
    return x.InnerOption != nil
}

func (x *InnerUnion) writeField1(p thrift.Protocol) error {  // InnerOption
    if !x.IsSetInnerOption() {
        return nil
    }

    if err := p.WriteFieldBegin("innerOption", thrift.BINARY, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetInnerOption()
    if err := p.WriteBinary(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *InnerUnion) readField1(p thrift.Protocol) error {  // InnerOption
    result, err := p.ReadBinary()
if err != nil {
    return err
}

    x.SetInnerOption(result)
    return nil
}



func (x *InnerUnion) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("InnerUnion"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *InnerUnion) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // innerOption
            if err := x.readField1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type MyUnion struct {
    Option1 *string `thrift:"option1,1" json:"option1" db:"option1"`
    Option2 *int32 `thrift:"option2,2" json:"option2" db:"option2"`
    Option3 *InnerUnion `thrift:"option3,3" json:"option3" db:"option3"`
}
// Compile time interface enforcer
var _ thrift.Struct = &MyUnion{}

func NewMyUnion() *MyUnion {
    return (&MyUnion{})
}
func (x *MyUnion) GetOption1() *string {
    return x.Option1
}

func (x *MyUnion) GetOption2() *int32 {
    return x.Option2
}

func (x *MyUnion) GetOption3() *InnerUnion {
    return x.Option3
}

func (x *MyUnion) SetOption1(option1 string) *MyUnion {
    x.Option1 = &option1
    return x
}

func (x *MyUnion) SetOption2(option2 int32) *MyUnion {
    x.Option2 = &option2
    return x
}

func (x *MyUnion) SetOption3(option3 InnerUnion) *MyUnion {
    x.Option3 = &option3
    return x
}

func (x *MyUnion) IsSetOption1() bool {
    return x.Option1 != nil
}

func (x *MyUnion) IsSetOption2() bool {
    return x.Option2 != nil
}

func (x *MyUnion) IsSetOption3() bool {
    return x.Option3 != nil
}

func (x *MyUnion) writeField1(p thrift.Protocol) error {  // Option1
    if !x.IsSetOption1() {
        return nil
    }

    if err := p.WriteFieldBegin("option1", thrift.STRING, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOption1()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnion) writeField2(p thrift.Protocol) error {  // Option2
    if !x.IsSetOption2() {
        return nil
    }

    if err := p.WriteFieldBegin("option2", thrift.I32, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOption2()
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnion) writeField3(p thrift.Protocol) error {  // Option3
    if !x.IsSetOption3() {
        return nil
    }

    if err := p.WriteFieldBegin("option3", thrift.STRUCT, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOption3()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnion) readField1(p thrift.Protocol) error {  // Option1
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetOption1(result)
    return nil
}

func (x *MyUnion) readField2(p thrift.Protocol) error {  // Option2
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.SetOption2(result)
    return nil
}

func (x *MyUnion) readField3(p thrift.Protocol) error {  // Option3
    result := *NewInnerUnion()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetOption3(result)
    return nil
}



func (x *MyUnion) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("MyUnion"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyUnion) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // option1
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // option2
            if err := x.readField2(p); err != nil {
                return err
            }
        case 3:  // option3
            if err := x.readField3(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type MyStruct struct {
    BoolVal bool `thrift:"boolVal,-1" json:"boolVal" db:"boolVal"`
    ByteVal byte `thrift:"byteVal,-2" json:"byteVal" db:"byteVal"`
    I16Val int16 `thrift:"i16Val,-3" json:"i16Val" db:"i16Val"`
    I32Val int32 `thrift:"i32Val,-4" json:"i32Val" db:"i32Val"`
    I64Val int64 `thrift:"i64Val,-5" json:"i64Val" db:"i64Val"`
    FloatVal float32 `thrift:"floatVal,-6" json:"floatVal" db:"floatVal"`
    DoubleVal float64 `thrift:"doubleVal,-7" json:"doubleVal" db:"doubleVal"`
    StringVal string `thrift:"stringVal,-8" json:"stringVal" db:"stringVal"`
    BinaryVal []byte `thrift:"binaryVal,-9" json:"binaryVal" db:"binaryVal"`
    EnumVal MyEnum `thrift:"enumVal,-10" json:"enumVal" db:"enumVal"`
    StructVal *MyData `thrift:"structVal,-11" json:"structVal" db:"structVal"`
    UnionVal *MyUnion `thrift:"unionVal,-12" json:"unionVal" db:"unionVal"`
    LateStructVal *LateDefStruct `thrift:"lateStructVal,-13" json:"lateStructVal" db:"lateStructVal"`
    OptBoolVal *bool `thrift:"optBoolVal,-14,optional" json:"optBoolVal,omitempty" db:"optBoolVal"`
    OptByteVal *byte `thrift:"optByteVal,-15,optional" json:"optByteVal,omitempty" db:"optByteVal"`
    OptI16Val *int16 `thrift:"optI16Val,-16,optional" json:"optI16Val,omitempty" db:"optI16Val"`
    OptI32Val *int32 `thrift:"optI32Val,-17,optional" json:"optI32Val,omitempty" db:"optI32Val"`
    OptI64Val *int64 `thrift:"optI64Val,-18,optional" json:"optI64Val,omitempty" db:"optI64Val"`
    OptFloatVal *float32 `thrift:"optFloatVal,-19,optional" json:"optFloatVal,omitempty" db:"optFloatVal"`
    OptDoubleVal *float64 `thrift:"optDoubleVal,-20,optional" json:"optDoubleVal,omitempty" db:"optDoubleVal"`
    OptStringVal *string `thrift:"optStringVal,-21,optional" json:"optStringVal,omitempty" db:"optStringVal"`
    OptBinaryVal []byte `thrift:"optBinaryVal,-22,optional" json:"optBinaryVal,omitempty" db:"optBinaryVal"`
    OptEnumVal *MyEnum `thrift:"optEnumVal,-23,optional" json:"optEnumVal,omitempty" db:"optEnumVal"`
    OptStructVal *MyData `thrift:"optStructVal,-24,optional" json:"optStructVal,omitempty" db:"optStructVal"`
    OptLateStructVal *LateDefStruct `thrift:"optLateStructVal,-25,optional" json:"optLateStructVal,omitempty" db:"optLateStructVal"`
    OptListVal []int16 `thrift:"optListVal,-26,optional" json:"optListVal,omitempty" db:"optListVal"`
    OptSetVal []string `thrift:"optSetVal,-27,optional" json:"optSetVal,omitempty" db:"optSetVal"`
    OptMapVal map[string]string `thrift:"optMapVal,-28,optional" json:"optMapVal,omitempty" db:"optMapVal"`
    ListMap []map[string]int32 `thrift:"listMap,-29" json:"listMap" db:"listMap"`
    MapMap map[string]map[string]int32 `thrift:"mapMap,-30" json:"mapMap" db:"mapMap"`
}
// Compile time interface enforcer
var _ thrift.Struct = &MyStruct{}

func NewMyStruct() *MyStruct {
    return (&MyStruct{})
}
func (x *MyStruct) GetBoolVal() bool {
    return x.BoolVal
}

func (x *MyStruct) GetByteVal() byte {
    return x.ByteVal
}

func (x *MyStruct) GetI16Val() int16 {
    return x.I16Val
}

func (x *MyStruct) GetI32Val() int32 {
    return x.I32Val
}

func (x *MyStruct) GetI64Val() int64 {
    return x.I64Val
}

func (x *MyStruct) GetFloatVal() float32 {
    return x.FloatVal
}

func (x *MyStruct) GetDoubleVal() float64 {
    return x.DoubleVal
}

func (x *MyStruct) GetStringVal() string {
    return x.StringVal
}

func (x *MyStruct) GetBinaryVal() []byte {
    return x.BinaryVal
}

func (x *MyStruct) GetEnumVal() MyEnum {
    return x.EnumVal
}

func (x *MyStruct) GetStructVal() *MyData {
    return x.StructVal
}

func (x *MyStruct) GetUnionVal() *MyUnion {
    return x.UnionVal
}

func (x *MyStruct) GetLateStructVal() *LateDefStruct {
    return x.LateStructVal
}

func (x *MyStruct) GetOptBoolVal() *bool {
    return x.OptBoolVal
}

func (x *MyStruct) GetOptByteVal() *byte {
    return x.OptByteVal
}

func (x *MyStruct) GetOptI16Val() *int16 {
    return x.OptI16Val
}

func (x *MyStruct) GetOptI32Val() *int32 {
    return x.OptI32Val
}

func (x *MyStruct) GetOptI64Val() *int64 {
    return x.OptI64Val
}

func (x *MyStruct) GetOptFloatVal() *float32 {
    return x.OptFloatVal
}

func (x *MyStruct) GetOptDoubleVal() *float64 {
    return x.OptDoubleVal
}

func (x *MyStruct) GetOptStringVal() *string {
    return x.OptStringVal
}

func (x *MyStruct) GetOptBinaryVal() []byte {
    return x.OptBinaryVal
}

func (x *MyStruct) GetOptEnumVal() *MyEnum {
    return x.OptEnumVal
}

func (x *MyStruct) GetOptStructVal() *MyData {
    return x.OptStructVal
}

func (x *MyStruct) GetOptLateStructVal() *LateDefStruct {
    return x.OptLateStructVal
}

func (x *MyStruct) GetOptListVal() []int16 {
    return x.OptListVal
}

func (x *MyStruct) GetOptSetVal() []string {
    return x.OptSetVal
}

func (x *MyStruct) GetOptMapVal() map[string]string {
    return x.OptMapVal
}

func (x *MyStruct) GetListMap() []map[string]int32 {
    return x.ListMap
}

func (x *MyStruct) GetMapMap() map[string]map[string]int32 {
    return x.MapMap
}

func (x *MyStruct) SetBoolVal(boolVal bool) *MyStruct {
    x.BoolVal = boolVal
    return x
}

func (x *MyStruct) SetByteVal(byteVal byte) *MyStruct {
    x.ByteVal = byteVal
    return x
}

func (x *MyStruct) SetI16Val(i16Val int16) *MyStruct {
    x.I16Val = i16Val
    return x
}

func (x *MyStruct) SetI32Val(i32Val int32) *MyStruct {
    x.I32Val = i32Val
    return x
}

func (x *MyStruct) SetI64Val(i64Val int64) *MyStruct {
    x.I64Val = i64Val
    return x
}

func (x *MyStruct) SetFloatVal(floatVal float32) *MyStruct {
    x.FloatVal = floatVal
    return x
}

func (x *MyStruct) SetDoubleVal(doubleVal float64) *MyStruct {
    x.DoubleVal = doubleVal
    return x
}

func (x *MyStruct) SetStringVal(stringVal string) *MyStruct {
    x.StringVal = stringVal
    return x
}

func (x *MyStruct) SetBinaryVal(binaryVal []byte) *MyStruct {
    x.BinaryVal = binaryVal
    return x
}

func (x *MyStruct) SetEnumVal(enumVal MyEnum) *MyStruct {
    x.EnumVal = enumVal
    return x
}

func (x *MyStruct) SetStructVal(structVal MyData) *MyStruct {
    x.StructVal = &structVal
    return x
}

func (x *MyStruct) SetUnionVal(unionVal MyUnion) *MyStruct {
    x.UnionVal = &unionVal
    return x
}

func (x *MyStruct) SetLateStructVal(lateStructVal LateDefStruct) *MyStruct {
    x.LateStructVal = &lateStructVal
    return x
}

func (x *MyStruct) SetOptBoolVal(optBoolVal bool) *MyStruct {
    x.OptBoolVal = &optBoolVal
    return x
}

func (x *MyStruct) SetOptByteVal(optByteVal byte) *MyStruct {
    x.OptByteVal = &optByteVal
    return x
}

func (x *MyStruct) SetOptI16Val(optI16Val int16) *MyStruct {
    x.OptI16Val = &optI16Val
    return x
}

func (x *MyStruct) SetOptI32Val(optI32Val int32) *MyStruct {
    x.OptI32Val = &optI32Val
    return x
}

func (x *MyStruct) SetOptI64Val(optI64Val int64) *MyStruct {
    x.OptI64Val = &optI64Val
    return x
}

func (x *MyStruct) SetOptFloatVal(optFloatVal float32) *MyStruct {
    x.OptFloatVal = &optFloatVal
    return x
}

func (x *MyStruct) SetOptDoubleVal(optDoubleVal float64) *MyStruct {
    x.OptDoubleVal = &optDoubleVal
    return x
}

func (x *MyStruct) SetOptStringVal(optStringVal string) *MyStruct {
    x.OptStringVal = &optStringVal
    return x
}

func (x *MyStruct) SetOptBinaryVal(optBinaryVal []byte) *MyStruct {
    x.OptBinaryVal = optBinaryVal
    return x
}

func (x *MyStruct) SetOptEnumVal(optEnumVal MyEnum) *MyStruct {
    x.OptEnumVal = &optEnumVal
    return x
}

func (x *MyStruct) SetOptStructVal(optStructVal MyData) *MyStruct {
    x.OptStructVal = &optStructVal
    return x
}

func (x *MyStruct) SetOptLateStructVal(optLateStructVal LateDefStruct) *MyStruct {
    x.OptLateStructVal = &optLateStructVal
    return x
}

func (x *MyStruct) SetOptListVal(optListVal []int16) *MyStruct {
    x.OptListVal = optListVal
    return x
}

func (x *MyStruct) SetOptSetVal(optSetVal []string) *MyStruct {
    x.OptSetVal = optSetVal
    return x
}

func (x *MyStruct) SetOptMapVal(optMapVal map[string]string) *MyStruct {
    x.OptMapVal = optMapVal
    return x
}

func (x *MyStruct) SetListMap(listMap []map[string]int32) *MyStruct {
    x.ListMap = listMap
    return x
}

func (x *MyStruct) SetMapMap(mapMap map[string]map[string]int32) *MyStruct {
    x.MapMap = mapMap
    return x
}









func (x *MyStruct) IsSetBinaryVal() bool {
    return x.BinaryVal != nil
}


func (x *MyStruct) IsSetStructVal() bool {
    return x.StructVal != nil
}

func (x *MyStruct) IsSetUnionVal() bool {
    return x.UnionVal != nil
}

func (x *MyStruct) IsSetLateStructVal() bool {
    return x.LateStructVal != nil
}

func (x *MyStruct) IsSetOptBoolVal() bool {
    return x.OptBoolVal != nil
}

func (x *MyStruct) IsSetOptByteVal() bool {
    return x.OptByteVal != nil
}

func (x *MyStruct) IsSetOptI16Val() bool {
    return x.OptI16Val != nil
}

func (x *MyStruct) IsSetOptI32Val() bool {
    return x.OptI32Val != nil
}

func (x *MyStruct) IsSetOptI64Val() bool {
    return x.OptI64Val != nil
}

func (x *MyStruct) IsSetOptFloatVal() bool {
    return x.OptFloatVal != nil
}

func (x *MyStruct) IsSetOptDoubleVal() bool {
    return x.OptDoubleVal != nil
}

func (x *MyStruct) IsSetOptStringVal() bool {
    return x.OptStringVal != nil
}

func (x *MyStruct) IsSetOptBinaryVal() bool {
    return x.OptBinaryVal != nil
}

func (x *MyStruct) IsSetOptEnumVal() bool {
    return x.OptEnumVal != nil
}

func (x *MyStruct) IsSetOptStructVal() bool {
    return x.OptStructVal != nil
}

func (x *MyStruct) IsSetOptLateStructVal() bool {
    return x.OptLateStructVal != nil
}

func (x *MyStruct) IsSetOptListVal() bool {
    return x.OptListVal != nil
}

func (x *MyStruct) IsSetOptSetVal() bool {
    return x.OptSetVal != nil
}

func (x *MyStruct) IsSetOptMapVal() bool {
    return x.OptMapVal != nil
}

func (x *MyStruct) IsSetListMap() bool {
    return x.ListMap != nil
}

func (x *MyStruct) IsSetMapMap() bool {
    return x.MapMap != nil
}

func (x *MyStruct) writeField_1(p thrift.Protocol) error {  // BoolVal
    if err := p.WriteFieldBegin("boolVal", thrift.BOOL, -1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetBoolVal()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_2(p thrift.Protocol) error {  // ByteVal
    if err := p.WriteFieldBegin("byteVal", thrift.BYTE, -2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetByteVal()
    if err := p.WriteByte(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_3(p thrift.Protocol) error {  // I16Val
    if err := p.WriteFieldBegin("i16Val", thrift.I16, -3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetI16Val()
    if err := p.WriteI16(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_4(p thrift.Protocol) error {  // I32Val
    if err := p.WriteFieldBegin("i32Val", thrift.I32, -4); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetI32Val()
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_5(p thrift.Protocol) error {  // I64Val
    if err := p.WriteFieldBegin("i64Val", thrift.I64, -5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetI64Val()
    if err := p.WriteI64(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_6(p thrift.Protocol) error {  // FloatVal
    if err := p.WriteFieldBegin("floatVal", thrift.FLOAT, -6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetFloatVal()
    if err := p.WriteFloat(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_7(p thrift.Protocol) error {  // DoubleVal
    if err := p.WriteFieldBegin("doubleVal", thrift.DOUBLE, -7); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetDoubleVal()
    if err := p.WriteDouble(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_8(p thrift.Protocol) error {  // StringVal
    if err := p.WriteFieldBegin("stringVal", thrift.STRING, -8); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetStringVal()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_9(p thrift.Protocol) error {  // BinaryVal
    if !x.IsSetBinaryVal() {
        return nil
    }

    if err := p.WriteFieldBegin("binaryVal", thrift.BINARY, -9); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetBinaryVal()
    if err := p.WriteBinary(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_10(p thrift.Protocol) error {  // EnumVal
    if err := p.WriteFieldBegin("enumVal", thrift.I32, -10); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetEnumVal()
    if err := p.WriteI32(int32(item)); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_11(p thrift.Protocol) error {  // StructVal
    if !x.IsSetStructVal() {
        return nil
    }

    if err := p.WriteFieldBegin("structVal", thrift.STRUCT, -11); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetStructVal()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_12(p thrift.Protocol) error {  // UnionVal
    if !x.IsSetUnionVal() {
        return nil
    }

    if err := p.WriteFieldBegin("unionVal", thrift.STRUCT, -12); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetUnionVal()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_13(p thrift.Protocol) error {  // LateStructVal
    if !x.IsSetLateStructVal() {
        return nil
    }

    if err := p.WriteFieldBegin("lateStructVal", thrift.STRUCT, -13); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetLateStructVal()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_14(p thrift.Protocol) error {  // OptBoolVal
    if !x.IsSetOptBoolVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optBoolVal", thrift.BOOL, -14); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOptBoolVal()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_15(p thrift.Protocol) error {  // OptByteVal
    if !x.IsSetOptByteVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optByteVal", thrift.BYTE, -15); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOptByteVal()
    if err := p.WriteByte(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_16(p thrift.Protocol) error {  // OptI16Val
    if !x.IsSetOptI16Val() {
        return nil
    }

    if err := p.WriteFieldBegin("optI16Val", thrift.I16, -16); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOptI16Val()
    if err := p.WriteI16(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_17(p thrift.Protocol) error {  // OptI32Val
    if !x.IsSetOptI32Val() {
        return nil
    }

    if err := p.WriteFieldBegin("optI32Val", thrift.I32, -17); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOptI32Val()
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_18(p thrift.Protocol) error {  // OptI64Val
    if !x.IsSetOptI64Val() {
        return nil
    }

    if err := p.WriteFieldBegin("optI64Val", thrift.I64, -18); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOptI64Val()
    if err := p.WriteI64(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_19(p thrift.Protocol) error {  // OptFloatVal
    if !x.IsSetOptFloatVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optFloatVal", thrift.FLOAT, -19); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOptFloatVal()
    if err := p.WriteFloat(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_20(p thrift.Protocol) error {  // OptDoubleVal
    if !x.IsSetOptDoubleVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optDoubleVal", thrift.DOUBLE, -20); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOptDoubleVal()
    if err := p.WriteDouble(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_21(p thrift.Protocol) error {  // OptStringVal
    if !x.IsSetOptStringVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optStringVal", thrift.STRING, -21); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOptStringVal()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_22(p thrift.Protocol) error {  // OptBinaryVal
    if !x.IsSetOptBinaryVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optBinaryVal", thrift.BINARY, -22); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetOptBinaryVal()
    if err := p.WriteBinary(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_23(p thrift.Protocol) error {  // OptEnumVal
    if !x.IsSetOptEnumVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optEnumVal", thrift.I32, -23); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOptEnumVal()
    if err := p.WriteI32(int32(item)); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_24(p thrift.Protocol) error {  // OptStructVal
    if !x.IsSetOptStructVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optStructVal", thrift.STRUCT, -24); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOptStructVal()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_25(p thrift.Protocol) error {  // OptLateStructVal
    if !x.IsSetOptLateStructVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optLateStructVal", thrift.STRUCT, -25); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOptLateStructVal()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_26(p thrift.Protocol) error {  // OptListVal
    if !x.IsSetOptListVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optListVal", thrift.LIST, -26); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetOptListVal()
    if err := p.WriteListBegin(thrift.I16, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI16(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_27(p thrift.Protocol) error {  // OptSetVal
    if !x.IsSetOptSetVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optSetVal", thrift.SET, -27); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetOptSetVal()
    if err := p.WriteSetBegin(thrift.STRING, len(item)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteString(item); err != nil {
    return err
}
    }
}
if err := p.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_28(p thrift.Protocol) error {  // OptMapVal
    if !x.IsSetOptMapVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optMapVal", thrift.MAP, -28); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetOptMapVal()
    if err := p.WriteMapBegin(thrift.STRING, thrift.STRING, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteString(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_29(p thrift.Protocol) error {  // ListMap
    if !x.IsSetListMap() {
        return nil
    }

    if err := p.WriteFieldBegin("listMap", thrift.LIST, -29); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetListMap()
    if err := p.WriteListBegin(thrift.MAP, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteMapBegin(thrift.STRING, thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) writeField_30(p thrift.Protocol) error {  // MapMap
    if !x.IsSetMapMap() {
        return nil
    }

    if err := p.WriteFieldBegin("mapMap", thrift.MAP, -30); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetMapMap()
    if err := p.WriteMapBegin(thrift.STRING, thrift.MAP, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteMapBegin(thrift.STRING, thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) readField_1(p thrift.Protocol) error {  // BoolVal
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetBoolVal(result)
    return nil
}

func (x *MyStruct) readField_2(p thrift.Protocol) error {  // ByteVal
    result, err := p.ReadByte()
if err != nil {
    return err
}

    x.SetByteVal(result)
    return nil
}

func (x *MyStruct) readField_3(p thrift.Protocol) error {  // I16Val
    result, err := p.ReadI16()
if err != nil {
    return err
}

    x.SetI16Val(result)
    return nil
}

func (x *MyStruct) readField_4(p thrift.Protocol) error {  // I32Val
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.SetI32Val(result)
    return nil
}

func (x *MyStruct) readField_5(p thrift.Protocol) error {  // I64Val
    result, err := p.ReadI64()
if err != nil {
    return err
}

    x.SetI64Val(result)
    return nil
}

func (x *MyStruct) readField_6(p thrift.Protocol) error {  // FloatVal
    result, err := p.ReadFloat()
if err != nil {
    return err
}

    x.SetFloatVal(result)
    return nil
}

func (x *MyStruct) readField_7(p thrift.Protocol) error {  // DoubleVal
    result, err := p.ReadDouble()
if err != nil {
    return err
}

    x.SetDoubleVal(result)
    return nil
}

func (x *MyStruct) readField_8(p thrift.Protocol) error {  // StringVal
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetStringVal(result)
    return nil
}

func (x *MyStruct) readField_9(p thrift.Protocol) error {  // BinaryVal
    result, err := p.ReadBinary()
if err != nil {
    return err
}

    x.SetBinaryVal(result)
    return nil
}

func (x *MyStruct) readField_10(p thrift.Protocol) error {  // EnumVal
    enumResult, err := p.ReadI32()
if err != nil {
    return err
}
result := MyEnum(enumResult)

    x.SetEnumVal(result)
    return nil
}

func (x *MyStruct) readField_11(p thrift.Protocol) error {  // StructVal
    result := *NewMyData()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetStructVal(result)
    return nil
}

func (x *MyStruct) readField_12(p thrift.Protocol) error {  // UnionVal
    result := *NewMyUnion()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetUnionVal(result)
    return nil
}

func (x *MyStruct) readField_13(p thrift.Protocol) error {  // LateStructVal
    result := *NewLateDefStruct()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetLateStructVal(result)
    return nil
}

func (x *MyStruct) readField_14(p thrift.Protocol) error {  // OptBoolVal
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetOptBoolVal(result)
    return nil
}

func (x *MyStruct) readField_15(p thrift.Protocol) error {  // OptByteVal
    result, err := p.ReadByte()
if err != nil {
    return err
}

    x.SetOptByteVal(result)
    return nil
}

func (x *MyStruct) readField_16(p thrift.Protocol) error {  // OptI16Val
    result, err := p.ReadI16()
if err != nil {
    return err
}

    x.SetOptI16Val(result)
    return nil
}

func (x *MyStruct) readField_17(p thrift.Protocol) error {  // OptI32Val
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.SetOptI32Val(result)
    return nil
}

func (x *MyStruct) readField_18(p thrift.Protocol) error {  // OptI64Val
    result, err := p.ReadI64()
if err != nil {
    return err
}

    x.SetOptI64Val(result)
    return nil
}

func (x *MyStruct) readField_19(p thrift.Protocol) error {  // OptFloatVal
    result, err := p.ReadFloat()
if err != nil {
    return err
}

    x.SetOptFloatVal(result)
    return nil
}

func (x *MyStruct) readField_20(p thrift.Protocol) error {  // OptDoubleVal
    result, err := p.ReadDouble()
if err != nil {
    return err
}

    x.SetOptDoubleVal(result)
    return nil
}

func (x *MyStruct) readField_21(p thrift.Protocol) error {  // OptStringVal
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetOptStringVal(result)
    return nil
}

func (x *MyStruct) readField_22(p thrift.Protocol) error {  // OptBinaryVal
    result, err := p.ReadBinary()
if err != nil {
    return err
}

    x.SetOptBinaryVal(result)
    return nil
}

func (x *MyStruct) readField_23(p thrift.Protocol) error {  // OptEnumVal
    enumResult, err := p.ReadI32()
if err != nil {
    return err
}
result := MyEnum(enumResult)

    x.SetOptEnumVal(result)
    return nil
}

func (x *MyStruct) readField_24(p thrift.Protocol) error {  // OptStructVal
    result := *NewMyData()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetOptStructVal(result)
    return nil
}

func (x *MyStruct) readField_25(p thrift.Protocol) error {  // OptLateStructVal
    result := *NewLateDefStruct()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetOptLateStructVal(result)
    return nil
}

func (x *MyStruct) readField_26(p thrift.Protocol) error {  // OptListVal
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int16, 0, size)
for i := 0; i < size; i++ {
    var elem int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.SetOptListVal(result)
    return nil
}

func (x *MyStruct) readField_27(p thrift.Protocol) error {  // OptSetVal
    _ /* elemType */, size, err := p.ReadSetBegin()
if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
}

setResult := make([]string, 0, size)
for i := 0; i < size; i++ {
    var elem string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        elem = result
    }
    setResult = append(setResult, elem)
}

if err := p.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
}
result := setResult

    x.SetOptSetVal(result)
    return nil
}

func (x *MyStruct) readField_28(p thrift.Protocol) error {  // OptMapVal
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]string, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetOptMapVal(result)
    return nil
}

func (x *MyStruct) readField_29(p thrift.Protocol) error {  // ListMap
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]map[string]int32, 0, size)
for i := 0; i < size; i++ {
    var elem map[string]int32
    {
        _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.SetListMap(result)
    return nil
}

func (x *MyStruct) readField_30(p thrift.Protocol) error {  // MapMap
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value map[string]int32
    {
        _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetMapMap(result)
    return nil
}


// Deprecated: Use MyStruct.Set* methods instead or set the fields directly.
type MyStructBuilder struct {
    obj *MyStruct
}

func NewMyStructBuilder() *MyStructBuilder {
    return &MyStructBuilder{
        obj: NewMyStruct(),
    }
}

func (x *MyStructBuilder) BoolVal(boolVal bool) *MyStructBuilder {
    x.obj.BoolVal = boolVal
    return x
}

func (x *MyStructBuilder) ByteVal(byteVal byte) *MyStructBuilder {
    x.obj.ByteVal = byteVal
    return x
}

func (x *MyStructBuilder) I16Val(i16Val int16) *MyStructBuilder {
    x.obj.I16Val = i16Val
    return x
}

func (x *MyStructBuilder) I32Val(i32Val int32) *MyStructBuilder {
    x.obj.I32Val = i32Val
    return x
}

func (x *MyStructBuilder) I64Val(i64Val int64) *MyStructBuilder {
    x.obj.I64Val = i64Val
    return x
}

func (x *MyStructBuilder) FloatVal(floatVal float32) *MyStructBuilder {
    x.obj.FloatVal = floatVal
    return x
}

func (x *MyStructBuilder) DoubleVal(doubleVal float64) *MyStructBuilder {
    x.obj.DoubleVal = doubleVal
    return x
}

func (x *MyStructBuilder) StringVal(stringVal string) *MyStructBuilder {
    x.obj.StringVal = stringVal
    return x
}

func (x *MyStructBuilder) BinaryVal(binaryVal []byte) *MyStructBuilder {
    x.obj.BinaryVal = binaryVal
    return x
}

func (x *MyStructBuilder) EnumVal(enumVal MyEnum) *MyStructBuilder {
    x.obj.EnumVal = enumVal
    return x
}

func (x *MyStructBuilder) StructVal(structVal *MyData) *MyStructBuilder {
    x.obj.StructVal = structVal
    return x
}

func (x *MyStructBuilder) UnionVal(unionVal *MyUnion) *MyStructBuilder {
    x.obj.UnionVal = unionVal
    return x
}

func (x *MyStructBuilder) LateStructVal(lateStructVal *LateDefStruct) *MyStructBuilder {
    x.obj.LateStructVal = lateStructVal
    return x
}

func (x *MyStructBuilder) OptBoolVal(optBoolVal *bool) *MyStructBuilder {
    x.obj.OptBoolVal = optBoolVal
    return x
}

func (x *MyStructBuilder) OptByteVal(optByteVal *byte) *MyStructBuilder {
    x.obj.OptByteVal = optByteVal
    return x
}

func (x *MyStructBuilder) OptI16Val(optI16Val *int16) *MyStructBuilder {
    x.obj.OptI16Val = optI16Val
    return x
}

func (x *MyStructBuilder) OptI32Val(optI32Val *int32) *MyStructBuilder {
    x.obj.OptI32Val = optI32Val
    return x
}

func (x *MyStructBuilder) OptI64Val(optI64Val *int64) *MyStructBuilder {
    x.obj.OptI64Val = optI64Val
    return x
}

func (x *MyStructBuilder) OptFloatVal(optFloatVal *float32) *MyStructBuilder {
    x.obj.OptFloatVal = optFloatVal
    return x
}

func (x *MyStructBuilder) OptDoubleVal(optDoubleVal *float64) *MyStructBuilder {
    x.obj.OptDoubleVal = optDoubleVal
    return x
}

func (x *MyStructBuilder) OptStringVal(optStringVal *string) *MyStructBuilder {
    x.obj.OptStringVal = optStringVal
    return x
}

func (x *MyStructBuilder) OptBinaryVal(optBinaryVal []byte) *MyStructBuilder {
    x.obj.OptBinaryVal = optBinaryVal
    return x
}

func (x *MyStructBuilder) OptEnumVal(optEnumVal *MyEnum) *MyStructBuilder {
    x.obj.OptEnumVal = optEnumVal
    return x
}

func (x *MyStructBuilder) OptStructVal(optStructVal *MyData) *MyStructBuilder {
    x.obj.OptStructVal = optStructVal
    return x
}

func (x *MyStructBuilder) OptLateStructVal(optLateStructVal *LateDefStruct) *MyStructBuilder {
    x.obj.OptLateStructVal = optLateStructVal
    return x
}

func (x *MyStructBuilder) OptListVal(optListVal []int16) *MyStructBuilder {
    x.obj.OptListVal = optListVal
    return x
}

func (x *MyStructBuilder) OptSetVal(optSetVal []string) *MyStructBuilder {
    x.obj.OptSetVal = optSetVal
    return x
}

func (x *MyStructBuilder) OptMapVal(optMapVal map[string]string) *MyStructBuilder {
    x.obj.OptMapVal = optMapVal
    return x
}

func (x *MyStructBuilder) ListMap(listMap []map[string]int32) *MyStructBuilder {
    x.obj.ListMap = listMap
    return x
}

func (x *MyStructBuilder) MapMap(mapMap map[string]map[string]int32) *MyStructBuilder {
    x.obj.MapMap = mapMap
    return x
}

func (x *MyStructBuilder) Emit() *MyStruct {
    var objCopy MyStruct = *x.obj
    return &objCopy
}

func (x *MyStruct) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("MyStruct"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField_1(p); err != nil {
        return err
    }

    if err := x.writeField_2(p); err != nil {
        return err
    }

    if err := x.writeField_3(p); err != nil {
        return err
    }

    if err := x.writeField_4(p); err != nil {
        return err
    }

    if err := x.writeField_5(p); err != nil {
        return err
    }

    if err := x.writeField_6(p); err != nil {
        return err
    }

    if err := x.writeField_7(p); err != nil {
        return err
    }

    if err := x.writeField_8(p); err != nil {
        return err
    }

    if err := x.writeField_9(p); err != nil {
        return err
    }

    if err := x.writeField_10(p); err != nil {
        return err
    }

    if err := x.writeField_11(p); err != nil {
        return err
    }

    if err := x.writeField_12(p); err != nil {
        return err
    }

    if err := x.writeField_13(p); err != nil {
        return err
    }

    if err := x.writeField_14(p); err != nil {
        return err
    }

    if err := x.writeField_15(p); err != nil {
        return err
    }

    if err := x.writeField_16(p); err != nil {
        return err
    }

    if err := x.writeField_17(p); err != nil {
        return err
    }

    if err := x.writeField_18(p); err != nil {
        return err
    }

    if err := x.writeField_19(p); err != nil {
        return err
    }

    if err := x.writeField_20(p); err != nil {
        return err
    }

    if err := x.writeField_21(p); err != nil {
        return err
    }

    if err := x.writeField_22(p); err != nil {
        return err
    }

    if err := x.writeField_23(p); err != nil {
        return err
    }

    if err := x.writeField_24(p); err != nil {
        return err
    }

    if err := x.writeField_25(p); err != nil {
        return err
    }

    if err := x.writeField_26(p); err != nil {
        return err
    }

    if err := x.writeField_27(p); err != nil {
        return err
    }

    if err := x.writeField_28(p); err != nil {
        return err
    }

    if err := x.writeField_29(p); err != nil {
        return err
    }

    if err := x.writeField_30(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyStruct) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case -1:  // boolVal
            if err := x.readField_1(p); err != nil {
                return err
            }
        case -2:  // byteVal
            if err := x.readField_2(p); err != nil {
                return err
            }
        case -3:  // i16Val
            if err := x.readField_3(p); err != nil {
                return err
            }
        case -4:  // i32Val
            if err := x.readField_4(p); err != nil {
                return err
            }
        case -5:  // i64Val
            if err := x.readField_5(p); err != nil {
                return err
            }
        case -6:  // floatVal
            if err := x.readField_6(p); err != nil {
                return err
            }
        case -7:  // doubleVal
            if err := x.readField_7(p); err != nil {
                return err
            }
        case -8:  // stringVal
            if err := x.readField_8(p); err != nil {
                return err
            }
        case -9:  // binaryVal
            if err := x.readField_9(p); err != nil {
                return err
            }
        case -10:  // enumVal
            if err := x.readField_10(p); err != nil {
                return err
            }
        case -11:  // structVal
            if err := x.readField_11(p); err != nil {
                return err
            }
        case -12:  // unionVal
            if err := x.readField_12(p); err != nil {
                return err
            }
        case -13:  // lateStructVal
            if err := x.readField_13(p); err != nil {
                return err
            }
        case -14:  // optBoolVal
            if err := x.readField_14(p); err != nil {
                return err
            }
        case -15:  // optByteVal
            if err := x.readField_15(p); err != nil {
                return err
            }
        case -16:  // optI16Val
            if err := x.readField_16(p); err != nil {
                return err
            }
        case -17:  // optI32Val
            if err := x.readField_17(p); err != nil {
                return err
            }
        case -18:  // optI64Val
            if err := x.readField_18(p); err != nil {
                return err
            }
        case -19:  // optFloatVal
            if err := x.readField_19(p); err != nil {
                return err
            }
        case -20:  // optDoubleVal
            if err := x.readField_20(p); err != nil {
                return err
            }
        case -21:  // optStringVal
            if err := x.readField_21(p); err != nil {
                return err
            }
        case -22:  // optBinaryVal
            if err := x.readField_22(p); err != nil {
                return err
            }
        case -23:  // optEnumVal
            if err := x.readField_23(p); err != nil {
                return err
            }
        case -24:  // optStructVal
            if err := x.readField_24(p); err != nil {
                return err
            }
        case -25:  // optLateStructVal
            if err := x.readField_25(p); err != nil {
                return err
            }
        case -26:  // optListVal
            if err := x.readField_26(p); err != nil {
                return err
            }
        case -27:  // optSetVal
            if err := x.readField_27(p); err != nil {
                return err
            }
        case -28:  // optMapVal
            if err := x.readField_28(p); err != nil {
                return err
            }
        case -29:  // listMap
            if err := x.readField_29(p); err != nil {
                return err
            }
        case -30:  // mapMap
            if err := x.readField_30(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type LateDefStruct struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &LateDefStruct{}

func NewLateDefStruct() *LateDefStruct {
    return (&LateDefStruct{})
}

// Deprecated: Use LateDefStruct.Set* methods instead or set the fields directly.
type LateDefStructBuilder struct {
    obj *LateDefStruct
}

func NewLateDefStructBuilder() *LateDefStructBuilder {
    return &LateDefStructBuilder{
        obj: NewLateDefStruct(),
    }
}

func (x *LateDefStructBuilder) Emit() *LateDefStruct {
    var objCopy LateDefStruct = *x.obj
    return &objCopy
}

func (x *LateDefStruct) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("LateDefStruct"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *LateDefStruct) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type Recursive struct {
    Nodes map[string]*Recursive `thrift:"nodes,-1" json:"nodes" db:"nodes"`
}
// Compile time interface enforcer
var _ thrift.Struct = &Recursive{}

func NewRecursive() *Recursive {
    return (&Recursive{})
}
func (x *Recursive) GetNodes() map[string]*Recursive {
    return x.Nodes
}

func (x *Recursive) SetNodes(nodes map[string]*Recursive) *Recursive {
    x.Nodes = nodes
    return x
}

func (x *Recursive) IsSetNodes() bool {
    return x.Nodes != nil
}

func (x *Recursive) writeField_1(p thrift.Protocol) error {  // Nodes
    if !x.IsSetNodes() {
        return nil
    }

    if err := p.WriteFieldBegin("nodes", thrift.MAP, -1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetNodes()
    if err := p.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := item.Write(p); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Recursive) readField_1(p thrift.Protocol) error {  // Nodes
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]*Recursive, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value *Recursive
    {
        result := *NewRecursive()
err := result.Read(p)
if err != nil {
    return err
}
        value = &result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetNodes(result)
    return nil
}


// Deprecated: Use Recursive.Set* methods instead or set the fields directly.
type RecursiveBuilder struct {
    obj *Recursive
}

func NewRecursiveBuilder() *RecursiveBuilder {
    return &RecursiveBuilder{
        obj: NewRecursive(),
    }
}

func (x *RecursiveBuilder) Nodes(nodes map[string]*Recursive) *RecursiveBuilder {
    x.obj.Nodes = nodes
    return x
}

func (x *RecursiveBuilder) Emit() *Recursive {
    var objCopy Recursive = *x.obj
    return &objCopy
}

func (x *Recursive) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("Recursive"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField_1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *Recursive) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case -1:  // nodes
            if err := x.readField_1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type Bar struct {
    Loop *Loop `thrift:"loop,-1" json:"loop" db:"loop"`
}
// Compile time interface enforcer
var _ thrift.Struct = &Bar{}

func NewBar() *Bar {
    return (&Bar{})
}
func (x *Bar) GetLoop() *Loop {
    return x.Loop
}

func (x *Bar) SetLoop(loop Loop) *Bar {
    x.Loop = &loop
    return x
}

func (x *Bar) IsSetLoop() bool {
    return x.Loop != nil
}

func (x *Bar) writeField_1(p thrift.Protocol) error {  // Loop
    if !x.IsSetLoop() {
        return nil
    }

    if err := p.WriteFieldBegin("loop", thrift.STRUCT, -1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetLoop()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Bar) readField_1(p thrift.Protocol) error {  // Loop
    result := *NewLoop()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetLoop(result)
    return nil
}


// Deprecated: Use Bar.Set* methods instead or set the fields directly.
type BarBuilder struct {
    obj *Bar
}

func NewBarBuilder() *BarBuilder {
    return &BarBuilder{
        obj: NewBar(),
    }
}

func (x *BarBuilder) Loop(loop *Loop) *BarBuilder {
    x.obj.Loop = loop
    return x
}

func (x *BarBuilder) Emit() *Bar {
    var objCopy Bar = *x.obj
    return &objCopy
}

func (x *Bar) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("Bar"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField_1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *Bar) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case -1:  // loop
            if err := x.readField_1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type Loop struct {
    Bar *Bar `thrift:"bar,-1" json:"bar" db:"bar"`
}
// Compile time interface enforcer
var _ thrift.Struct = &Loop{}

func NewLoop() *Loop {
    return (&Loop{})
}
func (x *Loop) GetBar() *Bar {
    return x.Bar
}

func (x *Loop) SetBar(bar Bar) *Loop {
    x.Bar = &bar
    return x
}

func (x *Loop) IsSetBar() bool {
    return x.Bar != nil
}

func (x *Loop) writeField_1(p thrift.Protocol) error {  // Bar
    if !x.IsSetBar() {
        return nil
    }

    if err := p.WriteFieldBegin("bar", thrift.STRUCT, -1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetBar()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *Loop) readField_1(p thrift.Protocol) error {  // Bar
    result := *NewBar()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetBar(result)
    return nil
}


// Deprecated: Use Loop.Set* methods instead or set the fields directly.
type LoopBuilder struct {
    obj *Loop
}

func NewLoopBuilder() *LoopBuilder {
    return &LoopBuilder{
        obj: NewLoop(),
    }
}

func (x *LoopBuilder) Bar(bar *Bar) *LoopBuilder {
    x.obj.Bar = bar
    return x
}

func (x *LoopBuilder) Emit() *Loop {
    var objCopy Loop = *x.obj
    return &objCopy
}

func (x *Loop) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("Loop"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField_1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *Loop) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case -1:  // bar
            if err := x.readField_1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type MyDataEnsureStruct struct {
    Data1 *string `thrift:"data1,1,optional" json:"data1,omitempty" db:"data1"`
    Data2 *int32 `thrift:"data2,2,optional" json:"data2,omitempty" db:"data2"`
}
// Compile time interface enforcer
var _ thrift.Struct = &MyDataEnsureStruct{}

func NewMyDataEnsureStruct() *MyDataEnsureStruct {
    return (&MyDataEnsureStruct{})
}
func (x *MyDataEnsureStruct) GetData1() *string {
    return x.Data1
}

func (x *MyDataEnsureStruct) GetData2() *int32 {
    return x.Data2
}

func (x *MyDataEnsureStruct) SetData1(data1 string) *MyDataEnsureStruct {
    x.Data1 = &data1
    return x
}

func (x *MyDataEnsureStruct) SetData2(data2 int32) *MyDataEnsureStruct {
    x.Data2 = &data2
    return x
}

func (x *MyDataEnsureStruct) IsSetData1() bool {
    return x.Data1 != nil
}

func (x *MyDataEnsureStruct) IsSetData2() bool {
    return x.Data2 != nil
}

func (x *MyDataEnsureStruct) writeField1(p thrift.Protocol) error {  // Data1
    if !x.IsSetData1() {
        return nil
    }

    if err := p.WriteFieldBegin("data1", thrift.STRING, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetData1()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataEnsureStruct) writeField2(p thrift.Protocol) error {  // Data2
    if !x.IsSetData2() {
        return nil
    }

    if err := p.WriteFieldBegin("data2", thrift.I32, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetData2()
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataEnsureStruct) readField1(p thrift.Protocol) error {  // Data1
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetData1(result)
    return nil
}

func (x *MyDataEnsureStruct) readField2(p thrift.Protocol) error {  // Data2
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.SetData2(result)
    return nil
}


// Deprecated: Use MyDataEnsureStruct.Set* methods instead or set the fields directly.
type MyDataEnsureStructBuilder struct {
    obj *MyDataEnsureStruct
}

func NewMyDataEnsureStructBuilder() *MyDataEnsureStructBuilder {
    return &MyDataEnsureStructBuilder{
        obj: NewMyDataEnsureStruct(),
    }
}

func (x *MyDataEnsureStructBuilder) Data1(data1 *string) *MyDataEnsureStructBuilder {
    x.obj.Data1 = data1
    return x
}

func (x *MyDataEnsureStructBuilder) Data2(data2 *int32) *MyDataEnsureStructBuilder {
    x.obj.Data2 = data2
    return x
}

func (x *MyDataEnsureStructBuilder) Emit() *MyDataEnsureStruct {
    var objCopy MyDataEnsureStruct = *x.obj
    return &objCopy
}

func (x *MyDataEnsureStruct) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("MyDataEnsureStruct"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyDataEnsureStruct) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // data1
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // data2
            if err := x.readField2(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type MyDataFieldPatch struct {
    Data1 *patch.StringPatch `thrift:"data1,1" json:"data1" db:"data1"`
    Data2 *patch.I32Patch `thrift:"data2,2" json:"data2" db:"data2"`
}
// Compile time interface enforcer
var _ thrift.Struct = &MyDataFieldPatch{}

func NewMyDataFieldPatch() *MyDataFieldPatch {
    return (&MyDataFieldPatch{})
}
func (x *MyDataFieldPatch) GetData1() *patch.StringPatch {
    return x.Data1
}

func (x *MyDataFieldPatch) GetData2() *patch.I32Patch {
    return x.Data2
}

func (x *MyDataFieldPatch) SetData1(data1 patch.StringPatch) *MyDataFieldPatch {
    x.Data1 = &data1
    return x
}

func (x *MyDataFieldPatch) SetData2(data2 patch.I32Patch) *MyDataFieldPatch {
    x.Data2 = &data2
    return x
}

func (x *MyDataFieldPatch) IsSetData1() bool {
    return x.Data1 != nil
}

func (x *MyDataFieldPatch) IsSetData2() bool {
    return x.Data2 != nil
}

func (x *MyDataFieldPatch) writeField1(p thrift.Protocol) error {  // Data1
    if !x.IsSetData1() {
        return nil
    }

    if err := p.WriteFieldBegin("data1", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetData1()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataFieldPatch) writeField2(p thrift.Protocol) error {  // Data2
    if !x.IsSetData2() {
        return nil
    }

    if err := p.WriteFieldBegin("data2", thrift.STRUCT, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetData2()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataFieldPatch) readField1(p thrift.Protocol) error {  // Data1
    result := *patch.NewStringPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetData1(result)
    return nil
}

func (x *MyDataFieldPatch) readField2(p thrift.Protocol) error {  // Data2
    result := *patch.NewI32Patch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetData2(result)
    return nil
}


// Deprecated: Use MyDataFieldPatch.Set* methods instead or set the fields directly.
type MyDataFieldPatchBuilder struct {
    obj *MyDataFieldPatch
}

func NewMyDataFieldPatchBuilder() *MyDataFieldPatchBuilder {
    return &MyDataFieldPatchBuilder{
        obj: NewMyDataFieldPatch(),
    }
}

func (x *MyDataFieldPatchBuilder) Data1(data1 *patch.StringPatch) *MyDataFieldPatchBuilder {
    x.obj.Data1 = data1
    return x
}

func (x *MyDataFieldPatchBuilder) Data2(data2 *patch.I32Patch) *MyDataFieldPatchBuilder {
    x.obj.Data2 = data2
    return x
}

func (x *MyDataFieldPatchBuilder) Emit() *MyDataFieldPatch {
    var objCopy MyDataFieldPatch = *x.obj
    return &objCopy
}

func (x *MyDataFieldPatch) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("MyDataFieldPatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyDataFieldPatch) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // data1
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // data2
            if err := x.readField2(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type MyDataPatch struct {
    Assign *MyData `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
    PatchPrior *MyDataFieldPatch `thrift:"patchPrior,3" json:"patchPrior" db:"patchPrior"`
    Ensure *MyDataEnsureStruct `thrift:"ensure,5" json:"ensure" db:"ensure"`
    Patch *MyDataFieldPatch `thrift:"patch,6" json:"patch" db:"patch"`
}
// Compile time interface enforcer
var _ thrift.Struct = &MyDataPatch{}

func NewMyDataPatch() *MyDataPatch {
    return (&MyDataPatch{})
}
func (x *MyDataPatch) GetAssign() *MyData {
    return x.Assign
}

func (x *MyDataPatch) GetClear() bool {
    return x.Clear
}

func (x *MyDataPatch) GetPatchPrior() *MyDataFieldPatch {
    return x.PatchPrior
}

func (x *MyDataPatch) GetEnsure() *MyDataEnsureStruct {
    return x.Ensure
}

func (x *MyDataPatch) GetPatch() *MyDataFieldPatch {
    return x.Patch
}

func (x *MyDataPatch) SetAssign(assign MyData) *MyDataPatch {
    x.Assign = &assign
    return x
}

func (x *MyDataPatch) SetClear(clear bool) *MyDataPatch {
    x.Clear = clear
    return x
}

func (x *MyDataPatch) SetPatchPrior(patchPrior MyDataFieldPatch) *MyDataPatch {
    x.PatchPrior = &patchPrior
    return x
}

func (x *MyDataPatch) SetEnsure(ensure MyDataEnsureStruct) *MyDataPatch {
    x.Ensure = &ensure
    return x
}

func (x *MyDataPatch) SetPatch(patch MyDataFieldPatch) *MyDataPatch {
    x.Patch = &patch
    return x
}

func (x *MyDataPatch) IsSetAssign() bool {
    return x.Assign != nil
}


func (x *MyDataPatch) IsSetPatchPrior() bool {
    return x.PatchPrior != nil
}

func (x *MyDataPatch) IsSetEnsure() bool {
    return x.Ensure != nil
}

func (x *MyDataPatch) IsSetPatch() bool {
    return x.Patch != nil
}

func (x *MyDataPatch) writeField1(p thrift.Protocol) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetAssign()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataPatch) writeField2(p thrift.Protocol) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetClear()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataPatch) writeField3(p thrift.Protocol) error {  // PatchPrior
    if !x.IsSetPatchPrior() {
        return nil
    }

    if err := p.WriteFieldBegin("patchPrior", thrift.STRUCT, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetPatchPrior()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataPatch) writeField5(p thrift.Protocol) error {  // Ensure
    if !x.IsSetEnsure() {
        return nil
    }

    if err := p.WriteFieldBegin("ensure", thrift.STRUCT, 5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetEnsure()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataPatch) writeField6(p thrift.Protocol) error {  // Patch
    if !x.IsSetPatch() {
        return nil
    }

    if err := p.WriteFieldBegin("patch", thrift.STRUCT, 6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetPatch()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyDataPatch) readField1(p thrift.Protocol) error {  // Assign
    result := *NewMyData()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetAssign(result)
    return nil
}

func (x *MyDataPatch) readField2(p thrift.Protocol) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetClear(result)
    return nil
}

func (x *MyDataPatch) readField3(p thrift.Protocol) error {  // PatchPrior
    result := *NewMyDataFieldPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetPatchPrior(result)
    return nil
}

func (x *MyDataPatch) readField5(p thrift.Protocol) error {  // Ensure
    result := *NewMyDataEnsureStruct()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetEnsure(result)
    return nil
}

func (x *MyDataPatch) readField6(p thrift.Protocol) error {  // Patch
    result := *NewMyDataFieldPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetPatch(result)
    return nil
}


// Deprecated: Use MyDataPatch.Set* methods instead or set the fields directly.
type MyDataPatchBuilder struct {
    obj *MyDataPatch
}

func NewMyDataPatchBuilder() *MyDataPatchBuilder {
    return &MyDataPatchBuilder{
        obj: NewMyDataPatch(),
    }
}

func (x *MyDataPatchBuilder) Assign(assign *MyData) *MyDataPatchBuilder {
    x.obj.Assign = assign
    return x
}

func (x *MyDataPatchBuilder) Clear(clear bool) *MyDataPatchBuilder {
    x.obj.Clear = clear
    return x
}

func (x *MyDataPatchBuilder) PatchPrior(patchPrior *MyDataFieldPatch) *MyDataPatchBuilder {
    x.obj.PatchPrior = patchPrior
    return x
}

func (x *MyDataPatchBuilder) Ensure(ensure *MyDataEnsureStruct) *MyDataPatchBuilder {
    x.obj.Ensure = ensure
    return x
}

func (x *MyDataPatchBuilder) Patch(patch *MyDataFieldPatch) *MyDataPatchBuilder {
    x.obj.Patch = patch
    return x
}

func (x *MyDataPatchBuilder) Emit() *MyDataPatch {
    var objCopy MyDataPatch = *x.obj
    return &objCopy
}

func (x *MyDataPatch) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("MyDataPatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField5(p); err != nil {
        return err
    }

    if err := x.writeField6(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyDataPatch) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        case 3:  // patchPrior
            if err := x.readField3(p); err != nil {
                return err
            }
        case 5:  // ensure
            if err := x.readField5(p); err != nil {
                return err
            }
        case 6:  // patch
            if err := x.readField6(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type InnerUnionFieldPatch struct {
    InnerOption *patch.BinaryPatch `thrift:"innerOption,1" json:"innerOption" db:"innerOption"`
}
// Compile time interface enforcer
var _ thrift.Struct = &InnerUnionFieldPatch{}

func NewInnerUnionFieldPatch() *InnerUnionFieldPatch {
    return (&InnerUnionFieldPatch{})
}
func (x *InnerUnionFieldPatch) GetInnerOption() *patch.BinaryPatch {
    return x.InnerOption
}

func (x *InnerUnionFieldPatch) SetInnerOption(innerOption patch.BinaryPatch) *InnerUnionFieldPatch {
    x.InnerOption = &innerOption
    return x
}

func (x *InnerUnionFieldPatch) IsSetInnerOption() bool {
    return x.InnerOption != nil
}

func (x *InnerUnionFieldPatch) writeField1(p thrift.Protocol) error {  // InnerOption
    if !x.IsSetInnerOption() {
        return nil
    }

    if err := p.WriteFieldBegin("innerOption", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetInnerOption()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *InnerUnionFieldPatch) readField1(p thrift.Protocol) error {  // InnerOption
    result := *patch.NewBinaryPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetInnerOption(result)
    return nil
}


// Deprecated: Use InnerUnionFieldPatch.Set* methods instead or set the fields directly.
type InnerUnionFieldPatchBuilder struct {
    obj *InnerUnionFieldPatch
}

func NewInnerUnionFieldPatchBuilder() *InnerUnionFieldPatchBuilder {
    return &InnerUnionFieldPatchBuilder{
        obj: NewInnerUnionFieldPatch(),
    }
}

func (x *InnerUnionFieldPatchBuilder) InnerOption(innerOption *patch.BinaryPatch) *InnerUnionFieldPatchBuilder {
    x.obj.InnerOption = innerOption
    return x
}

func (x *InnerUnionFieldPatchBuilder) Emit() *InnerUnionFieldPatch {
    var objCopy InnerUnionFieldPatch = *x.obj
    return &objCopy
}

func (x *InnerUnionFieldPatch) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("InnerUnionFieldPatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *InnerUnionFieldPatch) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // innerOption
            if err := x.readField1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type InnerUnionPatch struct {
    Assign *InnerUnion `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
    PatchPrior *InnerUnionFieldPatch `thrift:"patchPrior,3" json:"patchPrior" db:"patchPrior"`
    Ensure *InnerUnion `thrift:"ensure,4" json:"ensure" db:"ensure"`
    Patch *InnerUnionFieldPatch `thrift:"patch,6" json:"patch" db:"patch"`
}
// Compile time interface enforcer
var _ thrift.Struct = &InnerUnionPatch{}

func NewInnerUnionPatch() *InnerUnionPatch {
    return (&InnerUnionPatch{})
}
func (x *InnerUnionPatch) GetAssign() *InnerUnion {
    return x.Assign
}

func (x *InnerUnionPatch) GetClear() bool {
    return x.Clear
}

func (x *InnerUnionPatch) GetPatchPrior() *InnerUnionFieldPatch {
    return x.PatchPrior
}

func (x *InnerUnionPatch) GetEnsure() *InnerUnion {
    return x.Ensure
}

func (x *InnerUnionPatch) GetPatch() *InnerUnionFieldPatch {
    return x.Patch
}

func (x *InnerUnionPatch) SetAssign(assign InnerUnion) *InnerUnionPatch {
    x.Assign = &assign
    return x
}

func (x *InnerUnionPatch) SetClear(clear bool) *InnerUnionPatch {
    x.Clear = clear
    return x
}

func (x *InnerUnionPatch) SetPatchPrior(patchPrior InnerUnionFieldPatch) *InnerUnionPatch {
    x.PatchPrior = &patchPrior
    return x
}

func (x *InnerUnionPatch) SetEnsure(ensure InnerUnion) *InnerUnionPatch {
    x.Ensure = &ensure
    return x
}

func (x *InnerUnionPatch) SetPatch(patch InnerUnionFieldPatch) *InnerUnionPatch {
    x.Patch = &patch
    return x
}

func (x *InnerUnionPatch) IsSetAssign() bool {
    return x.Assign != nil
}


func (x *InnerUnionPatch) IsSetPatchPrior() bool {
    return x.PatchPrior != nil
}

func (x *InnerUnionPatch) IsSetEnsure() bool {
    return x.Ensure != nil
}

func (x *InnerUnionPatch) IsSetPatch() bool {
    return x.Patch != nil
}

func (x *InnerUnionPatch) writeField1(p thrift.Protocol) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetAssign()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *InnerUnionPatch) writeField2(p thrift.Protocol) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetClear()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *InnerUnionPatch) writeField3(p thrift.Protocol) error {  // PatchPrior
    if !x.IsSetPatchPrior() {
        return nil
    }

    if err := p.WriteFieldBegin("patchPrior", thrift.STRUCT, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetPatchPrior()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *InnerUnionPatch) writeField4(p thrift.Protocol) error {  // Ensure
    if !x.IsSetEnsure() {
        return nil
    }

    if err := p.WriteFieldBegin("ensure", thrift.STRUCT, 4); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetEnsure()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *InnerUnionPatch) writeField6(p thrift.Protocol) error {  // Patch
    if !x.IsSetPatch() {
        return nil
    }

    if err := p.WriteFieldBegin("patch", thrift.STRUCT, 6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetPatch()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *InnerUnionPatch) readField1(p thrift.Protocol) error {  // Assign
    result := *NewInnerUnion()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetAssign(result)
    return nil
}

func (x *InnerUnionPatch) readField2(p thrift.Protocol) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetClear(result)
    return nil
}

func (x *InnerUnionPatch) readField3(p thrift.Protocol) error {  // PatchPrior
    result := *NewInnerUnionFieldPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetPatchPrior(result)
    return nil
}

func (x *InnerUnionPatch) readField4(p thrift.Protocol) error {  // Ensure
    result := *NewInnerUnion()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetEnsure(result)
    return nil
}

func (x *InnerUnionPatch) readField6(p thrift.Protocol) error {  // Patch
    result := *NewInnerUnionFieldPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetPatch(result)
    return nil
}


// Deprecated: Use InnerUnionPatch.Set* methods instead or set the fields directly.
type InnerUnionPatchBuilder struct {
    obj *InnerUnionPatch
}

func NewInnerUnionPatchBuilder() *InnerUnionPatchBuilder {
    return &InnerUnionPatchBuilder{
        obj: NewInnerUnionPatch(),
    }
}

func (x *InnerUnionPatchBuilder) Assign(assign *InnerUnion) *InnerUnionPatchBuilder {
    x.obj.Assign = assign
    return x
}

func (x *InnerUnionPatchBuilder) Clear(clear bool) *InnerUnionPatchBuilder {
    x.obj.Clear = clear
    return x
}

func (x *InnerUnionPatchBuilder) PatchPrior(patchPrior *InnerUnionFieldPatch) *InnerUnionPatchBuilder {
    x.obj.PatchPrior = patchPrior
    return x
}

func (x *InnerUnionPatchBuilder) Ensure(ensure *InnerUnion) *InnerUnionPatchBuilder {
    x.obj.Ensure = ensure
    return x
}

func (x *InnerUnionPatchBuilder) Patch(patch *InnerUnionFieldPatch) *InnerUnionPatchBuilder {
    x.obj.Patch = patch
    return x
}

func (x *InnerUnionPatchBuilder) Emit() *InnerUnionPatch {
    var objCopy InnerUnionPatch = *x.obj
    return &objCopy
}

func (x *InnerUnionPatch) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("InnerUnionPatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField4(p); err != nil {
        return err
    }

    if err := x.writeField6(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *InnerUnionPatch) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        case 3:  // patchPrior
            if err := x.readField3(p); err != nil {
                return err
            }
        case 4:  // ensure
            if err := x.readField4(p); err != nil {
                return err
            }
        case 6:  // patch
            if err := x.readField6(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type MyUnionFieldPatch struct {
    Option1 *patch.StringPatch `thrift:"option1,1" json:"option1" db:"option1"`
    Option2 *patch.I32Patch `thrift:"option2,2" json:"option2" db:"option2"`
    Option3 *InnerUnionPatch `thrift:"option3,3" json:"option3" db:"option3"`
}
// Compile time interface enforcer
var _ thrift.Struct = &MyUnionFieldPatch{}

func NewMyUnionFieldPatch() *MyUnionFieldPatch {
    return (&MyUnionFieldPatch{})
}
func (x *MyUnionFieldPatch) GetOption1() *patch.StringPatch {
    return x.Option1
}

func (x *MyUnionFieldPatch) GetOption2() *patch.I32Patch {
    return x.Option2
}

func (x *MyUnionFieldPatch) GetOption3() *InnerUnionPatch {
    return x.Option3
}

func (x *MyUnionFieldPatch) SetOption1(option1 patch.StringPatch) *MyUnionFieldPatch {
    x.Option1 = &option1
    return x
}

func (x *MyUnionFieldPatch) SetOption2(option2 patch.I32Patch) *MyUnionFieldPatch {
    x.Option2 = &option2
    return x
}

func (x *MyUnionFieldPatch) SetOption3(option3 InnerUnionPatch) *MyUnionFieldPatch {
    x.Option3 = &option3
    return x
}

func (x *MyUnionFieldPatch) IsSetOption1() bool {
    return x.Option1 != nil
}

func (x *MyUnionFieldPatch) IsSetOption2() bool {
    return x.Option2 != nil
}

func (x *MyUnionFieldPatch) IsSetOption3() bool {
    return x.Option3 != nil
}

func (x *MyUnionFieldPatch) writeField1(p thrift.Protocol) error {  // Option1
    if !x.IsSetOption1() {
        return nil
    }

    if err := p.WriteFieldBegin("option1", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOption1()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnionFieldPatch) writeField2(p thrift.Protocol) error {  // Option2
    if !x.IsSetOption2() {
        return nil
    }

    if err := p.WriteFieldBegin("option2", thrift.STRUCT, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOption2()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnionFieldPatch) writeField3(p thrift.Protocol) error {  // Option3
    if !x.IsSetOption3() {
        return nil
    }

    if err := p.WriteFieldBegin("option3", thrift.STRUCT, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOption3()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnionFieldPatch) readField1(p thrift.Protocol) error {  // Option1
    result := *patch.NewStringPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetOption1(result)
    return nil
}

func (x *MyUnionFieldPatch) readField2(p thrift.Protocol) error {  // Option2
    result := *patch.NewI32Patch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetOption2(result)
    return nil
}

func (x *MyUnionFieldPatch) readField3(p thrift.Protocol) error {  // Option3
    result := *NewInnerUnionPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetOption3(result)
    return nil
}


// Deprecated: Use MyUnionFieldPatch.Set* methods instead or set the fields directly.
type MyUnionFieldPatchBuilder struct {
    obj *MyUnionFieldPatch
}

func NewMyUnionFieldPatchBuilder() *MyUnionFieldPatchBuilder {
    return &MyUnionFieldPatchBuilder{
        obj: NewMyUnionFieldPatch(),
    }
}

func (x *MyUnionFieldPatchBuilder) Option1(option1 *patch.StringPatch) *MyUnionFieldPatchBuilder {
    x.obj.Option1 = option1
    return x
}

func (x *MyUnionFieldPatchBuilder) Option2(option2 *patch.I32Patch) *MyUnionFieldPatchBuilder {
    x.obj.Option2 = option2
    return x
}

func (x *MyUnionFieldPatchBuilder) Option3(option3 *InnerUnionPatch) *MyUnionFieldPatchBuilder {
    x.obj.Option3 = option3
    return x
}

func (x *MyUnionFieldPatchBuilder) Emit() *MyUnionFieldPatch {
    var objCopy MyUnionFieldPatch = *x.obj
    return &objCopy
}

func (x *MyUnionFieldPatch) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("MyUnionFieldPatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyUnionFieldPatch) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // option1
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // option2
            if err := x.readField2(p); err != nil {
                return err
            }
        case 3:  // option3
            if err := x.readField3(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type MyUnionPatch struct {
    Assign *MyUnion `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
    PatchPrior *MyUnionFieldPatch `thrift:"patchPrior,3" json:"patchPrior" db:"patchPrior"`
    Ensure *MyUnion `thrift:"ensure,4" json:"ensure" db:"ensure"`
    Patch *MyUnionFieldPatch `thrift:"patch,6" json:"patch" db:"patch"`
}
// Compile time interface enforcer
var _ thrift.Struct = &MyUnionPatch{}

func NewMyUnionPatch() *MyUnionPatch {
    return (&MyUnionPatch{})
}
func (x *MyUnionPatch) GetAssign() *MyUnion {
    return x.Assign
}

func (x *MyUnionPatch) GetClear() bool {
    return x.Clear
}

func (x *MyUnionPatch) GetPatchPrior() *MyUnionFieldPatch {
    return x.PatchPrior
}

func (x *MyUnionPatch) GetEnsure() *MyUnion {
    return x.Ensure
}

func (x *MyUnionPatch) GetPatch() *MyUnionFieldPatch {
    return x.Patch
}

func (x *MyUnionPatch) SetAssign(assign MyUnion) *MyUnionPatch {
    x.Assign = &assign
    return x
}

func (x *MyUnionPatch) SetClear(clear bool) *MyUnionPatch {
    x.Clear = clear
    return x
}

func (x *MyUnionPatch) SetPatchPrior(patchPrior MyUnionFieldPatch) *MyUnionPatch {
    x.PatchPrior = &patchPrior
    return x
}

func (x *MyUnionPatch) SetEnsure(ensure MyUnion) *MyUnionPatch {
    x.Ensure = &ensure
    return x
}

func (x *MyUnionPatch) SetPatch(patch MyUnionFieldPatch) *MyUnionPatch {
    x.Patch = &patch
    return x
}

func (x *MyUnionPatch) IsSetAssign() bool {
    return x.Assign != nil
}


func (x *MyUnionPatch) IsSetPatchPrior() bool {
    return x.PatchPrior != nil
}

func (x *MyUnionPatch) IsSetEnsure() bool {
    return x.Ensure != nil
}

func (x *MyUnionPatch) IsSetPatch() bool {
    return x.Patch != nil
}

func (x *MyUnionPatch) writeField1(p thrift.Protocol) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetAssign()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnionPatch) writeField2(p thrift.Protocol) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetClear()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnionPatch) writeField3(p thrift.Protocol) error {  // PatchPrior
    if !x.IsSetPatchPrior() {
        return nil
    }

    if err := p.WriteFieldBegin("patchPrior", thrift.STRUCT, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetPatchPrior()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnionPatch) writeField4(p thrift.Protocol) error {  // Ensure
    if !x.IsSetEnsure() {
        return nil
    }

    if err := p.WriteFieldBegin("ensure", thrift.STRUCT, 4); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetEnsure()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnionPatch) writeField6(p thrift.Protocol) error {  // Patch
    if !x.IsSetPatch() {
        return nil
    }

    if err := p.WriteFieldBegin("patch", thrift.STRUCT, 6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetPatch()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyUnionPatch) readField1(p thrift.Protocol) error {  // Assign
    result := *NewMyUnion()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetAssign(result)
    return nil
}

func (x *MyUnionPatch) readField2(p thrift.Protocol) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetClear(result)
    return nil
}

func (x *MyUnionPatch) readField3(p thrift.Protocol) error {  // PatchPrior
    result := *NewMyUnionFieldPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetPatchPrior(result)
    return nil
}

func (x *MyUnionPatch) readField4(p thrift.Protocol) error {  // Ensure
    result := *NewMyUnion()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetEnsure(result)
    return nil
}

func (x *MyUnionPatch) readField6(p thrift.Protocol) error {  // Patch
    result := *NewMyUnionFieldPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetPatch(result)
    return nil
}


// Deprecated: Use MyUnionPatch.Set* methods instead or set the fields directly.
type MyUnionPatchBuilder struct {
    obj *MyUnionPatch
}

func NewMyUnionPatchBuilder() *MyUnionPatchBuilder {
    return &MyUnionPatchBuilder{
        obj: NewMyUnionPatch(),
    }
}

func (x *MyUnionPatchBuilder) Assign(assign *MyUnion) *MyUnionPatchBuilder {
    x.obj.Assign = assign
    return x
}

func (x *MyUnionPatchBuilder) Clear(clear bool) *MyUnionPatchBuilder {
    x.obj.Clear = clear
    return x
}

func (x *MyUnionPatchBuilder) PatchPrior(patchPrior *MyUnionFieldPatch) *MyUnionPatchBuilder {
    x.obj.PatchPrior = patchPrior
    return x
}

func (x *MyUnionPatchBuilder) Ensure(ensure *MyUnion) *MyUnionPatchBuilder {
    x.obj.Ensure = ensure
    return x
}

func (x *MyUnionPatchBuilder) Patch(patch *MyUnionFieldPatch) *MyUnionPatchBuilder {
    x.obj.Patch = patch
    return x
}

func (x *MyUnionPatchBuilder) Emit() *MyUnionPatch {
    var objCopy MyUnionPatch = *x.obj
    return &objCopy
}

func (x *MyUnionPatch) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("MyUnionPatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField4(p); err != nil {
        return err
    }

    if err := x.writeField6(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyUnionPatch) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        case 3:  // patchPrior
            if err := x.readField3(p); err != nil {
                return err
            }
        case 4:  // ensure
            if err := x.readField4(p); err != nil {
                return err
            }
        case 6:  // patch
            if err := x.readField6(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type MyStructEnsureStruct struct {
    MapMap map[string]map[string]int32 `thrift:"mapMap,-30,optional" json:"mapMap,omitempty" db:"mapMap"`
    ListMap []map[string]int32 `thrift:"listMap,-29,optional" json:"listMap,omitempty" db:"listMap"`
    OptMapVal map[string]string `thrift:"optMapVal,-28,optional" json:"optMapVal,omitempty" db:"optMapVal"`
    OptSetVal []string `thrift:"optSetVal,-27,optional" json:"optSetVal,omitempty" db:"optSetVal"`
    OptListVal []int16 `thrift:"optListVal,-26,optional" json:"optListVal,omitempty" db:"optListVal"`
    OptLateStructVal *LateDefStruct `thrift:"optLateStructVal,-25,optional" json:"optLateStructVal,omitempty" db:"optLateStructVal"`
    OptStructVal *MyData `thrift:"optStructVal,-24,optional" json:"optStructVal,omitempty" db:"optStructVal"`
    OptEnumVal *MyEnum `thrift:"optEnumVal,-23,optional" json:"optEnumVal,omitempty" db:"optEnumVal"`
    OptBinaryVal []byte `thrift:"optBinaryVal,-22,optional" json:"optBinaryVal,omitempty" db:"optBinaryVal"`
    OptStringVal *string `thrift:"optStringVal,-21,optional" json:"optStringVal,omitempty" db:"optStringVal"`
    OptDoubleVal *float64 `thrift:"optDoubleVal,-20,optional" json:"optDoubleVal,omitempty" db:"optDoubleVal"`
    OptFloatVal *float32 `thrift:"optFloatVal,-19,optional" json:"optFloatVal,omitempty" db:"optFloatVal"`
    OptI64Val *int64 `thrift:"optI64Val,-18,optional" json:"optI64Val,omitempty" db:"optI64Val"`
    OptI32Val *int32 `thrift:"optI32Val,-17,optional" json:"optI32Val,omitempty" db:"optI32Val"`
    OptI16Val *int16 `thrift:"optI16Val,-16,optional" json:"optI16Val,omitempty" db:"optI16Val"`
    OptByteVal *byte `thrift:"optByteVal,-15,optional" json:"optByteVal,omitempty" db:"optByteVal"`
    OptBoolVal *bool `thrift:"optBoolVal,-14,optional" json:"optBoolVal,omitempty" db:"optBoolVal"`
    LateStructVal *LateDefStruct `thrift:"lateStructVal,-13,optional" json:"lateStructVal,omitempty" db:"lateStructVal"`
    UnionVal *MyUnion `thrift:"unionVal,-12,optional" json:"unionVal,omitempty" db:"unionVal"`
    StructVal *MyData `thrift:"structVal,-11,optional" json:"structVal,omitempty" db:"structVal"`
    EnumVal *MyEnum `thrift:"enumVal,-10,optional" json:"enumVal,omitempty" db:"enumVal"`
    BinaryVal []byte `thrift:"binaryVal,-9,optional" json:"binaryVal,omitempty" db:"binaryVal"`
    StringVal *string `thrift:"stringVal,-8,optional" json:"stringVal,omitempty" db:"stringVal"`
    DoubleVal *float64 `thrift:"doubleVal,-7,optional" json:"doubleVal,omitempty" db:"doubleVal"`
    FloatVal *float32 `thrift:"floatVal,-6,optional" json:"floatVal,omitempty" db:"floatVal"`
    I64Val *int64 `thrift:"i64Val,-5,optional" json:"i64Val,omitempty" db:"i64Val"`
    I32Val *int32 `thrift:"i32Val,-4,optional" json:"i32Val,omitempty" db:"i32Val"`
    I16Val *int16 `thrift:"i16Val,-3,optional" json:"i16Val,omitempty" db:"i16Val"`
    ByteVal *byte `thrift:"byteVal,-2,optional" json:"byteVal,omitempty" db:"byteVal"`
    BoolVal *bool `thrift:"boolVal,-1,optional" json:"boolVal,omitempty" db:"boolVal"`
}
// Compile time interface enforcer
var _ thrift.Struct = &MyStructEnsureStruct{}

func NewMyStructEnsureStruct() *MyStructEnsureStruct {
    return (&MyStructEnsureStruct{})
}
func (x *MyStructEnsureStruct) GetMapMap() map[string]map[string]int32 {
    return x.MapMap
}

func (x *MyStructEnsureStruct) GetListMap() []map[string]int32 {
    return x.ListMap
}

func (x *MyStructEnsureStruct) GetOptMapVal() map[string]string {
    return x.OptMapVal
}

func (x *MyStructEnsureStruct) GetOptSetVal() []string {
    return x.OptSetVal
}

func (x *MyStructEnsureStruct) GetOptListVal() []int16 {
    return x.OptListVal
}

func (x *MyStructEnsureStruct) GetOptLateStructVal() *LateDefStruct {
    return x.OptLateStructVal
}

func (x *MyStructEnsureStruct) GetOptStructVal() *MyData {
    return x.OptStructVal
}

func (x *MyStructEnsureStruct) GetOptEnumVal() *MyEnum {
    return x.OptEnumVal
}

func (x *MyStructEnsureStruct) GetOptBinaryVal() []byte {
    return x.OptBinaryVal
}

func (x *MyStructEnsureStruct) GetOptStringVal() *string {
    return x.OptStringVal
}

func (x *MyStructEnsureStruct) GetOptDoubleVal() *float64 {
    return x.OptDoubleVal
}

func (x *MyStructEnsureStruct) GetOptFloatVal() *float32 {
    return x.OptFloatVal
}

func (x *MyStructEnsureStruct) GetOptI64Val() *int64 {
    return x.OptI64Val
}

func (x *MyStructEnsureStruct) GetOptI32Val() *int32 {
    return x.OptI32Val
}

func (x *MyStructEnsureStruct) GetOptI16Val() *int16 {
    return x.OptI16Val
}

func (x *MyStructEnsureStruct) GetOptByteVal() *byte {
    return x.OptByteVal
}

func (x *MyStructEnsureStruct) GetOptBoolVal() *bool {
    return x.OptBoolVal
}

func (x *MyStructEnsureStruct) GetLateStructVal() *LateDefStruct {
    return x.LateStructVal
}

func (x *MyStructEnsureStruct) GetUnionVal() *MyUnion {
    return x.UnionVal
}

func (x *MyStructEnsureStruct) GetStructVal() *MyData {
    return x.StructVal
}

func (x *MyStructEnsureStruct) GetEnumVal() *MyEnum {
    return x.EnumVal
}

func (x *MyStructEnsureStruct) GetBinaryVal() []byte {
    return x.BinaryVal
}

func (x *MyStructEnsureStruct) GetStringVal() *string {
    return x.StringVal
}

func (x *MyStructEnsureStruct) GetDoubleVal() *float64 {
    return x.DoubleVal
}

func (x *MyStructEnsureStruct) GetFloatVal() *float32 {
    return x.FloatVal
}

func (x *MyStructEnsureStruct) GetI64Val() *int64 {
    return x.I64Val
}

func (x *MyStructEnsureStruct) GetI32Val() *int32 {
    return x.I32Val
}

func (x *MyStructEnsureStruct) GetI16Val() *int16 {
    return x.I16Val
}

func (x *MyStructEnsureStruct) GetByteVal() *byte {
    return x.ByteVal
}

func (x *MyStructEnsureStruct) GetBoolVal() *bool {
    return x.BoolVal
}

func (x *MyStructEnsureStruct) SetMapMap(mapMap map[string]map[string]int32) *MyStructEnsureStruct {
    x.MapMap = mapMap
    return x
}

func (x *MyStructEnsureStruct) SetListMap(listMap []map[string]int32) *MyStructEnsureStruct {
    x.ListMap = listMap
    return x
}

func (x *MyStructEnsureStruct) SetOptMapVal(optMapVal map[string]string) *MyStructEnsureStruct {
    x.OptMapVal = optMapVal
    return x
}

func (x *MyStructEnsureStruct) SetOptSetVal(optSetVal []string) *MyStructEnsureStruct {
    x.OptSetVal = optSetVal
    return x
}

func (x *MyStructEnsureStruct) SetOptListVal(optListVal []int16) *MyStructEnsureStruct {
    x.OptListVal = optListVal
    return x
}

func (x *MyStructEnsureStruct) SetOptLateStructVal(optLateStructVal LateDefStruct) *MyStructEnsureStruct {
    x.OptLateStructVal = &optLateStructVal
    return x
}

func (x *MyStructEnsureStruct) SetOptStructVal(optStructVal MyData) *MyStructEnsureStruct {
    x.OptStructVal = &optStructVal
    return x
}

func (x *MyStructEnsureStruct) SetOptEnumVal(optEnumVal MyEnum) *MyStructEnsureStruct {
    x.OptEnumVal = &optEnumVal
    return x
}

func (x *MyStructEnsureStruct) SetOptBinaryVal(optBinaryVal []byte) *MyStructEnsureStruct {
    x.OptBinaryVal = optBinaryVal
    return x
}

func (x *MyStructEnsureStruct) SetOptStringVal(optStringVal string) *MyStructEnsureStruct {
    x.OptStringVal = &optStringVal
    return x
}

func (x *MyStructEnsureStruct) SetOptDoubleVal(optDoubleVal float64) *MyStructEnsureStruct {
    x.OptDoubleVal = &optDoubleVal
    return x
}

func (x *MyStructEnsureStruct) SetOptFloatVal(optFloatVal float32) *MyStructEnsureStruct {
    x.OptFloatVal = &optFloatVal
    return x
}

func (x *MyStructEnsureStruct) SetOptI64Val(optI64Val int64) *MyStructEnsureStruct {
    x.OptI64Val = &optI64Val
    return x
}

func (x *MyStructEnsureStruct) SetOptI32Val(optI32Val int32) *MyStructEnsureStruct {
    x.OptI32Val = &optI32Val
    return x
}

func (x *MyStructEnsureStruct) SetOptI16Val(optI16Val int16) *MyStructEnsureStruct {
    x.OptI16Val = &optI16Val
    return x
}

func (x *MyStructEnsureStruct) SetOptByteVal(optByteVal byte) *MyStructEnsureStruct {
    x.OptByteVal = &optByteVal
    return x
}

func (x *MyStructEnsureStruct) SetOptBoolVal(optBoolVal bool) *MyStructEnsureStruct {
    x.OptBoolVal = &optBoolVal
    return x
}

func (x *MyStructEnsureStruct) SetLateStructVal(lateStructVal LateDefStruct) *MyStructEnsureStruct {
    x.LateStructVal = &lateStructVal
    return x
}

func (x *MyStructEnsureStruct) SetUnionVal(unionVal MyUnion) *MyStructEnsureStruct {
    x.UnionVal = &unionVal
    return x
}

func (x *MyStructEnsureStruct) SetStructVal(structVal MyData) *MyStructEnsureStruct {
    x.StructVal = &structVal
    return x
}

func (x *MyStructEnsureStruct) SetEnumVal(enumVal MyEnum) *MyStructEnsureStruct {
    x.EnumVal = &enumVal
    return x
}

func (x *MyStructEnsureStruct) SetBinaryVal(binaryVal []byte) *MyStructEnsureStruct {
    x.BinaryVal = binaryVal
    return x
}

func (x *MyStructEnsureStruct) SetStringVal(stringVal string) *MyStructEnsureStruct {
    x.StringVal = &stringVal
    return x
}

func (x *MyStructEnsureStruct) SetDoubleVal(doubleVal float64) *MyStructEnsureStruct {
    x.DoubleVal = &doubleVal
    return x
}

func (x *MyStructEnsureStruct) SetFloatVal(floatVal float32) *MyStructEnsureStruct {
    x.FloatVal = &floatVal
    return x
}

func (x *MyStructEnsureStruct) SetI64Val(i64Val int64) *MyStructEnsureStruct {
    x.I64Val = &i64Val
    return x
}

func (x *MyStructEnsureStruct) SetI32Val(i32Val int32) *MyStructEnsureStruct {
    x.I32Val = &i32Val
    return x
}

func (x *MyStructEnsureStruct) SetI16Val(i16Val int16) *MyStructEnsureStruct {
    x.I16Val = &i16Val
    return x
}

func (x *MyStructEnsureStruct) SetByteVal(byteVal byte) *MyStructEnsureStruct {
    x.ByteVal = &byteVal
    return x
}

func (x *MyStructEnsureStruct) SetBoolVal(boolVal bool) *MyStructEnsureStruct {
    x.BoolVal = &boolVal
    return x
}

func (x *MyStructEnsureStruct) IsSetMapMap() bool {
    return x.MapMap != nil
}

func (x *MyStructEnsureStruct) IsSetListMap() bool {
    return x.ListMap != nil
}

func (x *MyStructEnsureStruct) IsSetOptMapVal() bool {
    return x.OptMapVal != nil
}

func (x *MyStructEnsureStruct) IsSetOptSetVal() bool {
    return x.OptSetVal != nil
}

func (x *MyStructEnsureStruct) IsSetOptListVal() bool {
    return x.OptListVal != nil
}

func (x *MyStructEnsureStruct) IsSetOptLateStructVal() bool {
    return x.OptLateStructVal != nil
}

func (x *MyStructEnsureStruct) IsSetOptStructVal() bool {
    return x.OptStructVal != nil
}

func (x *MyStructEnsureStruct) IsSetOptEnumVal() bool {
    return x.OptEnumVal != nil
}

func (x *MyStructEnsureStruct) IsSetOptBinaryVal() bool {
    return x.OptBinaryVal != nil
}

func (x *MyStructEnsureStruct) IsSetOptStringVal() bool {
    return x.OptStringVal != nil
}

func (x *MyStructEnsureStruct) IsSetOptDoubleVal() bool {
    return x.OptDoubleVal != nil
}

func (x *MyStructEnsureStruct) IsSetOptFloatVal() bool {
    return x.OptFloatVal != nil
}

func (x *MyStructEnsureStruct) IsSetOptI64Val() bool {
    return x.OptI64Val != nil
}

func (x *MyStructEnsureStruct) IsSetOptI32Val() bool {
    return x.OptI32Val != nil
}

func (x *MyStructEnsureStruct) IsSetOptI16Val() bool {
    return x.OptI16Val != nil
}

func (x *MyStructEnsureStruct) IsSetOptByteVal() bool {
    return x.OptByteVal != nil
}

func (x *MyStructEnsureStruct) IsSetOptBoolVal() bool {
    return x.OptBoolVal != nil
}

func (x *MyStructEnsureStruct) IsSetLateStructVal() bool {
    return x.LateStructVal != nil
}

func (x *MyStructEnsureStruct) IsSetUnionVal() bool {
    return x.UnionVal != nil
}

func (x *MyStructEnsureStruct) IsSetStructVal() bool {
    return x.StructVal != nil
}

func (x *MyStructEnsureStruct) IsSetEnumVal() bool {
    return x.EnumVal != nil
}

func (x *MyStructEnsureStruct) IsSetBinaryVal() bool {
    return x.BinaryVal != nil
}

func (x *MyStructEnsureStruct) IsSetStringVal() bool {
    return x.StringVal != nil
}

func (x *MyStructEnsureStruct) IsSetDoubleVal() bool {
    return x.DoubleVal != nil
}

func (x *MyStructEnsureStruct) IsSetFloatVal() bool {
    return x.FloatVal != nil
}

func (x *MyStructEnsureStruct) IsSetI64Val() bool {
    return x.I64Val != nil
}

func (x *MyStructEnsureStruct) IsSetI32Val() bool {
    return x.I32Val != nil
}

func (x *MyStructEnsureStruct) IsSetI16Val() bool {
    return x.I16Val != nil
}

func (x *MyStructEnsureStruct) IsSetByteVal() bool {
    return x.ByteVal != nil
}

func (x *MyStructEnsureStruct) IsSetBoolVal() bool {
    return x.BoolVal != nil
}

func (x *MyStructEnsureStruct) writeField_30(p thrift.Protocol) error {  // MapMap
    if !x.IsSetMapMap() {
        return nil
    }

    if err := p.WriteFieldBegin("mapMap", thrift.MAP, -30); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetMapMap()
    if err := p.WriteMapBegin(thrift.STRING, thrift.MAP, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteMapBegin(thrift.STRING, thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_29(p thrift.Protocol) error {  // ListMap
    if !x.IsSetListMap() {
        return nil
    }

    if err := p.WriteFieldBegin("listMap", thrift.LIST, -29); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetListMap()
    if err := p.WriteListBegin(thrift.MAP, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteMapBegin(thrift.STRING, thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_28(p thrift.Protocol) error {  // OptMapVal
    if !x.IsSetOptMapVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optMapVal", thrift.MAP, -28); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetOptMapVal()
    if err := p.WriteMapBegin(thrift.STRING, thrift.STRING, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteString(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_27(p thrift.Protocol) error {  // OptSetVal
    if !x.IsSetOptSetVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optSetVal", thrift.SET, -27); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetOptSetVal()
    if err := p.WriteSetBegin(thrift.STRING, len(item)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteString(item); err != nil {
    return err
}
    }
}
if err := p.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_26(p thrift.Protocol) error {  // OptListVal
    if !x.IsSetOptListVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optListVal", thrift.LIST, -26); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetOptListVal()
    if err := p.WriteListBegin(thrift.I16, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI16(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_25(p thrift.Protocol) error {  // OptLateStructVal
    if !x.IsSetOptLateStructVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optLateStructVal", thrift.STRUCT, -25); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOptLateStructVal()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_24(p thrift.Protocol) error {  // OptStructVal
    if !x.IsSetOptStructVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optStructVal", thrift.STRUCT, -24); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOptStructVal()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_23(p thrift.Protocol) error {  // OptEnumVal
    if !x.IsSetOptEnumVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optEnumVal", thrift.I32, -23); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOptEnumVal()
    if err := p.WriteI32(int32(item)); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_22(p thrift.Protocol) error {  // OptBinaryVal
    if !x.IsSetOptBinaryVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optBinaryVal", thrift.BINARY, -22); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetOptBinaryVal()
    if err := p.WriteBinary(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_21(p thrift.Protocol) error {  // OptStringVal
    if !x.IsSetOptStringVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optStringVal", thrift.STRING, -21); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOptStringVal()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_20(p thrift.Protocol) error {  // OptDoubleVal
    if !x.IsSetOptDoubleVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optDoubleVal", thrift.DOUBLE, -20); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOptDoubleVal()
    if err := p.WriteDouble(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_19(p thrift.Protocol) error {  // OptFloatVal
    if !x.IsSetOptFloatVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optFloatVal", thrift.FLOAT, -19); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOptFloatVal()
    if err := p.WriteFloat(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_18(p thrift.Protocol) error {  // OptI64Val
    if !x.IsSetOptI64Val() {
        return nil
    }

    if err := p.WriteFieldBegin("optI64Val", thrift.I64, -18); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOptI64Val()
    if err := p.WriteI64(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_17(p thrift.Protocol) error {  // OptI32Val
    if !x.IsSetOptI32Val() {
        return nil
    }

    if err := p.WriteFieldBegin("optI32Val", thrift.I32, -17); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOptI32Val()
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_16(p thrift.Protocol) error {  // OptI16Val
    if !x.IsSetOptI16Val() {
        return nil
    }

    if err := p.WriteFieldBegin("optI16Val", thrift.I16, -16); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOptI16Val()
    if err := p.WriteI16(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_15(p thrift.Protocol) error {  // OptByteVal
    if !x.IsSetOptByteVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optByteVal", thrift.BYTE, -15); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOptByteVal()
    if err := p.WriteByte(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_14(p thrift.Protocol) error {  // OptBoolVal
    if !x.IsSetOptBoolVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optBoolVal", thrift.BOOL, -14); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOptBoolVal()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_13(p thrift.Protocol) error {  // LateStructVal
    if !x.IsSetLateStructVal() {
        return nil
    }

    if err := p.WriteFieldBegin("lateStructVal", thrift.STRUCT, -13); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetLateStructVal()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_12(p thrift.Protocol) error {  // UnionVal
    if !x.IsSetUnionVal() {
        return nil
    }

    if err := p.WriteFieldBegin("unionVal", thrift.STRUCT, -12); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetUnionVal()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_11(p thrift.Protocol) error {  // StructVal
    if !x.IsSetStructVal() {
        return nil
    }

    if err := p.WriteFieldBegin("structVal", thrift.STRUCT, -11); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetStructVal()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_10(p thrift.Protocol) error {  // EnumVal
    if !x.IsSetEnumVal() {
        return nil
    }

    if err := p.WriteFieldBegin("enumVal", thrift.I32, -10); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetEnumVal()
    if err := p.WriteI32(int32(item)); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_9(p thrift.Protocol) error {  // BinaryVal
    if !x.IsSetBinaryVal() {
        return nil
    }

    if err := p.WriteFieldBegin("binaryVal", thrift.BINARY, -9); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetBinaryVal()
    if err := p.WriteBinary(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_8(p thrift.Protocol) error {  // StringVal
    if !x.IsSetStringVal() {
        return nil
    }

    if err := p.WriteFieldBegin("stringVal", thrift.STRING, -8); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetStringVal()
    if err := p.WriteString(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_7(p thrift.Protocol) error {  // DoubleVal
    if !x.IsSetDoubleVal() {
        return nil
    }

    if err := p.WriteFieldBegin("doubleVal", thrift.DOUBLE, -7); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetDoubleVal()
    if err := p.WriteDouble(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_6(p thrift.Protocol) error {  // FloatVal
    if !x.IsSetFloatVal() {
        return nil
    }

    if err := p.WriteFieldBegin("floatVal", thrift.FLOAT, -6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetFloatVal()
    if err := p.WriteFloat(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_5(p thrift.Protocol) error {  // I64Val
    if !x.IsSetI64Val() {
        return nil
    }

    if err := p.WriteFieldBegin("i64Val", thrift.I64, -5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetI64Val()
    if err := p.WriteI64(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_4(p thrift.Protocol) error {  // I32Val
    if !x.IsSetI32Val() {
        return nil
    }

    if err := p.WriteFieldBegin("i32Val", thrift.I32, -4); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetI32Val()
    if err := p.WriteI32(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_3(p thrift.Protocol) error {  // I16Val
    if !x.IsSetI16Val() {
        return nil
    }

    if err := p.WriteFieldBegin("i16Val", thrift.I16, -3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetI16Val()
    if err := p.WriteI16(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_2(p thrift.Protocol) error {  // ByteVal
    if !x.IsSetByteVal() {
        return nil
    }

    if err := p.WriteFieldBegin("byteVal", thrift.BYTE, -2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetByteVal()
    if err := p.WriteByte(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) writeField_1(p thrift.Protocol) error {  // BoolVal
    if !x.IsSetBoolVal() {
        return nil
    }

    if err := p.WriteFieldBegin("boolVal", thrift.BOOL, -1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetBoolVal()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) readField_30(p thrift.Protocol) error {  // MapMap
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value map[string]int32
    {
        _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetMapMap(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_29(p thrift.Protocol) error {  // ListMap
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]map[string]int32, 0, size)
for i := 0; i < size; i++ {
    var elem map[string]int32
    {
        _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.SetListMap(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_28(p thrift.Protocol) error {  // OptMapVal
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]string, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetOptMapVal(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_27(p thrift.Protocol) error {  // OptSetVal
    _ /* elemType */, size, err := p.ReadSetBegin()
if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
}

setResult := make([]string, 0, size)
for i := 0; i < size; i++ {
    var elem string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        elem = result
    }
    setResult = append(setResult, elem)
}

if err := p.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
}
result := setResult

    x.SetOptSetVal(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_26(p thrift.Protocol) error {  // OptListVal
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int16, 0, size)
for i := 0; i < size; i++ {
    var elem int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.SetOptListVal(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_25(p thrift.Protocol) error {  // OptLateStructVal
    result := *NewLateDefStruct()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetOptLateStructVal(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_24(p thrift.Protocol) error {  // OptStructVal
    result := *NewMyData()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetOptStructVal(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_23(p thrift.Protocol) error {  // OptEnumVal
    enumResult, err := p.ReadI32()
if err != nil {
    return err
}
result := MyEnum(enumResult)

    x.SetOptEnumVal(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_22(p thrift.Protocol) error {  // OptBinaryVal
    result, err := p.ReadBinary()
if err != nil {
    return err
}

    x.SetOptBinaryVal(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_21(p thrift.Protocol) error {  // OptStringVal
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetOptStringVal(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_20(p thrift.Protocol) error {  // OptDoubleVal
    result, err := p.ReadDouble()
if err != nil {
    return err
}

    x.SetOptDoubleVal(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_19(p thrift.Protocol) error {  // OptFloatVal
    result, err := p.ReadFloat()
if err != nil {
    return err
}

    x.SetOptFloatVal(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_18(p thrift.Protocol) error {  // OptI64Val
    result, err := p.ReadI64()
if err != nil {
    return err
}

    x.SetOptI64Val(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_17(p thrift.Protocol) error {  // OptI32Val
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.SetOptI32Val(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_16(p thrift.Protocol) error {  // OptI16Val
    result, err := p.ReadI16()
if err != nil {
    return err
}

    x.SetOptI16Val(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_15(p thrift.Protocol) error {  // OptByteVal
    result, err := p.ReadByte()
if err != nil {
    return err
}

    x.SetOptByteVal(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_14(p thrift.Protocol) error {  // OptBoolVal
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetOptBoolVal(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_13(p thrift.Protocol) error {  // LateStructVal
    result := *NewLateDefStruct()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetLateStructVal(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_12(p thrift.Protocol) error {  // UnionVal
    result := *NewMyUnion()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetUnionVal(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_11(p thrift.Protocol) error {  // StructVal
    result := *NewMyData()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetStructVal(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_10(p thrift.Protocol) error {  // EnumVal
    enumResult, err := p.ReadI32()
if err != nil {
    return err
}
result := MyEnum(enumResult)

    x.SetEnumVal(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_9(p thrift.Protocol) error {  // BinaryVal
    result, err := p.ReadBinary()
if err != nil {
    return err
}

    x.SetBinaryVal(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_8(p thrift.Protocol) error {  // StringVal
    result, err := p.ReadString()
if err != nil {
    return err
}

    x.SetStringVal(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_7(p thrift.Protocol) error {  // DoubleVal
    result, err := p.ReadDouble()
if err != nil {
    return err
}

    x.SetDoubleVal(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_6(p thrift.Protocol) error {  // FloatVal
    result, err := p.ReadFloat()
if err != nil {
    return err
}

    x.SetFloatVal(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_5(p thrift.Protocol) error {  // I64Val
    result, err := p.ReadI64()
if err != nil {
    return err
}

    x.SetI64Val(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_4(p thrift.Protocol) error {  // I32Val
    result, err := p.ReadI32()
if err != nil {
    return err
}

    x.SetI32Val(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_3(p thrift.Protocol) error {  // I16Val
    result, err := p.ReadI16()
if err != nil {
    return err
}

    x.SetI16Val(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_2(p thrift.Protocol) error {  // ByteVal
    result, err := p.ReadByte()
if err != nil {
    return err
}

    x.SetByteVal(result)
    return nil
}

func (x *MyStructEnsureStruct) readField_1(p thrift.Protocol) error {  // BoolVal
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetBoolVal(result)
    return nil
}


// Deprecated: Use MyStructEnsureStruct.Set* methods instead or set the fields directly.
type MyStructEnsureStructBuilder struct {
    obj *MyStructEnsureStruct
}

func NewMyStructEnsureStructBuilder() *MyStructEnsureStructBuilder {
    return &MyStructEnsureStructBuilder{
        obj: NewMyStructEnsureStruct(),
    }
}

func (x *MyStructEnsureStructBuilder) MapMap(mapMap map[string]map[string]int32) *MyStructEnsureStructBuilder {
    x.obj.MapMap = mapMap
    return x
}

func (x *MyStructEnsureStructBuilder) ListMap(listMap []map[string]int32) *MyStructEnsureStructBuilder {
    x.obj.ListMap = listMap
    return x
}

func (x *MyStructEnsureStructBuilder) OptMapVal(optMapVal map[string]string) *MyStructEnsureStructBuilder {
    x.obj.OptMapVal = optMapVal
    return x
}

func (x *MyStructEnsureStructBuilder) OptSetVal(optSetVal []string) *MyStructEnsureStructBuilder {
    x.obj.OptSetVal = optSetVal
    return x
}

func (x *MyStructEnsureStructBuilder) OptListVal(optListVal []int16) *MyStructEnsureStructBuilder {
    x.obj.OptListVal = optListVal
    return x
}

func (x *MyStructEnsureStructBuilder) OptLateStructVal(optLateStructVal *LateDefStruct) *MyStructEnsureStructBuilder {
    x.obj.OptLateStructVal = optLateStructVal
    return x
}

func (x *MyStructEnsureStructBuilder) OptStructVal(optStructVal *MyData) *MyStructEnsureStructBuilder {
    x.obj.OptStructVal = optStructVal
    return x
}

func (x *MyStructEnsureStructBuilder) OptEnumVal(optEnumVal *MyEnum) *MyStructEnsureStructBuilder {
    x.obj.OptEnumVal = optEnumVal
    return x
}

func (x *MyStructEnsureStructBuilder) OptBinaryVal(optBinaryVal []byte) *MyStructEnsureStructBuilder {
    x.obj.OptBinaryVal = optBinaryVal
    return x
}

func (x *MyStructEnsureStructBuilder) OptStringVal(optStringVal *string) *MyStructEnsureStructBuilder {
    x.obj.OptStringVal = optStringVal
    return x
}

func (x *MyStructEnsureStructBuilder) OptDoubleVal(optDoubleVal *float64) *MyStructEnsureStructBuilder {
    x.obj.OptDoubleVal = optDoubleVal
    return x
}

func (x *MyStructEnsureStructBuilder) OptFloatVal(optFloatVal *float32) *MyStructEnsureStructBuilder {
    x.obj.OptFloatVal = optFloatVal
    return x
}

func (x *MyStructEnsureStructBuilder) OptI64Val(optI64Val *int64) *MyStructEnsureStructBuilder {
    x.obj.OptI64Val = optI64Val
    return x
}

func (x *MyStructEnsureStructBuilder) OptI32Val(optI32Val *int32) *MyStructEnsureStructBuilder {
    x.obj.OptI32Val = optI32Val
    return x
}

func (x *MyStructEnsureStructBuilder) OptI16Val(optI16Val *int16) *MyStructEnsureStructBuilder {
    x.obj.OptI16Val = optI16Val
    return x
}

func (x *MyStructEnsureStructBuilder) OptByteVal(optByteVal *byte) *MyStructEnsureStructBuilder {
    x.obj.OptByteVal = optByteVal
    return x
}

func (x *MyStructEnsureStructBuilder) OptBoolVal(optBoolVal *bool) *MyStructEnsureStructBuilder {
    x.obj.OptBoolVal = optBoolVal
    return x
}

func (x *MyStructEnsureStructBuilder) LateStructVal(lateStructVal *LateDefStruct) *MyStructEnsureStructBuilder {
    x.obj.LateStructVal = lateStructVal
    return x
}

func (x *MyStructEnsureStructBuilder) UnionVal(unionVal *MyUnion) *MyStructEnsureStructBuilder {
    x.obj.UnionVal = unionVal
    return x
}

func (x *MyStructEnsureStructBuilder) StructVal(structVal *MyData) *MyStructEnsureStructBuilder {
    x.obj.StructVal = structVal
    return x
}

func (x *MyStructEnsureStructBuilder) EnumVal(enumVal *MyEnum) *MyStructEnsureStructBuilder {
    x.obj.EnumVal = enumVal
    return x
}

func (x *MyStructEnsureStructBuilder) BinaryVal(binaryVal []byte) *MyStructEnsureStructBuilder {
    x.obj.BinaryVal = binaryVal
    return x
}

func (x *MyStructEnsureStructBuilder) StringVal(stringVal *string) *MyStructEnsureStructBuilder {
    x.obj.StringVal = stringVal
    return x
}

func (x *MyStructEnsureStructBuilder) DoubleVal(doubleVal *float64) *MyStructEnsureStructBuilder {
    x.obj.DoubleVal = doubleVal
    return x
}

func (x *MyStructEnsureStructBuilder) FloatVal(floatVal *float32) *MyStructEnsureStructBuilder {
    x.obj.FloatVal = floatVal
    return x
}

func (x *MyStructEnsureStructBuilder) I64Val(i64Val *int64) *MyStructEnsureStructBuilder {
    x.obj.I64Val = i64Val
    return x
}

func (x *MyStructEnsureStructBuilder) I32Val(i32Val *int32) *MyStructEnsureStructBuilder {
    x.obj.I32Val = i32Val
    return x
}

func (x *MyStructEnsureStructBuilder) I16Val(i16Val *int16) *MyStructEnsureStructBuilder {
    x.obj.I16Val = i16Val
    return x
}

func (x *MyStructEnsureStructBuilder) ByteVal(byteVal *byte) *MyStructEnsureStructBuilder {
    x.obj.ByteVal = byteVal
    return x
}

func (x *MyStructEnsureStructBuilder) BoolVal(boolVal *bool) *MyStructEnsureStructBuilder {
    x.obj.BoolVal = boolVal
    return x
}

func (x *MyStructEnsureStructBuilder) Emit() *MyStructEnsureStruct {
    var objCopy MyStructEnsureStruct = *x.obj
    return &objCopy
}

func (x *MyStructEnsureStruct) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("MyStructEnsureStruct"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField_30(p); err != nil {
        return err
    }

    if err := x.writeField_29(p); err != nil {
        return err
    }

    if err := x.writeField_28(p); err != nil {
        return err
    }

    if err := x.writeField_27(p); err != nil {
        return err
    }

    if err := x.writeField_26(p); err != nil {
        return err
    }

    if err := x.writeField_25(p); err != nil {
        return err
    }

    if err := x.writeField_24(p); err != nil {
        return err
    }

    if err := x.writeField_23(p); err != nil {
        return err
    }

    if err := x.writeField_22(p); err != nil {
        return err
    }

    if err := x.writeField_21(p); err != nil {
        return err
    }

    if err := x.writeField_20(p); err != nil {
        return err
    }

    if err := x.writeField_19(p); err != nil {
        return err
    }

    if err := x.writeField_18(p); err != nil {
        return err
    }

    if err := x.writeField_17(p); err != nil {
        return err
    }

    if err := x.writeField_16(p); err != nil {
        return err
    }

    if err := x.writeField_15(p); err != nil {
        return err
    }

    if err := x.writeField_14(p); err != nil {
        return err
    }

    if err := x.writeField_13(p); err != nil {
        return err
    }

    if err := x.writeField_12(p); err != nil {
        return err
    }

    if err := x.writeField_11(p); err != nil {
        return err
    }

    if err := x.writeField_10(p); err != nil {
        return err
    }

    if err := x.writeField_9(p); err != nil {
        return err
    }

    if err := x.writeField_8(p); err != nil {
        return err
    }

    if err := x.writeField_7(p); err != nil {
        return err
    }

    if err := x.writeField_6(p); err != nil {
        return err
    }

    if err := x.writeField_5(p); err != nil {
        return err
    }

    if err := x.writeField_4(p); err != nil {
        return err
    }

    if err := x.writeField_3(p); err != nil {
        return err
    }

    if err := x.writeField_2(p); err != nil {
        return err
    }

    if err := x.writeField_1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyStructEnsureStruct) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case -30:  // mapMap
            if err := x.readField_30(p); err != nil {
                return err
            }
        case -29:  // listMap
            if err := x.readField_29(p); err != nil {
                return err
            }
        case -28:  // optMapVal
            if err := x.readField_28(p); err != nil {
                return err
            }
        case -27:  // optSetVal
            if err := x.readField_27(p); err != nil {
                return err
            }
        case -26:  // optListVal
            if err := x.readField_26(p); err != nil {
                return err
            }
        case -25:  // optLateStructVal
            if err := x.readField_25(p); err != nil {
                return err
            }
        case -24:  // optStructVal
            if err := x.readField_24(p); err != nil {
                return err
            }
        case -23:  // optEnumVal
            if err := x.readField_23(p); err != nil {
                return err
            }
        case -22:  // optBinaryVal
            if err := x.readField_22(p); err != nil {
                return err
            }
        case -21:  // optStringVal
            if err := x.readField_21(p); err != nil {
                return err
            }
        case -20:  // optDoubleVal
            if err := x.readField_20(p); err != nil {
                return err
            }
        case -19:  // optFloatVal
            if err := x.readField_19(p); err != nil {
                return err
            }
        case -18:  // optI64Val
            if err := x.readField_18(p); err != nil {
                return err
            }
        case -17:  // optI32Val
            if err := x.readField_17(p); err != nil {
                return err
            }
        case -16:  // optI16Val
            if err := x.readField_16(p); err != nil {
                return err
            }
        case -15:  // optByteVal
            if err := x.readField_15(p); err != nil {
                return err
            }
        case -14:  // optBoolVal
            if err := x.readField_14(p); err != nil {
                return err
            }
        case -13:  // lateStructVal
            if err := x.readField_13(p); err != nil {
                return err
            }
        case -12:  // unionVal
            if err := x.readField_12(p); err != nil {
                return err
            }
        case -11:  // structVal
            if err := x.readField_11(p); err != nil {
                return err
            }
        case -10:  // enumVal
            if err := x.readField_10(p); err != nil {
                return err
            }
        case -9:  // binaryVal
            if err := x.readField_9(p); err != nil {
                return err
            }
        case -8:  // stringVal
            if err := x.readField_8(p); err != nil {
                return err
            }
        case -7:  // doubleVal
            if err := x.readField_7(p); err != nil {
                return err
            }
        case -6:  // floatVal
            if err := x.readField_6(p); err != nil {
                return err
            }
        case -5:  // i64Val
            if err := x.readField_5(p); err != nil {
                return err
            }
        case -4:  // i32Val
            if err := x.readField_4(p); err != nil {
                return err
            }
        case -3:  // i16Val
            if err := x.readField_3(p); err != nil {
                return err
            }
        case -2:  // byteVal
            if err := x.readField_2(p); err != nil {
                return err
            }
        case -1:  // boolVal
            if err := x.readField_1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type MyStructField10Patch struct {
    Assign *MyEnum `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
}
// Compile time interface enforcer
var _ thrift.Struct = &MyStructField10Patch{}

func NewMyStructField10Patch() *MyStructField10Patch {
    return (&MyStructField10Patch{})
}
func (x *MyStructField10Patch) GetAssign() *MyEnum {
    return x.Assign
}

func (x *MyStructField10Patch) GetClear() bool {
    return x.Clear
}

func (x *MyStructField10Patch) SetAssign(assign MyEnum) *MyStructField10Patch {
    x.Assign = &assign
    return x
}

func (x *MyStructField10Patch) SetClear(clear bool) *MyStructField10Patch {
    x.Clear = clear
    return x
}

func (x *MyStructField10Patch) IsSetAssign() bool {
    return x.Assign != nil
}


func (x *MyStructField10Patch) writeField1(p thrift.Protocol) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.I32, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetAssign()
    if err := p.WriteI32(int32(item)); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField10Patch) writeField2(p thrift.Protocol) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetClear()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField10Patch) readField1(p thrift.Protocol) error {  // Assign
    enumResult, err := p.ReadI32()
if err != nil {
    return err
}
result := MyEnum(enumResult)

    x.SetAssign(result)
    return nil
}

func (x *MyStructField10Patch) readField2(p thrift.Protocol) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetClear(result)
    return nil
}


// Deprecated: Use MyStructField10Patch.Set* methods instead or set the fields directly.
type MyStructField10PatchBuilder struct {
    obj *MyStructField10Patch
}

func NewMyStructField10PatchBuilder() *MyStructField10PatchBuilder {
    return &MyStructField10PatchBuilder{
        obj: NewMyStructField10Patch(),
    }
}

func (x *MyStructField10PatchBuilder) Assign(assign *MyEnum) *MyStructField10PatchBuilder {
    x.obj.Assign = assign
    return x
}

func (x *MyStructField10PatchBuilder) Clear(clear bool) *MyStructField10PatchBuilder {
    x.obj.Clear = clear
    return x
}

func (x *MyStructField10PatchBuilder) Emit() *MyStructField10Patch {
    var objCopy MyStructField10Patch = *x.obj
    return &objCopy
}

func (x *MyStructField10Patch) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("MyStructField10Patch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyStructField10Patch) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type MyStructField23Patch struct {
    Assign *MyEnum `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
}
// Compile time interface enforcer
var _ thrift.Struct = &MyStructField23Patch{}

func NewMyStructField23Patch() *MyStructField23Patch {
    return (&MyStructField23Patch{})
}
func (x *MyStructField23Patch) GetAssign() *MyEnum {
    return x.Assign
}

func (x *MyStructField23Patch) GetClear() bool {
    return x.Clear
}

func (x *MyStructField23Patch) SetAssign(assign MyEnum) *MyStructField23Patch {
    x.Assign = &assign
    return x
}

func (x *MyStructField23Patch) SetClear(clear bool) *MyStructField23Patch {
    x.Clear = clear
    return x
}

func (x *MyStructField23Patch) IsSetAssign() bool {
    return x.Assign != nil
}


func (x *MyStructField23Patch) writeField1(p thrift.Protocol) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.I32, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetAssign()
    if err := p.WriteI32(int32(item)); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField23Patch) writeField2(p thrift.Protocol) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetClear()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField23Patch) readField1(p thrift.Protocol) error {  // Assign
    enumResult, err := p.ReadI32()
if err != nil {
    return err
}
result := MyEnum(enumResult)

    x.SetAssign(result)
    return nil
}

func (x *MyStructField23Patch) readField2(p thrift.Protocol) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetClear(result)
    return nil
}


// Deprecated: Use MyStructField23Patch.Set* methods instead or set the fields directly.
type MyStructField23PatchBuilder struct {
    obj *MyStructField23Patch
}

func NewMyStructField23PatchBuilder() *MyStructField23PatchBuilder {
    return &MyStructField23PatchBuilder{
        obj: NewMyStructField23Patch(),
    }
}

func (x *MyStructField23PatchBuilder) Assign(assign *MyEnum) *MyStructField23PatchBuilder {
    x.obj.Assign = assign
    return x
}

func (x *MyStructField23PatchBuilder) Clear(clear bool) *MyStructField23PatchBuilder {
    x.obj.Clear = clear
    return x
}

func (x *MyStructField23PatchBuilder) Emit() *MyStructField23Patch {
    var objCopy MyStructField23Patch = *x.obj
    return &objCopy
}

func (x *MyStructField23Patch) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("MyStructField23Patch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyStructField23Patch) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type MyStructField26Patch struct {
    Assign []int16 `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
    Patch map[int32]*patch.I16Patch `thrift:"patch,3" json:"patch" db:"patch"`
    Remove []int16 `thrift:"remove,7" json:"remove" db:"remove"`
    Prepend []int16 `thrift:"prepend,8" json:"prepend" db:"prepend"`
    Append []int16 `thrift:"append,9" json:"append" db:"append"`
}
// Compile time interface enforcer
var _ thrift.Struct = &MyStructField26Patch{}

func NewMyStructField26Patch() *MyStructField26Patch {
    return (&MyStructField26Patch{})
}
func (x *MyStructField26Patch) GetAssign() []int16 {
    return x.Assign
}

func (x *MyStructField26Patch) GetClear() bool {
    return x.Clear
}

func (x *MyStructField26Patch) GetPatch() map[int32]*patch.I16Patch {
    return x.Patch
}

func (x *MyStructField26Patch) GetRemove() []int16 {
    return x.Remove
}

func (x *MyStructField26Patch) GetPrepend() []int16 {
    return x.Prepend
}

func (x *MyStructField26Patch) GetAppend() []int16 {
    return x.Append
}

func (x *MyStructField26Patch) SetAssign(assign []int16) *MyStructField26Patch {
    x.Assign = assign
    return x
}

func (x *MyStructField26Patch) SetClear(clear bool) *MyStructField26Patch {
    x.Clear = clear
    return x
}

func (x *MyStructField26Patch) SetPatch(patch map[int32]*patch.I16Patch) *MyStructField26Patch {
    x.Patch = patch
    return x
}

func (x *MyStructField26Patch) SetRemove(remove []int16) *MyStructField26Patch {
    x.Remove = remove
    return x
}

func (x *MyStructField26Patch) SetPrepend(prepend []int16) *MyStructField26Patch {
    x.Prepend = prepend
    return x
}

func (x *MyStructField26Patch) SetAppend(append_ []int16) *MyStructField26Patch {
    x.Append = append_
    return x
}

func (x *MyStructField26Patch) IsSetAssign() bool {
    return x.Assign != nil
}


func (x *MyStructField26Patch) IsSetPatch() bool {
    return x.Patch != nil
}

func (x *MyStructField26Patch) IsSetRemove() bool {
    return x.Remove != nil
}

func (x *MyStructField26Patch) IsSetPrepend() bool {
    return x.Prepend != nil
}

func (x *MyStructField26Patch) IsSetAppend() bool {
    return x.Append != nil
}

func (x *MyStructField26Patch) writeField1(p thrift.Protocol) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.LIST, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetAssign()
    if err := p.WriteListBegin(thrift.I16, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI16(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField26Patch) writeField2(p thrift.Protocol) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetClear()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField26Patch) writeField3(p thrift.Protocol) error {  // Patch
    if !x.IsSetPatch() {
        return nil
    }

    if err := p.WriteFieldBegin("patch", thrift.MAP, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetPatch()
    if err := p.WriteMapBegin(thrift.I32, thrift.STRUCT, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteI32(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := item.Write(p); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField26Patch) writeField7(p thrift.Protocol) error {  // Remove
    if !x.IsSetRemove() {
        return nil
    }

    if err := p.WriteFieldBegin("remove", thrift.LIST, 7); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetRemove()
    if err := p.WriteListBegin(thrift.I16, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI16(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField26Patch) writeField8(p thrift.Protocol) error {  // Prepend
    if !x.IsSetPrepend() {
        return nil
    }

    if err := p.WriteFieldBegin("prepend", thrift.LIST, 8); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetPrepend()
    if err := p.WriteListBegin(thrift.I16, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI16(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField26Patch) writeField9(p thrift.Protocol) error {  // Append
    if !x.IsSetAppend() {
        return nil
    }

    if err := p.WriteFieldBegin("append", thrift.LIST, 9); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetAppend()
    if err := p.WriteListBegin(thrift.I16, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteI16(item); err != nil {
    return err
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField26Patch) readField1(p thrift.Protocol) error {  // Assign
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int16, 0, size)
for i := 0; i < size; i++ {
    var elem int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.SetAssign(result)
    return nil
}

func (x *MyStructField26Patch) readField2(p thrift.Protocol) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetClear(result)
    return nil
}

func (x *MyStructField26Patch) readField3(p thrift.Protocol) error {  // Patch
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[int32]*patch.I16Patch, size)
for i := 0; i < size; i++ {
    var key int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        key = result
    }

    var value *patch.I16Patch
    {
        result := *patch.NewI16Patch()
err := result.Read(p)
if err != nil {
    return err
}
        value = &result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetPatch(result)
    return nil
}

func (x *MyStructField26Patch) readField7(p thrift.Protocol) error {  // Remove
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int16, 0, size)
for i := 0; i < size; i++ {
    var elem int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.SetRemove(result)
    return nil
}

func (x *MyStructField26Patch) readField8(p thrift.Protocol) error {  // Prepend
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int16, 0, size)
for i := 0; i < size; i++ {
    var elem int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.SetPrepend(result)
    return nil
}

func (x *MyStructField26Patch) readField9(p thrift.Protocol) error {  // Append
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]int16, 0, size)
for i := 0; i < size; i++ {
    var elem int16
    {
        result, err := p.ReadI16()
if err != nil {
    return err
}
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.SetAppend(result)
    return nil
}


// Deprecated: Use MyStructField26Patch.Set* methods instead or set the fields directly.
type MyStructField26PatchBuilder struct {
    obj *MyStructField26Patch
}

func NewMyStructField26PatchBuilder() *MyStructField26PatchBuilder {
    return &MyStructField26PatchBuilder{
        obj: NewMyStructField26Patch(),
    }
}

func (x *MyStructField26PatchBuilder) Assign(assign []int16) *MyStructField26PatchBuilder {
    x.obj.Assign = assign
    return x
}

func (x *MyStructField26PatchBuilder) Clear(clear bool) *MyStructField26PatchBuilder {
    x.obj.Clear = clear
    return x
}

func (x *MyStructField26PatchBuilder) Patch(patch map[int32]*patch.I16Patch) *MyStructField26PatchBuilder {
    x.obj.Patch = patch
    return x
}

func (x *MyStructField26PatchBuilder) Remove(remove []int16) *MyStructField26PatchBuilder {
    x.obj.Remove = remove
    return x
}

func (x *MyStructField26PatchBuilder) Prepend(prepend []int16) *MyStructField26PatchBuilder {
    x.obj.Prepend = prepend
    return x
}

func (x *MyStructField26PatchBuilder) Append(append_ []int16) *MyStructField26PatchBuilder {
    x.obj.Append = append_
    return x
}

func (x *MyStructField26PatchBuilder) Emit() *MyStructField26Patch {
    var objCopy MyStructField26Patch = *x.obj
    return &objCopy
}

func (x *MyStructField26Patch) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("MyStructField26Patch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField7(p); err != nil {
        return err
    }

    if err := x.writeField8(p); err != nil {
        return err
    }

    if err := x.writeField9(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyStructField26Patch) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        case 3:  // patch
            if err := x.readField3(p); err != nil {
                return err
            }
        case 7:  // remove
            if err := x.readField7(p); err != nil {
                return err
            }
        case 8:  // prepend
            if err := x.readField8(p); err != nil {
                return err
            }
        case 9:  // append
            if err := x.readField9(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type MyStructField27Patch struct {
    Assign []string `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
    Remove []string `thrift:"remove,7" json:"remove" db:"remove"`
    Add []string `thrift:"add,8" json:"add" db:"add"`
}
// Compile time interface enforcer
var _ thrift.Struct = &MyStructField27Patch{}

func NewMyStructField27Patch() *MyStructField27Patch {
    return (&MyStructField27Patch{})
}
func (x *MyStructField27Patch) GetAssign() []string {
    return x.Assign
}

func (x *MyStructField27Patch) GetClear() bool {
    return x.Clear
}

func (x *MyStructField27Patch) GetRemove() []string {
    return x.Remove
}

func (x *MyStructField27Patch) GetAdd() []string {
    return x.Add
}

func (x *MyStructField27Patch) SetAssign(assign []string) *MyStructField27Patch {
    x.Assign = assign
    return x
}

func (x *MyStructField27Patch) SetClear(clear bool) *MyStructField27Patch {
    x.Clear = clear
    return x
}

func (x *MyStructField27Patch) SetRemove(remove []string) *MyStructField27Patch {
    x.Remove = remove
    return x
}

func (x *MyStructField27Patch) SetAdd(add []string) *MyStructField27Patch {
    x.Add = add
    return x
}

func (x *MyStructField27Patch) IsSetAssign() bool {
    return x.Assign != nil
}


func (x *MyStructField27Patch) IsSetRemove() bool {
    return x.Remove != nil
}

func (x *MyStructField27Patch) IsSetAdd() bool {
    return x.Add != nil
}

func (x *MyStructField27Patch) writeField1(p thrift.Protocol) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.SET, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetAssign()
    if err := p.WriteSetBegin(thrift.STRING, len(item)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteString(item); err != nil {
    return err
}
    }
}
if err := p.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField27Patch) writeField2(p thrift.Protocol) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetClear()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField27Patch) writeField7(p thrift.Protocol) error {  // Remove
    if !x.IsSetRemove() {
        return nil
    }

    if err := p.WriteFieldBegin("remove", thrift.SET, 7); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetRemove()
    if err := p.WriteSetBegin(thrift.STRING, len(item)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteString(item); err != nil {
    return err
}
    }
}
if err := p.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField27Patch) writeField8(p thrift.Protocol) error {  // Add
    if !x.IsSetAdd() {
        return nil
    }

    if err := p.WriteFieldBegin("add", thrift.SET, 8); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetAdd()
    if err := p.WriteSetBegin(thrift.STRING, len(item)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteString(item); err != nil {
    return err
}
    }
}
if err := p.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField27Patch) readField1(p thrift.Protocol) error {  // Assign
    _ /* elemType */, size, err := p.ReadSetBegin()
if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
}

setResult := make([]string, 0, size)
for i := 0; i < size; i++ {
    var elem string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        elem = result
    }
    setResult = append(setResult, elem)
}

if err := p.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
}
result := setResult

    x.SetAssign(result)
    return nil
}

func (x *MyStructField27Patch) readField2(p thrift.Protocol) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetClear(result)
    return nil
}

func (x *MyStructField27Patch) readField7(p thrift.Protocol) error {  // Remove
    _ /* elemType */, size, err := p.ReadSetBegin()
if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
}

setResult := make([]string, 0, size)
for i := 0; i < size; i++ {
    var elem string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        elem = result
    }
    setResult = append(setResult, elem)
}

if err := p.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
}
result := setResult

    x.SetRemove(result)
    return nil
}

func (x *MyStructField27Patch) readField8(p thrift.Protocol) error {  // Add
    _ /* elemType */, size, err := p.ReadSetBegin()
if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
}

setResult := make([]string, 0, size)
for i := 0; i < size; i++ {
    var elem string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        elem = result
    }
    setResult = append(setResult, elem)
}

if err := p.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
}
result := setResult

    x.SetAdd(result)
    return nil
}


// Deprecated: Use MyStructField27Patch.Set* methods instead or set the fields directly.
type MyStructField27PatchBuilder struct {
    obj *MyStructField27Patch
}

func NewMyStructField27PatchBuilder() *MyStructField27PatchBuilder {
    return &MyStructField27PatchBuilder{
        obj: NewMyStructField27Patch(),
    }
}

func (x *MyStructField27PatchBuilder) Assign(assign []string) *MyStructField27PatchBuilder {
    x.obj.Assign = assign
    return x
}

func (x *MyStructField27PatchBuilder) Clear(clear bool) *MyStructField27PatchBuilder {
    x.obj.Clear = clear
    return x
}

func (x *MyStructField27PatchBuilder) Remove(remove []string) *MyStructField27PatchBuilder {
    x.obj.Remove = remove
    return x
}

func (x *MyStructField27PatchBuilder) Add(add []string) *MyStructField27PatchBuilder {
    x.obj.Add = add
    return x
}

func (x *MyStructField27PatchBuilder) Emit() *MyStructField27Patch {
    var objCopy MyStructField27Patch = *x.obj
    return &objCopy
}

func (x *MyStructField27Patch) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("MyStructField27Patch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField7(p); err != nil {
        return err
    }

    if err := x.writeField8(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyStructField27Patch) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        case 7:  // remove
            if err := x.readField7(p); err != nil {
                return err
            }
        case 8:  // add
            if err := x.readField8(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type MyStructField28Patch struct {
    Assign map[string]string `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
    PatchPrior map[string]*patch.StringPatch `thrift:"patchPrior,3" json:"patchPrior" db:"patchPrior"`
    Add map[string]string `thrift:"add,5" json:"add" db:"add"`
    Patch map[string]*patch.StringPatch `thrift:"patch,6" json:"patch" db:"patch"`
    Remove []string `thrift:"remove,7" json:"remove" db:"remove"`
    Put map[string]string `thrift:"put,9" json:"put" db:"put"`
}
// Compile time interface enforcer
var _ thrift.Struct = &MyStructField28Patch{}

func NewMyStructField28Patch() *MyStructField28Patch {
    return (&MyStructField28Patch{})
}
func (x *MyStructField28Patch) GetAssign() map[string]string {
    return x.Assign
}

func (x *MyStructField28Patch) GetClear() bool {
    return x.Clear
}

func (x *MyStructField28Patch) GetPatchPrior() map[string]*patch.StringPatch {
    return x.PatchPrior
}

func (x *MyStructField28Patch) GetAdd() map[string]string {
    return x.Add
}

func (x *MyStructField28Patch) GetPatch() map[string]*patch.StringPatch {
    return x.Patch
}

func (x *MyStructField28Patch) GetRemove() []string {
    return x.Remove
}

func (x *MyStructField28Patch) GetPut() map[string]string {
    return x.Put
}

func (x *MyStructField28Patch) SetAssign(assign map[string]string) *MyStructField28Patch {
    x.Assign = assign
    return x
}

func (x *MyStructField28Patch) SetClear(clear bool) *MyStructField28Patch {
    x.Clear = clear
    return x
}

func (x *MyStructField28Patch) SetPatchPrior(patchPrior map[string]*patch.StringPatch) *MyStructField28Patch {
    x.PatchPrior = patchPrior
    return x
}

func (x *MyStructField28Patch) SetAdd(add map[string]string) *MyStructField28Patch {
    x.Add = add
    return x
}

func (x *MyStructField28Patch) SetPatch(patch map[string]*patch.StringPatch) *MyStructField28Patch {
    x.Patch = patch
    return x
}

func (x *MyStructField28Patch) SetRemove(remove []string) *MyStructField28Patch {
    x.Remove = remove
    return x
}

func (x *MyStructField28Patch) SetPut(put map[string]string) *MyStructField28Patch {
    x.Put = put
    return x
}

func (x *MyStructField28Patch) IsSetAssign() bool {
    return x.Assign != nil
}


func (x *MyStructField28Patch) IsSetPatchPrior() bool {
    return x.PatchPrior != nil
}

func (x *MyStructField28Patch) IsSetAdd() bool {
    return x.Add != nil
}

func (x *MyStructField28Patch) IsSetPatch() bool {
    return x.Patch != nil
}

func (x *MyStructField28Patch) IsSetRemove() bool {
    return x.Remove != nil
}

func (x *MyStructField28Patch) IsSetPut() bool {
    return x.Put != nil
}

func (x *MyStructField28Patch) writeField1(p thrift.Protocol) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.MAP, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetAssign()
    if err := p.WriteMapBegin(thrift.STRING, thrift.STRING, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteString(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField28Patch) writeField2(p thrift.Protocol) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetClear()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField28Patch) writeField3(p thrift.Protocol) error {  // PatchPrior
    if !x.IsSetPatchPrior() {
        return nil
    }

    if err := p.WriteFieldBegin("patchPrior", thrift.MAP, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetPatchPrior()
    if err := p.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := item.Write(p); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField28Patch) writeField5(p thrift.Protocol) error {  // Add
    if !x.IsSetAdd() {
        return nil
    }

    if err := p.WriteFieldBegin("add", thrift.MAP, 5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetAdd()
    if err := p.WriteMapBegin(thrift.STRING, thrift.STRING, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteString(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField28Patch) writeField6(p thrift.Protocol) error {  // Patch
    if !x.IsSetPatch() {
        return nil
    }

    if err := p.WriteFieldBegin("patch", thrift.MAP, 6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetPatch()
    if err := p.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := item.Write(p); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField28Patch) writeField7(p thrift.Protocol) error {  // Remove
    if !x.IsSetRemove() {
        return nil
    }

    if err := p.WriteFieldBegin("remove", thrift.SET, 7); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetRemove()
    if err := p.WriteSetBegin(thrift.STRING, len(item)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteString(item); err != nil {
    return err
}
    }
}
if err := p.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField28Patch) writeField9(p thrift.Protocol) error {  // Put
    if !x.IsSetPut() {
        return nil
    }

    if err := p.WriteFieldBegin("put", thrift.MAP, 9); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetPut()
    if err := p.WriteMapBegin(thrift.STRING, thrift.STRING, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteString(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField28Patch) readField1(p thrift.Protocol) error {  // Assign
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]string, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetAssign(result)
    return nil
}

func (x *MyStructField28Patch) readField2(p thrift.Protocol) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetClear(result)
    return nil
}

func (x *MyStructField28Patch) readField3(p thrift.Protocol) error {  // PatchPrior
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]*patch.StringPatch, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value *patch.StringPatch
    {
        result := *patch.NewStringPatch()
err := result.Read(p)
if err != nil {
    return err
}
        value = &result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetPatchPrior(result)
    return nil
}

func (x *MyStructField28Patch) readField5(p thrift.Protocol) error {  // Add
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]string, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetAdd(result)
    return nil
}

func (x *MyStructField28Patch) readField6(p thrift.Protocol) error {  // Patch
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]*patch.StringPatch, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value *patch.StringPatch
    {
        result := *patch.NewStringPatch()
err := result.Read(p)
if err != nil {
    return err
}
        value = &result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetPatch(result)
    return nil
}

func (x *MyStructField28Patch) readField7(p thrift.Protocol) error {  // Remove
    _ /* elemType */, size, err := p.ReadSetBegin()
if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
}

setResult := make([]string, 0, size)
for i := 0; i < size; i++ {
    var elem string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        elem = result
    }
    setResult = append(setResult, elem)
}

if err := p.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
}
result := setResult

    x.SetRemove(result)
    return nil
}

func (x *MyStructField28Patch) readField9(p thrift.Protocol) error {  // Put
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]string, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetPut(result)
    return nil
}


// Deprecated: Use MyStructField28Patch.Set* methods instead or set the fields directly.
type MyStructField28PatchBuilder struct {
    obj *MyStructField28Patch
}

func NewMyStructField28PatchBuilder() *MyStructField28PatchBuilder {
    return &MyStructField28PatchBuilder{
        obj: NewMyStructField28Patch(),
    }
}

func (x *MyStructField28PatchBuilder) Assign(assign map[string]string) *MyStructField28PatchBuilder {
    x.obj.Assign = assign
    return x
}

func (x *MyStructField28PatchBuilder) Clear(clear bool) *MyStructField28PatchBuilder {
    x.obj.Clear = clear
    return x
}

func (x *MyStructField28PatchBuilder) PatchPrior(patchPrior map[string]*patch.StringPatch) *MyStructField28PatchBuilder {
    x.obj.PatchPrior = patchPrior
    return x
}

func (x *MyStructField28PatchBuilder) Add(add map[string]string) *MyStructField28PatchBuilder {
    x.obj.Add = add
    return x
}

func (x *MyStructField28PatchBuilder) Patch(patch map[string]*patch.StringPatch) *MyStructField28PatchBuilder {
    x.obj.Patch = patch
    return x
}

func (x *MyStructField28PatchBuilder) Remove(remove []string) *MyStructField28PatchBuilder {
    x.obj.Remove = remove
    return x
}

func (x *MyStructField28PatchBuilder) Put(put map[string]string) *MyStructField28PatchBuilder {
    x.obj.Put = put
    return x
}

func (x *MyStructField28PatchBuilder) Emit() *MyStructField28Patch {
    var objCopy MyStructField28Patch = *x.obj
    return &objCopy
}

func (x *MyStructField28Patch) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("MyStructField28Patch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField5(p); err != nil {
        return err
    }

    if err := x.writeField6(p); err != nil {
        return err
    }

    if err := x.writeField7(p); err != nil {
        return err
    }

    if err := x.writeField9(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyStructField28Patch) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        case 3:  // patchPrior
            if err := x.readField3(p); err != nil {
                return err
            }
        case 5:  // add
            if err := x.readField5(p); err != nil {
                return err
            }
        case 6:  // patch
            if err := x.readField6(p); err != nil {
                return err
            }
        case 7:  // remove
            if err := x.readField7(p); err != nil {
                return err
            }
        case 9:  // put
            if err := x.readField9(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type MyStructField29Patch struct {
    Assign []map[string]int32 `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
    Patch map[int32]*MyStructField29Patch1 `thrift:"patch,3" json:"patch" db:"patch"`
    Remove []map[string]int32 `thrift:"remove,7" json:"remove" db:"remove"`
    Prepend []map[string]int32 `thrift:"prepend,8" json:"prepend" db:"prepend"`
    Append []map[string]int32 `thrift:"append,9" json:"append" db:"append"`
}
// Compile time interface enforcer
var _ thrift.Struct = &MyStructField29Patch{}

func NewMyStructField29Patch() *MyStructField29Patch {
    return (&MyStructField29Patch{})
}
func (x *MyStructField29Patch) GetAssign() []map[string]int32 {
    return x.Assign
}

func (x *MyStructField29Patch) GetClear() bool {
    return x.Clear
}

func (x *MyStructField29Patch) GetPatch() map[int32]*MyStructField29Patch1 {
    return x.Patch
}

func (x *MyStructField29Patch) GetRemove() []map[string]int32 {
    return x.Remove
}

func (x *MyStructField29Patch) GetPrepend() []map[string]int32 {
    return x.Prepend
}

func (x *MyStructField29Patch) GetAppend() []map[string]int32 {
    return x.Append
}

func (x *MyStructField29Patch) SetAssign(assign []map[string]int32) *MyStructField29Patch {
    x.Assign = assign
    return x
}

func (x *MyStructField29Patch) SetClear(clear bool) *MyStructField29Patch {
    x.Clear = clear
    return x
}

func (x *MyStructField29Patch) SetPatch(patch map[int32]*MyStructField29Patch1) *MyStructField29Patch {
    x.Patch = patch
    return x
}

func (x *MyStructField29Patch) SetRemove(remove []map[string]int32) *MyStructField29Patch {
    x.Remove = remove
    return x
}

func (x *MyStructField29Patch) SetPrepend(prepend []map[string]int32) *MyStructField29Patch {
    x.Prepend = prepend
    return x
}

func (x *MyStructField29Patch) SetAppend(append_ []map[string]int32) *MyStructField29Patch {
    x.Append = append_
    return x
}

func (x *MyStructField29Patch) IsSetAssign() bool {
    return x.Assign != nil
}


func (x *MyStructField29Patch) IsSetPatch() bool {
    return x.Patch != nil
}

func (x *MyStructField29Patch) IsSetRemove() bool {
    return x.Remove != nil
}

func (x *MyStructField29Patch) IsSetPrepend() bool {
    return x.Prepend != nil
}

func (x *MyStructField29Patch) IsSetAppend() bool {
    return x.Append != nil
}

func (x *MyStructField29Patch) writeField1(p thrift.Protocol) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.LIST, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetAssign()
    if err := p.WriteListBegin(thrift.MAP, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteMapBegin(thrift.STRING, thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField29Patch) writeField2(p thrift.Protocol) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetClear()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField29Patch) writeField3(p thrift.Protocol) error {  // Patch
    if !x.IsSetPatch() {
        return nil
    }

    if err := p.WriteFieldBegin("patch", thrift.MAP, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetPatch()
    if err := p.WriteMapBegin(thrift.I32, thrift.STRUCT, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteI32(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := item.Write(p); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField29Patch) writeField7(p thrift.Protocol) error {  // Remove
    if !x.IsSetRemove() {
        return nil
    }

    if err := p.WriteFieldBegin("remove", thrift.LIST, 7); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetRemove()
    if err := p.WriteListBegin(thrift.MAP, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteMapBegin(thrift.STRING, thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField29Patch) writeField8(p thrift.Protocol) error {  // Prepend
    if !x.IsSetPrepend() {
        return nil
    }

    if err := p.WriteFieldBegin("prepend", thrift.LIST, 8); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetPrepend()
    if err := p.WriteListBegin(thrift.MAP, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteMapBegin(thrift.STRING, thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField29Patch) writeField9(p thrift.Protocol) error {  // Append
    if !x.IsSetAppend() {
        return nil
    }

    if err := p.WriteFieldBegin("append", thrift.LIST, 9); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetAppend()
    if err := p.WriteListBegin(thrift.MAP, len(item)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteMapBegin(thrift.STRING, thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}
    }
}
if err := p.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField29Patch) readField1(p thrift.Protocol) error {  // Assign
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]map[string]int32, 0, size)
for i := 0; i < size; i++ {
    var elem map[string]int32
    {
        _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.SetAssign(result)
    return nil
}

func (x *MyStructField29Patch) readField2(p thrift.Protocol) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetClear(result)
    return nil
}

func (x *MyStructField29Patch) readField3(p thrift.Protocol) error {  // Patch
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[int32]*MyStructField29Patch1, size)
for i := 0; i < size; i++ {
    var key int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        key = result
    }

    var value *MyStructField29Patch1
    {
        result := *NewMyStructField29Patch1()
err := result.Read(p)
if err != nil {
    return err
}
        value = &result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetPatch(result)
    return nil
}

func (x *MyStructField29Patch) readField7(p thrift.Protocol) error {  // Remove
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]map[string]int32, 0, size)
for i := 0; i < size; i++ {
    var elem map[string]int32
    {
        _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.SetRemove(result)
    return nil
}

func (x *MyStructField29Patch) readField8(p thrift.Protocol) error {  // Prepend
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]map[string]int32, 0, size)
for i := 0; i < size; i++ {
    var elem map[string]int32
    {
        _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.SetPrepend(result)
    return nil
}

func (x *MyStructField29Patch) readField9(p thrift.Protocol) error {  // Append
    _ /* elemType */, size, err := p.ReadListBegin()
if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
}

listResult := make([]map[string]int32, 0, size)
for i := 0; i < size; i++ {
    var elem map[string]int32
    {
        _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult
        elem = result
    }
    listResult = append(listResult, elem)
}

if err := p.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
}
result := listResult

    x.SetAppend(result)
    return nil
}


// Deprecated: Use MyStructField29Patch.Set* methods instead or set the fields directly.
type MyStructField29PatchBuilder struct {
    obj *MyStructField29Patch
}

func NewMyStructField29PatchBuilder() *MyStructField29PatchBuilder {
    return &MyStructField29PatchBuilder{
        obj: NewMyStructField29Patch(),
    }
}

func (x *MyStructField29PatchBuilder) Assign(assign []map[string]int32) *MyStructField29PatchBuilder {
    x.obj.Assign = assign
    return x
}

func (x *MyStructField29PatchBuilder) Clear(clear bool) *MyStructField29PatchBuilder {
    x.obj.Clear = clear
    return x
}

func (x *MyStructField29PatchBuilder) Patch(patch map[int32]*MyStructField29Patch1) *MyStructField29PatchBuilder {
    x.obj.Patch = patch
    return x
}

func (x *MyStructField29PatchBuilder) Remove(remove []map[string]int32) *MyStructField29PatchBuilder {
    x.obj.Remove = remove
    return x
}

func (x *MyStructField29PatchBuilder) Prepend(prepend []map[string]int32) *MyStructField29PatchBuilder {
    x.obj.Prepend = prepend
    return x
}

func (x *MyStructField29PatchBuilder) Append(append_ []map[string]int32) *MyStructField29PatchBuilder {
    x.obj.Append = append_
    return x
}

func (x *MyStructField29PatchBuilder) Emit() *MyStructField29Patch {
    var objCopy MyStructField29Patch = *x.obj
    return &objCopy
}

func (x *MyStructField29Patch) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("MyStructField29Patch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField7(p); err != nil {
        return err
    }

    if err := x.writeField8(p); err != nil {
        return err
    }

    if err := x.writeField9(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyStructField29Patch) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        case 3:  // patch
            if err := x.readField3(p); err != nil {
                return err
            }
        case 7:  // remove
            if err := x.readField7(p); err != nil {
                return err
            }
        case 8:  // prepend
            if err := x.readField8(p); err != nil {
                return err
            }
        case 9:  // append
            if err := x.readField9(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type MyStructField29Patch1 struct {
    Assign map[string]int32 `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
    PatchPrior map[string]*patch.I32Patch `thrift:"patchPrior,3" json:"patchPrior" db:"patchPrior"`
    Add map[string]int32 `thrift:"add,5" json:"add" db:"add"`
    Patch map[string]*patch.I32Patch `thrift:"patch,6" json:"patch" db:"patch"`
    Remove []string `thrift:"remove,7" json:"remove" db:"remove"`
    Put map[string]int32 `thrift:"put,9" json:"put" db:"put"`
}
// Compile time interface enforcer
var _ thrift.Struct = &MyStructField29Patch1{}

func NewMyStructField29Patch1() *MyStructField29Patch1 {
    return (&MyStructField29Patch1{})
}
func (x *MyStructField29Patch1) GetAssign() map[string]int32 {
    return x.Assign
}

func (x *MyStructField29Patch1) GetClear() bool {
    return x.Clear
}

func (x *MyStructField29Patch1) GetPatchPrior() map[string]*patch.I32Patch {
    return x.PatchPrior
}

func (x *MyStructField29Patch1) GetAdd() map[string]int32 {
    return x.Add
}

func (x *MyStructField29Patch1) GetPatch() map[string]*patch.I32Patch {
    return x.Patch
}

func (x *MyStructField29Patch1) GetRemove() []string {
    return x.Remove
}

func (x *MyStructField29Patch1) GetPut() map[string]int32 {
    return x.Put
}

func (x *MyStructField29Patch1) SetAssign(assign map[string]int32) *MyStructField29Patch1 {
    x.Assign = assign
    return x
}

func (x *MyStructField29Patch1) SetClear(clear bool) *MyStructField29Patch1 {
    x.Clear = clear
    return x
}

func (x *MyStructField29Patch1) SetPatchPrior(patchPrior map[string]*patch.I32Patch) *MyStructField29Patch1 {
    x.PatchPrior = patchPrior
    return x
}

func (x *MyStructField29Patch1) SetAdd(add map[string]int32) *MyStructField29Patch1 {
    x.Add = add
    return x
}

func (x *MyStructField29Patch1) SetPatch(patch map[string]*patch.I32Patch) *MyStructField29Patch1 {
    x.Patch = patch
    return x
}

func (x *MyStructField29Patch1) SetRemove(remove []string) *MyStructField29Patch1 {
    x.Remove = remove
    return x
}

func (x *MyStructField29Patch1) SetPut(put map[string]int32) *MyStructField29Patch1 {
    x.Put = put
    return x
}

func (x *MyStructField29Patch1) IsSetAssign() bool {
    return x.Assign != nil
}


func (x *MyStructField29Patch1) IsSetPatchPrior() bool {
    return x.PatchPrior != nil
}

func (x *MyStructField29Patch1) IsSetAdd() bool {
    return x.Add != nil
}

func (x *MyStructField29Patch1) IsSetPatch() bool {
    return x.Patch != nil
}

func (x *MyStructField29Patch1) IsSetRemove() bool {
    return x.Remove != nil
}

func (x *MyStructField29Patch1) IsSetPut() bool {
    return x.Put != nil
}

func (x *MyStructField29Patch1) writeField1(p thrift.Protocol) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.MAP, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetAssign()
    if err := p.WriteMapBegin(thrift.STRING, thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField29Patch1) writeField2(p thrift.Protocol) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetClear()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField29Patch1) writeField3(p thrift.Protocol) error {  // PatchPrior
    if !x.IsSetPatchPrior() {
        return nil
    }

    if err := p.WriteFieldBegin("patchPrior", thrift.MAP, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetPatchPrior()
    if err := p.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := item.Write(p); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField29Patch1) writeField5(p thrift.Protocol) error {  // Add
    if !x.IsSetAdd() {
        return nil
    }

    if err := p.WriteFieldBegin("add", thrift.MAP, 5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetAdd()
    if err := p.WriteMapBegin(thrift.STRING, thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField29Patch1) writeField6(p thrift.Protocol) error {  // Patch
    if !x.IsSetPatch() {
        return nil
    }

    if err := p.WriteFieldBegin("patch", thrift.MAP, 6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetPatch()
    if err := p.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := item.Write(p); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField29Patch1) writeField7(p thrift.Protocol) error {  // Remove
    if !x.IsSetRemove() {
        return nil
    }

    if err := p.WriteFieldBegin("remove", thrift.SET, 7); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetRemove()
    if err := p.WriteSetBegin(thrift.STRING, len(item)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteString(item); err != nil {
    return err
}
    }
}
if err := p.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField29Patch1) writeField9(p thrift.Protocol) error {  // Put
    if !x.IsSetPut() {
        return nil
    }

    if err := p.WriteFieldBegin("put", thrift.MAP, 9); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetPut()
    if err := p.WriteMapBegin(thrift.STRING, thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField29Patch1) readField1(p thrift.Protocol) error {  // Assign
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetAssign(result)
    return nil
}

func (x *MyStructField29Patch1) readField2(p thrift.Protocol) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetClear(result)
    return nil
}

func (x *MyStructField29Patch1) readField3(p thrift.Protocol) error {  // PatchPrior
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]*patch.I32Patch, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value *patch.I32Patch
    {
        result := *patch.NewI32Patch()
err := result.Read(p)
if err != nil {
    return err
}
        value = &result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetPatchPrior(result)
    return nil
}

func (x *MyStructField29Patch1) readField5(p thrift.Protocol) error {  // Add
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetAdd(result)
    return nil
}

func (x *MyStructField29Patch1) readField6(p thrift.Protocol) error {  // Patch
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]*patch.I32Patch, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value *patch.I32Patch
    {
        result := *patch.NewI32Patch()
err := result.Read(p)
if err != nil {
    return err
}
        value = &result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetPatch(result)
    return nil
}

func (x *MyStructField29Patch1) readField7(p thrift.Protocol) error {  // Remove
    _ /* elemType */, size, err := p.ReadSetBegin()
if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
}

setResult := make([]string, 0, size)
for i := 0; i < size; i++ {
    var elem string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        elem = result
    }
    setResult = append(setResult, elem)
}

if err := p.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
}
result := setResult

    x.SetRemove(result)
    return nil
}

func (x *MyStructField29Patch1) readField9(p thrift.Protocol) error {  // Put
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetPut(result)
    return nil
}


// Deprecated: Use MyStructField29Patch1.Set* methods instead or set the fields directly.
type MyStructField29Patch1Builder struct {
    obj *MyStructField29Patch1
}

func NewMyStructField29Patch1Builder() *MyStructField29Patch1Builder {
    return &MyStructField29Patch1Builder{
        obj: NewMyStructField29Patch1(),
    }
}

func (x *MyStructField29Patch1Builder) Assign(assign map[string]int32) *MyStructField29Patch1Builder {
    x.obj.Assign = assign
    return x
}

func (x *MyStructField29Patch1Builder) Clear(clear bool) *MyStructField29Patch1Builder {
    x.obj.Clear = clear
    return x
}

func (x *MyStructField29Patch1Builder) PatchPrior(patchPrior map[string]*patch.I32Patch) *MyStructField29Patch1Builder {
    x.obj.PatchPrior = patchPrior
    return x
}

func (x *MyStructField29Patch1Builder) Add(add map[string]int32) *MyStructField29Patch1Builder {
    x.obj.Add = add
    return x
}

func (x *MyStructField29Patch1Builder) Patch(patch map[string]*patch.I32Patch) *MyStructField29Patch1Builder {
    x.obj.Patch = patch
    return x
}

func (x *MyStructField29Patch1Builder) Remove(remove []string) *MyStructField29Patch1Builder {
    x.obj.Remove = remove
    return x
}

func (x *MyStructField29Patch1Builder) Put(put map[string]int32) *MyStructField29Patch1Builder {
    x.obj.Put = put
    return x
}

func (x *MyStructField29Patch1Builder) Emit() *MyStructField29Patch1 {
    var objCopy MyStructField29Patch1 = *x.obj
    return &objCopy
}

func (x *MyStructField29Patch1) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("MyStructField29Patch1"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField5(p); err != nil {
        return err
    }

    if err := x.writeField6(p); err != nil {
        return err
    }

    if err := x.writeField7(p); err != nil {
        return err
    }

    if err := x.writeField9(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyStructField29Patch1) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        case 3:  // patchPrior
            if err := x.readField3(p); err != nil {
                return err
            }
        case 5:  // add
            if err := x.readField5(p); err != nil {
                return err
            }
        case 6:  // patch
            if err := x.readField6(p); err != nil {
                return err
            }
        case 7:  // remove
            if err := x.readField7(p); err != nil {
                return err
            }
        case 9:  // put
            if err := x.readField9(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type MyStructField30Patch struct {
    Assign map[string]map[string]int32 `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
    PatchPrior map[string]*MyStructField30Patch1 `thrift:"patchPrior,3" json:"patchPrior" db:"patchPrior"`
    Add map[string]map[string]int32 `thrift:"add,5" json:"add" db:"add"`
    Patch map[string]*MyStructField30Patch1 `thrift:"patch,6" json:"patch" db:"patch"`
    Remove []string `thrift:"remove,7" json:"remove" db:"remove"`
    Put map[string]map[string]int32 `thrift:"put,9" json:"put" db:"put"`
}
// Compile time interface enforcer
var _ thrift.Struct = &MyStructField30Patch{}

func NewMyStructField30Patch() *MyStructField30Patch {
    return (&MyStructField30Patch{})
}
func (x *MyStructField30Patch) GetAssign() map[string]map[string]int32 {
    return x.Assign
}

func (x *MyStructField30Patch) GetClear() bool {
    return x.Clear
}

func (x *MyStructField30Patch) GetPatchPrior() map[string]*MyStructField30Patch1 {
    return x.PatchPrior
}

func (x *MyStructField30Patch) GetAdd() map[string]map[string]int32 {
    return x.Add
}

func (x *MyStructField30Patch) GetPatch() map[string]*MyStructField30Patch1 {
    return x.Patch
}

func (x *MyStructField30Patch) GetRemove() []string {
    return x.Remove
}

func (x *MyStructField30Patch) GetPut() map[string]map[string]int32 {
    return x.Put
}

func (x *MyStructField30Patch) SetAssign(assign map[string]map[string]int32) *MyStructField30Patch {
    x.Assign = assign
    return x
}

func (x *MyStructField30Patch) SetClear(clear bool) *MyStructField30Patch {
    x.Clear = clear
    return x
}

func (x *MyStructField30Patch) SetPatchPrior(patchPrior map[string]*MyStructField30Patch1) *MyStructField30Patch {
    x.PatchPrior = patchPrior
    return x
}

func (x *MyStructField30Patch) SetAdd(add map[string]map[string]int32) *MyStructField30Patch {
    x.Add = add
    return x
}

func (x *MyStructField30Patch) SetPatch(patch map[string]*MyStructField30Patch1) *MyStructField30Patch {
    x.Patch = patch
    return x
}

func (x *MyStructField30Patch) SetRemove(remove []string) *MyStructField30Patch {
    x.Remove = remove
    return x
}

func (x *MyStructField30Patch) SetPut(put map[string]map[string]int32) *MyStructField30Patch {
    x.Put = put
    return x
}

func (x *MyStructField30Patch) IsSetAssign() bool {
    return x.Assign != nil
}


func (x *MyStructField30Patch) IsSetPatchPrior() bool {
    return x.PatchPrior != nil
}

func (x *MyStructField30Patch) IsSetAdd() bool {
    return x.Add != nil
}

func (x *MyStructField30Patch) IsSetPatch() bool {
    return x.Patch != nil
}

func (x *MyStructField30Patch) IsSetRemove() bool {
    return x.Remove != nil
}

func (x *MyStructField30Patch) IsSetPut() bool {
    return x.Put != nil
}

func (x *MyStructField30Patch) writeField1(p thrift.Protocol) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.MAP, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetAssign()
    if err := p.WriteMapBegin(thrift.STRING, thrift.MAP, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteMapBegin(thrift.STRING, thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField30Patch) writeField2(p thrift.Protocol) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetClear()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField30Patch) writeField3(p thrift.Protocol) error {  // PatchPrior
    if !x.IsSetPatchPrior() {
        return nil
    }

    if err := p.WriteFieldBegin("patchPrior", thrift.MAP, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetPatchPrior()
    if err := p.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := item.Write(p); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField30Patch) writeField5(p thrift.Protocol) error {  // Add
    if !x.IsSetAdd() {
        return nil
    }

    if err := p.WriteFieldBegin("add", thrift.MAP, 5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetAdd()
    if err := p.WriteMapBegin(thrift.STRING, thrift.MAP, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteMapBegin(thrift.STRING, thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField30Patch) writeField6(p thrift.Protocol) error {  // Patch
    if !x.IsSetPatch() {
        return nil
    }

    if err := p.WriteFieldBegin("patch", thrift.MAP, 6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetPatch()
    if err := p.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := item.Write(p); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField30Patch) writeField7(p thrift.Protocol) error {  // Remove
    if !x.IsSetRemove() {
        return nil
    }

    if err := p.WriteFieldBegin("remove", thrift.SET, 7); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetRemove()
    if err := p.WriteSetBegin(thrift.STRING, len(item)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteString(item); err != nil {
    return err
}
    }
}
if err := p.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField30Patch) writeField9(p thrift.Protocol) error {  // Put
    if !x.IsSetPut() {
        return nil
    }

    if err := p.WriteFieldBegin("put", thrift.MAP, 9); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetPut()
    if err := p.WriteMapBegin(thrift.STRING, thrift.MAP, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteMapBegin(thrift.STRING, thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField30Patch) readField1(p thrift.Protocol) error {  // Assign
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value map[string]int32
    {
        _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetAssign(result)
    return nil
}

func (x *MyStructField30Patch) readField2(p thrift.Protocol) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetClear(result)
    return nil
}

func (x *MyStructField30Patch) readField3(p thrift.Protocol) error {  // PatchPrior
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]*MyStructField30Patch1, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value *MyStructField30Patch1
    {
        result := *NewMyStructField30Patch1()
err := result.Read(p)
if err != nil {
    return err
}
        value = &result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetPatchPrior(result)
    return nil
}

func (x *MyStructField30Patch) readField5(p thrift.Protocol) error {  // Add
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value map[string]int32
    {
        _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetAdd(result)
    return nil
}

func (x *MyStructField30Patch) readField6(p thrift.Protocol) error {  // Patch
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]*MyStructField30Patch1, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value *MyStructField30Patch1
    {
        result := *NewMyStructField30Patch1()
err := result.Read(p)
if err != nil {
    return err
}
        value = &result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetPatch(result)
    return nil
}

func (x *MyStructField30Patch) readField7(p thrift.Protocol) error {  // Remove
    _ /* elemType */, size, err := p.ReadSetBegin()
if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
}

setResult := make([]string, 0, size)
for i := 0; i < size; i++ {
    var elem string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        elem = result
    }
    setResult = append(setResult, elem)
}

if err := p.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
}
result := setResult

    x.SetRemove(result)
    return nil
}

func (x *MyStructField30Patch) readField9(p thrift.Protocol) error {  // Put
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value map[string]int32
    {
        _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetPut(result)
    return nil
}


// Deprecated: Use MyStructField30Patch.Set* methods instead or set the fields directly.
type MyStructField30PatchBuilder struct {
    obj *MyStructField30Patch
}

func NewMyStructField30PatchBuilder() *MyStructField30PatchBuilder {
    return &MyStructField30PatchBuilder{
        obj: NewMyStructField30Patch(),
    }
}

func (x *MyStructField30PatchBuilder) Assign(assign map[string]map[string]int32) *MyStructField30PatchBuilder {
    x.obj.Assign = assign
    return x
}

func (x *MyStructField30PatchBuilder) Clear(clear bool) *MyStructField30PatchBuilder {
    x.obj.Clear = clear
    return x
}

func (x *MyStructField30PatchBuilder) PatchPrior(patchPrior map[string]*MyStructField30Patch1) *MyStructField30PatchBuilder {
    x.obj.PatchPrior = patchPrior
    return x
}

func (x *MyStructField30PatchBuilder) Add(add map[string]map[string]int32) *MyStructField30PatchBuilder {
    x.obj.Add = add
    return x
}

func (x *MyStructField30PatchBuilder) Patch(patch map[string]*MyStructField30Patch1) *MyStructField30PatchBuilder {
    x.obj.Patch = patch
    return x
}

func (x *MyStructField30PatchBuilder) Remove(remove []string) *MyStructField30PatchBuilder {
    x.obj.Remove = remove
    return x
}

func (x *MyStructField30PatchBuilder) Put(put map[string]map[string]int32) *MyStructField30PatchBuilder {
    x.obj.Put = put
    return x
}

func (x *MyStructField30PatchBuilder) Emit() *MyStructField30Patch {
    var objCopy MyStructField30Patch = *x.obj
    return &objCopy
}

func (x *MyStructField30Patch) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("MyStructField30Patch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField5(p); err != nil {
        return err
    }

    if err := x.writeField6(p); err != nil {
        return err
    }

    if err := x.writeField7(p); err != nil {
        return err
    }

    if err := x.writeField9(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyStructField30Patch) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        case 3:  // patchPrior
            if err := x.readField3(p); err != nil {
                return err
            }
        case 5:  // add
            if err := x.readField5(p); err != nil {
                return err
            }
        case 6:  // patch
            if err := x.readField6(p); err != nil {
                return err
            }
        case 7:  // remove
            if err := x.readField7(p); err != nil {
                return err
            }
        case 9:  // put
            if err := x.readField9(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type MyStructField30Patch1 struct {
    Assign map[string]int32 `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
    PatchPrior map[string]*patch.I32Patch `thrift:"patchPrior,3" json:"patchPrior" db:"patchPrior"`
    Add map[string]int32 `thrift:"add,5" json:"add" db:"add"`
    Patch map[string]*patch.I32Patch `thrift:"patch,6" json:"patch" db:"patch"`
    Remove []string `thrift:"remove,7" json:"remove" db:"remove"`
    Put map[string]int32 `thrift:"put,9" json:"put" db:"put"`
}
// Compile time interface enforcer
var _ thrift.Struct = &MyStructField30Patch1{}

func NewMyStructField30Patch1() *MyStructField30Patch1 {
    return (&MyStructField30Patch1{})
}
func (x *MyStructField30Patch1) GetAssign() map[string]int32 {
    return x.Assign
}

func (x *MyStructField30Patch1) GetClear() bool {
    return x.Clear
}

func (x *MyStructField30Patch1) GetPatchPrior() map[string]*patch.I32Patch {
    return x.PatchPrior
}

func (x *MyStructField30Patch1) GetAdd() map[string]int32 {
    return x.Add
}

func (x *MyStructField30Patch1) GetPatch() map[string]*patch.I32Patch {
    return x.Patch
}

func (x *MyStructField30Patch1) GetRemove() []string {
    return x.Remove
}

func (x *MyStructField30Patch1) GetPut() map[string]int32 {
    return x.Put
}

func (x *MyStructField30Patch1) SetAssign(assign map[string]int32) *MyStructField30Patch1 {
    x.Assign = assign
    return x
}

func (x *MyStructField30Patch1) SetClear(clear bool) *MyStructField30Patch1 {
    x.Clear = clear
    return x
}

func (x *MyStructField30Patch1) SetPatchPrior(patchPrior map[string]*patch.I32Patch) *MyStructField30Patch1 {
    x.PatchPrior = patchPrior
    return x
}

func (x *MyStructField30Patch1) SetAdd(add map[string]int32) *MyStructField30Patch1 {
    x.Add = add
    return x
}

func (x *MyStructField30Patch1) SetPatch(patch map[string]*patch.I32Patch) *MyStructField30Patch1 {
    x.Patch = patch
    return x
}

func (x *MyStructField30Patch1) SetRemove(remove []string) *MyStructField30Patch1 {
    x.Remove = remove
    return x
}

func (x *MyStructField30Patch1) SetPut(put map[string]int32) *MyStructField30Patch1 {
    x.Put = put
    return x
}

func (x *MyStructField30Patch1) IsSetAssign() bool {
    return x.Assign != nil
}


func (x *MyStructField30Patch1) IsSetPatchPrior() bool {
    return x.PatchPrior != nil
}

func (x *MyStructField30Patch1) IsSetAdd() bool {
    return x.Add != nil
}

func (x *MyStructField30Patch1) IsSetPatch() bool {
    return x.Patch != nil
}

func (x *MyStructField30Patch1) IsSetRemove() bool {
    return x.Remove != nil
}

func (x *MyStructField30Patch1) IsSetPut() bool {
    return x.Put != nil
}

func (x *MyStructField30Patch1) writeField1(p thrift.Protocol) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.MAP, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetAssign()
    if err := p.WriteMapBegin(thrift.STRING, thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField30Patch1) writeField2(p thrift.Protocol) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetClear()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField30Patch1) writeField3(p thrift.Protocol) error {  // PatchPrior
    if !x.IsSetPatchPrior() {
        return nil
    }

    if err := p.WriteFieldBegin("patchPrior", thrift.MAP, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetPatchPrior()
    if err := p.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := item.Write(p); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField30Patch1) writeField5(p thrift.Protocol) error {  // Add
    if !x.IsSetAdd() {
        return nil
    }

    if err := p.WriteFieldBegin("add", thrift.MAP, 5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetAdd()
    if err := p.WriteMapBegin(thrift.STRING, thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField30Patch1) writeField6(p thrift.Protocol) error {  // Patch
    if !x.IsSetPatch() {
        return nil
    }

    if err := p.WriteFieldBegin("patch", thrift.MAP, 6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetPatch()
    if err := p.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := item.Write(p); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField30Patch1) writeField7(p thrift.Protocol) error {  // Remove
    if !x.IsSetRemove() {
        return nil
    }

    if err := p.WriteFieldBegin("remove", thrift.SET, 7); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetRemove()
    if err := p.WriteSetBegin(thrift.STRING, len(item)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
}
for _, v := range item {
    {
        item := v
        if err := p.WriteString(item); err != nil {
    return err
}
    }
}
if err := p.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField30Patch1) writeField9(p thrift.Protocol) error {  // Put
    if !x.IsSetPut() {
        return nil
    }

    if err := p.WriteFieldBegin("put", thrift.MAP, 9); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetPut()
    if err := p.WriteMapBegin(thrift.STRING, thrift.I32, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := p.WriteI32(item); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructField30Patch1) readField1(p thrift.Protocol) error {  // Assign
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetAssign(result)
    return nil
}

func (x *MyStructField30Patch1) readField2(p thrift.Protocol) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetClear(result)
    return nil
}

func (x *MyStructField30Patch1) readField3(p thrift.Protocol) error {  // PatchPrior
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]*patch.I32Patch, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value *patch.I32Patch
    {
        result := *patch.NewI32Patch()
err := result.Read(p)
if err != nil {
    return err
}
        value = &result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetPatchPrior(result)
    return nil
}

func (x *MyStructField30Patch1) readField5(p thrift.Protocol) error {  // Add
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetAdd(result)
    return nil
}

func (x *MyStructField30Patch1) readField6(p thrift.Protocol) error {  // Patch
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]*patch.I32Patch, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value *patch.I32Patch
    {
        result := *patch.NewI32Patch()
err := result.Read(p)
if err != nil {
    return err
}
        value = &result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetPatch(result)
    return nil
}

func (x *MyStructField30Patch1) readField7(p thrift.Protocol) error {  // Remove
    _ /* elemType */, size, err := p.ReadSetBegin()
if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
}

setResult := make([]string, 0, size)
for i := 0; i < size; i++ {
    var elem string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        elem = result
    }
    setResult = append(setResult, elem)
}

if err := p.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
}
result := setResult

    x.SetRemove(result)
    return nil
}

func (x *MyStructField30Patch1) readField9(p thrift.Protocol) error {  // Put
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]int32, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value int32
    {
        result, err := p.ReadI32()
if err != nil {
    return err
}
        value = result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetPut(result)
    return nil
}


// Deprecated: Use MyStructField30Patch1.Set* methods instead or set the fields directly.
type MyStructField30Patch1Builder struct {
    obj *MyStructField30Patch1
}

func NewMyStructField30Patch1Builder() *MyStructField30Patch1Builder {
    return &MyStructField30Patch1Builder{
        obj: NewMyStructField30Patch1(),
    }
}

func (x *MyStructField30Patch1Builder) Assign(assign map[string]int32) *MyStructField30Patch1Builder {
    x.obj.Assign = assign
    return x
}

func (x *MyStructField30Patch1Builder) Clear(clear bool) *MyStructField30Patch1Builder {
    x.obj.Clear = clear
    return x
}

func (x *MyStructField30Patch1Builder) PatchPrior(patchPrior map[string]*patch.I32Patch) *MyStructField30Patch1Builder {
    x.obj.PatchPrior = patchPrior
    return x
}

func (x *MyStructField30Patch1Builder) Add(add map[string]int32) *MyStructField30Patch1Builder {
    x.obj.Add = add
    return x
}

func (x *MyStructField30Patch1Builder) Patch(patch map[string]*patch.I32Patch) *MyStructField30Patch1Builder {
    x.obj.Patch = patch
    return x
}

func (x *MyStructField30Patch1Builder) Remove(remove []string) *MyStructField30Patch1Builder {
    x.obj.Remove = remove
    return x
}

func (x *MyStructField30Patch1Builder) Put(put map[string]int32) *MyStructField30Patch1Builder {
    x.obj.Put = put
    return x
}

func (x *MyStructField30Patch1Builder) Emit() *MyStructField30Patch1 {
    var objCopy MyStructField30Patch1 = *x.obj
    return &objCopy
}

func (x *MyStructField30Patch1) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("MyStructField30Patch1"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField5(p); err != nil {
        return err
    }

    if err := x.writeField6(p); err != nil {
        return err
    }

    if err := x.writeField7(p); err != nil {
        return err
    }

    if err := x.writeField9(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyStructField30Patch1) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        case 3:  // patchPrior
            if err := x.readField3(p); err != nil {
                return err
            }
        case 5:  // add
            if err := x.readField5(p); err != nil {
                return err
            }
        case 6:  // patch
            if err := x.readField6(p); err != nil {
                return err
            }
        case 7:  // remove
            if err := x.readField7(p); err != nil {
                return err
            }
        case 9:  // put
            if err := x.readField9(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type MyStructFieldPatch struct {
    MapMap *MyStructField30Patch `thrift:"mapMap,-30" json:"mapMap" db:"mapMap"`
    ListMap *MyStructField29Patch `thrift:"listMap,-29" json:"listMap" db:"listMap"`
    OptMapVal *MyStructField28Patch `thrift:"optMapVal,-28" json:"optMapVal" db:"optMapVal"`
    OptSetVal *MyStructField27Patch `thrift:"optSetVal,-27" json:"optSetVal" db:"optSetVal"`
    OptListVal *MyStructField26Patch `thrift:"optListVal,-26" json:"optListVal" db:"optListVal"`
    OptLateStructVal *LateDefStructPatch `thrift:"optLateStructVal,-25" json:"optLateStructVal" db:"optLateStructVal"`
    OptStructVal *MyDataPatch `thrift:"optStructVal,-24" json:"optStructVal" db:"optStructVal"`
    OptEnumVal *MyStructField23Patch `thrift:"optEnumVal,-23" json:"optEnumVal" db:"optEnumVal"`
    OptBinaryVal *patch.BinaryPatch `thrift:"optBinaryVal,-22" json:"optBinaryVal" db:"optBinaryVal"`
    OptStringVal *patch.StringPatch `thrift:"optStringVal,-21" json:"optStringVal" db:"optStringVal"`
    OptDoubleVal *patch.DoublePatch `thrift:"optDoubleVal,-20" json:"optDoubleVal" db:"optDoubleVal"`
    OptFloatVal *patch.FloatPatch `thrift:"optFloatVal,-19" json:"optFloatVal" db:"optFloatVal"`
    OptI64Val *patch.I64Patch `thrift:"optI64Val,-18" json:"optI64Val" db:"optI64Val"`
    OptI32Val *patch.I32Patch `thrift:"optI32Val,-17" json:"optI32Val" db:"optI32Val"`
    OptI16Val *patch.I16Patch `thrift:"optI16Val,-16" json:"optI16Val" db:"optI16Val"`
    OptByteVal *patch.BytePatch `thrift:"optByteVal,-15" json:"optByteVal" db:"optByteVal"`
    OptBoolVal *patch.BoolPatch `thrift:"optBoolVal,-14" json:"optBoolVal" db:"optBoolVal"`
    LateStructVal *LateDefStructPatch `thrift:"lateStructVal,-13" json:"lateStructVal" db:"lateStructVal"`
    UnionVal *MyUnionPatch `thrift:"unionVal,-12" json:"unionVal" db:"unionVal"`
    StructVal *MyDataPatch `thrift:"structVal,-11" json:"structVal" db:"structVal"`
    EnumVal *MyStructField10Patch `thrift:"enumVal,-10" json:"enumVal" db:"enumVal"`
    BinaryVal *patch.BinaryPatch `thrift:"binaryVal,-9" json:"binaryVal" db:"binaryVal"`
    StringVal *patch.StringPatch `thrift:"stringVal,-8" json:"stringVal" db:"stringVal"`
    DoubleVal *patch.DoublePatch `thrift:"doubleVal,-7" json:"doubleVal" db:"doubleVal"`
    FloatVal *patch.FloatPatch `thrift:"floatVal,-6" json:"floatVal" db:"floatVal"`
    I64Val *patch.I64Patch `thrift:"i64Val,-5" json:"i64Val" db:"i64Val"`
    I32Val *patch.I32Patch `thrift:"i32Val,-4" json:"i32Val" db:"i32Val"`
    I16Val *patch.I16Patch `thrift:"i16Val,-3" json:"i16Val" db:"i16Val"`
    ByteVal *patch.BytePatch `thrift:"byteVal,-2" json:"byteVal" db:"byteVal"`
    BoolVal *patch.BoolPatch `thrift:"boolVal,-1" json:"boolVal" db:"boolVal"`
}
// Compile time interface enforcer
var _ thrift.Struct = &MyStructFieldPatch{}

func NewMyStructFieldPatch() *MyStructFieldPatch {
    return (&MyStructFieldPatch{})
}
func (x *MyStructFieldPatch) GetMapMap() *MyStructField30Patch {
    return x.MapMap
}

func (x *MyStructFieldPatch) GetListMap() *MyStructField29Patch {
    return x.ListMap
}

func (x *MyStructFieldPatch) GetOptMapVal() *MyStructField28Patch {
    return x.OptMapVal
}

func (x *MyStructFieldPatch) GetOptSetVal() *MyStructField27Patch {
    return x.OptSetVal
}

func (x *MyStructFieldPatch) GetOptListVal() *MyStructField26Patch {
    return x.OptListVal
}

func (x *MyStructFieldPatch) GetOptLateStructVal() *LateDefStructPatch {
    return x.OptLateStructVal
}

func (x *MyStructFieldPatch) GetOptStructVal() *MyDataPatch {
    return x.OptStructVal
}

func (x *MyStructFieldPatch) GetOptEnumVal() *MyStructField23Patch {
    return x.OptEnumVal
}

func (x *MyStructFieldPatch) GetOptBinaryVal() *patch.BinaryPatch {
    return x.OptBinaryVal
}

func (x *MyStructFieldPatch) GetOptStringVal() *patch.StringPatch {
    return x.OptStringVal
}

func (x *MyStructFieldPatch) GetOptDoubleVal() *patch.DoublePatch {
    return x.OptDoubleVal
}

func (x *MyStructFieldPatch) GetOptFloatVal() *patch.FloatPatch {
    return x.OptFloatVal
}

func (x *MyStructFieldPatch) GetOptI64Val() *patch.I64Patch {
    return x.OptI64Val
}

func (x *MyStructFieldPatch) GetOptI32Val() *patch.I32Patch {
    return x.OptI32Val
}

func (x *MyStructFieldPatch) GetOptI16Val() *patch.I16Patch {
    return x.OptI16Val
}

func (x *MyStructFieldPatch) GetOptByteVal() *patch.BytePatch {
    return x.OptByteVal
}

func (x *MyStructFieldPatch) GetOptBoolVal() *patch.BoolPatch {
    return x.OptBoolVal
}

func (x *MyStructFieldPatch) GetLateStructVal() *LateDefStructPatch {
    return x.LateStructVal
}

func (x *MyStructFieldPatch) GetUnionVal() *MyUnionPatch {
    return x.UnionVal
}

func (x *MyStructFieldPatch) GetStructVal() *MyDataPatch {
    return x.StructVal
}

func (x *MyStructFieldPatch) GetEnumVal() *MyStructField10Patch {
    return x.EnumVal
}

func (x *MyStructFieldPatch) GetBinaryVal() *patch.BinaryPatch {
    return x.BinaryVal
}

func (x *MyStructFieldPatch) GetStringVal() *patch.StringPatch {
    return x.StringVal
}

func (x *MyStructFieldPatch) GetDoubleVal() *patch.DoublePatch {
    return x.DoubleVal
}

func (x *MyStructFieldPatch) GetFloatVal() *patch.FloatPatch {
    return x.FloatVal
}

func (x *MyStructFieldPatch) GetI64Val() *patch.I64Patch {
    return x.I64Val
}

func (x *MyStructFieldPatch) GetI32Val() *patch.I32Patch {
    return x.I32Val
}

func (x *MyStructFieldPatch) GetI16Val() *patch.I16Patch {
    return x.I16Val
}

func (x *MyStructFieldPatch) GetByteVal() *patch.BytePatch {
    return x.ByteVal
}

func (x *MyStructFieldPatch) GetBoolVal() *patch.BoolPatch {
    return x.BoolVal
}

func (x *MyStructFieldPatch) SetMapMap(mapMap MyStructField30Patch) *MyStructFieldPatch {
    x.MapMap = &mapMap
    return x
}

func (x *MyStructFieldPatch) SetListMap(listMap MyStructField29Patch) *MyStructFieldPatch {
    x.ListMap = &listMap
    return x
}

func (x *MyStructFieldPatch) SetOptMapVal(optMapVal MyStructField28Patch) *MyStructFieldPatch {
    x.OptMapVal = &optMapVal
    return x
}

func (x *MyStructFieldPatch) SetOptSetVal(optSetVal MyStructField27Patch) *MyStructFieldPatch {
    x.OptSetVal = &optSetVal
    return x
}

func (x *MyStructFieldPatch) SetOptListVal(optListVal MyStructField26Patch) *MyStructFieldPatch {
    x.OptListVal = &optListVal
    return x
}

func (x *MyStructFieldPatch) SetOptLateStructVal(optLateStructVal LateDefStructPatch) *MyStructFieldPatch {
    x.OptLateStructVal = &optLateStructVal
    return x
}

func (x *MyStructFieldPatch) SetOptStructVal(optStructVal MyDataPatch) *MyStructFieldPatch {
    x.OptStructVal = &optStructVal
    return x
}

func (x *MyStructFieldPatch) SetOptEnumVal(optEnumVal MyStructField23Patch) *MyStructFieldPatch {
    x.OptEnumVal = &optEnumVal
    return x
}

func (x *MyStructFieldPatch) SetOptBinaryVal(optBinaryVal patch.BinaryPatch) *MyStructFieldPatch {
    x.OptBinaryVal = &optBinaryVal
    return x
}

func (x *MyStructFieldPatch) SetOptStringVal(optStringVal patch.StringPatch) *MyStructFieldPatch {
    x.OptStringVal = &optStringVal
    return x
}

func (x *MyStructFieldPatch) SetOptDoubleVal(optDoubleVal patch.DoublePatch) *MyStructFieldPatch {
    x.OptDoubleVal = &optDoubleVal
    return x
}

func (x *MyStructFieldPatch) SetOptFloatVal(optFloatVal patch.FloatPatch) *MyStructFieldPatch {
    x.OptFloatVal = &optFloatVal
    return x
}

func (x *MyStructFieldPatch) SetOptI64Val(optI64Val patch.I64Patch) *MyStructFieldPatch {
    x.OptI64Val = &optI64Val
    return x
}

func (x *MyStructFieldPatch) SetOptI32Val(optI32Val patch.I32Patch) *MyStructFieldPatch {
    x.OptI32Val = &optI32Val
    return x
}

func (x *MyStructFieldPatch) SetOptI16Val(optI16Val patch.I16Patch) *MyStructFieldPatch {
    x.OptI16Val = &optI16Val
    return x
}

func (x *MyStructFieldPatch) SetOptByteVal(optByteVal patch.BytePatch) *MyStructFieldPatch {
    x.OptByteVal = &optByteVal
    return x
}

func (x *MyStructFieldPatch) SetOptBoolVal(optBoolVal patch.BoolPatch) *MyStructFieldPatch {
    x.OptBoolVal = &optBoolVal
    return x
}

func (x *MyStructFieldPatch) SetLateStructVal(lateStructVal LateDefStructPatch) *MyStructFieldPatch {
    x.LateStructVal = &lateStructVal
    return x
}

func (x *MyStructFieldPatch) SetUnionVal(unionVal MyUnionPatch) *MyStructFieldPatch {
    x.UnionVal = &unionVal
    return x
}

func (x *MyStructFieldPatch) SetStructVal(structVal MyDataPatch) *MyStructFieldPatch {
    x.StructVal = &structVal
    return x
}

func (x *MyStructFieldPatch) SetEnumVal(enumVal MyStructField10Patch) *MyStructFieldPatch {
    x.EnumVal = &enumVal
    return x
}

func (x *MyStructFieldPatch) SetBinaryVal(binaryVal patch.BinaryPatch) *MyStructFieldPatch {
    x.BinaryVal = &binaryVal
    return x
}

func (x *MyStructFieldPatch) SetStringVal(stringVal patch.StringPatch) *MyStructFieldPatch {
    x.StringVal = &stringVal
    return x
}

func (x *MyStructFieldPatch) SetDoubleVal(doubleVal patch.DoublePatch) *MyStructFieldPatch {
    x.DoubleVal = &doubleVal
    return x
}

func (x *MyStructFieldPatch) SetFloatVal(floatVal patch.FloatPatch) *MyStructFieldPatch {
    x.FloatVal = &floatVal
    return x
}

func (x *MyStructFieldPatch) SetI64Val(i64Val patch.I64Patch) *MyStructFieldPatch {
    x.I64Val = &i64Val
    return x
}

func (x *MyStructFieldPatch) SetI32Val(i32Val patch.I32Patch) *MyStructFieldPatch {
    x.I32Val = &i32Val
    return x
}

func (x *MyStructFieldPatch) SetI16Val(i16Val patch.I16Patch) *MyStructFieldPatch {
    x.I16Val = &i16Val
    return x
}

func (x *MyStructFieldPatch) SetByteVal(byteVal patch.BytePatch) *MyStructFieldPatch {
    x.ByteVal = &byteVal
    return x
}

func (x *MyStructFieldPatch) SetBoolVal(boolVal patch.BoolPatch) *MyStructFieldPatch {
    x.BoolVal = &boolVal
    return x
}

func (x *MyStructFieldPatch) IsSetMapMap() bool {
    return x.MapMap != nil
}

func (x *MyStructFieldPatch) IsSetListMap() bool {
    return x.ListMap != nil
}

func (x *MyStructFieldPatch) IsSetOptMapVal() bool {
    return x.OptMapVal != nil
}

func (x *MyStructFieldPatch) IsSetOptSetVal() bool {
    return x.OptSetVal != nil
}

func (x *MyStructFieldPatch) IsSetOptListVal() bool {
    return x.OptListVal != nil
}

func (x *MyStructFieldPatch) IsSetOptLateStructVal() bool {
    return x.OptLateStructVal != nil
}

func (x *MyStructFieldPatch) IsSetOptStructVal() bool {
    return x.OptStructVal != nil
}

func (x *MyStructFieldPatch) IsSetOptEnumVal() bool {
    return x.OptEnumVal != nil
}

func (x *MyStructFieldPatch) IsSetOptBinaryVal() bool {
    return x.OptBinaryVal != nil
}

func (x *MyStructFieldPatch) IsSetOptStringVal() bool {
    return x.OptStringVal != nil
}

func (x *MyStructFieldPatch) IsSetOptDoubleVal() bool {
    return x.OptDoubleVal != nil
}

func (x *MyStructFieldPatch) IsSetOptFloatVal() bool {
    return x.OptFloatVal != nil
}

func (x *MyStructFieldPatch) IsSetOptI64Val() bool {
    return x.OptI64Val != nil
}

func (x *MyStructFieldPatch) IsSetOptI32Val() bool {
    return x.OptI32Val != nil
}

func (x *MyStructFieldPatch) IsSetOptI16Val() bool {
    return x.OptI16Val != nil
}

func (x *MyStructFieldPatch) IsSetOptByteVal() bool {
    return x.OptByteVal != nil
}

func (x *MyStructFieldPatch) IsSetOptBoolVal() bool {
    return x.OptBoolVal != nil
}

func (x *MyStructFieldPatch) IsSetLateStructVal() bool {
    return x.LateStructVal != nil
}

func (x *MyStructFieldPatch) IsSetUnionVal() bool {
    return x.UnionVal != nil
}

func (x *MyStructFieldPatch) IsSetStructVal() bool {
    return x.StructVal != nil
}

func (x *MyStructFieldPatch) IsSetEnumVal() bool {
    return x.EnumVal != nil
}

func (x *MyStructFieldPatch) IsSetBinaryVal() bool {
    return x.BinaryVal != nil
}

func (x *MyStructFieldPatch) IsSetStringVal() bool {
    return x.StringVal != nil
}

func (x *MyStructFieldPatch) IsSetDoubleVal() bool {
    return x.DoubleVal != nil
}

func (x *MyStructFieldPatch) IsSetFloatVal() bool {
    return x.FloatVal != nil
}

func (x *MyStructFieldPatch) IsSetI64Val() bool {
    return x.I64Val != nil
}

func (x *MyStructFieldPatch) IsSetI32Val() bool {
    return x.I32Val != nil
}

func (x *MyStructFieldPatch) IsSetI16Val() bool {
    return x.I16Val != nil
}

func (x *MyStructFieldPatch) IsSetByteVal() bool {
    return x.ByteVal != nil
}

func (x *MyStructFieldPatch) IsSetBoolVal() bool {
    return x.BoolVal != nil
}

func (x *MyStructFieldPatch) writeField_30(p thrift.Protocol) error {  // MapMap
    if !x.IsSetMapMap() {
        return nil
    }

    if err := p.WriteFieldBegin("mapMap", thrift.STRUCT, -30); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetMapMap()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_29(p thrift.Protocol) error {  // ListMap
    if !x.IsSetListMap() {
        return nil
    }

    if err := p.WriteFieldBegin("listMap", thrift.STRUCT, -29); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetListMap()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_28(p thrift.Protocol) error {  // OptMapVal
    if !x.IsSetOptMapVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optMapVal", thrift.STRUCT, -28); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOptMapVal()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_27(p thrift.Protocol) error {  // OptSetVal
    if !x.IsSetOptSetVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optSetVal", thrift.STRUCT, -27); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOptSetVal()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_26(p thrift.Protocol) error {  // OptListVal
    if !x.IsSetOptListVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optListVal", thrift.STRUCT, -26); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOptListVal()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_25(p thrift.Protocol) error {  // OptLateStructVal
    if !x.IsSetOptLateStructVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optLateStructVal", thrift.STRUCT, -25); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOptLateStructVal()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_24(p thrift.Protocol) error {  // OptStructVal
    if !x.IsSetOptStructVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optStructVal", thrift.STRUCT, -24); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOptStructVal()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_23(p thrift.Protocol) error {  // OptEnumVal
    if !x.IsSetOptEnumVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optEnumVal", thrift.STRUCT, -23); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOptEnumVal()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_22(p thrift.Protocol) error {  // OptBinaryVal
    if !x.IsSetOptBinaryVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optBinaryVal", thrift.STRUCT, -22); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOptBinaryVal()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_21(p thrift.Protocol) error {  // OptStringVal
    if !x.IsSetOptStringVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optStringVal", thrift.STRUCT, -21); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOptStringVal()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_20(p thrift.Protocol) error {  // OptDoubleVal
    if !x.IsSetOptDoubleVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optDoubleVal", thrift.STRUCT, -20); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOptDoubleVal()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_19(p thrift.Protocol) error {  // OptFloatVal
    if !x.IsSetOptFloatVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optFloatVal", thrift.STRUCT, -19); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOptFloatVal()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_18(p thrift.Protocol) error {  // OptI64Val
    if !x.IsSetOptI64Val() {
        return nil
    }

    if err := p.WriteFieldBegin("optI64Val", thrift.STRUCT, -18); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOptI64Val()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_17(p thrift.Protocol) error {  // OptI32Val
    if !x.IsSetOptI32Val() {
        return nil
    }

    if err := p.WriteFieldBegin("optI32Val", thrift.STRUCT, -17); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOptI32Val()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_16(p thrift.Protocol) error {  // OptI16Val
    if !x.IsSetOptI16Val() {
        return nil
    }

    if err := p.WriteFieldBegin("optI16Val", thrift.STRUCT, -16); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOptI16Val()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_15(p thrift.Protocol) error {  // OptByteVal
    if !x.IsSetOptByteVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optByteVal", thrift.STRUCT, -15); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOptByteVal()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_14(p thrift.Protocol) error {  // OptBoolVal
    if !x.IsSetOptBoolVal() {
        return nil
    }

    if err := p.WriteFieldBegin("optBoolVal", thrift.STRUCT, -14); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetOptBoolVal()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_13(p thrift.Protocol) error {  // LateStructVal
    if !x.IsSetLateStructVal() {
        return nil
    }

    if err := p.WriteFieldBegin("lateStructVal", thrift.STRUCT, -13); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetLateStructVal()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_12(p thrift.Protocol) error {  // UnionVal
    if !x.IsSetUnionVal() {
        return nil
    }

    if err := p.WriteFieldBegin("unionVal", thrift.STRUCT, -12); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetUnionVal()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_11(p thrift.Protocol) error {  // StructVal
    if !x.IsSetStructVal() {
        return nil
    }

    if err := p.WriteFieldBegin("structVal", thrift.STRUCT, -11); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetStructVal()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_10(p thrift.Protocol) error {  // EnumVal
    if !x.IsSetEnumVal() {
        return nil
    }

    if err := p.WriteFieldBegin("enumVal", thrift.STRUCT, -10); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetEnumVal()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_9(p thrift.Protocol) error {  // BinaryVal
    if !x.IsSetBinaryVal() {
        return nil
    }

    if err := p.WriteFieldBegin("binaryVal", thrift.STRUCT, -9); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetBinaryVal()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_8(p thrift.Protocol) error {  // StringVal
    if !x.IsSetStringVal() {
        return nil
    }

    if err := p.WriteFieldBegin("stringVal", thrift.STRUCT, -8); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetStringVal()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_7(p thrift.Protocol) error {  // DoubleVal
    if !x.IsSetDoubleVal() {
        return nil
    }

    if err := p.WriteFieldBegin("doubleVal", thrift.STRUCT, -7); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetDoubleVal()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_6(p thrift.Protocol) error {  // FloatVal
    if !x.IsSetFloatVal() {
        return nil
    }

    if err := p.WriteFieldBegin("floatVal", thrift.STRUCT, -6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetFloatVal()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_5(p thrift.Protocol) error {  // I64Val
    if !x.IsSetI64Val() {
        return nil
    }

    if err := p.WriteFieldBegin("i64Val", thrift.STRUCT, -5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetI64Val()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_4(p thrift.Protocol) error {  // I32Val
    if !x.IsSetI32Val() {
        return nil
    }

    if err := p.WriteFieldBegin("i32Val", thrift.STRUCT, -4); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetI32Val()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_3(p thrift.Protocol) error {  // I16Val
    if !x.IsSetI16Val() {
        return nil
    }

    if err := p.WriteFieldBegin("i16Val", thrift.STRUCT, -3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetI16Val()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_2(p thrift.Protocol) error {  // ByteVal
    if !x.IsSetByteVal() {
        return nil
    }

    if err := p.WriteFieldBegin("byteVal", thrift.STRUCT, -2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetByteVal()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) writeField_1(p thrift.Protocol) error {  // BoolVal
    if !x.IsSetBoolVal() {
        return nil
    }

    if err := p.WriteFieldBegin("boolVal", thrift.STRUCT, -1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetBoolVal()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) readField_30(p thrift.Protocol) error {  // MapMap
    result := *NewMyStructField30Patch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetMapMap(result)
    return nil
}

func (x *MyStructFieldPatch) readField_29(p thrift.Protocol) error {  // ListMap
    result := *NewMyStructField29Patch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetListMap(result)
    return nil
}

func (x *MyStructFieldPatch) readField_28(p thrift.Protocol) error {  // OptMapVal
    result := *NewMyStructField28Patch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetOptMapVal(result)
    return nil
}

func (x *MyStructFieldPatch) readField_27(p thrift.Protocol) error {  // OptSetVal
    result := *NewMyStructField27Patch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetOptSetVal(result)
    return nil
}

func (x *MyStructFieldPatch) readField_26(p thrift.Protocol) error {  // OptListVal
    result := *NewMyStructField26Patch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetOptListVal(result)
    return nil
}

func (x *MyStructFieldPatch) readField_25(p thrift.Protocol) error {  // OptLateStructVal
    result := *NewLateDefStructPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetOptLateStructVal(result)
    return nil
}

func (x *MyStructFieldPatch) readField_24(p thrift.Protocol) error {  // OptStructVal
    result := *NewMyDataPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetOptStructVal(result)
    return nil
}

func (x *MyStructFieldPatch) readField_23(p thrift.Protocol) error {  // OptEnumVal
    result := *NewMyStructField23Patch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetOptEnumVal(result)
    return nil
}

func (x *MyStructFieldPatch) readField_22(p thrift.Protocol) error {  // OptBinaryVal
    result := *patch.NewBinaryPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetOptBinaryVal(result)
    return nil
}

func (x *MyStructFieldPatch) readField_21(p thrift.Protocol) error {  // OptStringVal
    result := *patch.NewStringPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetOptStringVal(result)
    return nil
}

func (x *MyStructFieldPatch) readField_20(p thrift.Protocol) error {  // OptDoubleVal
    result := *patch.NewDoublePatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetOptDoubleVal(result)
    return nil
}

func (x *MyStructFieldPatch) readField_19(p thrift.Protocol) error {  // OptFloatVal
    result := *patch.NewFloatPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetOptFloatVal(result)
    return nil
}

func (x *MyStructFieldPatch) readField_18(p thrift.Protocol) error {  // OptI64Val
    result := *patch.NewI64Patch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetOptI64Val(result)
    return nil
}

func (x *MyStructFieldPatch) readField_17(p thrift.Protocol) error {  // OptI32Val
    result := *patch.NewI32Patch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetOptI32Val(result)
    return nil
}

func (x *MyStructFieldPatch) readField_16(p thrift.Protocol) error {  // OptI16Val
    result := *patch.NewI16Patch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetOptI16Val(result)
    return nil
}

func (x *MyStructFieldPatch) readField_15(p thrift.Protocol) error {  // OptByteVal
    result := *patch.NewBytePatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetOptByteVal(result)
    return nil
}

func (x *MyStructFieldPatch) readField_14(p thrift.Protocol) error {  // OptBoolVal
    result := *patch.NewBoolPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetOptBoolVal(result)
    return nil
}

func (x *MyStructFieldPatch) readField_13(p thrift.Protocol) error {  // LateStructVal
    result := *NewLateDefStructPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetLateStructVal(result)
    return nil
}

func (x *MyStructFieldPatch) readField_12(p thrift.Protocol) error {  // UnionVal
    result := *NewMyUnionPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetUnionVal(result)
    return nil
}

func (x *MyStructFieldPatch) readField_11(p thrift.Protocol) error {  // StructVal
    result := *NewMyDataPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetStructVal(result)
    return nil
}

func (x *MyStructFieldPatch) readField_10(p thrift.Protocol) error {  // EnumVal
    result := *NewMyStructField10Patch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetEnumVal(result)
    return nil
}

func (x *MyStructFieldPatch) readField_9(p thrift.Protocol) error {  // BinaryVal
    result := *patch.NewBinaryPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetBinaryVal(result)
    return nil
}

func (x *MyStructFieldPatch) readField_8(p thrift.Protocol) error {  // StringVal
    result := *patch.NewStringPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetStringVal(result)
    return nil
}

func (x *MyStructFieldPatch) readField_7(p thrift.Protocol) error {  // DoubleVal
    result := *patch.NewDoublePatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetDoubleVal(result)
    return nil
}

func (x *MyStructFieldPatch) readField_6(p thrift.Protocol) error {  // FloatVal
    result := *patch.NewFloatPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetFloatVal(result)
    return nil
}

func (x *MyStructFieldPatch) readField_5(p thrift.Protocol) error {  // I64Val
    result := *patch.NewI64Patch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetI64Val(result)
    return nil
}

func (x *MyStructFieldPatch) readField_4(p thrift.Protocol) error {  // I32Val
    result := *patch.NewI32Patch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetI32Val(result)
    return nil
}

func (x *MyStructFieldPatch) readField_3(p thrift.Protocol) error {  // I16Val
    result := *patch.NewI16Patch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetI16Val(result)
    return nil
}

func (x *MyStructFieldPatch) readField_2(p thrift.Protocol) error {  // ByteVal
    result := *patch.NewBytePatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetByteVal(result)
    return nil
}

func (x *MyStructFieldPatch) readField_1(p thrift.Protocol) error {  // BoolVal
    result := *patch.NewBoolPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetBoolVal(result)
    return nil
}


// Deprecated: Use MyStructFieldPatch.Set* methods instead or set the fields directly.
type MyStructFieldPatchBuilder struct {
    obj *MyStructFieldPatch
}

func NewMyStructFieldPatchBuilder() *MyStructFieldPatchBuilder {
    return &MyStructFieldPatchBuilder{
        obj: NewMyStructFieldPatch(),
    }
}

func (x *MyStructFieldPatchBuilder) MapMap(mapMap *MyStructField30Patch) *MyStructFieldPatchBuilder {
    x.obj.MapMap = mapMap
    return x
}

func (x *MyStructFieldPatchBuilder) ListMap(listMap *MyStructField29Patch) *MyStructFieldPatchBuilder {
    x.obj.ListMap = listMap
    return x
}

func (x *MyStructFieldPatchBuilder) OptMapVal(optMapVal *MyStructField28Patch) *MyStructFieldPatchBuilder {
    x.obj.OptMapVal = optMapVal
    return x
}

func (x *MyStructFieldPatchBuilder) OptSetVal(optSetVal *MyStructField27Patch) *MyStructFieldPatchBuilder {
    x.obj.OptSetVal = optSetVal
    return x
}

func (x *MyStructFieldPatchBuilder) OptListVal(optListVal *MyStructField26Patch) *MyStructFieldPatchBuilder {
    x.obj.OptListVal = optListVal
    return x
}

func (x *MyStructFieldPatchBuilder) OptLateStructVal(optLateStructVal *LateDefStructPatch) *MyStructFieldPatchBuilder {
    x.obj.OptLateStructVal = optLateStructVal
    return x
}

func (x *MyStructFieldPatchBuilder) OptStructVal(optStructVal *MyDataPatch) *MyStructFieldPatchBuilder {
    x.obj.OptStructVal = optStructVal
    return x
}

func (x *MyStructFieldPatchBuilder) OptEnumVal(optEnumVal *MyStructField23Patch) *MyStructFieldPatchBuilder {
    x.obj.OptEnumVal = optEnumVal
    return x
}

func (x *MyStructFieldPatchBuilder) OptBinaryVal(optBinaryVal *patch.BinaryPatch) *MyStructFieldPatchBuilder {
    x.obj.OptBinaryVal = optBinaryVal
    return x
}

func (x *MyStructFieldPatchBuilder) OptStringVal(optStringVal *patch.StringPatch) *MyStructFieldPatchBuilder {
    x.obj.OptStringVal = optStringVal
    return x
}

func (x *MyStructFieldPatchBuilder) OptDoubleVal(optDoubleVal *patch.DoublePatch) *MyStructFieldPatchBuilder {
    x.obj.OptDoubleVal = optDoubleVal
    return x
}

func (x *MyStructFieldPatchBuilder) OptFloatVal(optFloatVal *patch.FloatPatch) *MyStructFieldPatchBuilder {
    x.obj.OptFloatVal = optFloatVal
    return x
}

func (x *MyStructFieldPatchBuilder) OptI64Val(optI64Val *patch.I64Patch) *MyStructFieldPatchBuilder {
    x.obj.OptI64Val = optI64Val
    return x
}

func (x *MyStructFieldPatchBuilder) OptI32Val(optI32Val *patch.I32Patch) *MyStructFieldPatchBuilder {
    x.obj.OptI32Val = optI32Val
    return x
}

func (x *MyStructFieldPatchBuilder) OptI16Val(optI16Val *patch.I16Patch) *MyStructFieldPatchBuilder {
    x.obj.OptI16Val = optI16Val
    return x
}

func (x *MyStructFieldPatchBuilder) OptByteVal(optByteVal *patch.BytePatch) *MyStructFieldPatchBuilder {
    x.obj.OptByteVal = optByteVal
    return x
}

func (x *MyStructFieldPatchBuilder) OptBoolVal(optBoolVal *patch.BoolPatch) *MyStructFieldPatchBuilder {
    x.obj.OptBoolVal = optBoolVal
    return x
}

func (x *MyStructFieldPatchBuilder) LateStructVal(lateStructVal *LateDefStructPatch) *MyStructFieldPatchBuilder {
    x.obj.LateStructVal = lateStructVal
    return x
}

func (x *MyStructFieldPatchBuilder) UnionVal(unionVal *MyUnionPatch) *MyStructFieldPatchBuilder {
    x.obj.UnionVal = unionVal
    return x
}

func (x *MyStructFieldPatchBuilder) StructVal(structVal *MyDataPatch) *MyStructFieldPatchBuilder {
    x.obj.StructVal = structVal
    return x
}

func (x *MyStructFieldPatchBuilder) EnumVal(enumVal *MyStructField10Patch) *MyStructFieldPatchBuilder {
    x.obj.EnumVal = enumVal
    return x
}

func (x *MyStructFieldPatchBuilder) BinaryVal(binaryVal *patch.BinaryPatch) *MyStructFieldPatchBuilder {
    x.obj.BinaryVal = binaryVal
    return x
}

func (x *MyStructFieldPatchBuilder) StringVal(stringVal *patch.StringPatch) *MyStructFieldPatchBuilder {
    x.obj.StringVal = stringVal
    return x
}

func (x *MyStructFieldPatchBuilder) DoubleVal(doubleVal *patch.DoublePatch) *MyStructFieldPatchBuilder {
    x.obj.DoubleVal = doubleVal
    return x
}

func (x *MyStructFieldPatchBuilder) FloatVal(floatVal *patch.FloatPatch) *MyStructFieldPatchBuilder {
    x.obj.FloatVal = floatVal
    return x
}

func (x *MyStructFieldPatchBuilder) I64Val(i64Val *patch.I64Patch) *MyStructFieldPatchBuilder {
    x.obj.I64Val = i64Val
    return x
}

func (x *MyStructFieldPatchBuilder) I32Val(i32Val *patch.I32Patch) *MyStructFieldPatchBuilder {
    x.obj.I32Val = i32Val
    return x
}

func (x *MyStructFieldPatchBuilder) I16Val(i16Val *patch.I16Patch) *MyStructFieldPatchBuilder {
    x.obj.I16Val = i16Val
    return x
}

func (x *MyStructFieldPatchBuilder) ByteVal(byteVal *patch.BytePatch) *MyStructFieldPatchBuilder {
    x.obj.ByteVal = byteVal
    return x
}

func (x *MyStructFieldPatchBuilder) BoolVal(boolVal *patch.BoolPatch) *MyStructFieldPatchBuilder {
    x.obj.BoolVal = boolVal
    return x
}

func (x *MyStructFieldPatchBuilder) Emit() *MyStructFieldPatch {
    var objCopy MyStructFieldPatch = *x.obj
    return &objCopy
}

func (x *MyStructFieldPatch) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("MyStructFieldPatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField_30(p); err != nil {
        return err
    }

    if err := x.writeField_29(p); err != nil {
        return err
    }

    if err := x.writeField_28(p); err != nil {
        return err
    }

    if err := x.writeField_27(p); err != nil {
        return err
    }

    if err := x.writeField_26(p); err != nil {
        return err
    }

    if err := x.writeField_25(p); err != nil {
        return err
    }

    if err := x.writeField_24(p); err != nil {
        return err
    }

    if err := x.writeField_23(p); err != nil {
        return err
    }

    if err := x.writeField_22(p); err != nil {
        return err
    }

    if err := x.writeField_21(p); err != nil {
        return err
    }

    if err := x.writeField_20(p); err != nil {
        return err
    }

    if err := x.writeField_19(p); err != nil {
        return err
    }

    if err := x.writeField_18(p); err != nil {
        return err
    }

    if err := x.writeField_17(p); err != nil {
        return err
    }

    if err := x.writeField_16(p); err != nil {
        return err
    }

    if err := x.writeField_15(p); err != nil {
        return err
    }

    if err := x.writeField_14(p); err != nil {
        return err
    }

    if err := x.writeField_13(p); err != nil {
        return err
    }

    if err := x.writeField_12(p); err != nil {
        return err
    }

    if err := x.writeField_11(p); err != nil {
        return err
    }

    if err := x.writeField_10(p); err != nil {
        return err
    }

    if err := x.writeField_9(p); err != nil {
        return err
    }

    if err := x.writeField_8(p); err != nil {
        return err
    }

    if err := x.writeField_7(p); err != nil {
        return err
    }

    if err := x.writeField_6(p); err != nil {
        return err
    }

    if err := x.writeField_5(p); err != nil {
        return err
    }

    if err := x.writeField_4(p); err != nil {
        return err
    }

    if err := x.writeField_3(p); err != nil {
        return err
    }

    if err := x.writeField_2(p); err != nil {
        return err
    }

    if err := x.writeField_1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyStructFieldPatch) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case -30:  // mapMap
            if err := x.readField_30(p); err != nil {
                return err
            }
        case -29:  // listMap
            if err := x.readField_29(p); err != nil {
                return err
            }
        case -28:  // optMapVal
            if err := x.readField_28(p); err != nil {
                return err
            }
        case -27:  // optSetVal
            if err := x.readField_27(p); err != nil {
                return err
            }
        case -26:  // optListVal
            if err := x.readField_26(p); err != nil {
                return err
            }
        case -25:  // optLateStructVal
            if err := x.readField_25(p); err != nil {
                return err
            }
        case -24:  // optStructVal
            if err := x.readField_24(p); err != nil {
                return err
            }
        case -23:  // optEnumVal
            if err := x.readField_23(p); err != nil {
                return err
            }
        case -22:  // optBinaryVal
            if err := x.readField_22(p); err != nil {
                return err
            }
        case -21:  // optStringVal
            if err := x.readField_21(p); err != nil {
                return err
            }
        case -20:  // optDoubleVal
            if err := x.readField_20(p); err != nil {
                return err
            }
        case -19:  // optFloatVal
            if err := x.readField_19(p); err != nil {
                return err
            }
        case -18:  // optI64Val
            if err := x.readField_18(p); err != nil {
                return err
            }
        case -17:  // optI32Val
            if err := x.readField_17(p); err != nil {
                return err
            }
        case -16:  // optI16Val
            if err := x.readField_16(p); err != nil {
                return err
            }
        case -15:  // optByteVal
            if err := x.readField_15(p); err != nil {
                return err
            }
        case -14:  // optBoolVal
            if err := x.readField_14(p); err != nil {
                return err
            }
        case -13:  // lateStructVal
            if err := x.readField_13(p); err != nil {
                return err
            }
        case -12:  // unionVal
            if err := x.readField_12(p); err != nil {
                return err
            }
        case -11:  // structVal
            if err := x.readField_11(p); err != nil {
                return err
            }
        case -10:  // enumVal
            if err := x.readField_10(p); err != nil {
                return err
            }
        case -9:  // binaryVal
            if err := x.readField_9(p); err != nil {
                return err
            }
        case -8:  // stringVal
            if err := x.readField_8(p); err != nil {
                return err
            }
        case -7:  // doubleVal
            if err := x.readField_7(p); err != nil {
                return err
            }
        case -6:  // floatVal
            if err := x.readField_6(p); err != nil {
                return err
            }
        case -5:  // i64Val
            if err := x.readField_5(p); err != nil {
                return err
            }
        case -4:  // i32Val
            if err := x.readField_4(p); err != nil {
                return err
            }
        case -3:  // i16Val
            if err := x.readField_3(p); err != nil {
                return err
            }
        case -2:  // byteVal
            if err := x.readField_2(p); err != nil {
                return err
            }
        case -1:  // boolVal
            if err := x.readField_1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type MyStructPatch struct {
    Assign *MyStruct `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
    PatchPrior *MyStructFieldPatch `thrift:"patchPrior,3" json:"patchPrior" db:"patchPrior"`
    Ensure *MyStructEnsureStruct `thrift:"ensure,5" json:"ensure" db:"ensure"`
    Patch *MyStructFieldPatch `thrift:"patch,6" json:"patch" db:"patch"`
}
// Compile time interface enforcer
var _ thrift.Struct = &MyStructPatch{}

func NewMyStructPatch() *MyStructPatch {
    return (&MyStructPatch{})
}
func (x *MyStructPatch) GetAssign() *MyStruct {
    return x.Assign
}

func (x *MyStructPatch) GetClear() bool {
    return x.Clear
}

func (x *MyStructPatch) GetPatchPrior() *MyStructFieldPatch {
    return x.PatchPrior
}

func (x *MyStructPatch) GetEnsure() *MyStructEnsureStruct {
    return x.Ensure
}

func (x *MyStructPatch) GetPatch() *MyStructFieldPatch {
    return x.Patch
}

func (x *MyStructPatch) SetAssign(assign MyStruct) *MyStructPatch {
    x.Assign = &assign
    return x
}

func (x *MyStructPatch) SetClear(clear bool) *MyStructPatch {
    x.Clear = clear
    return x
}

func (x *MyStructPatch) SetPatchPrior(patchPrior MyStructFieldPatch) *MyStructPatch {
    x.PatchPrior = &patchPrior
    return x
}

func (x *MyStructPatch) SetEnsure(ensure MyStructEnsureStruct) *MyStructPatch {
    x.Ensure = &ensure
    return x
}

func (x *MyStructPatch) SetPatch(patch MyStructFieldPatch) *MyStructPatch {
    x.Patch = &patch
    return x
}

func (x *MyStructPatch) IsSetAssign() bool {
    return x.Assign != nil
}


func (x *MyStructPatch) IsSetPatchPrior() bool {
    return x.PatchPrior != nil
}

func (x *MyStructPatch) IsSetEnsure() bool {
    return x.Ensure != nil
}

func (x *MyStructPatch) IsSetPatch() bool {
    return x.Patch != nil
}

func (x *MyStructPatch) writeField1(p thrift.Protocol) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetAssign()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructPatch) writeField2(p thrift.Protocol) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetClear()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructPatch) writeField3(p thrift.Protocol) error {  // PatchPrior
    if !x.IsSetPatchPrior() {
        return nil
    }

    if err := p.WriteFieldBegin("patchPrior", thrift.STRUCT, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetPatchPrior()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructPatch) writeField5(p thrift.Protocol) error {  // Ensure
    if !x.IsSetEnsure() {
        return nil
    }

    if err := p.WriteFieldBegin("ensure", thrift.STRUCT, 5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetEnsure()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructPatch) writeField6(p thrift.Protocol) error {  // Patch
    if !x.IsSetPatch() {
        return nil
    }

    if err := p.WriteFieldBegin("patch", thrift.STRUCT, 6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetPatch()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *MyStructPatch) readField1(p thrift.Protocol) error {  // Assign
    result := *NewMyStruct()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetAssign(result)
    return nil
}

func (x *MyStructPatch) readField2(p thrift.Protocol) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetClear(result)
    return nil
}

func (x *MyStructPatch) readField3(p thrift.Protocol) error {  // PatchPrior
    result := *NewMyStructFieldPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetPatchPrior(result)
    return nil
}

func (x *MyStructPatch) readField5(p thrift.Protocol) error {  // Ensure
    result := *NewMyStructEnsureStruct()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetEnsure(result)
    return nil
}

func (x *MyStructPatch) readField6(p thrift.Protocol) error {  // Patch
    result := *NewMyStructFieldPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetPatch(result)
    return nil
}


// Deprecated: Use MyStructPatch.Set* methods instead or set the fields directly.
type MyStructPatchBuilder struct {
    obj *MyStructPatch
}

func NewMyStructPatchBuilder() *MyStructPatchBuilder {
    return &MyStructPatchBuilder{
        obj: NewMyStructPatch(),
    }
}

func (x *MyStructPatchBuilder) Assign(assign *MyStruct) *MyStructPatchBuilder {
    x.obj.Assign = assign
    return x
}

func (x *MyStructPatchBuilder) Clear(clear bool) *MyStructPatchBuilder {
    x.obj.Clear = clear
    return x
}

func (x *MyStructPatchBuilder) PatchPrior(patchPrior *MyStructFieldPatch) *MyStructPatchBuilder {
    x.obj.PatchPrior = patchPrior
    return x
}

func (x *MyStructPatchBuilder) Ensure(ensure *MyStructEnsureStruct) *MyStructPatchBuilder {
    x.obj.Ensure = ensure
    return x
}

func (x *MyStructPatchBuilder) Patch(patch *MyStructFieldPatch) *MyStructPatchBuilder {
    x.obj.Patch = patch
    return x
}

func (x *MyStructPatchBuilder) Emit() *MyStructPatch {
    var objCopy MyStructPatch = *x.obj
    return &objCopy
}

func (x *MyStructPatch) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("MyStructPatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField5(p); err != nil {
        return err
    }

    if err := x.writeField6(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *MyStructPatch) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        case 3:  // patchPrior
            if err := x.readField3(p); err != nil {
                return err
            }
        case 5:  // ensure
            if err := x.readField5(p); err != nil {
                return err
            }
        case 6:  // patch
            if err := x.readField6(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type LateDefStructEnsureStruct struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &LateDefStructEnsureStruct{}

func NewLateDefStructEnsureStruct() *LateDefStructEnsureStruct {
    return (&LateDefStructEnsureStruct{})
}

// Deprecated: Use LateDefStructEnsureStruct.Set* methods instead or set the fields directly.
type LateDefStructEnsureStructBuilder struct {
    obj *LateDefStructEnsureStruct
}

func NewLateDefStructEnsureStructBuilder() *LateDefStructEnsureStructBuilder {
    return &LateDefStructEnsureStructBuilder{
        obj: NewLateDefStructEnsureStruct(),
    }
}

func (x *LateDefStructEnsureStructBuilder) Emit() *LateDefStructEnsureStruct {
    var objCopy LateDefStructEnsureStruct = *x.obj
    return &objCopy
}

func (x *LateDefStructEnsureStruct) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("LateDefStructEnsureStruct"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *LateDefStructEnsureStruct) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type LateDefStructFieldPatch struct {
}
// Compile time interface enforcer
var _ thrift.Struct = &LateDefStructFieldPatch{}

func NewLateDefStructFieldPatch() *LateDefStructFieldPatch {
    return (&LateDefStructFieldPatch{})
}

// Deprecated: Use LateDefStructFieldPatch.Set* methods instead or set the fields directly.
type LateDefStructFieldPatchBuilder struct {
    obj *LateDefStructFieldPatch
}

func NewLateDefStructFieldPatchBuilder() *LateDefStructFieldPatchBuilder {
    return &LateDefStructFieldPatchBuilder{
        obj: NewLateDefStructFieldPatch(),
    }
}

func (x *LateDefStructFieldPatchBuilder) Emit() *LateDefStructFieldPatch {
    var objCopy LateDefStructFieldPatch = *x.obj
    return &objCopy
}

func (x *LateDefStructFieldPatch) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("LateDefStructFieldPatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *LateDefStructFieldPatch) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type LateDefStructPatch struct {
    Assign *LateDefStruct `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
    PatchPrior *LateDefStructFieldPatch `thrift:"patchPrior,3" json:"patchPrior" db:"patchPrior"`
    Ensure *LateDefStructEnsureStruct `thrift:"ensure,5" json:"ensure" db:"ensure"`
    Patch *LateDefStructFieldPatch `thrift:"patch,6" json:"patch" db:"patch"`
}
// Compile time interface enforcer
var _ thrift.Struct = &LateDefStructPatch{}

func NewLateDefStructPatch() *LateDefStructPatch {
    return (&LateDefStructPatch{})
}
func (x *LateDefStructPatch) GetAssign() *LateDefStruct {
    return x.Assign
}

func (x *LateDefStructPatch) GetClear() bool {
    return x.Clear
}

func (x *LateDefStructPatch) GetPatchPrior() *LateDefStructFieldPatch {
    return x.PatchPrior
}

func (x *LateDefStructPatch) GetEnsure() *LateDefStructEnsureStruct {
    return x.Ensure
}

func (x *LateDefStructPatch) GetPatch() *LateDefStructFieldPatch {
    return x.Patch
}

func (x *LateDefStructPatch) SetAssign(assign LateDefStruct) *LateDefStructPatch {
    x.Assign = &assign
    return x
}

func (x *LateDefStructPatch) SetClear(clear bool) *LateDefStructPatch {
    x.Clear = clear
    return x
}

func (x *LateDefStructPatch) SetPatchPrior(patchPrior LateDefStructFieldPatch) *LateDefStructPatch {
    x.PatchPrior = &patchPrior
    return x
}

func (x *LateDefStructPatch) SetEnsure(ensure LateDefStructEnsureStruct) *LateDefStructPatch {
    x.Ensure = &ensure
    return x
}

func (x *LateDefStructPatch) SetPatch(patch LateDefStructFieldPatch) *LateDefStructPatch {
    x.Patch = &patch
    return x
}

func (x *LateDefStructPatch) IsSetAssign() bool {
    return x.Assign != nil
}


func (x *LateDefStructPatch) IsSetPatchPrior() bool {
    return x.PatchPrior != nil
}

func (x *LateDefStructPatch) IsSetEnsure() bool {
    return x.Ensure != nil
}

func (x *LateDefStructPatch) IsSetPatch() bool {
    return x.Patch != nil
}

func (x *LateDefStructPatch) writeField1(p thrift.Protocol) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetAssign()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *LateDefStructPatch) writeField2(p thrift.Protocol) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetClear()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *LateDefStructPatch) writeField3(p thrift.Protocol) error {  // PatchPrior
    if !x.IsSetPatchPrior() {
        return nil
    }

    if err := p.WriteFieldBegin("patchPrior", thrift.STRUCT, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetPatchPrior()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *LateDefStructPatch) writeField5(p thrift.Protocol) error {  // Ensure
    if !x.IsSetEnsure() {
        return nil
    }

    if err := p.WriteFieldBegin("ensure", thrift.STRUCT, 5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetEnsure()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *LateDefStructPatch) writeField6(p thrift.Protocol) error {  // Patch
    if !x.IsSetPatch() {
        return nil
    }

    if err := p.WriteFieldBegin("patch", thrift.STRUCT, 6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetPatch()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *LateDefStructPatch) readField1(p thrift.Protocol) error {  // Assign
    result := *NewLateDefStruct()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetAssign(result)
    return nil
}

func (x *LateDefStructPatch) readField2(p thrift.Protocol) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetClear(result)
    return nil
}

func (x *LateDefStructPatch) readField3(p thrift.Protocol) error {  // PatchPrior
    result := *NewLateDefStructFieldPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetPatchPrior(result)
    return nil
}

func (x *LateDefStructPatch) readField5(p thrift.Protocol) error {  // Ensure
    result := *NewLateDefStructEnsureStruct()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetEnsure(result)
    return nil
}

func (x *LateDefStructPatch) readField6(p thrift.Protocol) error {  // Patch
    result := *NewLateDefStructFieldPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetPatch(result)
    return nil
}


// Deprecated: Use LateDefStructPatch.Set* methods instead or set the fields directly.
type LateDefStructPatchBuilder struct {
    obj *LateDefStructPatch
}

func NewLateDefStructPatchBuilder() *LateDefStructPatchBuilder {
    return &LateDefStructPatchBuilder{
        obj: NewLateDefStructPatch(),
    }
}

func (x *LateDefStructPatchBuilder) Assign(assign *LateDefStruct) *LateDefStructPatchBuilder {
    x.obj.Assign = assign
    return x
}

func (x *LateDefStructPatchBuilder) Clear(clear bool) *LateDefStructPatchBuilder {
    x.obj.Clear = clear
    return x
}

func (x *LateDefStructPatchBuilder) PatchPrior(patchPrior *LateDefStructFieldPatch) *LateDefStructPatchBuilder {
    x.obj.PatchPrior = patchPrior
    return x
}

func (x *LateDefStructPatchBuilder) Ensure(ensure *LateDefStructEnsureStruct) *LateDefStructPatchBuilder {
    x.obj.Ensure = ensure
    return x
}

func (x *LateDefStructPatchBuilder) Patch(patch *LateDefStructFieldPatch) *LateDefStructPatchBuilder {
    x.obj.Patch = patch
    return x
}

func (x *LateDefStructPatchBuilder) Emit() *LateDefStructPatch {
    var objCopy LateDefStructPatch = *x.obj
    return &objCopy
}

func (x *LateDefStructPatch) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("LateDefStructPatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField5(p); err != nil {
        return err
    }

    if err := x.writeField6(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *LateDefStructPatch) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        case 3:  // patchPrior
            if err := x.readField3(p); err != nil {
                return err
            }
        case 5:  // ensure
            if err := x.readField5(p); err != nil {
                return err
            }
        case 6:  // patch
            if err := x.readField6(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type RecursiveEnsureStruct struct {
    Nodes map[string]*Recursive `thrift:"nodes,-1,optional" json:"nodes,omitempty" db:"nodes"`
}
// Compile time interface enforcer
var _ thrift.Struct = &RecursiveEnsureStruct{}

func NewRecursiveEnsureStruct() *RecursiveEnsureStruct {
    return (&RecursiveEnsureStruct{})
}
func (x *RecursiveEnsureStruct) GetNodes() map[string]*Recursive {
    return x.Nodes
}

func (x *RecursiveEnsureStruct) SetNodes(nodes map[string]*Recursive) *RecursiveEnsureStruct {
    x.Nodes = nodes
    return x
}

func (x *RecursiveEnsureStruct) IsSetNodes() bool {
    return x.Nodes != nil
}

func (x *RecursiveEnsureStruct) writeField_1(p thrift.Protocol) error {  // Nodes
    if !x.IsSetNodes() {
        return nil
    }

    if err := p.WriteFieldBegin("nodes", thrift.MAP, -1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetNodes()
    if err := p.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := item.Write(p); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RecursiveEnsureStruct) readField_1(p thrift.Protocol) error {  // Nodes
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]*Recursive, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value *Recursive
    {
        result := *NewRecursive()
err := result.Read(p)
if err != nil {
    return err
}
        value = &result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetNodes(result)
    return nil
}


// Deprecated: Use RecursiveEnsureStruct.Set* methods instead or set the fields directly.
type RecursiveEnsureStructBuilder struct {
    obj *RecursiveEnsureStruct
}

func NewRecursiveEnsureStructBuilder() *RecursiveEnsureStructBuilder {
    return &RecursiveEnsureStructBuilder{
        obj: NewRecursiveEnsureStruct(),
    }
}

func (x *RecursiveEnsureStructBuilder) Nodes(nodes map[string]*Recursive) *RecursiveEnsureStructBuilder {
    x.obj.Nodes = nodes
    return x
}

func (x *RecursiveEnsureStructBuilder) Emit() *RecursiveEnsureStruct {
    var objCopy RecursiveEnsureStruct = *x.obj
    return &objCopy
}

func (x *RecursiveEnsureStruct) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("RecursiveEnsureStruct"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField_1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *RecursiveEnsureStruct) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case -1:  // nodes
            if err := x.readField_1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type RecursiveField1Patch struct {
    Assign map[string]*Recursive `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
}
// Compile time interface enforcer
var _ thrift.Struct = &RecursiveField1Patch{}

func NewRecursiveField1Patch() *RecursiveField1Patch {
    return (&RecursiveField1Patch{})
}
func (x *RecursiveField1Patch) GetAssign() map[string]*Recursive {
    return x.Assign
}

func (x *RecursiveField1Patch) GetClear() bool {
    return x.Clear
}

func (x *RecursiveField1Patch) SetAssign(assign map[string]*Recursive) *RecursiveField1Patch {
    x.Assign = assign
    return x
}

func (x *RecursiveField1Patch) SetClear(clear bool) *RecursiveField1Patch {
    x.Clear = clear
    return x
}

func (x *RecursiveField1Patch) IsSetAssign() bool {
    return x.Assign != nil
}


func (x *RecursiveField1Patch) writeField1(p thrift.Protocol) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.MAP, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetAssign()
    if err := p.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(item)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
}
for k, v := range item {
    {
        item := k
        if err := p.WriteString(item); err != nil {
    return err
}
    }

    {
        item := v
        if err := item.Write(p); err != nil {
    return err
}
    }
}
if err := p.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RecursiveField1Patch) writeField2(p thrift.Protocol) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetClear()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RecursiveField1Patch) readField1(p thrift.Protocol) error {  // Assign
    _ /* keyType */, _ /* valueType */, size, err := p.ReadMapBegin()
if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
}

mapResult := make(map[string]*Recursive, size)
for i := 0; i < size; i++ {
    var key string
    {
        result, err := p.ReadString()
if err != nil {
    return err
}
        key = result
    }

    var value *Recursive
    {
        result := *NewRecursive()
err := result.Read(p)
if err != nil {
    return err
}
        value = &result
    }

    mapResult[key] = value
}

if err := p.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
}
result := mapResult

    x.SetAssign(result)
    return nil
}

func (x *RecursiveField1Patch) readField2(p thrift.Protocol) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetClear(result)
    return nil
}


// Deprecated: Use RecursiveField1Patch.Set* methods instead or set the fields directly.
type RecursiveField1PatchBuilder struct {
    obj *RecursiveField1Patch
}

func NewRecursiveField1PatchBuilder() *RecursiveField1PatchBuilder {
    return &RecursiveField1PatchBuilder{
        obj: NewRecursiveField1Patch(),
    }
}

func (x *RecursiveField1PatchBuilder) Assign(assign map[string]*Recursive) *RecursiveField1PatchBuilder {
    x.obj.Assign = assign
    return x
}

func (x *RecursiveField1PatchBuilder) Clear(clear bool) *RecursiveField1PatchBuilder {
    x.obj.Clear = clear
    return x
}

func (x *RecursiveField1PatchBuilder) Emit() *RecursiveField1Patch {
    var objCopy RecursiveField1Patch = *x.obj
    return &objCopy
}

func (x *RecursiveField1Patch) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("RecursiveField1Patch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *RecursiveField1Patch) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type RecursiveFieldPatch struct {
    Nodes *RecursiveField1Patch `thrift:"nodes,-1" json:"nodes" db:"nodes"`
}
// Compile time interface enforcer
var _ thrift.Struct = &RecursiveFieldPatch{}

func NewRecursiveFieldPatch() *RecursiveFieldPatch {
    return (&RecursiveFieldPatch{})
}
func (x *RecursiveFieldPatch) GetNodes() *RecursiveField1Patch {
    return x.Nodes
}

func (x *RecursiveFieldPatch) SetNodes(nodes RecursiveField1Patch) *RecursiveFieldPatch {
    x.Nodes = &nodes
    return x
}

func (x *RecursiveFieldPatch) IsSetNodes() bool {
    return x.Nodes != nil
}

func (x *RecursiveFieldPatch) writeField_1(p thrift.Protocol) error {  // Nodes
    if !x.IsSetNodes() {
        return nil
    }

    if err := p.WriteFieldBegin("nodes", thrift.STRUCT, -1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetNodes()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RecursiveFieldPatch) readField_1(p thrift.Protocol) error {  // Nodes
    result := *NewRecursiveField1Patch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetNodes(result)
    return nil
}


// Deprecated: Use RecursiveFieldPatch.Set* methods instead or set the fields directly.
type RecursiveFieldPatchBuilder struct {
    obj *RecursiveFieldPatch
}

func NewRecursiveFieldPatchBuilder() *RecursiveFieldPatchBuilder {
    return &RecursiveFieldPatchBuilder{
        obj: NewRecursiveFieldPatch(),
    }
}

func (x *RecursiveFieldPatchBuilder) Nodes(nodes *RecursiveField1Patch) *RecursiveFieldPatchBuilder {
    x.obj.Nodes = nodes
    return x
}

func (x *RecursiveFieldPatchBuilder) Emit() *RecursiveFieldPatch {
    var objCopy RecursiveFieldPatch = *x.obj
    return &objCopy
}

func (x *RecursiveFieldPatch) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("RecursiveFieldPatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField_1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *RecursiveFieldPatch) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case -1:  // nodes
            if err := x.readField_1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type RecursivePatch struct {
    Assign *Recursive `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
    PatchPrior *RecursiveFieldPatch `thrift:"patchPrior,3" json:"patchPrior" db:"patchPrior"`
    Ensure *RecursiveEnsureStruct `thrift:"ensure,5" json:"ensure" db:"ensure"`
    Patch *RecursiveFieldPatch `thrift:"patch,6" json:"patch" db:"patch"`
}
// Compile time interface enforcer
var _ thrift.Struct = &RecursivePatch{}

func NewRecursivePatch() *RecursivePatch {
    return (&RecursivePatch{})
}
func (x *RecursivePatch) GetAssign() *Recursive {
    return x.Assign
}

func (x *RecursivePatch) GetClear() bool {
    return x.Clear
}

func (x *RecursivePatch) GetPatchPrior() *RecursiveFieldPatch {
    return x.PatchPrior
}

func (x *RecursivePatch) GetEnsure() *RecursiveEnsureStruct {
    return x.Ensure
}

func (x *RecursivePatch) GetPatch() *RecursiveFieldPatch {
    return x.Patch
}

func (x *RecursivePatch) SetAssign(assign Recursive) *RecursivePatch {
    x.Assign = &assign
    return x
}

func (x *RecursivePatch) SetClear(clear bool) *RecursivePatch {
    x.Clear = clear
    return x
}

func (x *RecursivePatch) SetPatchPrior(patchPrior RecursiveFieldPatch) *RecursivePatch {
    x.PatchPrior = &patchPrior
    return x
}

func (x *RecursivePatch) SetEnsure(ensure RecursiveEnsureStruct) *RecursivePatch {
    x.Ensure = &ensure
    return x
}

func (x *RecursivePatch) SetPatch(patch RecursiveFieldPatch) *RecursivePatch {
    x.Patch = &patch
    return x
}

func (x *RecursivePatch) IsSetAssign() bool {
    return x.Assign != nil
}


func (x *RecursivePatch) IsSetPatchPrior() bool {
    return x.PatchPrior != nil
}

func (x *RecursivePatch) IsSetEnsure() bool {
    return x.Ensure != nil
}

func (x *RecursivePatch) IsSetPatch() bool {
    return x.Patch != nil
}

func (x *RecursivePatch) writeField1(p thrift.Protocol) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetAssign()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RecursivePatch) writeField2(p thrift.Protocol) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetClear()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RecursivePatch) writeField3(p thrift.Protocol) error {  // PatchPrior
    if !x.IsSetPatchPrior() {
        return nil
    }

    if err := p.WriteFieldBegin("patchPrior", thrift.STRUCT, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetPatchPrior()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RecursivePatch) writeField5(p thrift.Protocol) error {  // Ensure
    if !x.IsSetEnsure() {
        return nil
    }

    if err := p.WriteFieldBegin("ensure", thrift.STRUCT, 5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetEnsure()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RecursivePatch) writeField6(p thrift.Protocol) error {  // Patch
    if !x.IsSetPatch() {
        return nil
    }

    if err := p.WriteFieldBegin("patch", thrift.STRUCT, 6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetPatch()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *RecursivePatch) readField1(p thrift.Protocol) error {  // Assign
    result := *NewRecursive()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetAssign(result)
    return nil
}

func (x *RecursivePatch) readField2(p thrift.Protocol) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetClear(result)
    return nil
}

func (x *RecursivePatch) readField3(p thrift.Protocol) error {  // PatchPrior
    result := *NewRecursiveFieldPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetPatchPrior(result)
    return nil
}

func (x *RecursivePatch) readField5(p thrift.Protocol) error {  // Ensure
    result := *NewRecursiveEnsureStruct()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetEnsure(result)
    return nil
}

func (x *RecursivePatch) readField6(p thrift.Protocol) error {  // Patch
    result := *NewRecursiveFieldPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetPatch(result)
    return nil
}


// Deprecated: Use RecursivePatch.Set* methods instead or set the fields directly.
type RecursivePatchBuilder struct {
    obj *RecursivePatch
}

func NewRecursivePatchBuilder() *RecursivePatchBuilder {
    return &RecursivePatchBuilder{
        obj: NewRecursivePatch(),
    }
}

func (x *RecursivePatchBuilder) Assign(assign *Recursive) *RecursivePatchBuilder {
    x.obj.Assign = assign
    return x
}

func (x *RecursivePatchBuilder) Clear(clear bool) *RecursivePatchBuilder {
    x.obj.Clear = clear
    return x
}

func (x *RecursivePatchBuilder) PatchPrior(patchPrior *RecursiveFieldPatch) *RecursivePatchBuilder {
    x.obj.PatchPrior = patchPrior
    return x
}

func (x *RecursivePatchBuilder) Ensure(ensure *RecursiveEnsureStruct) *RecursivePatchBuilder {
    x.obj.Ensure = ensure
    return x
}

func (x *RecursivePatchBuilder) Patch(patch *RecursiveFieldPatch) *RecursivePatchBuilder {
    x.obj.Patch = patch
    return x
}

func (x *RecursivePatchBuilder) Emit() *RecursivePatch {
    var objCopy RecursivePatch = *x.obj
    return &objCopy
}

func (x *RecursivePatch) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("RecursivePatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField5(p); err != nil {
        return err
    }

    if err := x.writeField6(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *RecursivePatch) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        case 3:  // patchPrior
            if err := x.readField3(p); err != nil {
                return err
            }
        case 5:  // ensure
            if err := x.readField5(p); err != nil {
                return err
            }
        case 6:  // patch
            if err := x.readField6(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type BarEnsureStruct struct {
    Loop *Loop `thrift:"loop,-1,optional" json:"loop,omitempty" db:"loop"`
}
// Compile time interface enforcer
var _ thrift.Struct = &BarEnsureStruct{}

func NewBarEnsureStruct() *BarEnsureStruct {
    return (&BarEnsureStruct{})
}
func (x *BarEnsureStruct) GetLoop() *Loop {
    return x.Loop
}

func (x *BarEnsureStruct) SetLoop(loop Loop) *BarEnsureStruct {
    x.Loop = &loop
    return x
}

func (x *BarEnsureStruct) IsSetLoop() bool {
    return x.Loop != nil
}

func (x *BarEnsureStruct) writeField_1(p thrift.Protocol) error {  // Loop
    if !x.IsSetLoop() {
        return nil
    }

    if err := p.WriteFieldBegin("loop", thrift.STRUCT, -1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetLoop()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *BarEnsureStruct) readField_1(p thrift.Protocol) error {  // Loop
    result := *NewLoop()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetLoop(result)
    return nil
}


// Deprecated: Use BarEnsureStruct.Set* methods instead or set the fields directly.
type BarEnsureStructBuilder struct {
    obj *BarEnsureStruct
}

func NewBarEnsureStructBuilder() *BarEnsureStructBuilder {
    return &BarEnsureStructBuilder{
        obj: NewBarEnsureStruct(),
    }
}

func (x *BarEnsureStructBuilder) Loop(loop *Loop) *BarEnsureStructBuilder {
    x.obj.Loop = loop
    return x
}

func (x *BarEnsureStructBuilder) Emit() *BarEnsureStruct {
    var objCopy BarEnsureStruct = *x.obj
    return &objCopy
}

func (x *BarEnsureStruct) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("BarEnsureStruct"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField_1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *BarEnsureStruct) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case -1:  // loop
            if err := x.readField_1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type BarFieldPatch struct {
    Loop *LoopPatch `thrift:"loop,-1" json:"loop" db:"loop"`
}
// Compile time interface enforcer
var _ thrift.Struct = &BarFieldPatch{}

func NewBarFieldPatch() *BarFieldPatch {
    return (&BarFieldPatch{})
}
func (x *BarFieldPatch) GetLoop() *LoopPatch {
    return x.Loop
}

func (x *BarFieldPatch) SetLoop(loop LoopPatch) *BarFieldPatch {
    x.Loop = &loop
    return x
}

func (x *BarFieldPatch) IsSetLoop() bool {
    return x.Loop != nil
}

func (x *BarFieldPatch) writeField_1(p thrift.Protocol) error {  // Loop
    if !x.IsSetLoop() {
        return nil
    }

    if err := p.WriteFieldBegin("loop", thrift.STRUCT, -1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetLoop()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *BarFieldPatch) readField_1(p thrift.Protocol) error {  // Loop
    result := *NewLoopPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetLoop(result)
    return nil
}


// Deprecated: Use BarFieldPatch.Set* methods instead or set the fields directly.
type BarFieldPatchBuilder struct {
    obj *BarFieldPatch
}

func NewBarFieldPatchBuilder() *BarFieldPatchBuilder {
    return &BarFieldPatchBuilder{
        obj: NewBarFieldPatch(),
    }
}

func (x *BarFieldPatchBuilder) Loop(loop *LoopPatch) *BarFieldPatchBuilder {
    x.obj.Loop = loop
    return x
}

func (x *BarFieldPatchBuilder) Emit() *BarFieldPatch {
    var objCopy BarFieldPatch = *x.obj
    return &objCopy
}

func (x *BarFieldPatch) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("BarFieldPatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField_1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *BarFieldPatch) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case -1:  // loop
            if err := x.readField_1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type BarPatch struct {
    Assign *Bar `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
    PatchPrior *BarFieldPatch `thrift:"patchPrior,3" json:"patchPrior" db:"patchPrior"`
    Ensure *BarEnsureStruct `thrift:"ensure,5" json:"ensure" db:"ensure"`
    Patch *BarFieldPatch `thrift:"patch,6" json:"patch" db:"patch"`
}
// Compile time interface enforcer
var _ thrift.Struct = &BarPatch{}

func NewBarPatch() *BarPatch {
    return (&BarPatch{})
}
func (x *BarPatch) GetAssign() *Bar {
    return x.Assign
}

func (x *BarPatch) GetClear() bool {
    return x.Clear
}

func (x *BarPatch) GetPatchPrior() *BarFieldPatch {
    return x.PatchPrior
}

func (x *BarPatch) GetEnsure() *BarEnsureStruct {
    return x.Ensure
}

func (x *BarPatch) GetPatch() *BarFieldPatch {
    return x.Patch
}

func (x *BarPatch) SetAssign(assign Bar) *BarPatch {
    x.Assign = &assign
    return x
}

func (x *BarPatch) SetClear(clear bool) *BarPatch {
    x.Clear = clear
    return x
}

func (x *BarPatch) SetPatchPrior(patchPrior BarFieldPatch) *BarPatch {
    x.PatchPrior = &patchPrior
    return x
}

func (x *BarPatch) SetEnsure(ensure BarEnsureStruct) *BarPatch {
    x.Ensure = &ensure
    return x
}

func (x *BarPatch) SetPatch(patch BarFieldPatch) *BarPatch {
    x.Patch = &patch
    return x
}

func (x *BarPatch) IsSetAssign() bool {
    return x.Assign != nil
}


func (x *BarPatch) IsSetPatchPrior() bool {
    return x.PatchPrior != nil
}

func (x *BarPatch) IsSetEnsure() bool {
    return x.Ensure != nil
}

func (x *BarPatch) IsSetPatch() bool {
    return x.Patch != nil
}

func (x *BarPatch) writeField1(p thrift.Protocol) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetAssign()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *BarPatch) writeField2(p thrift.Protocol) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetClear()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *BarPatch) writeField3(p thrift.Protocol) error {  // PatchPrior
    if !x.IsSetPatchPrior() {
        return nil
    }

    if err := p.WriteFieldBegin("patchPrior", thrift.STRUCT, 3); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetPatchPrior()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *BarPatch) writeField5(p thrift.Protocol) error {  // Ensure
    if !x.IsSetEnsure() {
        return nil
    }

    if err := p.WriteFieldBegin("ensure", thrift.STRUCT, 5); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetEnsure()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *BarPatch) writeField6(p thrift.Protocol) error {  // Patch
    if !x.IsSetPatch() {
        return nil
    }

    if err := p.WriteFieldBegin("patch", thrift.STRUCT, 6); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetPatch()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *BarPatch) readField1(p thrift.Protocol) error {  // Assign
    result := *NewBar()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetAssign(result)
    return nil
}

func (x *BarPatch) readField2(p thrift.Protocol) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetClear(result)
    return nil
}

func (x *BarPatch) readField3(p thrift.Protocol) error {  // PatchPrior
    result := *NewBarFieldPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetPatchPrior(result)
    return nil
}

func (x *BarPatch) readField5(p thrift.Protocol) error {  // Ensure
    result := *NewBarEnsureStruct()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetEnsure(result)
    return nil
}

func (x *BarPatch) readField6(p thrift.Protocol) error {  // Patch
    result := *NewBarFieldPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetPatch(result)
    return nil
}


// Deprecated: Use BarPatch.Set* methods instead or set the fields directly.
type BarPatchBuilder struct {
    obj *BarPatch
}

func NewBarPatchBuilder() *BarPatchBuilder {
    return &BarPatchBuilder{
        obj: NewBarPatch(),
    }
}

func (x *BarPatchBuilder) Assign(assign *Bar) *BarPatchBuilder {
    x.obj.Assign = assign
    return x
}

func (x *BarPatchBuilder) Clear(clear bool) *BarPatchBuilder {
    x.obj.Clear = clear
    return x
}

func (x *BarPatchBuilder) PatchPrior(patchPrior *BarFieldPatch) *BarPatchBuilder {
    x.obj.PatchPrior = patchPrior
    return x
}

func (x *BarPatchBuilder) Ensure(ensure *BarEnsureStruct) *BarPatchBuilder {
    x.obj.Ensure = ensure
    return x
}

func (x *BarPatchBuilder) Patch(patch *BarFieldPatch) *BarPatchBuilder {
    x.obj.Patch = patch
    return x
}

func (x *BarPatchBuilder) Emit() *BarPatch {
    var objCopy BarPatch = *x.obj
    return &objCopy
}

func (x *BarPatch) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("BarPatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := x.writeField3(p); err != nil {
        return err
    }

    if err := x.writeField5(p); err != nil {
        return err
    }

    if err := x.writeField6(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *BarPatch) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        case 3:  // patchPrior
            if err := x.readField3(p); err != nil {
                return err
            }
        case 5:  // ensure
            if err := x.readField5(p); err != nil {
                return err
            }
        case 6:  // patch
            if err := x.readField6(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type LoopEnsureStruct struct {
    Bar *Bar `thrift:"bar,-1,optional" json:"bar,omitempty" db:"bar"`
}
// Compile time interface enforcer
var _ thrift.Struct = &LoopEnsureStruct{}

func NewLoopEnsureStruct() *LoopEnsureStruct {
    return (&LoopEnsureStruct{})
}
func (x *LoopEnsureStruct) GetBar() *Bar {
    return x.Bar
}

func (x *LoopEnsureStruct) SetBar(bar Bar) *LoopEnsureStruct {
    x.Bar = &bar
    return x
}

func (x *LoopEnsureStruct) IsSetBar() bool {
    return x.Bar != nil
}

func (x *LoopEnsureStruct) writeField_1(p thrift.Protocol) error {  // Bar
    if !x.IsSetBar() {
        return nil
    }

    if err := p.WriteFieldBegin("bar", thrift.STRUCT, -1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetBar()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *LoopEnsureStruct) readField_1(p thrift.Protocol) error {  // Bar
    result := *NewBar()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetBar(result)
    return nil
}


// Deprecated: Use LoopEnsureStruct.Set* methods instead or set the fields directly.
type LoopEnsureStructBuilder struct {
    obj *LoopEnsureStruct
}

func NewLoopEnsureStructBuilder() *LoopEnsureStructBuilder {
    return &LoopEnsureStructBuilder{
        obj: NewLoopEnsureStruct(),
    }
}

func (x *LoopEnsureStructBuilder) Bar(bar *Bar) *LoopEnsureStructBuilder {
    x.obj.Bar = bar
    return x
}

func (x *LoopEnsureStructBuilder) Emit() *LoopEnsureStruct {
    var objCopy LoopEnsureStruct = *x.obj
    return &objCopy
}

func (x *LoopEnsureStruct) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("LoopEnsureStruct"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField_1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *LoopEnsureStruct) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case -1:  // bar
            if err := x.readField_1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type LoopFieldPatch struct {
    Bar *BarPatch `thrift:"bar,-1" json:"bar" db:"bar"`
}
// Compile time interface enforcer
var _ thrift.Struct = &LoopFieldPatch{}

func NewLoopFieldPatch() *LoopFieldPatch {
    return (&LoopFieldPatch{})
}
func (x *LoopFieldPatch) GetBar() *BarPatch {
    return x.Bar
}

func (x *LoopFieldPatch) SetBar(bar BarPatch) *LoopFieldPatch {
    x.Bar = &bar
    return x
}

func (x *LoopFieldPatch) IsSetBar() bool {
    return x.Bar != nil
}

func (x *LoopFieldPatch) writeField_1(p thrift.Protocol) error {  // Bar
    if !x.IsSetBar() {
        return nil
    }

    if err := p.WriteFieldBegin("bar", thrift.STRUCT, -1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetBar()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *LoopFieldPatch) readField_1(p thrift.Protocol) error {  // Bar
    result := *NewBarPatch()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetBar(result)
    return nil
}


// Deprecated: Use LoopFieldPatch.Set* methods instead or set the fields directly.
type LoopFieldPatchBuilder struct {
    obj *LoopFieldPatch
}

func NewLoopFieldPatchBuilder() *LoopFieldPatchBuilder {
    return &LoopFieldPatchBuilder{
        obj: NewLoopFieldPatch(),
    }
}

func (x *LoopFieldPatchBuilder) Bar(bar *BarPatch) *LoopFieldPatchBuilder {
    x.obj.Bar = bar
    return x
}

func (x *LoopFieldPatchBuilder) Emit() *LoopFieldPatch {
    var objCopy LoopFieldPatch = *x.obj
    return &objCopy
}

func (x *LoopFieldPatch) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("LoopFieldPatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField_1(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *LoopFieldPatch) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case -1:  // bar
            if err := x.readField_1(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}

type LoopPatch struct {
    Assign *Loop `thrift:"assign,1,optional" json:"assign,omitempty" db:"assign"`
    Clear bool `thrift:"clear,2" json:"clear" db:"clear"`
}
// Compile time interface enforcer
var _ thrift.Struct = &LoopPatch{}

func NewLoopPatch() *LoopPatch {
    return (&LoopPatch{})
}
func (x *LoopPatch) GetAssign() *Loop {
    return x.Assign
}

func (x *LoopPatch) GetClear() bool {
    return x.Clear
}

func (x *LoopPatch) SetAssign(assign Loop) *LoopPatch {
    x.Assign = &assign
    return x
}

func (x *LoopPatch) SetClear(clear bool) *LoopPatch {
    x.Clear = clear
    return x
}

func (x *LoopPatch) IsSetAssign() bool {
    return x.Assign != nil
}


func (x *LoopPatch) writeField1(p thrift.Protocol) error {  // Assign
    if !x.IsSetAssign() {
        return nil
    }

    if err := p.WriteFieldBegin("assign", thrift.STRUCT, 1); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := *x.GetAssign()
    if err := item.Write(p); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *LoopPatch) writeField2(p thrift.Protocol) error {  // Clear
    if err := p.WriteFieldBegin("clear", thrift.BOOL, 2); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field begin error: ", x), err)
    }

    item := x.GetClear()
    if err := p.WriteBool(item); err != nil {
    return err
}

    if err := p.WriteFieldEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field end error: ", x), err)
    }
    return nil
}

func (x *LoopPatch) readField1(p thrift.Protocol) error {  // Assign
    result := *NewLoop()
err := result.Read(p)
if err != nil {
    return err
}

    x.SetAssign(result)
    return nil
}

func (x *LoopPatch) readField2(p thrift.Protocol) error {  // Clear
    result, err := p.ReadBool()
if err != nil {
    return err
}

    x.SetClear(result)
    return nil
}


// Deprecated: Use LoopPatch.Set* methods instead or set the fields directly.
type LoopPatchBuilder struct {
    obj *LoopPatch
}

func NewLoopPatchBuilder() *LoopPatchBuilder {
    return &LoopPatchBuilder{
        obj: NewLoopPatch(),
    }
}

func (x *LoopPatchBuilder) Assign(assign *Loop) *LoopPatchBuilder {
    x.obj.Assign = assign
    return x
}

func (x *LoopPatchBuilder) Clear(clear bool) *LoopPatchBuilder {
    x.obj.Clear = clear
    return x
}

func (x *LoopPatchBuilder) Emit() *LoopPatch {
    var objCopy LoopPatch = *x.obj
    return &objCopy
}

func (x *LoopPatch) Write(p thrift.Protocol) error {
    if err := p.WriteStructBegin("LoopPatch"); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", x), err)
    }

    if err := x.writeField1(p); err != nil {
        return err
    }

    if err := x.writeField2(p); err != nil {
        return err
    }

    if err := p.WriteFieldStop(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", x), err)
    }

    if err := p.WriteStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", x), err)
    }
    return nil
}

func (x *LoopPatch) Read(p thrift.Protocol) error {
    if _, err := p.ReadStructBegin(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read error: ", x), err)
    }

    for {
        _, typ, id, err := p.ReadFieldBegin()
        if err != nil {
            return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", x, id), err)
        }

        if typ == thrift.STOP {
            break;
        }

        switch id {
        case 1:  // assign
            if err := x.readField1(p); err != nil {
                return err
            }
        case 2:  // clear
            if err := x.readField2(p); err != nil {
                return err
            }
        default:
            if err := p.Skip(typ); err != nil {
                return err
            }
        }

        if err := p.ReadFieldEnd(); err != nil {
            return err
        }
    }

    if err := p.ReadStructEnd(); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", x), err)
    }

    return nil
}
