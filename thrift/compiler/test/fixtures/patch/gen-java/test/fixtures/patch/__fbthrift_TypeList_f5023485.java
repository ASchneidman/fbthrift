/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.patch;

import com.facebook.thrift.type.TypeList;
import java.util.ArrayList;
import java.util.List;

public class __fbthrift_TypeList_f5023485 implements TypeList {

  private static List<TypeMapping> list = new ArrayList<>();

  static {
    list.add(new TypeList.TypeMapping("test.dev/fixtures/patch/MyData", "test.fixtures.patch.MyData"));
    list.add(new TypeList.TypeMapping("test.dev/fixtures/patch/MyDataWithCustomDefault", "test.fixtures.patch.MyDataWithCustomDefault"));
    list.add(new TypeList.TypeMapping("test.dev/fixtures/patch/InnerUnion", "test.fixtures.patch.InnerUnion"));
    list.add(new TypeList.TypeMapping("test.dev/fixtures/patch/MyUnion", "test.fixtures.patch.MyUnion"));
    list.add(new TypeList.TypeMapping("test.dev/fixtures/patch/MyStruct", "test.fixtures.patch.MyStruct"));
    list.add(new TypeList.TypeMapping("test.dev/fixtures/patch/LateDefStruct", "test.fixtures.patch.LateDefStruct"));
    list.add(new TypeList.TypeMapping("test.dev/fixtures/patch/Recursive", "test.fixtures.patch.Recursive"));
    list.add(new TypeList.TypeMapping("test.dev/fixtures/patch/Bar", "test.fixtures.patch.Bar"));
    list.add(new TypeList.TypeMapping("test.dev/fixtures/patch/Loop", "test.fixtures.patch.Loop"));
    list.add(new TypeList.TypeMapping("test.dev/fixtures/patch/MyDataEnsureStruct", "test.fixtures.patch.MyDataEnsureStruct"));
    list.add(new TypeList.TypeMapping("test.dev/fixtures/patch/MyDataFieldPatch", "test.fixtures.patch.MyDataFieldPatch"));
    list.add(new TypeList.TypeMapping("test.dev/fixtures/patch/MyDataPatch", "test.fixtures.patch.MyDataPatch"));
    list.add(new TypeList.TypeMapping("test.dev/fixtures/patch/MyDataWithCustomDefaultEnsureStruct", "test.fixtures.patch.MyDataWithCustomDefaultEnsureStruct"));
    list.add(new TypeList.TypeMapping("test.dev/fixtures/patch/MyDataWithCustomDefaultFieldPatch", "test.fixtures.patch.MyDataWithCustomDefaultFieldPatch"));
    list.add(new TypeList.TypeMapping("test.dev/fixtures/patch/MyDataWithCustomDefaultPatch", "test.fixtures.patch.MyDataWithCustomDefaultPatch"));
    list.add(new TypeList.TypeMapping("test.dev/fixtures/patch/InnerUnionFieldPatch", "test.fixtures.patch.InnerUnionFieldPatch"));
    list.add(new TypeList.TypeMapping("test.dev/fixtures/patch/InnerUnionPatch", "test.fixtures.patch.InnerUnionPatch"));
    list.add(new TypeList.TypeMapping("test.dev/fixtures/patch/MyUnionFieldPatch", "test.fixtures.patch.MyUnionFieldPatch"));
    list.add(new TypeList.TypeMapping("test.dev/fixtures/patch/MyUnionPatch", "test.fixtures.patch.MyUnionPatch"));
    list.add(new TypeList.TypeMapping("test.dev/fixtures/patch/MyStructEnsureStruct", "test.fixtures.patch.MyStructEnsureStruct"));
    list.add(new TypeList.TypeMapping("test.dev/fixtures/patch/MyStructField10Patch", "test.fixtures.patch.MyStructField10Patch"));
    list.add(new TypeList.TypeMapping("test.dev/fixtures/patch/MyStructField23Patch", "test.fixtures.patch.MyStructField23Patch"));
    list.add(new TypeList.TypeMapping("test.dev/fixtures/patch/MyStructField26Patch", "test.fixtures.patch.MyStructField26Patch"));
    list.add(new TypeList.TypeMapping("test.dev/fixtures/patch/MyStructField27Patch", "test.fixtures.patch.MyStructField27Patch"));
    list.add(new TypeList.TypeMapping("test.dev/fixtures/patch/MyStructField28Patch", "test.fixtures.patch.MyStructField28Patch"));
    list.add(new TypeList.TypeMapping("test.dev/fixtures/patch/MyStructField29Patch", "test.fixtures.patch.MyStructField29Patch"));
    list.add(new TypeList.TypeMapping("test.dev/fixtures/patch/MyStructField29Patch1", "test.fixtures.patch.MyStructField29Patch1"));
    list.add(new TypeList.TypeMapping("test.dev/fixtures/patch/MyStructField30Patch", "test.fixtures.patch.MyStructField30Patch"));
    list.add(new TypeList.TypeMapping("test.dev/fixtures/patch/MyStructField30Patch1", "test.fixtures.patch.MyStructField30Patch1"));
    list.add(new TypeList.TypeMapping("test.dev/fixtures/patch/MyStructFieldPatch", "test.fixtures.patch.MyStructFieldPatch"));
    list.add(new TypeList.TypeMapping("test.dev/fixtures/patch/MyStructPatch", "test.fixtures.patch.MyStructPatch"));
    list.add(new TypeList.TypeMapping("test.dev/fixtures/patch/LateDefStructEnsureStruct", "test.fixtures.patch.LateDefStructEnsureStruct"));
    list.add(new TypeList.TypeMapping("test.dev/fixtures/patch/LateDefStructFieldPatch", "test.fixtures.patch.LateDefStructFieldPatch"));
    list.add(new TypeList.TypeMapping("test.dev/fixtures/patch/LateDefStructPatch", "test.fixtures.patch.LateDefStructPatch"));
    list.add(new TypeList.TypeMapping("test.dev/fixtures/patch/RecursiveEnsureStruct", "test.fixtures.patch.RecursiveEnsureStruct"));
    list.add(new TypeList.TypeMapping("test.dev/fixtures/patch/RecursiveField1Patch", "test.fixtures.patch.RecursiveField1Patch"));
    list.add(new TypeList.TypeMapping("test.dev/fixtures/patch/RecursiveFieldPatch", "test.fixtures.patch.RecursiveFieldPatch"));
    list.add(new TypeList.TypeMapping("test.dev/fixtures/patch/RecursivePatch", "test.fixtures.patch.RecursivePatch"));
    list.add(new TypeList.TypeMapping("test.dev/fixtures/patch/BarEnsureStruct", "test.fixtures.patch.BarEnsureStruct"));
    list.add(new TypeList.TypeMapping("test.dev/fixtures/patch/BarFieldPatch", "test.fixtures.patch.BarFieldPatch"));
    list.add(new TypeList.TypeMapping("test.dev/fixtures/patch/BarPatch", "test.fixtures.patch.BarPatch"));
    list.add(new TypeList.TypeMapping("test.dev/fixtures/patch/LoopEnsureStruct", "test.fixtures.patch.LoopEnsureStruct"));
    list.add(new TypeList.TypeMapping("test.dev/fixtures/patch/LoopFieldPatch", "test.fixtures.patch.LoopFieldPatch"));
    list.add(new TypeList.TypeMapping("test.dev/fixtures/patch/LoopPatch", "test.fixtures.patch.LoopPatch"));
    list.add(new TypeList.TypeMapping("test.dev/fixtures/patch/MyEnum", "test.fixtures.patch.MyEnum"));
  }

  @java.lang.Override
  public List<TypeList.TypeMapping> getTypes() {
    return list;
  }
}
