/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package test.fixtures.patch;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class MyStructPatch implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("MyStructPatch");
  private static final TField BOOL_VAL_FIELD_DESC = new TField("boolVal", TType.STRUCT, (short)1);
  private static final TField BYTE_VAL_FIELD_DESC = new TField("byteVal", TType.STRUCT, (short)2);
  private static final TField I16_VAL_FIELD_DESC = new TField("i16Val", TType.STRUCT, (short)3);
  private static final TField I32_VAL_FIELD_DESC = new TField("i32Val", TType.STRUCT, (short)4);
  private static final TField I64_VAL_FIELD_DESC = new TField("i64Val", TType.STRUCT, (short)5);
  private static final TField FLOAT_VAL_FIELD_DESC = new TField("floatVal", TType.STRUCT, (short)6);
  private static final TField DOUBLE_VAL_FIELD_DESC = new TField("doubleVal", TType.STRUCT, (short)7);
  private static final TField STRING_VAL_FIELD_DESC = new TField("stringVal", TType.STRUCT, (short)8);
  private static final TField BINARY_VAL_FIELD_DESC = new TField("binaryVal", TType.STRUCT, (short)9);

  public final BoolPatch boolVal;
  public final BytePatch byteVal;
  public final I16Patch i16Val;
  public final I32Patch i32Val;
  public final I64Patch i64Val;
  public final FloatPatch floatVal;
  public final DoublePatch doubleVal;
  public final StringPatch stringVal;
  public final BinaryPatch binaryVal;
  public static final int BOOLVAL = 1;
  public static final int BYTEVAL = 2;
  public static final int I16VAL = 3;
  public static final int I32VAL = 4;
  public static final int I64VAL = 5;
  public static final int FLOATVAL = 6;
  public static final int DOUBLEVAL = 7;
  public static final int STRINGVAL = 8;
  public static final int BINARYVAL = 9;

  public MyStructPatch(
      BoolPatch boolVal,
      BytePatch byteVal,
      I16Patch i16Val,
      I32Patch i32Val,
      I64Patch i64Val,
      FloatPatch floatVal,
      DoublePatch doubleVal,
      StringPatch stringVal,
      BinaryPatch binaryVal) {
    this.boolVal = boolVal;
    this.byteVal = byteVal;
    this.i16Val = i16Val;
    this.i32Val = i32Val;
    this.i64Val = i64Val;
    this.floatVal = floatVal;
    this.doubleVal = doubleVal;
    this.stringVal = stringVal;
    this.binaryVal = binaryVal;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MyStructPatch(MyStructPatch other) {
    if (other.isSetBoolVal()) {
      this.boolVal = TBaseHelper.deepCopy(other.boolVal);
    } else {
      this.boolVal = null;
    }
    if (other.isSetByteVal()) {
      this.byteVal = TBaseHelper.deepCopy(other.byteVal);
    } else {
      this.byteVal = null;
    }
    if (other.isSetI16Val()) {
      this.i16Val = TBaseHelper.deepCopy(other.i16Val);
    } else {
      this.i16Val = null;
    }
    if (other.isSetI32Val()) {
      this.i32Val = TBaseHelper.deepCopy(other.i32Val);
    } else {
      this.i32Val = null;
    }
    if (other.isSetI64Val()) {
      this.i64Val = TBaseHelper.deepCopy(other.i64Val);
    } else {
      this.i64Val = null;
    }
    if (other.isSetFloatVal()) {
      this.floatVal = TBaseHelper.deepCopy(other.floatVal);
    } else {
      this.floatVal = null;
    }
    if (other.isSetDoubleVal()) {
      this.doubleVal = TBaseHelper.deepCopy(other.doubleVal);
    } else {
      this.doubleVal = null;
    }
    if (other.isSetStringVal()) {
      this.stringVal = TBaseHelper.deepCopy(other.stringVal);
    } else {
      this.stringVal = null;
    }
    if (other.isSetBinaryVal()) {
      this.binaryVal = TBaseHelper.deepCopy(other.binaryVal);
    } else {
      this.binaryVal = null;
    }
  }

  public MyStructPatch deepCopy() {
    return new MyStructPatch(this);
  }

  public BoolPatch getBoolVal() {
    return this.boolVal;
  }

  // Returns true if field boolVal is set (has been assigned a value) and false otherwise
  public boolean isSetBoolVal() {
    return this.boolVal != null;
  }

  public BytePatch getByteVal() {
    return this.byteVal;
  }

  // Returns true if field byteVal is set (has been assigned a value) and false otherwise
  public boolean isSetByteVal() {
    return this.byteVal != null;
  }

  public I16Patch getI16Val() {
    return this.i16Val;
  }

  // Returns true if field i16Val is set (has been assigned a value) and false otherwise
  public boolean isSetI16Val() {
    return this.i16Val != null;
  }

  public I32Patch getI32Val() {
    return this.i32Val;
  }

  // Returns true if field i32Val is set (has been assigned a value) and false otherwise
  public boolean isSetI32Val() {
    return this.i32Val != null;
  }

  public I64Patch getI64Val() {
    return this.i64Val;
  }

  // Returns true if field i64Val is set (has been assigned a value) and false otherwise
  public boolean isSetI64Val() {
    return this.i64Val != null;
  }

  public FloatPatch getFloatVal() {
    return this.floatVal;
  }

  // Returns true if field floatVal is set (has been assigned a value) and false otherwise
  public boolean isSetFloatVal() {
    return this.floatVal != null;
  }

  public DoublePatch getDoubleVal() {
    return this.doubleVal;
  }

  // Returns true if field doubleVal is set (has been assigned a value) and false otherwise
  public boolean isSetDoubleVal() {
    return this.doubleVal != null;
  }

  public StringPatch getStringVal() {
    return this.stringVal;
  }

  // Returns true if field stringVal is set (has been assigned a value) and false otherwise
  public boolean isSetStringVal() {
    return this.stringVal != null;
  }

  public BinaryPatch getBinaryVal() {
    return this.binaryVal;
  }

  // Returns true if field binaryVal is set (has been assigned a value) and false otherwise
  public boolean isSetBinaryVal() {
    return this.binaryVal != null;
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof MyStructPatch))
      return false;
    MyStructPatch that = (MyStructPatch)_that;

    if (!TBaseHelper.equalsNobinary(this.isSetBoolVal(), that.isSetBoolVal(), this.boolVal, that.boolVal)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetByteVal(), that.isSetByteVal(), this.byteVal, that.byteVal)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetI16Val(), that.isSetI16Val(), this.i16Val, that.i16Val)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetI32Val(), that.isSetI32Val(), this.i32Val, that.i32Val)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetI64Val(), that.isSetI64Val(), this.i64Val, that.i64Val)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetFloatVal(), that.isSetFloatVal(), this.floatVal, that.floatVal)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetDoubleVal(), that.isSetDoubleVal(), this.doubleVal, that.doubleVal)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetStringVal(), that.isSetStringVal(), this.stringVal, that.stringVal)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetBinaryVal(), that.isSetBinaryVal(), this.binaryVal, that.binaryVal)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {boolVal, byteVal, i16Val, i32Val, i64Val, floatVal, doubleVal, stringVal, binaryVal});
  }

  // This is required to satisfy the TBase interface, but can't be implemented on immutable struture.
  public void read(TProtocol iprot) throws TException {
    throw new TException("unimplemented in android immutable structure");
  }

  public static MyStructPatch deserialize(TProtocol iprot) throws TException {
    BoolPatch tmp_boolVal = null;
    BytePatch tmp_byteVal = null;
    I16Patch tmp_i16Val = null;
    I32Patch tmp_i32Val = null;
    I64Patch tmp_i64Val = null;
    FloatPatch tmp_floatVal = null;
    DoublePatch tmp_doubleVal = null;
    StringPatch tmp_stringVal = null;
    BinaryPatch tmp_binaryVal = null;
    TField __field;
    iprot.readStructBegin();
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) {
        break;
      }
      switch (__field.id)
      {
        case BOOLVAL:
          if (__field.type == TType.STRUCT) {
            tmp_boolVal = BoolPatch.deserialize(iprot);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case BYTEVAL:
          if (__field.type == TType.STRUCT) {
            tmp_byteVal = BytePatch.deserialize(iprot);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case I16VAL:
          if (__field.type == TType.STRUCT) {
            tmp_i16Val = I16Patch.deserialize(iprot);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case I32VAL:
          if (__field.type == TType.STRUCT) {
            tmp_i32Val = I32Patch.deserialize(iprot);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case I64VAL:
          if (__field.type == TType.STRUCT) {
            tmp_i64Val = I64Patch.deserialize(iprot);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case FLOATVAL:
          if (__field.type == TType.STRUCT) {
            tmp_floatVal = FloatPatch.deserialize(iprot);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case DOUBLEVAL:
          if (__field.type == TType.STRUCT) {
            tmp_doubleVal = DoublePatch.deserialize(iprot);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case STRINGVAL:
          if (__field.type == TType.STRUCT) {
            tmp_stringVal = StringPatch.deserialize(iprot);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case BINARYVAL:
          if (__field.type == TType.STRUCT) {
            tmp_binaryVal = BinaryPatch.deserialize(iprot);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    MyStructPatch _that;
    _that = new MyStructPatch(
      tmp_boolVal
      ,tmp_byteVal
      ,tmp_i16Val
      ,tmp_i32Val
      ,tmp_i64Val
      ,tmp_floatVal
      ,tmp_doubleVal
      ,tmp_stringVal
      ,tmp_binaryVal
    );
    _that.validate();
    return _that;
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.boolVal != null) {
      oprot.writeFieldBegin(BOOL_VAL_FIELD_DESC);
      this.boolVal.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.byteVal != null) {
      oprot.writeFieldBegin(BYTE_VAL_FIELD_DESC);
      this.byteVal.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.i16Val != null) {
      oprot.writeFieldBegin(I16_VAL_FIELD_DESC);
      this.i16Val.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.i32Val != null) {
      oprot.writeFieldBegin(I32_VAL_FIELD_DESC);
      this.i32Val.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.i64Val != null) {
      oprot.writeFieldBegin(I64_VAL_FIELD_DESC);
      this.i64Val.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.floatVal != null) {
      oprot.writeFieldBegin(FLOAT_VAL_FIELD_DESC);
      this.floatVal.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.doubleVal != null) {
      oprot.writeFieldBegin(DOUBLE_VAL_FIELD_DESC);
      this.doubleVal.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.stringVal != null) {
      oprot.writeFieldBegin(STRING_VAL_FIELD_DESC);
      this.stringVal.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.binaryVal != null) {
      oprot.writeFieldBegin(BINARY_VAL_FIELD_DESC);
      this.binaryVal.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    return TBaseHelper.toStringHelper(this, indent, prettyPrint);
  }

  public void validate() throws TException {
    // check for required fields
  }

}

