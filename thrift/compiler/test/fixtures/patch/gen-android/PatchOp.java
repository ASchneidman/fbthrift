/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

import com.facebook.thrift.IntRangeSet;
import java.util.Map;
import java.util.HashMap;

@SuppressWarnings({ "unused" })
public enum PatchOp implements com.facebook.thrift.TEnum {
  /**
   * Set the value. Supersedes all other ops.
   */
  Assign(1),
  /**
   * Set to the intrinsic default (which might be 'unset').
   */
  Clear(2),
  /**
   * Apply a structured patch.
   */
  Patch(3),
  /**
   * Set to the given default, if not already of the same type.
   */
  Ensure(4),
  /**
   * Apply a structured patch, after other ops.
   */
  PatchAfter(6),
  /**
   * Remove if present.
   * 
   * A key/value-based remove for set/list, 'saturating subtract' for
   * numeric/'counting' types, and 'remove by key' for maps.
   */
  Remove(7),
  /**
   * Add if not present.
   * 
   * A key/value-based add for set/list, 'saturating add' for numeric/'counting'
   * types, and non-overwriting 'insert' for maps.
   */
  Add(8),
  /**
   * Add even if present.
   * 
   * Identical to 'add' for set, 'append' for list, overwriting
   * 'update or insert' for maps, 'invert' for boolean.
   */
  Put(9),
  /**
   * Add to the beginning of a list, string, or binary value.
   */
  Prepend(10),
  Unspecified(0);

  private final int value;

  private PatchOp(int value) {
    this.value = value;
  }

  /**
   * Get the integer value of this enum value, as defined in the Thrift IDL.
   */
  public int getValue() {
    return value;
  }

  /**
   * Find a the enum type by its integer value, as defined in the Thrift IDL.
   * @return null if the value is not found.
   */
  public static PatchOp findByValue(int value) { 
    switch (value) {
      case 1:
        return Assign;
      case 2:
        return Clear;
      case 3:
        return Patch;
      case 4:
        return Ensure;
      case 6:
        return PatchAfter;
      case 7:
        return Remove;
      case 8:
        return Add;
      case 9:
        return Put;
      case 10:
        return Prepend;
      case 0:
        return Unspecified;
      default:
        return null;
    }
  }
}
