/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

/**
 * A decoded JSON Value.
 * 
 * Considered 'normal' if all contained `floatValue` are not representable
 * losslessly in `intValue`.
 * 
 * Note: This type is wire compatibile with `dynamic.Dynamic`, for all valid
 * JSON values.
 * 
 * @see JsonString For the encoded version.
 */
@SuppressWarnings({ "unused", "serial", "unchecked" })
public class JsonValue extends TUnion<JsonValue> {
  private static final TStruct STRUCT_DESC = new TStruct("JsonValue");
  private static final TField BOOL_VALUE_FIELD_DESC = new TField("boolValue", TType.BOOL, (short)1);
  private static final TField INT_VALUE_FIELD_DESC = new TField("intValue", TType.I64, (short)2);
  private static final TField FLOAT_VALUE_FIELD_DESC = new TField("floatValue", TType.DOUBLE, (short)3);
  private static final TField STRING_VALUE_FIELD_DESC = new TField("stringValue", TType.STRING, (short)4);
  private static final TField ARRAY_VALUE_FIELD_DESC = new TField("arrayValue", TType.LIST, (short)5);
  private static final TField OBJECT_VALUE_FIELD_DESC = new TField("objectValue", TType.MAP, (short)6);

  public static final int BOOLVALUE = 1;
  public static final int INTVALUE = 2;
  public static final int FLOATVALUE = 3;
  public static final int STRINGVALUE = 4;
  public static final int ARRAYVALUE = 5;
  public static final int OBJECTVALUE = 6;

  public static final Map<Integer, FieldMetaData> metaDataMap = new HashMap<>();

  public JsonValue() {
    super();
  }

  public JsonValue(int setField, Object __value) {
    super(setField, __value);
  }

  public JsonValue(JsonValue other) {
    super(other);
  }

  public JsonValue deepCopy() {
    return new JsonValue(this);
  }

  public static JsonValue boolValue(Boolean __value) {
    JsonValue x = new JsonValue();
    x.setBoolValue(__value);
    return x;
  }

  public static JsonValue intValue(Long __value) {
    JsonValue x = new JsonValue();
    x.setIntValue(__value);
    return x;
  }

  public static JsonValue floatValue(Double __value) {
    JsonValue x = new JsonValue();
    x.setFloatValue(__value);
    return x;
  }

  public static JsonValue stringValue(String __value) {
    JsonValue x = new JsonValue();
    x.setStringValue(__value);
    return x;
  }

  public static JsonValue arrayValue(List<JsonValue> __value) {
    JsonValue x = new JsonValue();
    x.setArrayValue(__value);
    return x;
  }

  public static JsonValue objectValue(Map<String,JsonValue> __value) {
    JsonValue x = new JsonValue();
    x.setObjectValue(__value);
    return x;
  }


  @Override
  protected Object readValue(TProtocol iprot, TField __field) throws TException {
    switch (__field.id) {
      case BOOLVALUE:
        if (__field.type == BOOL_VALUE_FIELD_DESC.type) {
          Boolean boolValue;
          boolValue = iprot.readBool();
          return boolValue;
        }
        break;
      case INTVALUE:
        if (__field.type == INT_VALUE_FIELD_DESC.type) {
          Long intValue;
          intValue = iprot.readI64();
          return intValue;
        }
        break;
      case FLOATVALUE:
        if (__field.type == FLOAT_VALUE_FIELD_DESC.type) {
          Double floatValue;
          floatValue = iprot.readDouble();
          return floatValue;
        }
        break;
      case STRINGVALUE:
        if (__field.type == STRING_VALUE_FIELD_DESC.type) {
          String stringValue;
          stringValue = iprot.readString();
          return stringValue;
        }
        break;
      case ARRAYVALUE:
        if (__field.type == ARRAY_VALUE_FIELD_DESC.type) {
          List<JsonValue> arrayValue;
          {
            TList _list13 = iprot.readListBegin();
            arrayValue = new ArrayList<JsonValue>(Math.max(0, _list13.size));
            for (int _i14 = 0; 
                 (_list13.size < 0) ? iprot.peekList() : (_i14 < _list13.size); 
                 ++_i14)
            {
              JsonValue _elem15;
              _elem15 = new JsonValue();
              _elem15.read(iprot);
              arrayValue.add(_elem15);
            }
            iprot.readListEnd();
          }
          return arrayValue;
        }
        break;
      case OBJECTVALUE:
        if (__field.type == OBJECT_VALUE_FIELD_DESC.type) {
          Map<String,JsonValue> objectValue;
          {
            TMap _map16 = iprot.readMapBegin();
            objectValue = new HashMap<String,JsonValue>(Math.max(0, 2*_map16.size));
            for (int _i17 = 0; 
                 (_map16.size < 0) ? iprot.peekMap() : (_i17 < _map16.size); 
                 ++_i17)
            {
              String _key18;
              JsonValue _val19;
              _key18 = iprot.readString();
              _val19 = new JsonValue();
              _val19.read(iprot);
              objectValue.put(_key18, _val19);
            }
            iprot.readMapEnd();
          }
          return objectValue;
        }
        break;
    }
    TProtocolUtil.skip(iprot, __field.type);
    return null;
  }

  @Override
  protected void writeValue(TProtocol oprot, short setField, Object __value) throws TException {
    switch (setField) {
      case BOOLVALUE:
        Boolean boolValue = (Boolean)getFieldValue();
        oprot.writeBool(boolValue);
        return;
      case INTVALUE:
        Long intValue = (Long)getFieldValue();
        oprot.writeI64(intValue);
        return;
      case FLOATVALUE:
        Double floatValue = (Double)getFieldValue();
        oprot.writeDouble(floatValue);
        return;
      case STRINGVALUE:
        String stringValue = (String)getFieldValue();
        oprot.writeString(stringValue);
        return;
      case ARRAYVALUE:
        List<JsonValue> arrayValue = (List<JsonValue>)getFieldValue();
        {
          oprot.writeListBegin(new TList(TType.STRUCT, arrayValue.size()));
          for (JsonValue _iter20 : arrayValue)          {
            _iter20.write(oprot);
          }
          oprot.writeListEnd();
        }
        return;
      case OBJECTVALUE:
        Map<String,JsonValue> objectValue = (Map<String,JsonValue>)getFieldValue();
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, objectValue.size()));
          for (Map.Entry<String, JsonValue> _iter21 : objectValue.entrySet())          {
            oprot.writeString(_iter21.getKey());
            _iter21.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField);
    }
  }

  @Override
  protected TField getFieldDesc(int setField) {
    switch (setField) {
      case BOOLVALUE:
        return BOOL_VALUE_FIELD_DESC;
      case INTVALUE:
        return INT_VALUE_FIELD_DESC;
      case FLOATVALUE:
        return FLOAT_VALUE_FIELD_DESC;
      case STRINGVALUE:
        return STRING_VALUE_FIELD_DESC;
      case ARRAYVALUE:
        return ARRAY_VALUE_FIELD_DESC;
      case OBJECTVALUE:
        return OBJECT_VALUE_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected Map<Integer, FieldMetaData> getMetaDataMap() { return metaDataMap; }

  private Object __getValue(int expectedFieldId) {
    if (getSetField() == expectedFieldId) {
      return getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field '" + getFieldDesc(expectedFieldId).name + "' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  private void __setValue(int fieldId, Object __value) {
    if (__value == null) throw new NullPointerException();
    setField_ = fieldId;
    value_ = __value;
  }

  /**
   * JSON "true" and "false" values represented as a boolean value.
   */
  public Boolean isBoolValue() {
    return (Boolean) __getValue(BOOLVALUE);
  }

  /**
   * JSON "true" and "false" values represented as a boolean value.
   */
  public void setBoolValue(Boolean __value) {
    __setValue(BOOLVALUE, __value);
  }

  /**
   * A JSON number represented as an integer value.
   * 
   * @see #floatValue
   */
  public Long getIntValue() {
    return (Long) __getValue(INTVALUE);
  }

  /**
   * A JSON number represented as an integer value.
   * 
   * @see #floatValue
   */
  public void setIntValue(Long __value) {
    __setValue(INTVALUE, __value);
  }

  /**
   * A floating point approximation of a JSON number.
   * 
   * JSON does not specify a limit on the range or percision of numbers, so
   * a 64-bit flating point value is use to approximate any numbers that cannot
   * be represented losslessly in `intValue`.
   * 
   * Any `floatValue` that can be represented losslessly in `intValue`, *should*
   * be stored there.
   * 
   * @see #intValue
   */
  public Double getFloatValue() {
    return (Double) __getValue(FLOATVALUE);
  }

  /**
   * A floating point approximation of a JSON number.
   * 
   * JSON does not specify a limit on the range or percision of numbers, so
   * a 64-bit flating point value is use to approximate any numbers that cannot
   * be represented losslessly in `intValue`.
   * 
   * Any `floatValue` that can be represented losslessly in `intValue`, *should*
   * be stored there.
   * 
   * @see #intValue
   */
  public void setFloatValue(Double __value) {
    __setValue(FLOATVALUE, __value);
  }

  /**
   * A JSON string value.
   */
  public String getStringValue() {
    return (String) __getValue(STRINGVALUE);
  }

  /**
   * A JSON string value.
   */
  public void setStringValue(String __value) {
    __setValue(STRINGVALUE, __value);
  }

  /**
   * A JSON array value.
   */
  public List<JsonValue> getArrayValue() {
    return (List<JsonValue>) __getValue(ARRAYVALUE);
  }

  /**
   * A JSON array value.
   */
  public void setArrayValue(List<JsonValue> __value) {
    __setValue(ARRAYVALUE, __value);
  }

  /**
   * A JSON object value.
   */
  public Map<String,JsonValue> getObjectValue() {
    return (Map<String,JsonValue>) __getValue(OBJECTVALUE);
  }

  /**
   * A JSON object value.
   */
  public void setObjectValue(Map<String,JsonValue> __value) {
    __setValue(OBJECTVALUE, __value);
  }

  public boolean equals(Object other) {
    if (other instanceof JsonValue) {
      return equals((JsonValue)other);
    } else {
      return false;
    }
  }

  public boolean equals(JsonValue other) {
    return equalsNobinaryImpl(other);
  }


  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {getSetField(), getFieldValue()});
  }

}
