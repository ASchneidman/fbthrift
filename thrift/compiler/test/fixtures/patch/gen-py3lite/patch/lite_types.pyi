#
# Autogenerated by Thrift
#
# DO NOT EDIT
#  @generated
#

import typing as _typing

import thrift.py3lite.types as _fbthrift_py3lite_types
import thrift.py3lite.exceptions as _fbthrift_py3lite_exceptions

import facebook.thrift.annotation.thrift.thrift.lite_types


class BoolPatch(_fbthrift_py3lite_types.Struct):
    assign: _typing.Final[_typing.Optional[bool]] = ...
    invert: _typing.Final[bool] = ...
    def __init__(
        self, *,
        assign: _typing.Optional[bool]=...,
        invert: _typing.Optional[bool]=...
    ) -> None: ...

    def __call__(
        self, *,
        assign: _typing.Optional[bool]=...,
        invert: _typing.Optional[bool]=...
    ) -> BoolPatch: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[bool, bool]]]: ...


class BytePatch(_fbthrift_py3lite_types.Struct):
    assign: _typing.Final[_typing.Optional[int]] = ...
    add: _typing.Final[int] = ...
    def __init__(
        self, *,
        assign: _typing.Optional[int]=...,
        add: _typing.Optional[int]=...
    ) -> None: ...

    def __call__(
        self, *,
        assign: _typing.Optional[int]=...,
        add: _typing.Optional[int]=...
    ) -> BytePatch: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[int, int]]]: ...


class I16Patch(_fbthrift_py3lite_types.Struct):
    assign: _typing.Final[_typing.Optional[int]] = ...
    add: _typing.Final[int] = ...
    def __init__(
        self, *,
        assign: _typing.Optional[int]=...,
        add: _typing.Optional[int]=...
    ) -> None: ...

    def __call__(
        self, *,
        assign: _typing.Optional[int]=...,
        add: _typing.Optional[int]=...
    ) -> I16Patch: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[int, int]]]: ...


class I32Patch(_fbthrift_py3lite_types.Struct):
    assign: _typing.Final[_typing.Optional[int]] = ...
    add: _typing.Final[int] = ...
    def __init__(
        self, *,
        assign: _typing.Optional[int]=...,
        add: _typing.Optional[int]=...
    ) -> None: ...

    def __call__(
        self, *,
        assign: _typing.Optional[int]=...,
        add: _typing.Optional[int]=...
    ) -> I32Patch: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[int, int]]]: ...


class I64Patch(_fbthrift_py3lite_types.Struct):
    assign: _typing.Final[_typing.Optional[int]] = ...
    add: _typing.Final[int] = ...
    def __init__(
        self, *,
        assign: _typing.Optional[int]=...,
        add: _typing.Optional[int]=...
    ) -> None: ...

    def __call__(
        self, *,
        assign: _typing.Optional[int]=...,
        add: _typing.Optional[int]=...
    ) -> I64Patch: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[int, int]]]: ...


class FloatPatch(_fbthrift_py3lite_types.Struct):
    assign: _typing.Final[_typing.Optional[float]] = ...
    add: _typing.Final[float] = ...
    def __init__(
        self, *,
        assign: _typing.Optional[float]=...,
        add: _typing.Optional[float]=...
    ) -> None: ...

    def __call__(
        self, *,
        assign: _typing.Optional[float]=...,
        add: _typing.Optional[float]=...
    ) -> FloatPatch: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[float, float]]]: ...


class DoublePatch(_fbthrift_py3lite_types.Struct):
    assign: _typing.Final[_typing.Optional[float]] = ...
    add: _typing.Final[float] = ...
    def __init__(
        self, *,
        assign: _typing.Optional[float]=...,
        add: _typing.Optional[float]=...
    ) -> None: ...

    def __call__(
        self, *,
        assign: _typing.Optional[float]=...,
        add: _typing.Optional[float]=...
    ) -> DoublePatch: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[float, float]]]: ...


class StringPatch(_fbthrift_py3lite_types.Struct):
    assign: _typing.Final[_typing.Optional[str]] = ...
    append: _typing.Final[str] = ...
    prepend: _typing.Final[str] = ...
    def __init__(
        self, *,
        assign: _typing.Optional[str]=...,
        append: _typing.Optional[str]=...,
        prepend: _typing.Optional[str]=...
    ) -> None: ...

    def __call__(
        self, *,
        assign: _typing.Optional[str]=...,
        append: _typing.Optional[str]=...,
        prepend: _typing.Optional[str]=...
    ) -> StringPatch: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[str, str, str]]]: ...


class BinaryPatch(_fbthrift_py3lite_types.Struct):
    assign: _typing.Final[_typing.Optional[bytes]] = ...
    def __init__(
        self, *,
        assign: _typing.Optional[bytes]=...
    ) -> None: ...

    def __call__(
        self, *,
        assign: _typing.Optional[bytes]=...
    ) -> BinaryPatch: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[bytes]]]: ...
