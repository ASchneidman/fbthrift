#
# Autogenerated by Thrift
#
# DO NOT EDIT
#  @generated
#

import typing as _typing

import thrift.py3lite.types as _fbthrift_py3lite_types
import thrift.py3lite.exceptions as _fbthrift_py3lite_exceptions

import patch.lite_types


class MyStruct(_fbthrift_py3lite_types.Struct):
    boolVal: _typing.Final[bool] = ...
    byteVal: _typing.Final[int] = ...
    i16Val: _typing.Final[int] = ...
    i32Val: _typing.Final[int] = ...
    i64Val: _typing.Final[int] = ...
    floatVal: _typing.Final[float] = ...
    doubleVal: _typing.Final[float] = ...
    stringVal: _typing.Final[str] = ...
    binaryVal: _typing.Final[bytes] = ...
    def __init__(
        self, *,
        boolVal: _typing.Optional[bool]=...,
        byteVal: _typing.Optional[int]=...,
        i16Val: _typing.Optional[int]=...,
        i32Val: _typing.Optional[int]=...,
        i64Val: _typing.Optional[int]=...,
        floatVal: _typing.Optional[float]=...,
        doubleVal: _typing.Optional[float]=...,
        stringVal: _typing.Optional[str]=...,
        binaryVal: _typing.Optional[bytes]=...
    ) -> None: ...

    def __call__(
        self, *,
        boolVal: _typing.Optional[bool]=...,
        byteVal: _typing.Optional[int]=...,
        i16Val: _typing.Optional[int]=...,
        i32Val: _typing.Optional[int]=...,
        i64Val: _typing.Optional[int]=...,
        floatVal: _typing.Optional[float]=...,
        doubleVal: _typing.Optional[float]=...,
        stringVal: _typing.Optional[str]=...,
        binaryVal: _typing.Optional[bytes]=...
    ) -> MyStruct: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[bool, int, int, int, int, float, float, str, bytes]]]: ...


class MyStructPatch(_fbthrift_py3lite_types.Struct):
    boolVal: _typing.Final[patch.lite_types.BoolPatch] = ...
    byteVal: _typing.Final[patch.lite_types.BytePatch] = ...
    i16Val: _typing.Final[patch.lite_types.I16Patch] = ...
    i32Val: _typing.Final[patch.lite_types.I32Patch] = ...
    i64Val: _typing.Final[patch.lite_types.I64Patch] = ...
    floatVal: _typing.Final[patch.lite_types.FloatPatch] = ...
    doubleVal: _typing.Final[patch.lite_types.DoublePatch] = ...
    stringVal: _typing.Final[patch.lite_types.StringPatch] = ...
    binaryVal: _typing.Final[patch.lite_types.BinaryPatch] = ...
    def __init__(
        self, *,
        boolVal: _typing.Optional[patch.lite_types.BoolPatch]=...,
        byteVal: _typing.Optional[patch.lite_types.BytePatch]=...,
        i16Val: _typing.Optional[patch.lite_types.I16Patch]=...,
        i32Val: _typing.Optional[patch.lite_types.I32Patch]=...,
        i64Val: _typing.Optional[patch.lite_types.I64Patch]=...,
        floatVal: _typing.Optional[patch.lite_types.FloatPatch]=...,
        doubleVal: _typing.Optional[patch.lite_types.DoublePatch]=...,
        stringVal: _typing.Optional[patch.lite_types.StringPatch]=...,
        binaryVal: _typing.Optional[patch.lite_types.BinaryPatch]=...
    ) -> None: ...

    def __call__(
        self, *,
        boolVal: _typing.Optional[patch.lite_types.BoolPatch]=...,
        byteVal: _typing.Optional[patch.lite_types.BytePatch]=...,
        i16Val: _typing.Optional[patch.lite_types.I16Patch]=...,
        i32Val: _typing.Optional[patch.lite_types.I32Patch]=...,
        i64Val: _typing.Optional[patch.lite_types.I64Patch]=...,
        floatVal: _typing.Optional[patch.lite_types.FloatPatch]=...,
        doubleVal: _typing.Optional[patch.lite_types.DoublePatch]=...,
        stringVal: _typing.Optional[patch.lite_types.StringPatch]=...,
        binaryVal: _typing.Optional[patch.lite_types.BinaryPatch]=...
    ) -> MyStructPatch: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[patch.lite_types.BoolPatch, patch.lite_types.BytePatch, patch.lite_types.I16Patch, patch.lite_types.I32Patch, patch.lite_types.I64Patch, patch.lite_types.FloatPatch, patch.lite_types.DoublePatch, patch.lite_types.StringPatch, patch.lite_types.BinaryPatch]]]: ...


class MyStructValuePatch(_fbthrift_py3lite_types.Struct):
    assign: _typing.Final[_typing.Optional[MyStruct]] = ...
    clear: _typing.Final[bool] = ...
    patch: _typing.Final[MyStructPatch] = ...
    def __init__(
        self, *,
        assign: _typing.Optional[MyStruct]=...,
        clear: _typing.Optional[bool]=...,
        patch: _typing.Optional[MyStructPatch]=...
    ) -> None: ...

    def __call__(
        self, *,
        assign: _typing.Optional[MyStruct]=...,
        clear: _typing.Optional[bool]=...,
        patch: _typing.Optional[MyStructPatch]=...
    ) -> MyStructValuePatch: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[MyStruct, bool, MyStructPatch]]]: ...
