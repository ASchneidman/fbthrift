/**
 * Autogenerated by Thrift for src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>

#include <thrift/lib/cpp2/type/Tag.h>

#include "thrift/lib/thrift/gen-cpp2/patch_types.h"

namespace apache {
namespace thrift {
namespace tag {
struct data1;
struct data2;
struct boolVal;
struct byteVal;
struct i16Val;
struct i32Val;
struct i64Val;
struct floatVal;
struct doubleVal;
struct stringVal;
struct binaryVal;
struct structVal;
struct optBoolVal;
struct optByteVal;
struct optI16Val;
struct optI32Val;
struct optI64Val;
struct optFloatVal;
struct optDoubleVal;
struct optStringVal;
struct optBinaryVal;
struct optStructVal;
struct optListVal;
struct optSetVal;
struct optMapVal;
struct data1;
struct data2;
struct assign;
struct clear;
struct patch;
struct clear;
struct patch;
struct ensure;
struct patchAfter;
struct assign;
struct clear;
struct prepend;
struct append;
struct clear;
struct patch;
struct ensure;
struct patchAfter;
struct assign;
struct clear;
struct remove;
struct add;
struct clear;
struct patch;
struct ensure;
struct patchAfter;
struct assign;
struct clear;
struct put;
struct clear;
struct patch;
struct ensure;
struct patchAfter;
struct boolVal;
struct byteVal;
struct i16Val;
struct i32Val;
struct i64Val;
struct floatVal;
struct doubleVal;
struct stringVal;
struct binaryVal;
struct structVal;
struct optBoolVal;
struct optByteVal;
struct optI16Val;
struct optI32Val;
struct optI64Val;
struct optFloatVal;
struct optDoubleVal;
struct optStringVal;
struct optBinaryVal;
struct optStructVal;
struct optListVal;
struct optSetVal;
struct optMapVal;
struct assign;
struct clear;
struct patch;
struct clear;
struct patch;
struct ensure;
struct patchAfter;
} // namespace tag
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_data1
#define APACHE_THRIFT_ACCESSOR_data1
APACHE_THRIFT_DEFINE_ACCESSOR(data1);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_data2
#define APACHE_THRIFT_ACCESSOR_data2
APACHE_THRIFT_DEFINE_ACCESSOR(data2);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_boolVal
#define APACHE_THRIFT_ACCESSOR_boolVal
APACHE_THRIFT_DEFINE_ACCESSOR(boolVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_byteVal
#define APACHE_THRIFT_ACCESSOR_byteVal
APACHE_THRIFT_DEFINE_ACCESSOR(byteVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_i16Val
#define APACHE_THRIFT_ACCESSOR_i16Val
APACHE_THRIFT_DEFINE_ACCESSOR(i16Val);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_i32Val
#define APACHE_THRIFT_ACCESSOR_i32Val
APACHE_THRIFT_DEFINE_ACCESSOR(i32Val);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_i64Val
#define APACHE_THRIFT_ACCESSOR_i64Val
APACHE_THRIFT_DEFINE_ACCESSOR(i64Val);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_floatVal
#define APACHE_THRIFT_ACCESSOR_floatVal
APACHE_THRIFT_DEFINE_ACCESSOR(floatVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_doubleVal
#define APACHE_THRIFT_ACCESSOR_doubleVal
APACHE_THRIFT_DEFINE_ACCESSOR(doubleVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_stringVal
#define APACHE_THRIFT_ACCESSOR_stringVal
APACHE_THRIFT_DEFINE_ACCESSOR(stringVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_binaryVal
#define APACHE_THRIFT_ACCESSOR_binaryVal
APACHE_THRIFT_DEFINE_ACCESSOR(binaryVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_structVal
#define APACHE_THRIFT_ACCESSOR_structVal
APACHE_THRIFT_DEFINE_ACCESSOR(structVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optBoolVal
#define APACHE_THRIFT_ACCESSOR_optBoolVal
APACHE_THRIFT_DEFINE_ACCESSOR(optBoolVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optByteVal
#define APACHE_THRIFT_ACCESSOR_optByteVal
APACHE_THRIFT_DEFINE_ACCESSOR(optByteVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optI16Val
#define APACHE_THRIFT_ACCESSOR_optI16Val
APACHE_THRIFT_DEFINE_ACCESSOR(optI16Val);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optI32Val
#define APACHE_THRIFT_ACCESSOR_optI32Val
APACHE_THRIFT_DEFINE_ACCESSOR(optI32Val);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optI64Val
#define APACHE_THRIFT_ACCESSOR_optI64Val
APACHE_THRIFT_DEFINE_ACCESSOR(optI64Val);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optFloatVal
#define APACHE_THRIFT_ACCESSOR_optFloatVal
APACHE_THRIFT_DEFINE_ACCESSOR(optFloatVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optDoubleVal
#define APACHE_THRIFT_ACCESSOR_optDoubleVal
APACHE_THRIFT_DEFINE_ACCESSOR(optDoubleVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optStringVal
#define APACHE_THRIFT_ACCESSOR_optStringVal
APACHE_THRIFT_DEFINE_ACCESSOR(optStringVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optBinaryVal
#define APACHE_THRIFT_ACCESSOR_optBinaryVal
APACHE_THRIFT_DEFINE_ACCESSOR(optBinaryVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optStructVal
#define APACHE_THRIFT_ACCESSOR_optStructVal
APACHE_THRIFT_DEFINE_ACCESSOR(optStructVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optListVal
#define APACHE_THRIFT_ACCESSOR_optListVal
APACHE_THRIFT_DEFINE_ACCESSOR(optListVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optSetVal
#define APACHE_THRIFT_ACCESSOR_optSetVal
APACHE_THRIFT_DEFINE_ACCESSOR(optSetVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optMapVal
#define APACHE_THRIFT_ACCESSOR_optMapVal
APACHE_THRIFT_DEFINE_ACCESSOR(optMapVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_data1
#define APACHE_THRIFT_ACCESSOR_data1
APACHE_THRIFT_DEFINE_ACCESSOR(data1);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_data2
#define APACHE_THRIFT_ACCESSOR_data2
APACHE_THRIFT_DEFINE_ACCESSOR(data2);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_assign
#define APACHE_THRIFT_ACCESSOR_assign
APACHE_THRIFT_DEFINE_ACCESSOR(assign);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_clear
#define APACHE_THRIFT_ACCESSOR_clear
APACHE_THRIFT_DEFINE_ACCESSOR(clear);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patch
#define APACHE_THRIFT_ACCESSOR_patch
APACHE_THRIFT_DEFINE_ACCESSOR(patch);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_clear
#define APACHE_THRIFT_ACCESSOR_clear
APACHE_THRIFT_DEFINE_ACCESSOR(clear);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patch
#define APACHE_THRIFT_ACCESSOR_patch
APACHE_THRIFT_DEFINE_ACCESSOR(patch);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_ensure
#define APACHE_THRIFT_ACCESSOR_ensure
APACHE_THRIFT_DEFINE_ACCESSOR(ensure);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patchAfter
#define APACHE_THRIFT_ACCESSOR_patchAfter
APACHE_THRIFT_DEFINE_ACCESSOR(patchAfter);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_assign
#define APACHE_THRIFT_ACCESSOR_assign
APACHE_THRIFT_DEFINE_ACCESSOR(assign);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_clear
#define APACHE_THRIFT_ACCESSOR_clear
APACHE_THRIFT_DEFINE_ACCESSOR(clear);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_prepend
#define APACHE_THRIFT_ACCESSOR_prepend
APACHE_THRIFT_DEFINE_ACCESSOR(prepend);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_append
#define APACHE_THRIFT_ACCESSOR_append
APACHE_THRIFT_DEFINE_ACCESSOR(append);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_clear
#define APACHE_THRIFT_ACCESSOR_clear
APACHE_THRIFT_DEFINE_ACCESSOR(clear);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patch
#define APACHE_THRIFT_ACCESSOR_patch
APACHE_THRIFT_DEFINE_ACCESSOR(patch);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_ensure
#define APACHE_THRIFT_ACCESSOR_ensure
APACHE_THRIFT_DEFINE_ACCESSOR(ensure);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patchAfter
#define APACHE_THRIFT_ACCESSOR_patchAfter
APACHE_THRIFT_DEFINE_ACCESSOR(patchAfter);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_assign
#define APACHE_THRIFT_ACCESSOR_assign
APACHE_THRIFT_DEFINE_ACCESSOR(assign);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_clear
#define APACHE_THRIFT_ACCESSOR_clear
APACHE_THRIFT_DEFINE_ACCESSOR(clear);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_remove
#define APACHE_THRIFT_ACCESSOR_remove
APACHE_THRIFT_DEFINE_ACCESSOR(remove);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_add
#define APACHE_THRIFT_ACCESSOR_add
APACHE_THRIFT_DEFINE_ACCESSOR(add);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_clear
#define APACHE_THRIFT_ACCESSOR_clear
APACHE_THRIFT_DEFINE_ACCESSOR(clear);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patch
#define APACHE_THRIFT_ACCESSOR_patch
APACHE_THRIFT_DEFINE_ACCESSOR(patch);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_ensure
#define APACHE_THRIFT_ACCESSOR_ensure
APACHE_THRIFT_DEFINE_ACCESSOR(ensure);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patchAfter
#define APACHE_THRIFT_ACCESSOR_patchAfter
APACHE_THRIFT_DEFINE_ACCESSOR(patchAfter);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_assign
#define APACHE_THRIFT_ACCESSOR_assign
APACHE_THRIFT_DEFINE_ACCESSOR(assign);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_clear
#define APACHE_THRIFT_ACCESSOR_clear
APACHE_THRIFT_DEFINE_ACCESSOR(clear);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_put
#define APACHE_THRIFT_ACCESSOR_put
APACHE_THRIFT_DEFINE_ACCESSOR(put);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_clear
#define APACHE_THRIFT_ACCESSOR_clear
APACHE_THRIFT_DEFINE_ACCESSOR(clear);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patch
#define APACHE_THRIFT_ACCESSOR_patch
APACHE_THRIFT_DEFINE_ACCESSOR(patch);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_ensure
#define APACHE_THRIFT_ACCESSOR_ensure
APACHE_THRIFT_DEFINE_ACCESSOR(ensure);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patchAfter
#define APACHE_THRIFT_ACCESSOR_patchAfter
APACHE_THRIFT_DEFINE_ACCESSOR(patchAfter);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_boolVal
#define APACHE_THRIFT_ACCESSOR_boolVal
APACHE_THRIFT_DEFINE_ACCESSOR(boolVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_byteVal
#define APACHE_THRIFT_ACCESSOR_byteVal
APACHE_THRIFT_DEFINE_ACCESSOR(byteVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_i16Val
#define APACHE_THRIFT_ACCESSOR_i16Val
APACHE_THRIFT_DEFINE_ACCESSOR(i16Val);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_i32Val
#define APACHE_THRIFT_ACCESSOR_i32Val
APACHE_THRIFT_DEFINE_ACCESSOR(i32Val);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_i64Val
#define APACHE_THRIFT_ACCESSOR_i64Val
APACHE_THRIFT_DEFINE_ACCESSOR(i64Val);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_floatVal
#define APACHE_THRIFT_ACCESSOR_floatVal
APACHE_THRIFT_DEFINE_ACCESSOR(floatVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_doubleVal
#define APACHE_THRIFT_ACCESSOR_doubleVal
APACHE_THRIFT_DEFINE_ACCESSOR(doubleVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_stringVal
#define APACHE_THRIFT_ACCESSOR_stringVal
APACHE_THRIFT_DEFINE_ACCESSOR(stringVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_binaryVal
#define APACHE_THRIFT_ACCESSOR_binaryVal
APACHE_THRIFT_DEFINE_ACCESSOR(binaryVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_structVal
#define APACHE_THRIFT_ACCESSOR_structVal
APACHE_THRIFT_DEFINE_ACCESSOR(structVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optBoolVal
#define APACHE_THRIFT_ACCESSOR_optBoolVal
APACHE_THRIFT_DEFINE_ACCESSOR(optBoolVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optByteVal
#define APACHE_THRIFT_ACCESSOR_optByteVal
APACHE_THRIFT_DEFINE_ACCESSOR(optByteVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optI16Val
#define APACHE_THRIFT_ACCESSOR_optI16Val
APACHE_THRIFT_DEFINE_ACCESSOR(optI16Val);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optI32Val
#define APACHE_THRIFT_ACCESSOR_optI32Val
APACHE_THRIFT_DEFINE_ACCESSOR(optI32Val);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optI64Val
#define APACHE_THRIFT_ACCESSOR_optI64Val
APACHE_THRIFT_DEFINE_ACCESSOR(optI64Val);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optFloatVal
#define APACHE_THRIFT_ACCESSOR_optFloatVal
APACHE_THRIFT_DEFINE_ACCESSOR(optFloatVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optDoubleVal
#define APACHE_THRIFT_ACCESSOR_optDoubleVal
APACHE_THRIFT_DEFINE_ACCESSOR(optDoubleVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optStringVal
#define APACHE_THRIFT_ACCESSOR_optStringVal
APACHE_THRIFT_DEFINE_ACCESSOR(optStringVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optBinaryVal
#define APACHE_THRIFT_ACCESSOR_optBinaryVal
APACHE_THRIFT_DEFINE_ACCESSOR(optBinaryVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optStructVal
#define APACHE_THRIFT_ACCESSOR_optStructVal
APACHE_THRIFT_DEFINE_ACCESSOR(optStructVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optListVal
#define APACHE_THRIFT_ACCESSOR_optListVal
APACHE_THRIFT_DEFINE_ACCESSOR(optListVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optSetVal
#define APACHE_THRIFT_ACCESSOR_optSetVal
APACHE_THRIFT_DEFINE_ACCESSOR(optSetVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optMapVal
#define APACHE_THRIFT_ACCESSOR_optMapVal
APACHE_THRIFT_DEFINE_ACCESSOR(optMapVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_assign
#define APACHE_THRIFT_ACCESSOR_assign
APACHE_THRIFT_DEFINE_ACCESSOR(assign);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_clear
#define APACHE_THRIFT_ACCESSOR_clear
APACHE_THRIFT_DEFINE_ACCESSOR(clear);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patch
#define APACHE_THRIFT_ACCESSOR_patch
APACHE_THRIFT_DEFINE_ACCESSOR(patch);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_clear
#define APACHE_THRIFT_ACCESSOR_clear
APACHE_THRIFT_DEFINE_ACCESSOR(clear);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patch
#define APACHE_THRIFT_ACCESSOR_patch
APACHE_THRIFT_DEFINE_ACCESSOR(patch);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_ensure
#define APACHE_THRIFT_ACCESSOR_ensure
APACHE_THRIFT_DEFINE_ACCESSOR(ensure);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patchAfter
#define APACHE_THRIFT_ACCESSOR_patchAfter
APACHE_THRIFT_DEFINE_ACCESSOR(patchAfter);
#endif
} // namespace detail
} // namespace thrift
} // namespace apache

// BEGIN declare_enums

// END declare_enums
// BEGIN forward_declare
namespace cpp2 {
class MyData;
class MyStruct;
class MyDataPatch;
class MyDataValuePatch;
class OptionalMyDataValuePatch;
class MyStructField21Patch;
class OptionalMyStructField21Patch;
class MyStructField22Patch;
class OptionalMyStructField22Patch;
class MyStructField23Patch;
class OptionalMyStructField23Patch;
class MyStructPatch;
class MyStructValuePatch;
class OptionalMyStructValuePatch;
} // cpp2
// END forward_declare
// BEGIN typedefs

// END typedefs
// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace cpp2 {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;
} // cpp2
namespace cpp2 {
class MyData final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = true;
  static const char* __fbthrift_cpp2_gen_thrift_uri();
  using __fbthrift_fields = ::apache::thrift::type::fields<
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{1}, ::apache::thrift::type::string_t>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{2}, ::apache::thrift::type::i32_t>
  >;

  void __fbthrift_clear();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyData;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyData() :
      __fbthrift_field_data2() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyData(apache::thrift::FragileConstructor, ::std::string data1__arg, ::std::int32_t data2__arg);

  MyData(MyData&&) noexcept;

  MyData(const MyData& src);


  MyData& operator=(MyData&&) noexcept;
  MyData& operator=(const MyData& src);
 private:
  ::std::string __fbthrift_field_data1;
 private:
  ::std::int32_t __fbthrift_field_data2;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyData&) const;
  bool operator<(const MyData&) const;

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> data1_ref() const& {
    return {this->__fbthrift_field_data1, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> data1_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_data1), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> data1_ref() & {
    return {this->__fbthrift_field_data1, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> data1_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_data1), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> data1() const& {
    return {this->__fbthrift_field_data1, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> data1() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_data1), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> data1() & {
    return {this->__fbthrift_field_data1, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> data1() && {
    return {static_cast<T&&>(this->__fbthrift_field_data1), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> data2_ref() const& {
    return {this->__fbthrift_field_data2, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> data2_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_data2), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> data2_ref() & {
    return {this->__fbthrift_field_data2, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> data2_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_data2), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> data2() const& {
    return {this->__fbthrift_field_data2, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> data2() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_data2), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> data2() & {
    return {this->__fbthrift_field_data2, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> data2() && {
    return {static_cast<T&&>(this->__fbthrift_field_data2), __isset.at(1), __isset.bit(1)};
  }
 private:
  template<std::underlying_type_t<::apache::thrift::FieldId>> decltype(auto) __fbthrift_get() &;
  template<std::underlying_type_t<::apache::thrift::FieldId>> decltype(auto) __fbthrift_get() const&;
  template<std::underlying_type_t<::apache::thrift::FieldId>> decltype(auto) __fbthrift_get() &&;
  template<std::underlying_type_t<::apache::thrift::FieldId>> decltype(auto) __fbthrift_get() const&&;
  template<> decltype(auto) __fbthrift_get<1>() &       { return data1_ref(); }
  template<> decltype(auto) __fbthrift_get<1>() const&  { return data1_ref(); }
  template<> decltype(auto) __fbthrift_get<1>() &&      { return std::move(*this).data1_ref(); }
  template<> decltype(auto) __fbthrift_get<1>() const&& { return std::move(*this).data1_ref(); }
  template<> decltype(auto) __fbthrift_get<2>() &       { return data2_ref(); }
  template<> decltype(auto) __fbthrift_get<2>() const&  { return data2_ref(); }
  template<> decltype(auto) __fbthrift_get<2>() &&      { return std::move(*this).data2_ref(); }
  template<> decltype(auto) __fbthrift_get<2>() const&& { return std::move(*this).data2_ref(); }

 public:

  const ::std::string& get_data1() const& {
    return __fbthrift_field_data1;
  }

  ::std::string get_data1() && {
    return std::move(__fbthrift_field_data1);
  }

  template <typename T_MyData_data1_struct_setter = ::std::string>
  [[deprecated("Use `FOO.data1_ref() = BAR;` instead of `FOO.set_data1(BAR);`")]]
  ::std::string& set_data1(T_MyData_data1_struct_setter&& data1_) {
    data1_ref() = std::forward<T_MyData_data1_struct_setter>(data1_);
    return __fbthrift_field_data1;
  }

  ::std::int32_t get_data2() const {
    return __fbthrift_field_data2;
  }

  [[deprecated("Use `FOO.data2_ref() = BAR;` instead of `FOO.set_data2(BAR);`")]]
  ::std::int32_t& set_data2(::std::int32_t data2_) {
    data2_ref() = data2_;
    return __fbthrift_field_data2;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyData>;
  friend void swap(MyData& a, MyData& b);
};

template <class Protocol_>
unsigned long MyData::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
class MyStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = true;
  static const char* __fbthrift_cpp2_gen_thrift_uri();
  using __fbthrift_fields = ::apache::thrift::type::fields<
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{1}, ::apache::thrift::type::bool_t>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{2}, ::apache::thrift::type::byte_t>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{3}, ::apache::thrift::type::i16_t>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{4}, ::apache::thrift::type::i32_t>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{5}, ::apache::thrift::type::i64_t>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{6}, ::apache::thrift::type::float_t>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{7}, ::apache::thrift::type::double_t>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{8}, ::apache::thrift::type::string_t>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{9}, ::apache::thrift::type::cpp_type<::folly::IOBuf, ::apache::thrift::type::binary_t>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{10}, ::apache::thrift::type::struct_t<::cpp2::MyData>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{11}, ::apache::thrift::type::bool_t>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{12}, ::apache::thrift::type::byte_t>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{13}, ::apache::thrift::type::i16_t>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{14}, ::apache::thrift::type::i32_t>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{15}, ::apache::thrift::type::i64_t>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{16}, ::apache::thrift::type::float_t>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{17}, ::apache::thrift::type::double_t>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{18}, ::apache::thrift::type::string_t>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{19}, ::apache::thrift::type::cpp_type<::folly::IOBuf, ::apache::thrift::type::binary_t>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{20}, ::apache::thrift::type::struct_t<::cpp2::MyData>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{21}, ::apache::thrift::type::list<::apache::thrift::type::i16_t>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{22}, ::apache::thrift::type::set<::apache::thrift::type::string_t>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{23}, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::string_t>>
  >;

  void __fbthrift_clear();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStruct(apache::thrift::FragileConstructor, bool boolVal__arg, ::std::int8_t byteVal__arg, ::std::int16_t i16Val__arg, ::std::int32_t i32Val__arg, ::std::int64_t i64Val__arg, float floatVal__arg, double doubleVal__arg, ::std::string stringVal__arg, ::folly::IOBuf binaryVal__arg, ::cpp2::MyData structVal__arg, bool optBoolVal__arg, ::std::int8_t optByteVal__arg, ::std::int16_t optI16Val__arg, ::std::int32_t optI32Val__arg, ::std::int64_t optI64Val__arg, float optFloatVal__arg, double optDoubleVal__arg, ::std::string optStringVal__arg, ::folly::IOBuf optBinaryVal__arg, ::cpp2::MyData optStructVal__arg, ::std::vector<::std::int16_t> optListVal__arg, ::std::set<::std::string> optSetVal__arg, ::std::map<::std::string, ::std::string> optMapVal__arg);

  MyStruct(MyStruct&&) noexcept;

  MyStruct(const MyStruct& src);


  MyStruct& operator=(MyStruct&&) noexcept;
  MyStruct& operator=(const MyStruct& src);

  ~MyStruct();

 private:
  bool __fbthrift_field_boolVal;
 private:
  ::std::int8_t __fbthrift_field_byteVal;
 private:
  ::std::int16_t __fbthrift_field_i16Val;
 private:
  ::std::int32_t __fbthrift_field_i32Val;
 private:
  ::std::int64_t __fbthrift_field_i64Val;
 private:
  float __fbthrift_field_floatVal;
 private:
  double __fbthrift_field_doubleVal;
 private:
  ::std::string __fbthrift_field_stringVal;
 private:
  ::folly::IOBuf __fbthrift_field_binaryVal;
 private:
  ::cpp2::MyData __fbthrift_field_structVal;
 private:
  bool __fbthrift_field_optBoolVal;
 private:
  ::std::int8_t __fbthrift_field_optByteVal;
 private:
  ::std::int16_t __fbthrift_field_optI16Val;
 private:
  ::std::int32_t __fbthrift_field_optI32Val;
 private:
  ::std::int64_t __fbthrift_field_optI64Val;
 private:
  float __fbthrift_field_optFloatVal;
 private:
  double __fbthrift_field_optDoubleVal;
 private:
  ::std::string __fbthrift_field_optStringVal;
 private:
  ::folly::IOBuf __fbthrift_field_optBinaryVal;
 private:
  ::cpp2::MyData __fbthrift_field_optStructVal;
 private:
  ::std::vector<::std::int16_t> __fbthrift_field_optListVal;
 private:
  ::std::set<::std::string> __fbthrift_field_optSetVal;
 private:
  ::std::map<::std::string, ::std::string> __fbthrift_field_optMapVal;
 private:
  apache::thrift::detail::isset_bitset<23, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyStruct&) const;
  bool operator<(const MyStruct&) const;

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> boolVal_ref() const& {
    return {this->__fbthrift_field_boolVal, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> boolVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_boolVal), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> boolVal_ref() & {
    return {this->__fbthrift_field_boolVal, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> boolVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_boolVal), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> boolVal() const& {
    return {this->__fbthrift_field_boolVal, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> boolVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_boolVal), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> boolVal() & {
    return {this->__fbthrift_field_boolVal, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> boolVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_boolVal), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> byteVal_ref() const& {
    return {this->__fbthrift_field_byteVal, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> byteVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_byteVal), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> byteVal_ref() & {
    return {this->__fbthrift_field_byteVal, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> byteVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_byteVal), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> byteVal() const& {
    return {this->__fbthrift_field_byteVal, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> byteVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_byteVal), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> byteVal() & {
    return {this->__fbthrift_field_byteVal, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> byteVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_byteVal), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> i16Val_ref() const& {
    return {this->__fbthrift_field_i16Val, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> i16Val_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_i16Val), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> i16Val_ref() & {
    return {this->__fbthrift_field_i16Val, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> i16Val_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_i16Val), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> i16Val() const& {
    return {this->__fbthrift_field_i16Val, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> i16Val() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_i16Val), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> i16Val() & {
    return {this->__fbthrift_field_i16Val, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> i16Val() && {
    return {static_cast<T&&>(this->__fbthrift_field_i16Val), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> i32Val_ref() const& {
    return {this->__fbthrift_field_i32Val, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> i32Val_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_i32Val), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> i32Val_ref() & {
    return {this->__fbthrift_field_i32Val, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> i32Val_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_i32Val), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> i32Val() const& {
    return {this->__fbthrift_field_i32Val, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> i32Val() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_i32Val), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> i32Val() & {
    return {this->__fbthrift_field_i32Val, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> i32Val() && {
    return {static_cast<T&&>(this->__fbthrift_field_i32Val), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> i64Val_ref() const& {
    return {this->__fbthrift_field_i64Val, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> i64Val_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_i64Val), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> i64Val_ref() & {
    return {this->__fbthrift_field_i64Val, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> i64Val_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_i64Val), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> i64Val() const& {
    return {this->__fbthrift_field_i64Val, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> i64Val() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_i64Val), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> i64Val() & {
    return {this->__fbthrift_field_i64Val, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> i64Val() && {
    return {static_cast<T&&>(this->__fbthrift_field_i64Val), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> floatVal_ref() const& {
    return {this->__fbthrift_field_floatVal, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> floatVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_floatVal), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> floatVal_ref() & {
    return {this->__fbthrift_field_floatVal, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> floatVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_floatVal), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> floatVal() const& {
    return {this->__fbthrift_field_floatVal, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> floatVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_floatVal), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> floatVal() & {
    return {this->__fbthrift_field_floatVal, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> floatVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_floatVal), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> doubleVal_ref() const& {
    return {this->__fbthrift_field_doubleVal, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> doubleVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_doubleVal), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> doubleVal_ref() & {
    return {this->__fbthrift_field_doubleVal, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> doubleVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_doubleVal), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> doubleVal() const& {
    return {this->__fbthrift_field_doubleVal, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> doubleVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_doubleVal), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> doubleVal() & {
    return {this->__fbthrift_field_doubleVal, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> doubleVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_doubleVal), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> stringVal_ref() const& {
    return {this->__fbthrift_field_stringVal, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> stringVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_stringVal), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> stringVal_ref() & {
    return {this->__fbthrift_field_stringVal, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> stringVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_stringVal), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> stringVal() const& {
    return {this->__fbthrift_field_stringVal, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> stringVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_stringVal), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> stringVal() & {
    return {this->__fbthrift_field_stringVal, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> stringVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_stringVal), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> binaryVal_ref() const& {
    return {this->__fbthrift_field_binaryVal, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> binaryVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_binaryVal), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> binaryVal_ref() & {
    return {this->__fbthrift_field_binaryVal, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> binaryVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_binaryVal), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> binaryVal() const& {
    return {this->__fbthrift_field_binaryVal, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> binaryVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_binaryVal), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> binaryVal() & {
    return {this->__fbthrift_field_binaryVal, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> binaryVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_binaryVal), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::cpp2::MyData>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> structVal_ref() const& {
    return {this->__fbthrift_field_structVal, __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::cpp2::MyData>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> structVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_structVal), __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::cpp2::MyData>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> structVal_ref() & {
    return {this->__fbthrift_field_structVal, __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::cpp2::MyData>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> structVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_structVal), __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::cpp2::MyData>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> structVal() const& {
    return {this->__fbthrift_field_structVal, __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::cpp2::MyData>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> structVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_structVal), __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::cpp2::MyData>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> structVal() & {
    return {this->__fbthrift_field_structVal, __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::cpp2::MyData>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> structVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_structVal), __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optBoolVal_ref() const& {
    return {this->__fbthrift_field_optBoolVal, __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optBoolVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optBoolVal), __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optBoolVal_ref() & {
    return {this->__fbthrift_field_optBoolVal, __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optBoolVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optBoolVal), __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optBoolVal() const& {
    return {this->__fbthrift_field_optBoolVal, __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optBoolVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optBoolVal), __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optBoolVal() & {
    return {this->__fbthrift_field_optBoolVal, __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optBoolVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optBoolVal), __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optByteVal_ref() const& {
    return {this->__fbthrift_field_optByteVal, __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optByteVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optByteVal), __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optByteVal_ref() & {
    return {this->__fbthrift_field_optByteVal, __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optByteVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optByteVal), __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optByteVal() const& {
    return {this->__fbthrift_field_optByteVal, __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optByteVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optByteVal), __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optByteVal() & {
    return {this->__fbthrift_field_optByteVal, __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optByteVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optByteVal), __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optI16Val_ref() const& {
    return {this->__fbthrift_field_optI16Val, __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optI16Val_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optI16Val), __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optI16Val_ref() & {
    return {this->__fbthrift_field_optI16Val, __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optI16Val_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optI16Val), __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optI16Val() const& {
    return {this->__fbthrift_field_optI16Val, __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optI16Val() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optI16Val), __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optI16Val() & {
    return {this->__fbthrift_field_optI16Val, __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optI16Val() && {
    return {static_cast<T&&>(this->__fbthrift_field_optI16Val), __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optI32Val_ref() const& {
    return {this->__fbthrift_field_optI32Val, __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optI32Val_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optI32Val), __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optI32Val_ref() & {
    return {this->__fbthrift_field_optI32Val, __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optI32Val_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optI32Val), __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optI32Val() const& {
    return {this->__fbthrift_field_optI32Val, __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optI32Val() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optI32Val), __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optI32Val() & {
    return {this->__fbthrift_field_optI32Val, __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optI32Val() && {
    return {static_cast<T&&>(this->__fbthrift_field_optI32Val), __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optI64Val_ref() const& {
    return {this->__fbthrift_field_optI64Val, __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optI64Val_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optI64Val), __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optI64Val_ref() & {
    return {this->__fbthrift_field_optI64Val, __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optI64Val_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optI64Val), __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optI64Val() const& {
    return {this->__fbthrift_field_optI64Val, __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optI64Val() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optI64Val), __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optI64Val() & {
    return {this->__fbthrift_field_optI64Val, __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optI64Val() && {
    return {static_cast<T&&>(this->__fbthrift_field_optI64Val), __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optFloatVal_ref() const& {
    return {this->__fbthrift_field_optFloatVal, __isset.at(15), __isset.bit(15)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optFloatVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optFloatVal), __isset.at(15), __isset.bit(15)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optFloatVal_ref() & {
    return {this->__fbthrift_field_optFloatVal, __isset.at(15), __isset.bit(15)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optFloatVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optFloatVal), __isset.at(15), __isset.bit(15)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optFloatVal() const& {
    return {this->__fbthrift_field_optFloatVal, __isset.at(15), __isset.bit(15)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optFloatVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optFloatVal), __isset.at(15), __isset.bit(15)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optFloatVal() & {
    return {this->__fbthrift_field_optFloatVal, __isset.at(15), __isset.bit(15)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optFloatVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optFloatVal), __isset.at(15), __isset.bit(15)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optDoubleVal_ref() const& {
    return {this->__fbthrift_field_optDoubleVal, __isset.at(16), __isset.bit(16)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optDoubleVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optDoubleVal), __isset.at(16), __isset.bit(16)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optDoubleVal_ref() & {
    return {this->__fbthrift_field_optDoubleVal, __isset.at(16), __isset.bit(16)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optDoubleVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optDoubleVal), __isset.at(16), __isset.bit(16)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optDoubleVal() const& {
    return {this->__fbthrift_field_optDoubleVal, __isset.at(16), __isset.bit(16)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optDoubleVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optDoubleVal), __isset.at(16), __isset.bit(16)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optDoubleVal() & {
    return {this->__fbthrift_field_optDoubleVal, __isset.at(16), __isset.bit(16)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optDoubleVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optDoubleVal), __isset.at(16), __isset.bit(16)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optStringVal_ref() const& {
    return {this->__fbthrift_field_optStringVal, __isset.at(17), __isset.bit(17)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optStringVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optStringVal), __isset.at(17), __isset.bit(17)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optStringVal_ref() & {
    return {this->__fbthrift_field_optStringVal, __isset.at(17), __isset.bit(17)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optStringVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optStringVal), __isset.at(17), __isset.bit(17)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optStringVal() const& {
    return {this->__fbthrift_field_optStringVal, __isset.at(17), __isset.bit(17)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optStringVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optStringVal), __isset.at(17), __isset.bit(17)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optStringVal() & {
    return {this->__fbthrift_field_optStringVal, __isset.at(17), __isset.bit(17)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optStringVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optStringVal), __isset.at(17), __isset.bit(17)};
  }

  template <typename..., typename T = ::folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optBinaryVal_ref() const& {
    return {this->__fbthrift_field_optBinaryVal, __isset.at(18), __isset.bit(18)};
  }

  template <typename..., typename T = ::folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optBinaryVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optBinaryVal), __isset.at(18), __isset.bit(18)};
  }

  template <typename..., typename T = ::folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optBinaryVal_ref() & {
    return {this->__fbthrift_field_optBinaryVal, __isset.at(18), __isset.bit(18)};
  }

  template <typename..., typename T = ::folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optBinaryVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optBinaryVal), __isset.at(18), __isset.bit(18)};
  }

  template <typename..., typename T = ::folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optBinaryVal() const& {
    return {this->__fbthrift_field_optBinaryVal, __isset.at(18), __isset.bit(18)};
  }

  template <typename..., typename T = ::folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optBinaryVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optBinaryVal), __isset.at(18), __isset.bit(18)};
  }

  template <typename..., typename T = ::folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optBinaryVal() & {
    return {this->__fbthrift_field_optBinaryVal, __isset.at(18), __isset.bit(18)};
  }

  template <typename..., typename T = ::folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optBinaryVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optBinaryVal), __isset.at(18), __isset.bit(18)};
  }

  template <typename..., typename T = ::cpp2::MyData>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optStructVal_ref() const& {
    return {this->__fbthrift_field_optStructVal, __isset.at(19), __isset.bit(19)};
  }

  template <typename..., typename T = ::cpp2::MyData>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optStructVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optStructVal), __isset.at(19), __isset.bit(19)};
  }

  template <typename..., typename T = ::cpp2::MyData>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optStructVal_ref() & {
    return {this->__fbthrift_field_optStructVal, __isset.at(19), __isset.bit(19)};
  }

  template <typename..., typename T = ::cpp2::MyData>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optStructVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optStructVal), __isset.at(19), __isset.bit(19)};
  }

  template <typename..., typename T = ::cpp2::MyData>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optStructVal() const& {
    return {this->__fbthrift_field_optStructVal, __isset.at(19), __isset.bit(19)};
  }

  template <typename..., typename T = ::cpp2::MyData>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optStructVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optStructVal), __isset.at(19), __isset.bit(19)};
  }

  template <typename..., typename T = ::cpp2::MyData>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optStructVal() & {
    return {this->__fbthrift_field_optStructVal, __isset.at(19), __isset.bit(19)};
  }

  template <typename..., typename T = ::cpp2::MyData>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optStructVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optStructVal), __isset.at(19), __isset.bit(19)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optListVal_ref() const& {
    return {this->__fbthrift_field_optListVal, __isset.at(20), __isset.bit(20)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optListVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optListVal), __isset.at(20), __isset.bit(20)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optListVal_ref() & {
    return {this->__fbthrift_field_optListVal, __isset.at(20), __isset.bit(20)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optListVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optListVal), __isset.at(20), __isset.bit(20)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optListVal() const& {
    return {this->__fbthrift_field_optListVal, __isset.at(20), __isset.bit(20)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optListVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optListVal), __isset.at(20), __isset.bit(20)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optListVal() & {
    return {this->__fbthrift_field_optListVal, __isset.at(20), __isset.bit(20)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optListVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optListVal), __isset.at(20), __isset.bit(20)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optSetVal_ref() const& {
    return {this->__fbthrift_field_optSetVal, __isset.at(21), __isset.bit(21)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optSetVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optSetVal), __isset.at(21), __isset.bit(21)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optSetVal_ref() & {
    return {this->__fbthrift_field_optSetVal, __isset.at(21), __isset.bit(21)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optSetVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optSetVal), __isset.at(21), __isset.bit(21)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optSetVal() const& {
    return {this->__fbthrift_field_optSetVal, __isset.at(21), __isset.bit(21)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optSetVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optSetVal), __isset.at(21), __isset.bit(21)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optSetVal() & {
    return {this->__fbthrift_field_optSetVal, __isset.at(21), __isset.bit(21)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optSetVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optSetVal), __isset.at(21), __isset.bit(21)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optMapVal_ref() const& {
    return {this->__fbthrift_field_optMapVal, __isset.at(22), __isset.bit(22)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optMapVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optMapVal), __isset.at(22), __isset.bit(22)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optMapVal_ref() & {
    return {this->__fbthrift_field_optMapVal, __isset.at(22), __isset.bit(22)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optMapVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optMapVal), __isset.at(22), __isset.bit(22)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optMapVal() const& {
    return {this->__fbthrift_field_optMapVal, __isset.at(22), __isset.bit(22)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optMapVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optMapVal), __isset.at(22), __isset.bit(22)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optMapVal() & {
    return {this->__fbthrift_field_optMapVal, __isset.at(22), __isset.bit(22)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optMapVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optMapVal), __isset.at(22), __isset.bit(22)};
  }
 private:
  template<std::underlying_type_t<::apache::thrift::FieldId>> decltype(auto) __fbthrift_get() &;
  template<std::underlying_type_t<::apache::thrift::FieldId>> decltype(auto) __fbthrift_get() const&;
  template<std::underlying_type_t<::apache::thrift::FieldId>> decltype(auto) __fbthrift_get() &&;
  template<std::underlying_type_t<::apache::thrift::FieldId>> decltype(auto) __fbthrift_get() const&&;
  template<> decltype(auto) __fbthrift_get<1>() &       { return boolVal_ref(); }
  template<> decltype(auto) __fbthrift_get<1>() const&  { return boolVal_ref(); }
  template<> decltype(auto) __fbthrift_get<1>() &&      { return std::move(*this).boolVal_ref(); }
  template<> decltype(auto) __fbthrift_get<1>() const&& { return std::move(*this).boolVal_ref(); }
  template<> decltype(auto) __fbthrift_get<2>() &       { return byteVal_ref(); }
  template<> decltype(auto) __fbthrift_get<2>() const&  { return byteVal_ref(); }
  template<> decltype(auto) __fbthrift_get<2>() &&      { return std::move(*this).byteVal_ref(); }
  template<> decltype(auto) __fbthrift_get<2>() const&& { return std::move(*this).byteVal_ref(); }
  template<> decltype(auto) __fbthrift_get<3>() &       { return i16Val_ref(); }
  template<> decltype(auto) __fbthrift_get<3>() const&  { return i16Val_ref(); }
  template<> decltype(auto) __fbthrift_get<3>() &&      { return std::move(*this).i16Val_ref(); }
  template<> decltype(auto) __fbthrift_get<3>() const&& { return std::move(*this).i16Val_ref(); }
  template<> decltype(auto) __fbthrift_get<4>() &       { return i32Val_ref(); }
  template<> decltype(auto) __fbthrift_get<4>() const&  { return i32Val_ref(); }
  template<> decltype(auto) __fbthrift_get<4>() &&      { return std::move(*this).i32Val_ref(); }
  template<> decltype(auto) __fbthrift_get<4>() const&& { return std::move(*this).i32Val_ref(); }
  template<> decltype(auto) __fbthrift_get<5>() &       { return i64Val_ref(); }
  template<> decltype(auto) __fbthrift_get<5>() const&  { return i64Val_ref(); }
  template<> decltype(auto) __fbthrift_get<5>() &&      { return std::move(*this).i64Val_ref(); }
  template<> decltype(auto) __fbthrift_get<5>() const&& { return std::move(*this).i64Val_ref(); }
  template<> decltype(auto) __fbthrift_get<6>() &       { return floatVal_ref(); }
  template<> decltype(auto) __fbthrift_get<6>() const&  { return floatVal_ref(); }
  template<> decltype(auto) __fbthrift_get<6>() &&      { return std::move(*this).floatVal_ref(); }
  template<> decltype(auto) __fbthrift_get<6>() const&& { return std::move(*this).floatVal_ref(); }
  template<> decltype(auto) __fbthrift_get<7>() &       { return doubleVal_ref(); }
  template<> decltype(auto) __fbthrift_get<7>() const&  { return doubleVal_ref(); }
  template<> decltype(auto) __fbthrift_get<7>() &&      { return std::move(*this).doubleVal_ref(); }
  template<> decltype(auto) __fbthrift_get<7>() const&& { return std::move(*this).doubleVal_ref(); }
  template<> decltype(auto) __fbthrift_get<8>() &       { return stringVal_ref(); }
  template<> decltype(auto) __fbthrift_get<8>() const&  { return stringVal_ref(); }
  template<> decltype(auto) __fbthrift_get<8>() &&      { return std::move(*this).stringVal_ref(); }
  template<> decltype(auto) __fbthrift_get<8>() const&& { return std::move(*this).stringVal_ref(); }
  template<> decltype(auto) __fbthrift_get<9>() &       { return binaryVal_ref(); }
  template<> decltype(auto) __fbthrift_get<9>() const&  { return binaryVal_ref(); }
  template<> decltype(auto) __fbthrift_get<9>() &&      { return std::move(*this).binaryVal_ref(); }
  template<> decltype(auto) __fbthrift_get<9>() const&& { return std::move(*this).binaryVal_ref(); }
  template<> decltype(auto) __fbthrift_get<10>() &       { return structVal_ref(); }
  template<> decltype(auto) __fbthrift_get<10>() const&  { return structVal_ref(); }
  template<> decltype(auto) __fbthrift_get<10>() &&      { return std::move(*this).structVal_ref(); }
  template<> decltype(auto) __fbthrift_get<10>() const&& { return std::move(*this).structVal_ref(); }
  template<> decltype(auto) __fbthrift_get<11>() &       { return optBoolVal_ref(); }
  template<> decltype(auto) __fbthrift_get<11>() const&  { return optBoolVal_ref(); }
  template<> decltype(auto) __fbthrift_get<11>() &&      { return std::move(*this).optBoolVal_ref(); }
  template<> decltype(auto) __fbthrift_get<11>() const&& { return std::move(*this).optBoolVal_ref(); }
  template<> decltype(auto) __fbthrift_get<12>() &       { return optByteVal_ref(); }
  template<> decltype(auto) __fbthrift_get<12>() const&  { return optByteVal_ref(); }
  template<> decltype(auto) __fbthrift_get<12>() &&      { return std::move(*this).optByteVal_ref(); }
  template<> decltype(auto) __fbthrift_get<12>() const&& { return std::move(*this).optByteVal_ref(); }
  template<> decltype(auto) __fbthrift_get<13>() &       { return optI16Val_ref(); }
  template<> decltype(auto) __fbthrift_get<13>() const&  { return optI16Val_ref(); }
  template<> decltype(auto) __fbthrift_get<13>() &&      { return std::move(*this).optI16Val_ref(); }
  template<> decltype(auto) __fbthrift_get<13>() const&& { return std::move(*this).optI16Val_ref(); }
  template<> decltype(auto) __fbthrift_get<14>() &       { return optI32Val_ref(); }
  template<> decltype(auto) __fbthrift_get<14>() const&  { return optI32Val_ref(); }
  template<> decltype(auto) __fbthrift_get<14>() &&      { return std::move(*this).optI32Val_ref(); }
  template<> decltype(auto) __fbthrift_get<14>() const&& { return std::move(*this).optI32Val_ref(); }
  template<> decltype(auto) __fbthrift_get<15>() &       { return optI64Val_ref(); }
  template<> decltype(auto) __fbthrift_get<15>() const&  { return optI64Val_ref(); }
  template<> decltype(auto) __fbthrift_get<15>() &&      { return std::move(*this).optI64Val_ref(); }
  template<> decltype(auto) __fbthrift_get<15>() const&& { return std::move(*this).optI64Val_ref(); }
  template<> decltype(auto) __fbthrift_get<16>() &       { return optFloatVal_ref(); }
  template<> decltype(auto) __fbthrift_get<16>() const&  { return optFloatVal_ref(); }
  template<> decltype(auto) __fbthrift_get<16>() &&      { return std::move(*this).optFloatVal_ref(); }
  template<> decltype(auto) __fbthrift_get<16>() const&& { return std::move(*this).optFloatVal_ref(); }
  template<> decltype(auto) __fbthrift_get<17>() &       { return optDoubleVal_ref(); }
  template<> decltype(auto) __fbthrift_get<17>() const&  { return optDoubleVal_ref(); }
  template<> decltype(auto) __fbthrift_get<17>() &&      { return std::move(*this).optDoubleVal_ref(); }
  template<> decltype(auto) __fbthrift_get<17>() const&& { return std::move(*this).optDoubleVal_ref(); }
  template<> decltype(auto) __fbthrift_get<18>() &       { return optStringVal_ref(); }
  template<> decltype(auto) __fbthrift_get<18>() const&  { return optStringVal_ref(); }
  template<> decltype(auto) __fbthrift_get<18>() &&      { return std::move(*this).optStringVal_ref(); }
  template<> decltype(auto) __fbthrift_get<18>() const&& { return std::move(*this).optStringVal_ref(); }
  template<> decltype(auto) __fbthrift_get<19>() &       { return optBinaryVal_ref(); }
  template<> decltype(auto) __fbthrift_get<19>() const&  { return optBinaryVal_ref(); }
  template<> decltype(auto) __fbthrift_get<19>() &&      { return std::move(*this).optBinaryVal_ref(); }
  template<> decltype(auto) __fbthrift_get<19>() const&& { return std::move(*this).optBinaryVal_ref(); }
  template<> decltype(auto) __fbthrift_get<20>() &       { return optStructVal_ref(); }
  template<> decltype(auto) __fbthrift_get<20>() const&  { return optStructVal_ref(); }
  template<> decltype(auto) __fbthrift_get<20>() &&      { return std::move(*this).optStructVal_ref(); }
  template<> decltype(auto) __fbthrift_get<20>() const&& { return std::move(*this).optStructVal_ref(); }
  template<> decltype(auto) __fbthrift_get<21>() &       { return optListVal_ref(); }
  template<> decltype(auto) __fbthrift_get<21>() const&  { return optListVal_ref(); }
  template<> decltype(auto) __fbthrift_get<21>() &&      { return std::move(*this).optListVal_ref(); }
  template<> decltype(auto) __fbthrift_get<21>() const&& { return std::move(*this).optListVal_ref(); }
  template<> decltype(auto) __fbthrift_get<22>() &       { return optSetVal_ref(); }
  template<> decltype(auto) __fbthrift_get<22>() const&  { return optSetVal_ref(); }
  template<> decltype(auto) __fbthrift_get<22>() &&      { return std::move(*this).optSetVal_ref(); }
  template<> decltype(auto) __fbthrift_get<22>() const&& { return std::move(*this).optSetVal_ref(); }
  template<> decltype(auto) __fbthrift_get<23>() &       { return optMapVal_ref(); }
  template<> decltype(auto) __fbthrift_get<23>() const&  { return optMapVal_ref(); }
  template<> decltype(auto) __fbthrift_get<23>() &&      { return std::move(*this).optMapVal_ref(); }
  template<> decltype(auto) __fbthrift_get<23>() const&& { return std::move(*this).optMapVal_ref(); }

 public:

  bool get_boolVal() const {
    return __fbthrift_field_boolVal;
  }

  [[deprecated("Use `FOO.boolVal_ref() = BAR;` instead of `FOO.set_boolVal(BAR);`")]]
  bool& set_boolVal(bool boolVal_) {
    boolVal_ref() = boolVal_;
    return __fbthrift_field_boolVal;
  }

  ::std::int8_t get_byteVal() const {
    return __fbthrift_field_byteVal;
  }

  [[deprecated("Use `FOO.byteVal_ref() = BAR;` instead of `FOO.set_byteVal(BAR);`")]]
  ::std::int8_t& set_byteVal(::std::int8_t byteVal_) {
    byteVal_ref() = byteVal_;
    return __fbthrift_field_byteVal;
  }

  ::std::int16_t get_i16Val() const {
    return __fbthrift_field_i16Val;
  }

  [[deprecated("Use `FOO.i16Val_ref() = BAR;` instead of `FOO.set_i16Val(BAR);`")]]
  ::std::int16_t& set_i16Val(::std::int16_t i16Val_) {
    i16Val_ref() = i16Val_;
    return __fbthrift_field_i16Val;
  }

  ::std::int32_t get_i32Val() const {
    return __fbthrift_field_i32Val;
  }

  [[deprecated("Use `FOO.i32Val_ref() = BAR;` instead of `FOO.set_i32Val(BAR);`")]]
  ::std::int32_t& set_i32Val(::std::int32_t i32Val_) {
    i32Val_ref() = i32Val_;
    return __fbthrift_field_i32Val;
  }

  ::std::int64_t get_i64Val() const {
    return __fbthrift_field_i64Val;
  }

  [[deprecated("Use `FOO.i64Val_ref() = BAR;` instead of `FOO.set_i64Val(BAR);`")]]
  ::std::int64_t& set_i64Val(::std::int64_t i64Val_) {
    i64Val_ref() = i64Val_;
    return __fbthrift_field_i64Val;
  }

  float get_floatVal() const {
    return __fbthrift_field_floatVal;
  }

  [[deprecated("Use `FOO.floatVal_ref() = BAR;` instead of `FOO.set_floatVal(BAR);`")]]
  float& set_floatVal(float floatVal_) {
    floatVal_ref() = floatVal_;
    return __fbthrift_field_floatVal;
  }

  double get_doubleVal() const {
    return __fbthrift_field_doubleVal;
  }

  [[deprecated("Use `FOO.doubleVal_ref() = BAR;` instead of `FOO.set_doubleVal(BAR);`")]]
  double& set_doubleVal(double doubleVal_) {
    doubleVal_ref() = doubleVal_;
    return __fbthrift_field_doubleVal;
  }

  const ::std::string& get_stringVal() const& {
    return __fbthrift_field_stringVal;
  }

  ::std::string get_stringVal() && {
    return std::move(__fbthrift_field_stringVal);
  }

  template <typename T_MyStruct_stringVal_struct_setter = ::std::string>
  [[deprecated("Use `FOO.stringVal_ref() = BAR;` instead of `FOO.set_stringVal(BAR);`")]]
  ::std::string& set_stringVal(T_MyStruct_stringVal_struct_setter&& stringVal_) {
    stringVal_ref() = std::forward<T_MyStruct_stringVal_struct_setter>(stringVal_);
    return __fbthrift_field_stringVal;
  }

  const ::folly::IOBuf& get_binaryVal() const& {
    return __fbthrift_field_binaryVal;
  }

  ::folly::IOBuf get_binaryVal() && {
    return std::move(__fbthrift_field_binaryVal);
  }

  template <typename T_MyStruct_binaryVal_struct_setter = ::folly::IOBuf>
  [[deprecated("Use `FOO.binaryVal_ref() = BAR;` instead of `FOO.set_binaryVal(BAR);`")]]
  ::folly::IOBuf& set_binaryVal(T_MyStruct_binaryVal_struct_setter&& binaryVal_) {
    binaryVal_ref() = std::forward<T_MyStruct_binaryVal_struct_setter>(binaryVal_);
    return __fbthrift_field_binaryVal;
  }
  const ::cpp2::MyData& get_structVal() const&;
  ::cpp2::MyData get_structVal() &&;

  template <typename T_MyStruct_structVal_struct_setter = ::cpp2::MyData>
  [[deprecated("Use `FOO.structVal_ref() = BAR;` instead of `FOO.set_structVal(BAR);`")]]
  ::cpp2::MyData& set_structVal(T_MyStruct_structVal_struct_setter&& structVal_) {
    structVal_ref() = std::forward<T_MyStruct_structVal_struct_setter>(structVal_);
    return __fbthrift_field_structVal;
  }

  const bool* get_optBoolVal() const& {
    return optBoolVal_ref() ? std::addressof(__fbthrift_field_optBoolVal) : nullptr;
  }

  bool* get_optBoolVal() & {
    return optBoolVal_ref() ? std::addressof(__fbthrift_field_optBoolVal) : nullptr;
  }
  bool* get_optBoolVal() && = delete;

  [[deprecated("Use `FOO.optBoolVal_ref() = BAR;` instead of `FOO.set_optBoolVal(BAR);`")]]
  bool& set_optBoolVal(bool optBoolVal_) {
    optBoolVal_ref() = optBoolVal_;
    return __fbthrift_field_optBoolVal;
  }

  const ::std::int8_t* get_optByteVal() const& {
    return optByteVal_ref() ? std::addressof(__fbthrift_field_optByteVal) : nullptr;
  }

  ::std::int8_t* get_optByteVal() & {
    return optByteVal_ref() ? std::addressof(__fbthrift_field_optByteVal) : nullptr;
  }
  ::std::int8_t* get_optByteVal() && = delete;

  [[deprecated("Use `FOO.optByteVal_ref() = BAR;` instead of `FOO.set_optByteVal(BAR);`")]]
  ::std::int8_t& set_optByteVal(::std::int8_t optByteVal_) {
    optByteVal_ref() = optByteVal_;
    return __fbthrift_field_optByteVal;
  }

  const ::std::int16_t* get_optI16Val() const& {
    return optI16Val_ref() ? std::addressof(__fbthrift_field_optI16Val) : nullptr;
  }

  ::std::int16_t* get_optI16Val() & {
    return optI16Val_ref() ? std::addressof(__fbthrift_field_optI16Val) : nullptr;
  }
  ::std::int16_t* get_optI16Val() && = delete;

  [[deprecated("Use `FOO.optI16Val_ref() = BAR;` instead of `FOO.set_optI16Val(BAR);`")]]
  ::std::int16_t& set_optI16Val(::std::int16_t optI16Val_) {
    optI16Val_ref() = optI16Val_;
    return __fbthrift_field_optI16Val;
  }

  const ::std::int32_t* get_optI32Val() const& {
    return optI32Val_ref() ? std::addressof(__fbthrift_field_optI32Val) : nullptr;
  }

  ::std::int32_t* get_optI32Val() & {
    return optI32Val_ref() ? std::addressof(__fbthrift_field_optI32Val) : nullptr;
  }
  ::std::int32_t* get_optI32Val() && = delete;

  [[deprecated("Use `FOO.optI32Val_ref() = BAR;` instead of `FOO.set_optI32Val(BAR);`")]]
  ::std::int32_t& set_optI32Val(::std::int32_t optI32Val_) {
    optI32Val_ref() = optI32Val_;
    return __fbthrift_field_optI32Val;
  }

  const ::std::int64_t* get_optI64Val() const& {
    return optI64Val_ref() ? std::addressof(__fbthrift_field_optI64Val) : nullptr;
  }

  ::std::int64_t* get_optI64Val() & {
    return optI64Val_ref() ? std::addressof(__fbthrift_field_optI64Val) : nullptr;
  }
  ::std::int64_t* get_optI64Val() && = delete;

  [[deprecated("Use `FOO.optI64Val_ref() = BAR;` instead of `FOO.set_optI64Val(BAR);`")]]
  ::std::int64_t& set_optI64Val(::std::int64_t optI64Val_) {
    optI64Val_ref() = optI64Val_;
    return __fbthrift_field_optI64Val;
  }

  const float* get_optFloatVal() const& {
    return optFloatVal_ref() ? std::addressof(__fbthrift_field_optFloatVal) : nullptr;
  }

  float* get_optFloatVal() & {
    return optFloatVal_ref() ? std::addressof(__fbthrift_field_optFloatVal) : nullptr;
  }
  float* get_optFloatVal() && = delete;

  [[deprecated("Use `FOO.optFloatVal_ref() = BAR;` instead of `FOO.set_optFloatVal(BAR);`")]]
  float& set_optFloatVal(float optFloatVal_) {
    optFloatVal_ref() = optFloatVal_;
    return __fbthrift_field_optFloatVal;
  }

  const double* get_optDoubleVal() const& {
    return optDoubleVal_ref() ? std::addressof(__fbthrift_field_optDoubleVal) : nullptr;
  }

  double* get_optDoubleVal() & {
    return optDoubleVal_ref() ? std::addressof(__fbthrift_field_optDoubleVal) : nullptr;
  }
  double* get_optDoubleVal() && = delete;

  [[deprecated("Use `FOO.optDoubleVal_ref() = BAR;` instead of `FOO.set_optDoubleVal(BAR);`")]]
  double& set_optDoubleVal(double optDoubleVal_) {
    optDoubleVal_ref() = optDoubleVal_;
    return __fbthrift_field_optDoubleVal;
  }

  const ::std::string* get_optStringVal() const& {
    return optStringVal_ref() ? std::addressof(__fbthrift_field_optStringVal) : nullptr;
  }

  ::std::string* get_optStringVal() & {
    return optStringVal_ref() ? std::addressof(__fbthrift_field_optStringVal) : nullptr;
  }
  ::std::string* get_optStringVal() && = delete;

  template <typename T_MyStruct_optStringVal_struct_setter = ::std::string>
  [[deprecated("Use `FOO.optStringVal_ref() = BAR;` instead of `FOO.set_optStringVal(BAR);`")]]
  ::std::string& set_optStringVal(T_MyStruct_optStringVal_struct_setter&& optStringVal_) {
    optStringVal_ref() = std::forward<T_MyStruct_optStringVal_struct_setter>(optStringVal_);
    return __fbthrift_field_optStringVal;
  }

  const ::folly::IOBuf* get_optBinaryVal() const& {
    return optBinaryVal_ref() ? std::addressof(__fbthrift_field_optBinaryVal) : nullptr;
  }

  ::folly::IOBuf* get_optBinaryVal() & {
    return optBinaryVal_ref() ? std::addressof(__fbthrift_field_optBinaryVal) : nullptr;
  }
  ::folly::IOBuf* get_optBinaryVal() && = delete;

  template <typename T_MyStruct_optBinaryVal_struct_setter = ::folly::IOBuf>
  [[deprecated("Use `FOO.optBinaryVal_ref() = BAR;` instead of `FOO.set_optBinaryVal(BAR);`")]]
  ::folly::IOBuf& set_optBinaryVal(T_MyStruct_optBinaryVal_struct_setter&& optBinaryVal_) {
    optBinaryVal_ref() = std::forward<T_MyStruct_optBinaryVal_struct_setter>(optBinaryVal_);
    return __fbthrift_field_optBinaryVal;
  }
  const ::cpp2::MyData* get_optStructVal() const&;
  ::cpp2::MyData* get_optStructVal() &;
  ::cpp2::MyData* get_optStructVal() && = delete;

  template <typename T_MyStruct_optStructVal_struct_setter = ::cpp2::MyData>
  [[deprecated("Use `FOO.optStructVal_ref() = BAR;` instead of `FOO.set_optStructVal(BAR);`")]]
  ::cpp2::MyData& set_optStructVal(T_MyStruct_optStructVal_struct_setter&& optStructVal_) {
    optStructVal_ref() = std::forward<T_MyStruct_optStructVal_struct_setter>(optStructVal_);
    return __fbthrift_field_optStructVal;
  }
  const ::std::vector<::std::int16_t>* get_optListVal() const&;
  ::std::vector<::std::int16_t>* get_optListVal() &;
  ::std::vector<::std::int16_t>* get_optListVal() && = delete;

  template <typename T_MyStruct_optListVal_struct_setter = ::std::vector<::std::int16_t>>
  [[deprecated("Use `FOO.optListVal_ref() = BAR;` instead of `FOO.set_optListVal(BAR);`")]]
  ::std::vector<::std::int16_t>& set_optListVal(T_MyStruct_optListVal_struct_setter&& optListVal_) {
    optListVal_ref() = std::forward<T_MyStruct_optListVal_struct_setter>(optListVal_);
    return __fbthrift_field_optListVal;
  }
  const ::std::set<::std::string>* get_optSetVal() const&;
  ::std::set<::std::string>* get_optSetVal() &;
  ::std::set<::std::string>* get_optSetVal() && = delete;

  template <typename T_MyStruct_optSetVal_struct_setter = ::std::set<::std::string>>
  [[deprecated("Use `FOO.optSetVal_ref() = BAR;` instead of `FOO.set_optSetVal(BAR);`")]]
  ::std::set<::std::string>& set_optSetVal(T_MyStruct_optSetVal_struct_setter&& optSetVal_) {
    optSetVal_ref() = std::forward<T_MyStruct_optSetVal_struct_setter>(optSetVal_);
    return __fbthrift_field_optSetVal;
  }
  const ::std::map<::std::string, ::std::string>* get_optMapVal() const&;
  ::std::map<::std::string, ::std::string>* get_optMapVal() &;
  ::std::map<::std::string, ::std::string>* get_optMapVal() && = delete;

  template <typename T_MyStruct_optMapVal_struct_setter = ::std::map<::std::string, ::std::string>>
  [[deprecated("Use `FOO.optMapVal_ref() = BAR;` instead of `FOO.set_optMapVal(BAR);`")]]
  ::std::map<::std::string, ::std::string>& set_optMapVal(T_MyStruct_optMapVal_struct_setter&& optMapVal_) {
    optMapVal_ref() = std::forward<T_MyStruct_optMapVal_struct_setter>(optMapVal_);
    return __fbthrift_field_optMapVal;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStruct>;
  friend void swap(MyStruct& a, MyStruct& b);
};

template <class Protocol_>
unsigned long MyStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
class MyDataPatch final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = true;
  static const char* __fbthrift_cpp2_gen_thrift_uri();
  using __fbthrift_fields = ::apache::thrift::type::fields<
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{1}, ::apache::thrift::type::struct_t<::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StringPatchAdapter, ::apache::thrift::op::StringPatchStruct>>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{2}, ::apache::thrift::type::struct_t<::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I32PatchStruct>>>
  >;

  void __fbthrift_clear();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyDataPatch;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyDataPatch() {
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter, 1>(__fbthrift_field_data1, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 2>(__fbthrift_field_data2, *this);
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyDataPatch(apache::thrift::FragileConstructor, ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StringPatchAdapter, ::apache::thrift::op::StringPatchStruct> data1__arg, ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I32PatchStruct> data2__arg);

  MyDataPatch(MyDataPatch&&) noexcept;
  MyDataPatch(const MyDataPatch& src);


  MyDataPatch& operator=(MyDataPatch&&) noexcept;
  MyDataPatch& operator=(const MyDataPatch& src);
 private:
  ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StringPatchAdapter, ::apache::thrift::op::StringPatchStruct> __fbthrift_field_data1;
 private:
  ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I32PatchStruct> __fbthrift_field_data2;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyDataPatch&) const;
  bool operator<(const MyDataPatch&) const;

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StringPatchAdapter, ::apache::thrift::op::StringPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> data1_ref() const& {
    return {this->__fbthrift_field_data1, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StringPatchAdapter, ::apache::thrift::op::StringPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> data1_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_data1), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StringPatchAdapter, ::apache::thrift::op::StringPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> data1_ref() & {
    return {this->__fbthrift_field_data1, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StringPatchAdapter, ::apache::thrift::op::StringPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> data1_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_data1), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StringPatchAdapter, ::apache::thrift::op::StringPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> data1() const& {
    return {this->__fbthrift_field_data1, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StringPatchAdapter, ::apache::thrift::op::StringPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> data1() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_data1), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StringPatchAdapter, ::apache::thrift::op::StringPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> data1() & {
    return {this->__fbthrift_field_data1, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StringPatchAdapter, ::apache::thrift::op::StringPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> data1() && {
    return {static_cast<T&&>(this->__fbthrift_field_data1), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I32PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> data2_ref() const& {
    return {this->__fbthrift_field_data2, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I32PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> data2_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_data2), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I32PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> data2_ref() & {
    return {this->__fbthrift_field_data2, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I32PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> data2_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_data2), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I32PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> data2() const& {
    return {this->__fbthrift_field_data2, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I32PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> data2() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_data2), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I32PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> data2() & {
    return {this->__fbthrift_field_data2, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I32PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> data2() && {
    return {static_cast<T&&>(this->__fbthrift_field_data2), __isset.at(1), __isset.bit(1)};
  }
 private:
  template<std::underlying_type_t<::apache::thrift::FieldId>> decltype(auto) __fbthrift_get() &;
  template<std::underlying_type_t<::apache::thrift::FieldId>> decltype(auto) __fbthrift_get() const&;
  template<std::underlying_type_t<::apache::thrift::FieldId>> decltype(auto) __fbthrift_get() &&;
  template<std::underlying_type_t<::apache::thrift::FieldId>> decltype(auto) __fbthrift_get() const&&;
  template<> decltype(auto) __fbthrift_get<1>() &       { return data1_ref(); }
  template<> decltype(auto) __fbthrift_get<1>() const&  { return data1_ref(); }
  template<> decltype(auto) __fbthrift_get<1>() &&      { return std::move(*this).data1_ref(); }
  template<> decltype(auto) __fbthrift_get<1>() const&& { return std::move(*this).data1_ref(); }
  template<> decltype(auto) __fbthrift_get<2>() &       { return data2_ref(); }
  template<> decltype(auto) __fbthrift_get<2>() const&  { return data2_ref(); }
  template<> decltype(auto) __fbthrift_get<2>() &&      { return std::move(*this).data2_ref(); }
  template<> decltype(auto) __fbthrift_get<2>() const&& { return std::move(*this).data2_ref(); }

 public:

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyDataPatch>;
  friend void swap(MyDataPatch& a, MyDataPatch& b);
};

template <class Protocol_>
unsigned long MyDataPatch::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
class MyDataValuePatch final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = true;
  static const char* __fbthrift_cpp2_gen_thrift_uri();
  using __fbthrift_fields = ::apache::thrift::type::fields<
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{1}, ::apache::thrift::type::struct_t<::cpp2::MyData>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{2}, ::apache::thrift::type::bool_t>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{3}, ::apache::thrift::type::struct_t<::cpp2::MyDataPatch>>
  >;

  void __fbthrift_clear();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyDataValuePatch;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyDataValuePatch() :
      __fbthrift_field_clear() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyDataValuePatch(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyData> assign__arg, bool clear__arg, ::cpp2::MyDataPatch patch__arg);

  MyDataValuePatch(MyDataValuePatch&&) noexcept;

  MyDataValuePatch(const MyDataValuePatch& src);


  MyDataValuePatch& operator=(MyDataValuePatch&&) noexcept;
  MyDataValuePatch& operator=(const MyDataValuePatch& src);
 private:
  ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyData> __fbthrift_field_assign;
 private:
  bool __fbthrift_field_clear;
 private:
  ::cpp2::MyDataPatch __fbthrift_field_patch;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyDataValuePatch&) const;
  bool operator<(const MyDataValuePatch&) const;

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> assign_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> assign_ref() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> assign_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> assign_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> assign() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> assign() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> assign() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> assign() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> clear_ref() const& {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> clear_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> clear_ref() & {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> clear_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> clear() const& {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> clear() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> clear() & {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> clear() && {
    return {static_cast<T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::cpp2::MyDataPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patch_ref() const& {
    return {this->__fbthrift_field_patch, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::cpp2::MyDataPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patch_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patch), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::cpp2::MyDataPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patch_ref() & {
    return {this->__fbthrift_field_patch, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::cpp2::MyDataPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patch_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_patch), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::cpp2::MyDataPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patch() const& {
    return {this->__fbthrift_field_patch, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::cpp2::MyDataPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patch() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patch), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::cpp2::MyDataPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patch() & {
    return {this->__fbthrift_field_patch, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::cpp2::MyDataPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patch() && {
    return {static_cast<T&&>(this->__fbthrift_field_patch), __isset.at(1), __isset.bit(1)};
  }
 private:
  template<std::underlying_type_t<::apache::thrift::FieldId>> decltype(auto) __fbthrift_get() &;
  template<std::underlying_type_t<::apache::thrift::FieldId>> decltype(auto) __fbthrift_get() const&;
  template<std::underlying_type_t<::apache::thrift::FieldId>> decltype(auto) __fbthrift_get() &&;
  template<std::underlying_type_t<::apache::thrift::FieldId>> decltype(auto) __fbthrift_get() const&&;
  template<> decltype(auto) __fbthrift_get<1>() &       { return assign_ref(); }
  template<> decltype(auto) __fbthrift_get<1>() const&  { return assign_ref(); }
  template<> decltype(auto) __fbthrift_get<1>() &&      { return std::move(*this).assign_ref(); }
  template<> decltype(auto) __fbthrift_get<1>() const&& { return std::move(*this).assign_ref(); }
  template<> decltype(auto) __fbthrift_get<2>() &       { return clear_ref(); }
  template<> decltype(auto) __fbthrift_get<2>() const&  { return clear_ref(); }
  template<> decltype(auto) __fbthrift_get<2>() &&      { return std::move(*this).clear_ref(); }
  template<> decltype(auto) __fbthrift_get<2>() const&& { return std::move(*this).clear_ref(); }
  template<> decltype(auto) __fbthrift_get<3>() &       { return patch_ref(); }
  template<> decltype(auto) __fbthrift_get<3>() const&  { return patch_ref(); }
  template<> decltype(auto) __fbthrift_get<3>() &&      { return std::move(*this).patch_ref(); }
  template<> decltype(auto) __fbthrift_get<3>() const&& { return std::move(*this).patch_ref(); }

 public:

  bool get_clear() const {
    return __fbthrift_field_clear;
  }

  [[deprecated("Use `FOO.clear_ref() = BAR;` instead of `FOO.set_clear(BAR);`")]]
  bool& set_clear(bool clear_) {
    clear_ref() = clear_;
    return __fbthrift_field_clear;
  }
  const ::cpp2::MyDataPatch& get_patch() const&;
  ::cpp2::MyDataPatch get_patch() &&;

  template <typename T_MyDataValuePatch_patch_struct_setter = ::cpp2::MyDataPatch>
  [[deprecated("Use `FOO.patch_ref() = BAR;` instead of `FOO.set_patch(BAR);`")]]
  ::cpp2::MyDataPatch& set_patch(T_MyDataValuePatch_patch_struct_setter&& patch_) {
    patch_ref() = std::forward<T_MyDataValuePatch_patch_struct_setter>(patch_);
    return __fbthrift_field_patch;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyDataValuePatch>;
  friend void swap(MyDataValuePatch& a, MyDataValuePatch& b);
};

template <class Protocol_>
unsigned long MyDataValuePatch::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
class OptionalMyDataValuePatch final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = true;
  static const char* __fbthrift_cpp2_gen_thrift_uri();
  using __fbthrift_fields = ::apache::thrift::type::fields<
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{2}, ::apache::thrift::type::bool_t>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{3}, ::apache::thrift::type::struct_t<::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::cpp2::MyDataValuePatch>>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{4}, ::apache::thrift::type::struct_t<::cpp2::MyData>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{5}, ::apache::thrift::type::struct_t<::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::cpp2::MyDataValuePatch>>>
  >;

  void __fbthrift_clear();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = OptionalMyDataValuePatch;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  OptionalMyDataValuePatch() :
      __fbthrift_field_clear() {
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter, 3>(__fbthrift_field_patch, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter, 5>(__fbthrift_field_patchAfter, *this);
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  OptionalMyDataValuePatch(apache::thrift::FragileConstructor, bool clear__arg, ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::cpp2::MyDataValuePatch> patch__arg, ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyData> ensure__arg, ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::cpp2::MyDataValuePatch> patchAfter__arg);

  OptionalMyDataValuePatch(OptionalMyDataValuePatch&&) noexcept;
  OptionalMyDataValuePatch(const OptionalMyDataValuePatch& src);


  OptionalMyDataValuePatch& operator=(OptionalMyDataValuePatch&&) noexcept;
  OptionalMyDataValuePatch& operator=(const OptionalMyDataValuePatch& src);
 private:
  bool __fbthrift_field_clear;
 private:
  ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::cpp2::MyDataValuePatch> __fbthrift_field_patch;
 private:
  ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyData> __fbthrift_field_ensure;
 private:
  ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::cpp2::MyDataValuePatch> __fbthrift_field_patchAfter;
 private:
  apache::thrift::detail::isset_bitset<3, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const OptionalMyDataValuePatch&) const;
  bool operator<(const OptionalMyDataValuePatch&) const;

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> clear_ref() const& {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> clear_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> clear_ref() & {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> clear_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> clear() const& {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> clear() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> clear() & {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> clear() && {
    return {static_cast<T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::cpp2::MyDataValuePatch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patch_ref() const& {
    return {this->__fbthrift_field_patch, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::cpp2::MyDataValuePatch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patch_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patch), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::cpp2::MyDataValuePatch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patch_ref() & {
    return {this->__fbthrift_field_patch, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::cpp2::MyDataValuePatch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patch_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_patch), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::cpp2::MyDataValuePatch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patch() const& {
    return {this->__fbthrift_field_patch, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::cpp2::MyDataValuePatch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patch() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patch), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::cpp2::MyDataValuePatch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patch() & {
    return {this->__fbthrift_field_patch, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::cpp2::MyDataValuePatch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patch() && {
    return {static_cast<T&&>(this->__fbthrift_field_patch), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> ensure_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> ensure_ref() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> ensure_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> ensure_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> ensure() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> ensure() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> ensure() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyData>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> ensure() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::cpp2::MyDataValuePatch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patchAfter_ref() const& {
    return {this->__fbthrift_field_patchAfter, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::cpp2::MyDataValuePatch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patchAfter_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patchAfter), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::cpp2::MyDataValuePatch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patchAfter_ref() & {
    return {this->__fbthrift_field_patchAfter, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::cpp2::MyDataValuePatch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patchAfter_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_patchAfter), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::cpp2::MyDataValuePatch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patchAfter() const& {
    return {this->__fbthrift_field_patchAfter, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::cpp2::MyDataValuePatch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patchAfter() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patchAfter), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::cpp2::MyDataValuePatch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patchAfter() & {
    return {this->__fbthrift_field_patchAfter, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::cpp2::MyDataValuePatch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patchAfter() && {
    return {static_cast<T&&>(this->__fbthrift_field_patchAfter), __isset.at(2), __isset.bit(2)};
  }
 private:
  template<std::underlying_type_t<::apache::thrift::FieldId>> decltype(auto) __fbthrift_get() &;
  template<std::underlying_type_t<::apache::thrift::FieldId>> decltype(auto) __fbthrift_get() const&;
  template<std::underlying_type_t<::apache::thrift::FieldId>> decltype(auto) __fbthrift_get() &&;
  template<std::underlying_type_t<::apache::thrift::FieldId>> decltype(auto) __fbthrift_get() const&&;
  template<> decltype(auto) __fbthrift_get<2>() &       { return clear_ref(); }
  template<> decltype(auto) __fbthrift_get<2>() const&  { return clear_ref(); }
  template<> decltype(auto) __fbthrift_get<2>() &&      { return std::move(*this).clear_ref(); }
  template<> decltype(auto) __fbthrift_get<2>() const&& { return std::move(*this).clear_ref(); }
  template<> decltype(auto) __fbthrift_get<3>() &       { return patch_ref(); }
  template<> decltype(auto) __fbthrift_get<3>() const&  { return patch_ref(); }
  template<> decltype(auto) __fbthrift_get<3>() &&      { return std::move(*this).patch_ref(); }
  template<> decltype(auto) __fbthrift_get<3>() const&& { return std::move(*this).patch_ref(); }
  template<> decltype(auto) __fbthrift_get<4>() &       { return ensure_ref(); }
  template<> decltype(auto) __fbthrift_get<4>() const&  { return ensure_ref(); }
  template<> decltype(auto) __fbthrift_get<4>() &&      { return std::move(*this).ensure_ref(); }
  template<> decltype(auto) __fbthrift_get<4>() const&& { return std::move(*this).ensure_ref(); }
  template<> decltype(auto) __fbthrift_get<5>() &       { return patchAfter_ref(); }
  template<> decltype(auto) __fbthrift_get<5>() const&  { return patchAfter_ref(); }
  template<> decltype(auto) __fbthrift_get<5>() &&      { return std::move(*this).patchAfter_ref(); }
  template<> decltype(auto) __fbthrift_get<5>() const&& { return std::move(*this).patchAfter_ref(); }

 public:

  bool get_clear() const {
    return __fbthrift_field_clear;
  }

  [[deprecated("Use `FOO.clear_ref() = BAR;` instead of `FOO.set_clear(BAR);`")]]
  bool& set_clear(bool clear_) {
    clear_ref() = clear_;
    return __fbthrift_field_clear;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<OptionalMyDataValuePatch>;
  friend void swap(OptionalMyDataValuePatch& a, OptionalMyDataValuePatch& b);
};

template <class Protocol_>
unsigned long OptionalMyDataValuePatch::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
class MyStructField21Patch final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = true;
  static const char* __fbthrift_cpp2_gen_thrift_uri();
  using __fbthrift_fields = ::apache::thrift::type::fields<
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{1}, ::apache::thrift::type::list<::apache::thrift::type::i16_t>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{2}, ::apache::thrift::type::bool_t>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{4}, ::apache::thrift::type::list<::apache::thrift::type::i16_t>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{5}, ::apache::thrift::type::list<::apache::thrift::type::i16_t>>
  >;

  void __fbthrift_clear();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStructField21Patch;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyStructField21Patch() :
      __fbthrift_field_clear() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStructField21Patch(apache::thrift::FragileConstructor, ::std::vector<::std::int16_t> assign__arg, bool clear__arg, ::std::vector<::std::int16_t> prepend__arg, ::std::vector<::std::int16_t> append__arg);

  MyStructField21Patch(MyStructField21Patch&&) noexcept;

  MyStructField21Patch(const MyStructField21Patch& src);


  MyStructField21Patch& operator=(MyStructField21Patch&&) noexcept;
  MyStructField21Patch& operator=(const MyStructField21Patch& src);
 private:
  ::std::vector<::std::int16_t> __fbthrift_field_assign;
 private:
  bool __fbthrift_field_clear;
 private:
  ::std::vector<::std::int16_t> __fbthrift_field_prepend;
 private:
  ::std::vector<::std::int16_t> __fbthrift_field_append;
 private:
  apache::thrift::detail::isset_bitset<4, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyStructField21Patch&) const;
  bool operator<(const MyStructField21Patch&) const;

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> assign_ref() const& {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> assign_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> assign_ref() & {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> assign_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> assign() const& {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> assign() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> assign() & {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> assign() && {
    return {static_cast<T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> clear_ref() const& {
    return {this->__fbthrift_field_clear, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> clear_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_clear), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> clear_ref() & {
    return {this->__fbthrift_field_clear, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> clear_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_clear), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> clear() const& {
    return {this->__fbthrift_field_clear, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> clear() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_clear), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> clear() & {
    return {this->__fbthrift_field_clear, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> clear() && {
    return {static_cast<T&&>(this->__fbthrift_field_clear), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> prepend_ref() const& {
    return {this->__fbthrift_field_prepend, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> prepend_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_prepend), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> prepend_ref() & {
    return {this->__fbthrift_field_prepend, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> prepend_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_prepend), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> prepend() const& {
    return {this->__fbthrift_field_prepend, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> prepend() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_prepend), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> prepend() & {
    return {this->__fbthrift_field_prepend, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> prepend() && {
    return {static_cast<T&&>(this->__fbthrift_field_prepend), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> append_ref() const& {
    return {this->__fbthrift_field_append, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> append_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_append), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> append_ref() & {
    return {this->__fbthrift_field_append, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> append_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_append), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> append() const& {
    return {this->__fbthrift_field_append, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> append() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_append), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> append() & {
    return {this->__fbthrift_field_append, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> append() && {
    return {static_cast<T&&>(this->__fbthrift_field_append), __isset.at(3), __isset.bit(3)};
  }
 private:
  template<std::underlying_type_t<::apache::thrift::FieldId>> decltype(auto) __fbthrift_get() &;
  template<std::underlying_type_t<::apache::thrift::FieldId>> decltype(auto) __fbthrift_get() const&;
  template<std::underlying_type_t<::apache::thrift::FieldId>> decltype(auto) __fbthrift_get() &&;
  template<std::underlying_type_t<::apache::thrift::FieldId>> decltype(auto) __fbthrift_get() const&&;
  template<> decltype(auto) __fbthrift_get<1>() &       { return assign_ref(); }
  template<> decltype(auto) __fbthrift_get<1>() const&  { return assign_ref(); }
  template<> decltype(auto) __fbthrift_get<1>() &&      { return std::move(*this).assign_ref(); }
  template<> decltype(auto) __fbthrift_get<1>() const&& { return std::move(*this).assign_ref(); }
  template<> decltype(auto) __fbthrift_get<2>() &       { return clear_ref(); }
  template<> decltype(auto) __fbthrift_get<2>() const&  { return clear_ref(); }
  template<> decltype(auto) __fbthrift_get<2>() &&      { return std::move(*this).clear_ref(); }
  template<> decltype(auto) __fbthrift_get<2>() const&& { return std::move(*this).clear_ref(); }
  template<> decltype(auto) __fbthrift_get<4>() &       { return prepend_ref(); }
  template<> decltype(auto) __fbthrift_get<4>() const&  { return prepend_ref(); }
  template<> decltype(auto) __fbthrift_get<4>() &&      { return std::move(*this).prepend_ref(); }
  template<> decltype(auto) __fbthrift_get<4>() const&& { return std::move(*this).prepend_ref(); }
  template<> decltype(auto) __fbthrift_get<5>() &       { return append_ref(); }
  template<> decltype(auto) __fbthrift_get<5>() const&  { return append_ref(); }
  template<> decltype(auto) __fbthrift_get<5>() &&      { return std::move(*this).append_ref(); }
  template<> decltype(auto) __fbthrift_get<5>() const&& { return std::move(*this).append_ref(); }

 public:
  const ::std::vector<::std::int16_t>* get_assign() const&;
  ::std::vector<::std::int16_t>* get_assign() &;
  ::std::vector<::std::int16_t>* get_assign() && = delete;

  template <typename T_MyStructField21Patch_assign_struct_setter = ::std::vector<::std::int16_t>>
  [[deprecated("Use `FOO.assign_ref() = BAR;` instead of `FOO.set_assign(BAR);`")]]
  ::std::vector<::std::int16_t>& set_assign(T_MyStructField21Patch_assign_struct_setter&& assign_) {
    assign_ref() = std::forward<T_MyStructField21Patch_assign_struct_setter>(assign_);
    return __fbthrift_field_assign;
  }

  bool get_clear() const {
    return __fbthrift_field_clear;
  }

  [[deprecated("Use `FOO.clear_ref() = BAR;` instead of `FOO.set_clear(BAR);`")]]
  bool& set_clear(bool clear_) {
    clear_ref() = clear_;
    return __fbthrift_field_clear;
  }
  const ::std::vector<::std::int16_t>& get_prepend() const&;
  ::std::vector<::std::int16_t> get_prepend() &&;

  template <typename T_MyStructField21Patch_prepend_struct_setter = ::std::vector<::std::int16_t>>
  [[deprecated("Use `FOO.prepend_ref() = BAR;` instead of `FOO.set_prepend(BAR);`")]]
  ::std::vector<::std::int16_t>& set_prepend(T_MyStructField21Patch_prepend_struct_setter&& prepend_) {
    prepend_ref() = std::forward<T_MyStructField21Patch_prepend_struct_setter>(prepend_);
    return __fbthrift_field_prepend;
  }
  const ::std::vector<::std::int16_t>& get_append() const&;
  ::std::vector<::std::int16_t> get_append() &&;

  template <typename T_MyStructField21Patch_append_struct_setter = ::std::vector<::std::int16_t>>
  [[deprecated("Use `FOO.append_ref() = BAR;` instead of `FOO.set_append(BAR);`")]]
  ::std::vector<::std::int16_t>& set_append(T_MyStructField21Patch_append_struct_setter&& append_) {
    append_ref() = std::forward<T_MyStructField21Patch_append_struct_setter>(append_);
    return __fbthrift_field_append;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStructField21Patch>;
  friend void swap(MyStructField21Patch& a, MyStructField21Patch& b);
};

template <class Protocol_>
unsigned long MyStructField21Patch::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
class OptionalMyStructField21Patch final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = true;
  static const char* __fbthrift_cpp2_gen_thrift_uri();
  using __fbthrift_fields = ::apache::thrift::type::fields<
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{2}, ::apache::thrift::type::bool_t>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{3}, ::apache::thrift::type::struct_t<::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::ListPatchAdapter, ::cpp2::MyStructField21Patch>>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{4}, ::apache::thrift::type::list<::apache::thrift::type::i16_t>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{5}, ::apache::thrift::type::struct_t<::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::ListPatchAdapter, ::cpp2::MyStructField21Patch>>>
  >;

  void __fbthrift_clear();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = OptionalMyStructField21Patch;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  OptionalMyStructField21Patch() :
      __fbthrift_field_clear() {
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::ListPatchAdapter, 3>(__fbthrift_field_patch, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::ListPatchAdapter, 5>(__fbthrift_field_patchAfter, *this);
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  OptionalMyStructField21Patch(apache::thrift::FragileConstructor, bool clear__arg, ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::ListPatchAdapter, ::cpp2::MyStructField21Patch> patch__arg, ::std::vector<::std::int16_t> ensure__arg, ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::ListPatchAdapter, ::cpp2::MyStructField21Patch> patchAfter__arg);

  OptionalMyStructField21Patch(OptionalMyStructField21Patch&&) noexcept;
  OptionalMyStructField21Patch(const OptionalMyStructField21Patch& src);


  OptionalMyStructField21Patch& operator=(OptionalMyStructField21Patch&&) noexcept;
  OptionalMyStructField21Patch& operator=(const OptionalMyStructField21Patch& src);
 private:
  bool __fbthrift_field_clear;
 private:
  ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::ListPatchAdapter, ::cpp2::MyStructField21Patch> __fbthrift_field_patch;
 private:
  ::std::vector<::std::int16_t> __fbthrift_field_ensure;
 private:
  ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::ListPatchAdapter, ::cpp2::MyStructField21Patch> __fbthrift_field_patchAfter;
 private:
  apache::thrift::detail::isset_bitset<4, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const OptionalMyStructField21Patch&) const;
  bool operator<(const OptionalMyStructField21Patch&) const;

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> clear_ref() const& {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> clear_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> clear_ref() & {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> clear_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> clear() const& {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> clear() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> clear() & {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> clear() && {
    return {static_cast<T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::ListPatchAdapter, ::cpp2::MyStructField21Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patch_ref() const& {
    return {this->__fbthrift_field_patch, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::ListPatchAdapter, ::cpp2::MyStructField21Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patch_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patch), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::ListPatchAdapter, ::cpp2::MyStructField21Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patch_ref() & {
    return {this->__fbthrift_field_patch, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::ListPatchAdapter, ::cpp2::MyStructField21Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patch_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_patch), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::ListPatchAdapter, ::cpp2::MyStructField21Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patch() const& {
    return {this->__fbthrift_field_patch, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::ListPatchAdapter, ::cpp2::MyStructField21Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patch() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patch), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::ListPatchAdapter, ::cpp2::MyStructField21Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patch() & {
    return {this->__fbthrift_field_patch, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::ListPatchAdapter, ::cpp2::MyStructField21Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patch() && {
    return {static_cast<T&&>(this->__fbthrift_field_patch), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> ensure_ref() const& {
    return {this->__fbthrift_field_ensure, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> ensure_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_ensure), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> ensure_ref() & {
    return {this->__fbthrift_field_ensure, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> ensure_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_ensure), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> ensure() const& {
    return {this->__fbthrift_field_ensure, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> ensure() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_ensure), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> ensure() & {
    return {this->__fbthrift_field_ensure, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::vector<::std::int16_t>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> ensure() && {
    return {static_cast<T&&>(this->__fbthrift_field_ensure), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::ListPatchAdapter, ::cpp2::MyStructField21Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patchAfter_ref() const& {
    return {this->__fbthrift_field_patchAfter, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::ListPatchAdapter, ::cpp2::MyStructField21Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patchAfter_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patchAfter), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::ListPatchAdapter, ::cpp2::MyStructField21Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patchAfter_ref() & {
    return {this->__fbthrift_field_patchAfter, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::ListPatchAdapter, ::cpp2::MyStructField21Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patchAfter_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_patchAfter), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::ListPatchAdapter, ::cpp2::MyStructField21Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patchAfter() const& {
    return {this->__fbthrift_field_patchAfter, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::ListPatchAdapter, ::cpp2::MyStructField21Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patchAfter() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patchAfter), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::ListPatchAdapter, ::cpp2::MyStructField21Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patchAfter() & {
    return {this->__fbthrift_field_patchAfter, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::ListPatchAdapter, ::cpp2::MyStructField21Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patchAfter() && {
    return {static_cast<T&&>(this->__fbthrift_field_patchAfter), __isset.at(3), __isset.bit(3)};
  }
 private:
  template<std::underlying_type_t<::apache::thrift::FieldId>> decltype(auto) __fbthrift_get() &;
  template<std::underlying_type_t<::apache::thrift::FieldId>> decltype(auto) __fbthrift_get() const&;
  template<std::underlying_type_t<::apache::thrift::FieldId>> decltype(auto) __fbthrift_get() &&;
  template<std::underlying_type_t<::apache::thrift::FieldId>> decltype(auto) __fbthrift_get() const&&;
  template<> decltype(auto) __fbthrift_get<2>() &       { return clear_ref(); }
  template<> decltype(auto) __fbthrift_get<2>() const&  { return clear_ref(); }
  template<> decltype(auto) __fbthrift_get<2>() &&      { return std::move(*this).clear_ref(); }
  template<> decltype(auto) __fbthrift_get<2>() const&& { return std::move(*this).clear_ref(); }
  template<> decltype(auto) __fbthrift_get<3>() &       { return patch_ref(); }
  template<> decltype(auto) __fbthrift_get<3>() const&  { return patch_ref(); }
  template<> decltype(auto) __fbthrift_get<3>() &&      { return std::move(*this).patch_ref(); }
  template<> decltype(auto) __fbthrift_get<3>() const&& { return std::move(*this).patch_ref(); }
  template<> decltype(auto) __fbthrift_get<4>() &       { return ensure_ref(); }
  template<> decltype(auto) __fbthrift_get<4>() const&  { return ensure_ref(); }
  template<> decltype(auto) __fbthrift_get<4>() &&      { return std::move(*this).ensure_ref(); }
  template<> decltype(auto) __fbthrift_get<4>() const&& { return std::move(*this).ensure_ref(); }
  template<> decltype(auto) __fbthrift_get<5>() &       { return patchAfter_ref(); }
  template<> decltype(auto) __fbthrift_get<5>() const&  { return patchAfter_ref(); }
  template<> decltype(auto) __fbthrift_get<5>() &&      { return std::move(*this).patchAfter_ref(); }
  template<> decltype(auto) __fbthrift_get<5>() const&& { return std::move(*this).patchAfter_ref(); }

 public:

  bool get_clear() const {
    return __fbthrift_field_clear;
  }

  [[deprecated("Use `FOO.clear_ref() = BAR;` instead of `FOO.set_clear(BAR);`")]]
  bool& set_clear(bool clear_) {
    clear_ref() = clear_;
    return __fbthrift_field_clear;
  }
  const ::std::vector<::std::int16_t>* get_ensure() const&;
  ::std::vector<::std::int16_t>* get_ensure() &;
  ::std::vector<::std::int16_t>* get_ensure() && = delete;

  template <typename T_OptionalMyStructField21Patch_ensure_struct_setter = ::std::vector<::std::int16_t>>
  [[deprecated("Use `FOO.ensure_ref() = BAR;` instead of `FOO.set_ensure(BAR);`")]]
  ::std::vector<::std::int16_t>& set_ensure(T_OptionalMyStructField21Patch_ensure_struct_setter&& ensure_) {
    ensure_ref() = std::forward<T_OptionalMyStructField21Patch_ensure_struct_setter>(ensure_);
    return __fbthrift_field_ensure;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<OptionalMyStructField21Patch>;
  friend void swap(OptionalMyStructField21Patch& a, OptionalMyStructField21Patch& b);
};

template <class Protocol_>
unsigned long OptionalMyStructField21Patch::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
class MyStructField22Patch final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = true;
  static const char* __fbthrift_cpp2_gen_thrift_uri();
  using __fbthrift_fields = ::apache::thrift::type::fields<
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{1}, ::apache::thrift::type::set<::apache::thrift::type::string_t>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{2}, ::apache::thrift::type::bool_t>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{4}, ::apache::thrift::type::set<::apache::thrift::type::string_t>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{5}, ::apache::thrift::type::set<::apache::thrift::type::string_t>>
  >;

  void __fbthrift_clear();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStructField22Patch;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyStructField22Patch() :
      __fbthrift_field_clear() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStructField22Patch(apache::thrift::FragileConstructor, ::std::set<::std::string> assign__arg, bool clear__arg, ::std::set<::std::string> remove__arg, ::std::set<::std::string> add__arg);

  MyStructField22Patch(MyStructField22Patch&&) noexcept;

  MyStructField22Patch(const MyStructField22Patch& src);


  MyStructField22Patch& operator=(MyStructField22Patch&&) noexcept;
  MyStructField22Patch& operator=(const MyStructField22Patch& src);
 private:
  ::std::set<::std::string> __fbthrift_field_assign;
 private:
  bool __fbthrift_field_clear;
 private:
  ::std::set<::std::string> __fbthrift_field_remove;
 private:
  ::std::set<::std::string> __fbthrift_field_add;
 private:
  apache::thrift::detail::isset_bitset<4, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyStructField22Patch&) const;
  bool operator<(const MyStructField22Patch&) const;

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> assign_ref() const& {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> assign_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> assign_ref() & {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> assign_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> assign() const& {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> assign() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> assign() & {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> assign() && {
    return {static_cast<T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> clear_ref() const& {
    return {this->__fbthrift_field_clear, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> clear_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_clear), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> clear_ref() & {
    return {this->__fbthrift_field_clear, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> clear_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_clear), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> clear() const& {
    return {this->__fbthrift_field_clear, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> clear() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_clear), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> clear() & {
    return {this->__fbthrift_field_clear, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> clear() && {
    return {static_cast<T&&>(this->__fbthrift_field_clear), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> remove_ref() const& {
    return {this->__fbthrift_field_remove, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> remove_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_remove), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> remove_ref() & {
    return {this->__fbthrift_field_remove, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> remove_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_remove), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> remove() const& {
    return {this->__fbthrift_field_remove, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> remove() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_remove), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> remove() & {
    return {this->__fbthrift_field_remove, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> remove() && {
    return {static_cast<T&&>(this->__fbthrift_field_remove), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> add_ref() const& {
    return {this->__fbthrift_field_add, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> add_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_add), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> add_ref() & {
    return {this->__fbthrift_field_add, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> add_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_add), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> add() const& {
    return {this->__fbthrift_field_add, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> add() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_add), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> add() & {
    return {this->__fbthrift_field_add, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> add() && {
    return {static_cast<T&&>(this->__fbthrift_field_add), __isset.at(3), __isset.bit(3)};
  }
 private:
  template<std::underlying_type_t<::apache::thrift::FieldId>> decltype(auto) __fbthrift_get() &;
  template<std::underlying_type_t<::apache::thrift::FieldId>> decltype(auto) __fbthrift_get() const&;
  template<std::underlying_type_t<::apache::thrift::FieldId>> decltype(auto) __fbthrift_get() &&;
  template<std::underlying_type_t<::apache::thrift::FieldId>> decltype(auto) __fbthrift_get() const&&;
  template<> decltype(auto) __fbthrift_get<1>() &       { return assign_ref(); }
  template<> decltype(auto) __fbthrift_get<1>() const&  { return assign_ref(); }
  template<> decltype(auto) __fbthrift_get<1>() &&      { return std::move(*this).assign_ref(); }
  template<> decltype(auto) __fbthrift_get<1>() const&& { return std::move(*this).assign_ref(); }
  template<> decltype(auto) __fbthrift_get<2>() &       { return clear_ref(); }
  template<> decltype(auto) __fbthrift_get<2>() const&  { return clear_ref(); }
  template<> decltype(auto) __fbthrift_get<2>() &&      { return std::move(*this).clear_ref(); }
  template<> decltype(auto) __fbthrift_get<2>() const&& { return std::move(*this).clear_ref(); }
  template<> decltype(auto) __fbthrift_get<4>() &       { return remove_ref(); }
  template<> decltype(auto) __fbthrift_get<4>() const&  { return remove_ref(); }
  template<> decltype(auto) __fbthrift_get<4>() &&      { return std::move(*this).remove_ref(); }
  template<> decltype(auto) __fbthrift_get<4>() const&& { return std::move(*this).remove_ref(); }
  template<> decltype(auto) __fbthrift_get<5>() &       { return add_ref(); }
  template<> decltype(auto) __fbthrift_get<5>() const&  { return add_ref(); }
  template<> decltype(auto) __fbthrift_get<5>() &&      { return std::move(*this).add_ref(); }
  template<> decltype(auto) __fbthrift_get<5>() const&& { return std::move(*this).add_ref(); }

 public:
  const ::std::set<::std::string>* get_assign() const&;
  ::std::set<::std::string>* get_assign() &;
  ::std::set<::std::string>* get_assign() && = delete;

  template <typename T_MyStructField22Patch_assign_struct_setter = ::std::set<::std::string>>
  [[deprecated("Use `FOO.assign_ref() = BAR;` instead of `FOO.set_assign(BAR);`")]]
  ::std::set<::std::string>& set_assign(T_MyStructField22Patch_assign_struct_setter&& assign_) {
    assign_ref() = std::forward<T_MyStructField22Patch_assign_struct_setter>(assign_);
    return __fbthrift_field_assign;
  }

  bool get_clear() const {
    return __fbthrift_field_clear;
  }

  [[deprecated("Use `FOO.clear_ref() = BAR;` instead of `FOO.set_clear(BAR);`")]]
  bool& set_clear(bool clear_) {
    clear_ref() = clear_;
    return __fbthrift_field_clear;
  }
  const ::std::set<::std::string>& get_remove() const&;
  ::std::set<::std::string> get_remove() &&;

  template <typename T_MyStructField22Patch_remove_struct_setter = ::std::set<::std::string>>
  [[deprecated("Use `FOO.remove_ref() = BAR;` instead of `FOO.set_remove(BAR);`")]]
  ::std::set<::std::string>& set_remove(T_MyStructField22Patch_remove_struct_setter&& remove_) {
    remove_ref() = std::forward<T_MyStructField22Patch_remove_struct_setter>(remove_);
    return __fbthrift_field_remove;
  }
  const ::std::set<::std::string>& get_add() const&;
  ::std::set<::std::string> get_add() &&;

  template <typename T_MyStructField22Patch_add_struct_setter = ::std::set<::std::string>>
  [[deprecated("Use `FOO.add_ref() = BAR;` instead of `FOO.set_add(BAR);`")]]
  ::std::set<::std::string>& set_add(T_MyStructField22Patch_add_struct_setter&& add_) {
    add_ref() = std::forward<T_MyStructField22Patch_add_struct_setter>(add_);
    return __fbthrift_field_add;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStructField22Patch>;
  friend void swap(MyStructField22Patch& a, MyStructField22Patch& b);
};

template <class Protocol_>
unsigned long MyStructField22Patch::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
class OptionalMyStructField22Patch final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = true;
  static const char* __fbthrift_cpp2_gen_thrift_uri();
  using __fbthrift_fields = ::apache::thrift::type::fields<
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{2}, ::apache::thrift::type::bool_t>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{3}, ::apache::thrift::type::struct_t<::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::SetPatchAdapter, ::cpp2::MyStructField22Patch>>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{4}, ::apache::thrift::type::set<::apache::thrift::type::string_t>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{5}, ::apache::thrift::type::struct_t<::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::SetPatchAdapter, ::cpp2::MyStructField22Patch>>>
  >;

  void __fbthrift_clear();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = OptionalMyStructField22Patch;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  OptionalMyStructField22Patch() :
      __fbthrift_field_clear() {
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::SetPatchAdapter, 3>(__fbthrift_field_patch, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::SetPatchAdapter, 5>(__fbthrift_field_patchAfter, *this);
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  OptionalMyStructField22Patch(apache::thrift::FragileConstructor, bool clear__arg, ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::SetPatchAdapter, ::cpp2::MyStructField22Patch> patch__arg, ::std::set<::std::string> ensure__arg, ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::SetPatchAdapter, ::cpp2::MyStructField22Patch> patchAfter__arg);

  OptionalMyStructField22Patch(OptionalMyStructField22Patch&&) noexcept;
  OptionalMyStructField22Patch(const OptionalMyStructField22Patch& src);


  OptionalMyStructField22Patch& operator=(OptionalMyStructField22Patch&&) noexcept;
  OptionalMyStructField22Patch& operator=(const OptionalMyStructField22Patch& src);
 private:
  bool __fbthrift_field_clear;
 private:
  ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::SetPatchAdapter, ::cpp2::MyStructField22Patch> __fbthrift_field_patch;
 private:
  ::std::set<::std::string> __fbthrift_field_ensure;
 private:
  ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::SetPatchAdapter, ::cpp2::MyStructField22Patch> __fbthrift_field_patchAfter;
 private:
  apache::thrift::detail::isset_bitset<4, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const OptionalMyStructField22Patch&) const;
  bool operator<(const OptionalMyStructField22Patch&) const;

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> clear_ref() const& {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> clear_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> clear_ref() & {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> clear_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> clear() const& {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> clear() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> clear() & {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> clear() && {
    return {static_cast<T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::SetPatchAdapter, ::cpp2::MyStructField22Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patch_ref() const& {
    return {this->__fbthrift_field_patch, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::SetPatchAdapter, ::cpp2::MyStructField22Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patch_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patch), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::SetPatchAdapter, ::cpp2::MyStructField22Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patch_ref() & {
    return {this->__fbthrift_field_patch, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::SetPatchAdapter, ::cpp2::MyStructField22Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patch_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_patch), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::SetPatchAdapter, ::cpp2::MyStructField22Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patch() const& {
    return {this->__fbthrift_field_patch, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::SetPatchAdapter, ::cpp2::MyStructField22Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patch() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patch), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::SetPatchAdapter, ::cpp2::MyStructField22Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patch() & {
    return {this->__fbthrift_field_patch, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::SetPatchAdapter, ::cpp2::MyStructField22Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patch() && {
    return {static_cast<T&&>(this->__fbthrift_field_patch), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> ensure_ref() const& {
    return {this->__fbthrift_field_ensure, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> ensure_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_ensure), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> ensure_ref() & {
    return {this->__fbthrift_field_ensure, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> ensure_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_ensure), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> ensure() const& {
    return {this->__fbthrift_field_ensure, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> ensure() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_ensure), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> ensure() & {
    return {this->__fbthrift_field_ensure, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::set<::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> ensure() && {
    return {static_cast<T&&>(this->__fbthrift_field_ensure), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::SetPatchAdapter, ::cpp2::MyStructField22Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patchAfter_ref() const& {
    return {this->__fbthrift_field_patchAfter, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::SetPatchAdapter, ::cpp2::MyStructField22Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patchAfter_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patchAfter), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::SetPatchAdapter, ::cpp2::MyStructField22Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patchAfter_ref() & {
    return {this->__fbthrift_field_patchAfter, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::SetPatchAdapter, ::cpp2::MyStructField22Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patchAfter_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_patchAfter), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::SetPatchAdapter, ::cpp2::MyStructField22Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patchAfter() const& {
    return {this->__fbthrift_field_patchAfter, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::SetPatchAdapter, ::cpp2::MyStructField22Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patchAfter() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patchAfter), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::SetPatchAdapter, ::cpp2::MyStructField22Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patchAfter() & {
    return {this->__fbthrift_field_patchAfter, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::SetPatchAdapter, ::cpp2::MyStructField22Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patchAfter() && {
    return {static_cast<T&&>(this->__fbthrift_field_patchAfter), __isset.at(3), __isset.bit(3)};
  }
 private:
  template<std::underlying_type_t<::apache::thrift::FieldId>> decltype(auto) __fbthrift_get() &;
  template<std::underlying_type_t<::apache::thrift::FieldId>> decltype(auto) __fbthrift_get() const&;
  template<std::underlying_type_t<::apache::thrift::FieldId>> decltype(auto) __fbthrift_get() &&;
  template<std::underlying_type_t<::apache::thrift::FieldId>> decltype(auto) __fbthrift_get() const&&;
  template<> decltype(auto) __fbthrift_get<2>() &       { return clear_ref(); }
  template<> decltype(auto) __fbthrift_get<2>() const&  { return clear_ref(); }
  template<> decltype(auto) __fbthrift_get<2>() &&      { return std::move(*this).clear_ref(); }
  template<> decltype(auto) __fbthrift_get<2>() const&& { return std::move(*this).clear_ref(); }
  template<> decltype(auto) __fbthrift_get<3>() &       { return patch_ref(); }
  template<> decltype(auto) __fbthrift_get<3>() const&  { return patch_ref(); }
  template<> decltype(auto) __fbthrift_get<3>() &&      { return std::move(*this).patch_ref(); }
  template<> decltype(auto) __fbthrift_get<3>() const&& { return std::move(*this).patch_ref(); }
  template<> decltype(auto) __fbthrift_get<4>() &       { return ensure_ref(); }
  template<> decltype(auto) __fbthrift_get<4>() const&  { return ensure_ref(); }
  template<> decltype(auto) __fbthrift_get<4>() &&      { return std::move(*this).ensure_ref(); }
  template<> decltype(auto) __fbthrift_get<4>() const&& { return std::move(*this).ensure_ref(); }
  template<> decltype(auto) __fbthrift_get<5>() &       { return patchAfter_ref(); }
  template<> decltype(auto) __fbthrift_get<5>() const&  { return patchAfter_ref(); }
  template<> decltype(auto) __fbthrift_get<5>() &&      { return std::move(*this).patchAfter_ref(); }
  template<> decltype(auto) __fbthrift_get<5>() const&& { return std::move(*this).patchAfter_ref(); }

 public:

  bool get_clear() const {
    return __fbthrift_field_clear;
  }

  [[deprecated("Use `FOO.clear_ref() = BAR;` instead of `FOO.set_clear(BAR);`")]]
  bool& set_clear(bool clear_) {
    clear_ref() = clear_;
    return __fbthrift_field_clear;
  }
  const ::std::set<::std::string>* get_ensure() const&;
  ::std::set<::std::string>* get_ensure() &;
  ::std::set<::std::string>* get_ensure() && = delete;

  template <typename T_OptionalMyStructField22Patch_ensure_struct_setter = ::std::set<::std::string>>
  [[deprecated("Use `FOO.ensure_ref() = BAR;` instead of `FOO.set_ensure(BAR);`")]]
  ::std::set<::std::string>& set_ensure(T_OptionalMyStructField22Patch_ensure_struct_setter&& ensure_) {
    ensure_ref() = std::forward<T_OptionalMyStructField22Patch_ensure_struct_setter>(ensure_);
    return __fbthrift_field_ensure;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<OptionalMyStructField22Patch>;
  friend void swap(OptionalMyStructField22Patch& a, OptionalMyStructField22Patch& b);
};

template <class Protocol_>
unsigned long OptionalMyStructField22Patch::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
class MyStructField23Patch final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = true;
  static const char* __fbthrift_cpp2_gen_thrift_uri();
  using __fbthrift_fields = ::apache::thrift::type::fields<
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{1}, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::string_t>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{2}, ::apache::thrift::type::bool_t>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{7}, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::string_t>>
  >;

  void __fbthrift_clear();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStructField23Patch;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyStructField23Patch() :
      __fbthrift_field_clear() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStructField23Patch(apache::thrift::FragileConstructor, ::std::map<::std::string, ::std::string> assign__arg, bool clear__arg, ::std::map<::std::string, ::std::string> put__arg);

  MyStructField23Patch(MyStructField23Patch&&) noexcept;

  MyStructField23Patch(const MyStructField23Patch& src);


  MyStructField23Patch& operator=(MyStructField23Patch&&) noexcept;
  MyStructField23Patch& operator=(const MyStructField23Patch& src);
 private:
  ::std::map<::std::string, ::std::string> __fbthrift_field_assign;
 private:
  bool __fbthrift_field_clear;
 private:
  ::std::map<::std::string, ::std::string> __fbthrift_field_put;
 private:
  apache::thrift::detail::isset_bitset<3, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyStructField23Patch&) const;
  bool operator<(const MyStructField23Patch&) const;

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> assign_ref() const& {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> assign_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> assign_ref() & {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> assign_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> assign() const& {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> assign() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> assign() & {
    return {this->__fbthrift_field_assign, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> assign() && {
    return {static_cast<T&&>(this->__fbthrift_field_assign), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> clear_ref() const& {
    return {this->__fbthrift_field_clear, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> clear_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_clear), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> clear_ref() & {
    return {this->__fbthrift_field_clear, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> clear_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_clear), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> clear() const& {
    return {this->__fbthrift_field_clear, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> clear() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_clear), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> clear() & {
    return {this->__fbthrift_field_clear, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> clear() && {
    return {static_cast<T&&>(this->__fbthrift_field_clear), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> put_ref() const& {
    return {this->__fbthrift_field_put, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> put_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_put), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> put_ref() & {
    return {this->__fbthrift_field_put, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> put_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_put), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> put() const& {
    return {this->__fbthrift_field_put, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> put() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_put), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> put() & {
    return {this->__fbthrift_field_put, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> put() && {
    return {static_cast<T&&>(this->__fbthrift_field_put), __isset.at(2), __isset.bit(2)};
  }
 private:
  template<std::underlying_type_t<::apache::thrift::FieldId>> decltype(auto) __fbthrift_get() &;
  template<std::underlying_type_t<::apache::thrift::FieldId>> decltype(auto) __fbthrift_get() const&;
  template<std::underlying_type_t<::apache::thrift::FieldId>> decltype(auto) __fbthrift_get() &&;
  template<std::underlying_type_t<::apache::thrift::FieldId>> decltype(auto) __fbthrift_get() const&&;
  template<> decltype(auto) __fbthrift_get<1>() &       { return assign_ref(); }
  template<> decltype(auto) __fbthrift_get<1>() const&  { return assign_ref(); }
  template<> decltype(auto) __fbthrift_get<1>() &&      { return std::move(*this).assign_ref(); }
  template<> decltype(auto) __fbthrift_get<1>() const&& { return std::move(*this).assign_ref(); }
  template<> decltype(auto) __fbthrift_get<2>() &       { return clear_ref(); }
  template<> decltype(auto) __fbthrift_get<2>() const&  { return clear_ref(); }
  template<> decltype(auto) __fbthrift_get<2>() &&      { return std::move(*this).clear_ref(); }
  template<> decltype(auto) __fbthrift_get<2>() const&& { return std::move(*this).clear_ref(); }
  template<> decltype(auto) __fbthrift_get<7>() &       { return put_ref(); }
  template<> decltype(auto) __fbthrift_get<7>() const&  { return put_ref(); }
  template<> decltype(auto) __fbthrift_get<7>() &&      { return std::move(*this).put_ref(); }
  template<> decltype(auto) __fbthrift_get<7>() const&& { return std::move(*this).put_ref(); }

 public:
  const ::std::map<::std::string, ::std::string>* get_assign() const&;
  ::std::map<::std::string, ::std::string>* get_assign() &;
  ::std::map<::std::string, ::std::string>* get_assign() && = delete;

  template <typename T_MyStructField23Patch_assign_struct_setter = ::std::map<::std::string, ::std::string>>
  [[deprecated("Use `FOO.assign_ref() = BAR;` instead of `FOO.set_assign(BAR);`")]]
  ::std::map<::std::string, ::std::string>& set_assign(T_MyStructField23Patch_assign_struct_setter&& assign_) {
    assign_ref() = std::forward<T_MyStructField23Patch_assign_struct_setter>(assign_);
    return __fbthrift_field_assign;
  }

  bool get_clear() const {
    return __fbthrift_field_clear;
  }

  [[deprecated("Use `FOO.clear_ref() = BAR;` instead of `FOO.set_clear(BAR);`")]]
  bool& set_clear(bool clear_) {
    clear_ref() = clear_;
    return __fbthrift_field_clear;
  }
  const ::std::map<::std::string, ::std::string>& get_put() const&;
  ::std::map<::std::string, ::std::string> get_put() &&;

  template <typename T_MyStructField23Patch_put_struct_setter = ::std::map<::std::string, ::std::string>>
  [[deprecated("Use `FOO.put_ref() = BAR;` instead of `FOO.set_put(BAR);`")]]
  ::std::map<::std::string, ::std::string>& set_put(T_MyStructField23Patch_put_struct_setter&& put_) {
    put_ref() = std::forward<T_MyStructField23Patch_put_struct_setter>(put_);
    return __fbthrift_field_put;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStructField23Patch>;
  friend void swap(MyStructField23Patch& a, MyStructField23Patch& b);
};

template <class Protocol_>
unsigned long MyStructField23Patch::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
class OptionalMyStructField23Patch final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = true;
  static const char* __fbthrift_cpp2_gen_thrift_uri();
  using __fbthrift_fields = ::apache::thrift::type::fields<
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{2}, ::apache::thrift::type::bool_t>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{3}, ::apache::thrift::type::struct_t<::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::MapPatchAdapter, ::cpp2::MyStructField23Patch>>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{4}, ::apache::thrift::type::map<::apache::thrift::type::string_t, ::apache::thrift::type::string_t>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{5}, ::apache::thrift::type::struct_t<::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::MapPatchAdapter, ::cpp2::MyStructField23Patch>>>
  >;

  void __fbthrift_clear();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = OptionalMyStructField23Patch;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  OptionalMyStructField23Patch() :
      __fbthrift_field_clear() {
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::MapPatchAdapter, 3>(__fbthrift_field_patch, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::MapPatchAdapter, 5>(__fbthrift_field_patchAfter, *this);
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  OptionalMyStructField23Patch(apache::thrift::FragileConstructor, bool clear__arg, ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::MapPatchAdapter, ::cpp2::MyStructField23Patch> patch__arg, ::std::map<::std::string, ::std::string> ensure__arg, ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::MapPatchAdapter, ::cpp2::MyStructField23Patch> patchAfter__arg);

  OptionalMyStructField23Patch(OptionalMyStructField23Patch&&) noexcept;
  OptionalMyStructField23Patch(const OptionalMyStructField23Patch& src);


  OptionalMyStructField23Patch& operator=(OptionalMyStructField23Patch&&) noexcept;
  OptionalMyStructField23Patch& operator=(const OptionalMyStructField23Patch& src);
 private:
  bool __fbthrift_field_clear;
 private:
  ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::MapPatchAdapter, ::cpp2::MyStructField23Patch> __fbthrift_field_patch;
 private:
  ::std::map<::std::string, ::std::string> __fbthrift_field_ensure;
 private:
  ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::MapPatchAdapter, ::cpp2::MyStructField23Patch> __fbthrift_field_patchAfter;
 private:
  apache::thrift::detail::isset_bitset<4, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const OptionalMyStructField23Patch&) const;
  bool operator<(const OptionalMyStructField23Patch&) const;

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> clear_ref() const& {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> clear_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> clear_ref() & {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> clear_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> clear() const& {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> clear() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> clear() & {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> clear() && {
    return {static_cast<T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::MapPatchAdapter, ::cpp2::MyStructField23Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patch_ref() const& {
    return {this->__fbthrift_field_patch, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::MapPatchAdapter, ::cpp2::MyStructField23Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patch_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patch), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::MapPatchAdapter, ::cpp2::MyStructField23Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patch_ref() & {
    return {this->__fbthrift_field_patch, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::MapPatchAdapter, ::cpp2::MyStructField23Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patch_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_patch), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::MapPatchAdapter, ::cpp2::MyStructField23Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patch() const& {
    return {this->__fbthrift_field_patch, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::MapPatchAdapter, ::cpp2::MyStructField23Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patch() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patch), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::MapPatchAdapter, ::cpp2::MyStructField23Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patch() & {
    return {this->__fbthrift_field_patch, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::MapPatchAdapter, ::cpp2::MyStructField23Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patch() && {
    return {static_cast<T&&>(this->__fbthrift_field_patch), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> ensure_ref() const& {
    return {this->__fbthrift_field_ensure, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> ensure_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_ensure), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> ensure_ref() & {
    return {this->__fbthrift_field_ensure, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> ensure_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_ensure), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> ensure() const& {
    return {this->__fbthrift_field_ensure, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> ensure() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_ensure), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> ensure() & {
    return {this->__fbthrift_field_ensure, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> ensure() && {
    return {static_cast<T&&>(this->__fbthrift_field_ensure), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::MapPatchAdapter, ::cpp2::MyStructField23Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patchAfter_ref() const& {
    return {this->__fbthrift_field_patchAfter, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::MapPatchAdapter, ::cpp2::MyStructField23Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patchAfter_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patchAfter), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::MapPatchAdapter, ::cpp2::MyStructField23Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patchAfter_ref() & {
    return {this->__fbthrift_field_patchAfter, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::MapPatchAdapter, ::cpp2::MyStructField23Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patchAfter_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_patchAfter), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::MapPatchAdapter, ::cpp2::MyStructField23Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patchAfter() const& {
    return {this->__fbthrift_field_patchAfter, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::MapPatchAdapter, ::cpp2::MyStructField23Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patchAfter() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patchAfter), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::MapPatchAdapter, ::cpp2::MyStructField23Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patchAfter() & {
    return {this->__fbthrift_field_patchAfter, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::MapPatchAdapter, ::cpp2::MyStructField23Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patchAfter() && {
    return {static_cast<T&&>(this->__fbthrift_field_patchAfter), __isset.at(3), __isset.bit(3)};
  }
 private:
  template<std::underlying_type_t<::apache::thrift::FieldId>> decltype(auto) __fbthrift_get() &;
  template<std::underlying_type_t<::apache::thrift::FieldId>> decltype(auto) __fbthrift_get() const&;
  template<std::underlying_type_t<::apache::thrift::FieldId>> decltype(auto) __fbthrift_get() &&;
  template<std::underlying_type_t<::apache::thrift::FieldId>> decltype(auto) __fbthrift_get() const&&;
  template<> decltype(auto) __fbthrift_get<2>() &       { return clear_ref(); }
  template<> decltype(auto) __fbthrift_get<2>() const&  { return clear_ref(); }
  template<> decltype(auto) __fbthrift_get<2>() &&      { return std::move(*this).clear_ref(); }
  template<> decltype(auto) __fbthrift_get<2>() const&& { return std::move(*this).clear_ref(); }
  template<> decltype(auto) __fbthrift_get<3>() &       { return patch_ref(); }
  template<> decltype(auto) __fbthrift_get<3>() const&  { return patch_ref(); }
  template<> decltype(auto) __fbthrift_get<3>() &&      { return std::move(*this).patch_ref(); }
  template<> decltype(auto) __fbthrift_get<3>() const&& { return std::move(*this).patch_ref(); }
  template<> decltype(auto) __fbthrift_get<4>() &       { return ensure_ref(); }
  template<> decltype(auto) __fbthrift_get<4>() const&  { return ensure_ref(); }
  template<> decltype(auto) __fbthrift_get<4>() &&      { return std::move(*this).ensure_ref(); }
  template<> decltype(auto) __fbthrift_get<4>() const&& { return std::move(*this).ensure_ref(); }
  template<> decltype(auto) __fbthrift_get<5>() &       { return patchAfter_ref(); }
  template<> decltype(auto) __fbthrift_get<5>() const&  { return patchAfter_ref(); }
  template<> decltype(auto) __fbthrift_get<5>() &&      { return std::move(*this).patchAfter_ref(); }
  template<> decltype(auto) __fbthrift_get<5>() const&& { return std::move(*this).patchAfter_ref(); }

 public:

  bool get_clear() const {
    return __fbthrift_field_clear;
  }

  [[deprecated("Use `FOO.clear_ref() = BAR;` instead of `FOO.set_clear(BAR);`")]]
  bool& set_clear(bool clear_) {
    clear_ref() = clear_;
    return __fbthrift_field_clear;
  }
  const ::std::map<::std::string, ::std::string>* get_ensure() const&;
  ::std::map<::std::string, ::std::string>* get_ensure() &;
  ::std::map<::std::string, ::std::string>* get_ensure() && = delete;

  template <typename T_OptionalMyStructField23Patch_ensure_struct_setter = ::std::map<::std::string, ::std::string>>
  [[deprecated("Use `FOO.ensure_ref() = BAR;` instead of `FOO.set_ensure(BAR);`")]]
  ::std::map<::std::string, ::std::string>& set_ensure(T_OptionalMyStructField23Patch_ensure_struct_setter&& ensure_) {
    ensure_ref() = std::forward<T_OptionalMyStructField23Patch_ensure_struct_setter>(ensure_);
    return __fbthrift_field_ensure;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<OptionalMyStructField23Patch>;
  friend void swap(OptionalMyStructField23Patch& a, OptionalMyStructField23Patch& b);
};

template <class Protocol_>
unsigned long OptionalMyStructField23Patch::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
class MyStructPatch final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = true;
  static const char* __fbthrift_cpp2_gen_thrift_uri();
  using __fbthrift_fields = ::apache::thrift::type::fields<
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{1}, ::apache::thrift::type::struct_t<::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::BoolPatchAdapter, ::apache::thrift::op::BoolPatchStruct>>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{2}, ::apache::thrift::type::struct_t<::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::BytePatchStruct>>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{3}, ::apache::thrift::type::struct_t<::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I16PatchStruct>>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{4}, ::apache::thrift::type::struct_t<::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I32PatchStruct>>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{5}, ::apache::thrift::type::struct_t<::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I64PatchStruct>>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{6}, ::apache::thrift::type::struct_t<::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::FloatPatchStruct>>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{7}, ::apache::thrift::type::struct_t<::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::DoublePatchStruct>>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{8}, ::apache::thrift::type::struct_t<::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StringPatchAdapter, ::apache::thrift::op::StringPatchStruct>>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{9}, ::apache::thrift::type::struct_t<::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::AssignPatchAdapter, ::apache::thrift::op::BinaryPatchStruct>>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{10}, ::apache::thrift::type::struct_t<::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::cpp2::MyDataValuePatch>>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{11}, ::apache::thrift::type::struct_t<::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBoolPatchStruct>>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{12}, ::apache::thrift::type::struct_t<::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBytePatchStruct>>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{13}, ::apache::thrift::type::struct_t<::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI16PatchStruct>>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{14}, ::apache::thrift::type::struct_t<::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI32PatchStruct>>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{15}, ::apache::thrift::type::struct_t<::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI64PatchStruct>>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{16}, ::apache::thrift::type::struct_t<::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalFloatPatchStruct>>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{17}, ::apache::thrift::type::struct_t<::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalDoublePatchStruct>>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{18}, ::apache::thrift::type::struct_t<::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalStringPatchStruct>>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{19}, ::apache::thrift::type::struct_t<::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBinaryPatchStruct>>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{20}, ::apache::thrift::type::struct_t<::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::cpp2::OptionalMyDataValuePatch>>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{21}, ::apache::thrift::type::struct_t<::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::cpp2::OptionalMyStructField21Patch>>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{22}, ::apache::thrift::type::struct_t<::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::cpp2::OptionalMyStructField22Patch>>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{23}, ::apache::thrift::type::struct_t<::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::cpp2::OptionalMyStructField23Patch>>>
  >;

  void __fbthrift_clear();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStructPatch;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyStructPatch() {
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::BoolPatchAdapter, 1>(__fbthrift_field_boolVal, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 2>(__fbthrift_field_byteVal, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 3>(__fbthrift_field_i16Val, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 4>(__fbthrift_field_i32Val, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 5>(__fbthrift_field_i64Val, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 6>(__fbthrift_field_floatVal, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 7>(__fbthrift_field_doubleVal, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter, 8>(__fbthrift_field_stringVal, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::AssignPatchAdapter, 9>(__fbthrift_field_binaryVal, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter, 10>(__fbthrift_field_structVal, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 11>(__fbthrift_field_optBoolVal, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 12>(__fbthrift_field_optByteVal, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 13>(__fbthrift_field_optI16Val, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 14>(__fbthrift_field_optI32Val, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 15>(__fbthrift_field_optI64Val, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 16>(__fbthrift_field_optFloatVal, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 17>(__fbthrift_field_optDoubleVal, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 18>(__fbthrift_field_optStringVal, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 19>(__fbthrift_field_optBinaryVal, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 20>(__fbthrift_field_optStructVal, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 21>(__fbthrift_field_optListVal, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 22>(__fbthrift_field_optSetVal, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 23>(__fbthrift_field_optMapVal, *this);
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStructPatch(apache::thrift::FragileConstructor, ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::BoolPatchAdapter, ::apache::thrift::op::BoolPatchStruct> boolVal__arg, ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::BytePatchStruct> byteVal__arg, ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I16PatchStruct> i16Val__arg, ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I32PatchStruct> i32Val__arg, ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I64PatchStruct> i64Val__arg, ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::FloatPatchStruct> floatVal__arg, ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::DoublePatchStruct> doubleVal__arg, ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StringPatchAdapter, ::apache::thrift::op::StringPatchStruct> stringVal__arg, ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::AssignPatchAdapter, ::apache::thrift::op::BinaryPatchStruct> binaryVal__arg, ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::cpp2::MyDataValuePatch> structVal__arg, ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBoolPatchStruct> optBoolVal__arg, ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBytePatchStruct> optByteVal__arg, ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI16PatchStruct> optI16Val__arg, ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI32PatchStruct> optI32Val__arg, ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI64PatchStruct> optI64Val__arg, ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalFloatPatchStruct> optFloatVal__arg, ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalDoublePatchStruct> optDoubleVal__arg, ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalStringPatchStruct> optStringVal__arg, ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBinaryPatchStruct> optBinaryVal__arg, ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::cpp2::OptionalMyDataValuePatch> optStructVal__arg, ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::cpp2::OptionalMyStructField21Patch> optListVal__arg, ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::cpp2::OptionalMyStructField22Patch> optSetVal__arg, ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::cpp2::OptionalMyStructField23Patch> optMapVal__arg);

  MyStructPatch(MyStructPatch&&) noexcept;
  MyStructPatch(const MyStructPatch& src);


  MyStructPatch& operator=(MyStructPatch&&) noexcept;
  MyStructPatch& operator=(const MyStructPatch& src);
 private:
  ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::BoolPatchAdapter, ::apache::thrift::op::BoolPatchStruct> __fbthrift_field_boolVal;
 private:
  ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::BytePatchStruct> __fbthrift_field_byteVal;
 private:
  ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I16PatchStruct> __fbthrift_field_i16Val;
 private:
  ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I32PatchStruct> __fbthrift_field_i32Val;
 private:
  ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I64PatchStruct> __fbthrift_field_i64Val;
 private:
  ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::FloatPatchStruct> __fbthrift_field_floatVal;
 private:
  ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::DoublePatchStruct> __fbthrift_field_doubleVal;
 private:
  ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StringPatchAdapter, ::apache::thrift::op::StringPatchStruct> __fbthrift_field_stringVal;
 private:
  ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::AssignPatchAdapter, ::apache::thrift::op::BinaryPatchStruct> __fbthrift_field_binaryVal;
 private:
  ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::cpp2::MyDataValuePatch> __fbthrift_field_structVal;
 private:
  ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBoolPatchStruct> __fbthrift_field_optBoolVal;
 private:
  ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBytePatchStruct> __fbthrift_field_optByteVal;
 private:
  ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI16PatchStruct> __fbthrift_field_optI16Val;
 private:
  ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI32PatchStruct> __fbthrift_field_optI32Val;
 private:
  ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI64PatchStruct> __fbthrift_field_optI64Val;
 private:
  ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalFloatPatchStruct> __fbthrift_field_optFloatVal;
 private:
  ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalDoublePatchStruct> __fbthrift_field_optDoubleVal;
 private:
  ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalStringPatchStruct> __fbthrift_field_optStringVal;
 private:
  ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBinaryPatchStruct> __fbthrift_field_optBinaryVal;
 private:
  ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::cpp2::OptionalMyDataValuePatch> __fbthrift_field_optStructVal;
 private:
  ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::cpp2::OptionalMyStructField21Patch> __fbthrift_field_optListVal;
 private:
  ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::cpp2::OptionalMyStructField22Patch> __fbthrift_field_optSetVal;
 private:
  ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::cpp2::OptionalMyStructField23Patch> __fbthrift_field_optMapVal;
 private:
  apache::thrift::detail::isset_bitset<23, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyStructPatch&) const;
  bool operator<(const MyStructPatch&) const;

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::BoolPatchAdapter, ::apache::thrift::op::BoolPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> boolVal_ref() const& {
    return {this->__fbthrift_field_boolVal, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::BoolPatchAdapter, ::apache::thrift::op::BoolPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> boolVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_boolVal), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::BoolPatchAdapter, ::apache::thrift::op::BoolPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> boolVal_ref() & {
    return {this->__fbthrift_field_boolVal, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::BoolPatchAdapter, ::apache::thrift::op::BoolPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> boolVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_boolVal), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::BoolPatchAdapter, ::apache::thrift::op::BoolPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> boolVal() const& {
    return {this->__fbthrift_field_boolVal, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::BoolPatchAdapter, ::apache::thrift::op::BoolPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> boolVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_boolVal), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::BoolPatchAdapter, ::apache::thrift::op::BoolPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> boolVal() & {
    return {this->__fbthrift_field_boolVal, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::BoolPatchAdapter, ::apache::thrift::op::BoolPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> boolVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_boolVal), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::BytePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> byteVal_ref() const& {
    return {this->__fbthrift_field_byteVal, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::BytePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> byteVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_byteVal), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::BytePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> byteVal_ref() & {
    return {this->__fbthrift_field_byteVal, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::BytePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> byteVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_byteVal), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::BytePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> byteVal() const& {
    return {this->__fbthrift_field_byteVal, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::BytePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> byteVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_byteVal), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::BytePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> byteVal() & {
    return {this->__fbthrift_field_byteVal, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::BytePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> byteVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_byteVal), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I16PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> i16Val_ref() const& {
    return {this->__fbthrift_field_i16Val, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I16PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> i16Val_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_i16Val), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I16PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> i16Val_ref() & {
    return {this->__fbthrift_field_i16Val, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I16PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> i16Val_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_i16Val), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I16PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> i16Val() const& {
    return {this->__fbthrift_field_i16Val, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I16PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> i16Val() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_i16Val), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I16PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> i16Val() & {
    return {this->__fbthrift_field_i16Val, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I16PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> i16Val() && {
    return {static_cast<T&&>(this->__fbthrift_field_i16Val), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I32PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> i32Val_ref() const& {
    return {this->__fbthrift_field_i32Val, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I32PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> i32Val_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_i32Val), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I32PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> i32Val_ref() & {
    return {this->__fbthrift_field_i32Val, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I32PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> i32Val_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_i32Val), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I32PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> i32Val() const& {
    return {this->__fbthrift_field_i32Val, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I32PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> i32Val() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_i32Val), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I32PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> i32Val() & {
    return {this->__fbthrift_field_i32Val, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I32PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> i32Val() && {
    return {static_cast<T&&>(this->__fbthrift_field_i32Val), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I64PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> i64Val_ref() const& {
    return {this->__fbthrift_field_i64Val, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I64PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> i64Val_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_i64Val), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I64PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> i64Val_ref() & {
    return {this->__fbthrift_field_i64Val, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I64PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> i64Val_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_i64Val), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I64PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> i64Val() const& {
    return {this->__fbthrift_field_i64Val, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I64PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> i64Val() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_i64Val), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I64PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> i64Val() & {
    return {this->__fbthrift_field_i64Val, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I64PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> i64Val() && {
    return {static_cast<T&&>(this->__fbthrift_field_i64Val), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::FloatPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> floatVal_ref() const& {
    return {this->__fbthrift_field_floatVal, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::FloatPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> floatVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_floatVal), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::FloatPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> floatVal_ref() & {
    return {this->__fbthrift_field_floatVal, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::FloatPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> floatVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_floatVal), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::FloatPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> floatVal() const& {
    return {this->__fbthrift_field_floatVal, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::FloatPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> floatVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_floatVal), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::FloatPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> floatVal() & {
    return {this->__fbthrift_field_floatVal, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::FloatPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> floatVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_floatVal), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::DoublePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> doubleVal_ref() const& {
    return {this->__fbthrift_field_doubleVal, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::DoublePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> doubleVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_doubleVal), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::DoublePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> doubleVal_ref() & {
    return {this->__fbthrift_field_doubleVal, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::DoublePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> doubleVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_doubleVal), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::DoublePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> doubleVal() const& {
    return {this->__fbthrift_field_doubleVal, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::DoublePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> doubleVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_doubleVal), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::DoublePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> doubleVal() & {
    return {this->__fbthrift_field_doubleVal, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::DoublePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> doubleVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_doubleVal), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StringPatchAdapter, ::apache::thrift::op::StringPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> stringVal_ref() const& {
    return {this->__fbthrift_field_stringVal, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StringPatchAdapter, ::apache::thrift::op::StringPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> stringVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_stringVal), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StringPatchAdapter, ::apache::thrift::op::StringPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> stringVal_ref() & {
    return {this->__fbthrift_field_stringVal, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StringPatchAdapter, ::apache::thrift::op::StringPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> stringVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_stringVal), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StringPatchAdapter, ::apache::thrift::op::StringPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> stringVal() const& {
    return {this->__fbthrift_field_stringVal, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StringPatchAdapter, ::apache::thrift::op::StringPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> stringVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_stringVal), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StringPatchAdapter, ::apache::thrift::op::StringPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> stringVal() & {
    return {this->__fbthrift_field_stringVal, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StringPatchAdapter, ::apache::thrift::op::StringPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> stringVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_stringVal), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::AssignPatchAdapter, ::apache::thrift::op::BinaryPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> binaryVal_ref() const& {
    return {this->__fbthrift_field_binaryVal, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::AssignPatchAdapter, ::apache::thrift::op::BinaryPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> binaryVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_binaryVal), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::AssignPatchAdapter, ::apache::thrift::op::BinaryPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> binaryVal_ref() & {
    return {this->__fbthrift_field_binaryVal, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::AssignPatchAdapter, ::apache::thrift::op::BinaryPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> binaryVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_binaryVal), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::AssignPatchAdapter, ::apache::thrift::op::BinaryPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> binaryVal() const& {
    return {this->__fbthrift_field_binaryVal, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::AssignPatchAdapter, ::apache::thrift::op::BinaryPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> binaryVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_binaryVal), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::AssignPatchAdapter, ::apache::thrift::op::BinaryPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> binaryVal() & {
    return {this->__fbthrift_field_binaryVal, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::AssignPatchAdapter, ::apache::thrift::op::BinaryPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> binaryVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_binaryVal), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::cpp2::MyDataValuePatch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> structVal_ref() const& {
    return {this->__fbthrift_field_structVal, __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::cpp2::MyDataValuePatch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> structVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_structVal), __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::cpp2::MyDataValuePatch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> structVal_ref() & {
    return {this->__fbthrift_field_structVal, __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::cpp2::MyDataValuePatch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> structVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_structVal), __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::cpp2::MyDataValuePatch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> structVal() const& {
    return {this->__fbthrift_field_structVal, __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::cpp2::MyDataValuePatch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> structVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_structVal), __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::cpp2::MyDataValuePatch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> structVal() & {
    return {this->__fbthrift_field_structVal, __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::cpp2::MyDataValuePatch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> structVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_structVal), __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBoolPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optBoolVal_ref() const& {
    return {this->__fbthrift_field_optBoolVal, __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBoolPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optBoolVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optBoolVal), __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBoolPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optBoolVal_ref() & {
    return {this->__fbthrift_field_optBoolVal, __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBoolPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optBoolVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optBoolVal), __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBoolPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optBoolVal() const& {
    return {this->__fbthrift_field_optBoolVal, __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBoolPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optBoolVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optBoolVal), __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBoolPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optBoolVal() & {
    return {this->__fbthrift_field_optBoolVal, __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBoolPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optBoolVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optBoolVal), __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBytePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optByteVal_ref() const& {
    return {this->__fbthrift_field_optByteVal, __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBytePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optByteVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optByteVal), __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBytePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optByteVal_ref() & {
    return {this->__fbthrift_field_optByteVal, __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBytePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optByteVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optByteVal), __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBytePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optByteVal() const& {
    return {this->__fbthrift_field_optByteVal, __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBytePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optByteVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optByteVal), __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBytePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optByteVal() & {
    return {this->__fbthrift_field_optByteVal, __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBytePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optByteVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optByteVal), __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI16PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optI16Val_ref() const& {
    return {this->__fbthrift_field_optI16Val, __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI16PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optI16Val_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optI16Val), __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI16PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optI16Val_ref() & {
    return {this->__fbthrift_field_optI16Val, __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI16PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optI16Val_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optI16Val), __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI16PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optI16Val() const& {
    return {this->__fbthrift_field_optI16Val, __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI16PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optI16Val() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optI16Val), __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI16PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optI16Val() & {
    return {this->__fbthrift_field_optI16Val, __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI16PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optI16Val() && {
    return {static_cast<T&&>(this->__fbthrift_field_optI16Val), __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI32PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optI32Val_ref() const& {
    return {this->__fbthrift_field_optI32Val, __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI32PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optI32Val_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optI32Val), __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI32PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optI32Val_ref() & {
    return {this->__fbthrift_field_optI32Val, __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI32PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optI32Val_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optI32Val), __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI32PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optI32Val() const& {
    return {this->__fbthrift_field_optI32Val, __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI32PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optI32Val() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optI32Val), __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI32PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optI32Val() & {
    return {this->__fbthrift_field_optI32Val, __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI32PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optI32Val() && {
    return {static_cast<T&&>(this->__fbthrift_field_optI32Val), __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI64PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optI64Val_ref() const& {
    return {this->__fbthrift_field_optI64Val, __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI64PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optI64Val_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optI64Val), __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI64PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optI64Val_ref() & {
    return {this->__fbthrift_field_optI64Val, __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI64PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optI64Val_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optI64Val), __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI64PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optI64Val() const& {
    return {this->__fbthrift_field_optI64Val, __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI64PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optI64Val() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optI64Val), __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI64PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optI64Val() & {
    return {this->__fbthrift_field_optI64Val, __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI64PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optI64Val() && {
    return {static_cast<T&&>(this->__fbthrift_field_optI64Val), __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalFloatPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optFloatVal_ref() const& {
    return {this->__fbthrift_field_optFloatVal, __isset.at(15), __isset.bit(15)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalFloatPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optFloatVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optFloatVal), __isset.at(15), __isset.bit(15)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalFloatPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optFloatVal_ref() & {
    return {this->__fbthrift_field_optFloatVal, __isset.at(15), __isset.bit(15)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalFloatPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optFloatVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optFloatVal), __isset.at(15), __isset.bit(15)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalFloatPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optFloatVal() const& {
    return {this->__fbthrift_field_optFloatVal, __isset.at(15), __isset.bit(15)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalFloatPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optFloatVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optFloatVal), __isset.at(15), __isset.bit(15)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalFloatPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optFloatVal() & {
    return {this->__fbthrift_field_optFloatVal, __isset.at(15), __isset.bit(15)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalFloatPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optFloatVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optFloatVal), __isset.at(15), __isset.bit(15)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalDoublePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optDoubleVal_ref() const& {
    return {this->__fbthrift_field_optDoubleVal, __isset.at(16), __isset.bit(16)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalDoublePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optDoubleVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optDoubleVal), __isset.at(16), __isset.bit(16)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalDoublePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optDoubleVal_ref() & {
    return {this->__fbthrift_field_optDoubleVal, __isset.at(16), __isset.bit(16)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalDoublePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optDoubleVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optDoubleVal), __isset.at(16), __isset.bit(16)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalDoublePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optDoubleVal() const& {
    return {this->__fbthrift_field_optDoubleVal, __isset.at(16), __isset.bit(16)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalDoublePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optDoubleVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optDoubleVal), __isset.at(16), __isset.bit(16)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalDoublePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optDoubleVal() & {
    return {this->__fbthrift_field_optDoubleVal, __isset.at(16), __isset.bit(16)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalDoublePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optDoubleVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optDoubleVal), __isset.at(16), __isset.bit(16)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalStringPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optStringVal_ref() const& {
    return {this->__fbthrift_field_optStringVal, __isset.at(17), __isset.bit(17)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalStringPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optStringVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optStringVal), __isset.at(17), __isset.bit(17)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalStringPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optStringVal_ref() & {
    return {this->__fbthrift_field_optStringVal, __isset.at(17), __isset.bit(17)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalStringPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optStringVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optStringVal), __isset.at(17), __isset.bit(17)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalStringPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optStringVal() const& {
    return {this->__fbthrift_field_optStringVal, __isset.at(17), __isset.bit(17)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalStringPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optStringVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optStringVal), __isset.at(17), __isset.bit(17)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalStringPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optStringVal() & {
    return {this->__fbthrift_field_optStringVal, __isset.at(17), __isset.bit(17)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalStringPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optStringVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optStringVal), __isset.at(17), __isset.bit(17)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBinaryPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optBinaryVal_ref() const& {
    return {this->__fbthrift_field_optBinaryVal, __isset.at(18), __isset.bit(18)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBinaryPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optBinaryVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optBinaryVal), __isset.at(18), __isset.bit(18)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBinaryPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optBinaryVal_ref() & {
    return {this->__fbthrift_field_optBinaryVal, __isset.at(18), __isset.bit(18)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBinaryPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optBinaryVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optBinaryVal), __isset.at(18), __isset.bit(18)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBinaryPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optBinaryVal() const& {
    return {this->__fbthrift_field_optBinaryVal, __isset.at(18), __isset.bit(18)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBinaryPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optBinaryVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optBinaryVal), __isset.at(18), __isset.bit(18)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBinaryPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optBinaryVal() & {
    return {this->__fbthrift_field_optBinaryVal, __isset.at(18), __isset.bit(18)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBinaryPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optBinaryVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optBinaryVal), __isset.at(18), __isset.bit(18)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::cpp2::OptionalMyDataValuePatch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optStructVal_ref() const& {
    return {this->__fbthrift_field_optStructVal, __isset.at(19), __isset.bit(19)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::cpp2::OptionalMyDataValuePatch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optStructVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optStructVal), __isset.at(19), __isset.bit(19)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::cpp2::OptionalMyDataValuePatch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optStructVal_ref() & {
    return {this->__fbthrift_field_optStructVal, __isset.at(19), __isset.bit(19)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::cpp2::OptionalMyDataValuePatch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optStructVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optStructVal), __isset.at(19), __isset.bit(19)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::cpp2::OptionalMyDataValuePatch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optStructVal() const& {
    return {this->__fbthrift_field_optStructVal, __isset.at(19), __isset.bit(19)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::cpp2::OptionalMyDataValuePatch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optStructVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optStructVal), __isset.at(19), __isset.bit(19)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::cpp2::OptionalMyDataValuePatch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optStructVal() & {
    return {this->__fbthrift_field_optStructVal, __isset.at(19), __isset.bit(19)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::cpp2::OptionalMyDataValuePatch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optStructVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optStructVal), __isset.at(19), __isset.bit(19)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::cpp2::OptionalMyStructField21Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optListVal_ref() const& {
    return {this->__fbthrift_field_optListVal, __isset.at(20), __isset.bit(20)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::cpp2::OptionalMyStructField21Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optListVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optListVal), __isset.at(20), __isset.bit(20)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::cpp2::OptionalMyStructField21Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optListVal_ref() & {
    return {this->__fbthrift_field_optListVal, __isset.at(20), __isset.bit(20)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::cpp2::OptionalMyStructField21Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optListVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optListVal), __isset.at(20), __isset.bit(20)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::cpp2::OptionalMyStructField21Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optListVal() const& {
    return {this->__fbthrift_field_optListVal, __isset.at(20), __isset.bit(20)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::cpp2::OptionalMyStructField21Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optListVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optListVal), __isset.at(20), __isset.bit(20)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::cpp2::OptionalMyStructField21Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optListVal() & {
    return {this->__fbthrift_field_optListVal, __isset.at(20), __isset.bit(20)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::cpp2::OptionalMyStructField21Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optListVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optListVal), __isset.at(20), __isset.bit(20)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::cpp2::OptionalMyStructField22Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optSetVal_ref() const& {
    return {this->__fbthrift_field_optSetVal, __isset.at(21), __isset.bit(21)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::cpp2::OptionalMyStructField22Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optSetVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optSetVal), __isset.at(21), __isset.bit(21)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::cpp2::OptionalMyStructField22Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optSetVal_ref() & {
    return {this->__fbthrift_field_optSetVal, __isset.at(21), __isset.bit(21)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::cpp2::OptionalMyStructField22Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optSetVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optSetVal), __isset.at(21), __isset.bit(21)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::cpp2::OptionalMyStructField22Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optSetVal() const& {
    return {this->__fbthrift_field_optSetVal, __isset.at(21), __isset.bit(21)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::cpp2::OptionalMyStructField22Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optSetVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optSetVal), __isset.at(21), __isset.bit(21)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::cpp2::OptionalMyStructField22Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optSetVal() & {
    return {this->__fbthrift_field_optSetVal, __isset.at(21), __isset.bit(21)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::cpp2::OptionalMyStructField22Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optSetVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optSetVal), __isset.at(21), __isset.bit(21)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::cpp2::OptionalMyStructField23Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optMapVal_ref() const& {
    return {this->__fbthrift_field_optMapVal, __isset.at(22), __isset.bit(22)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::cpp2::OptionalMyStructField23Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optMapVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optMapVal), __isset.at(22), __isset.bit(22)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::cpp2::OptionalMyStructField23Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optMapVal_ref() & {
    return {this->__fbthrift_field_optMapVal, __isset.at(22), __isset.bit(22)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::cpp2::OptionalMyStructField23Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optMapVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optMapVal), __isset.at(22), __isset.bit(22)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::cpp2::OptionalMyStructField23Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optMapVal() const& {
    return {this->__fbthrift_field_optMapVal, __isset.at(22), __isset.bit(22)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::cpp2::OptionalMyStructField23Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optMapVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optMapVal), __isset.at(22), __isset.bit(22)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::cpp2::OptionalMyStructField23Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optMapVal() & {
    return {this->__fbthrift_field_optMapVal, __isset.at(22), __isset.bit(22)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::cpp2::OptionalMyStructField23Patch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optMapVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optMapVal), __isset.at(22), __isset.bit(22)};
  }
 private:
  template<std::underlying_type_t<::apache::thrift::FieldId>> decltype(auto) __fbthrift_get() &;
  template<std::underlying_type_t<::apache::thrift::FieldId>> decltype(auto) __fbthrift_get() const&;
  template<std::underlying_type_t<::apache::thrift::FieldId>> decltype(auto) __fbthrift_get() &&;
  template<std::underlying_type_t<::apache::thrift::FieldId>> decltype(auto) __fbthrift_get() const&&;
  template<> decltype(auto) __fbthrift_get<1>() &       { return boolVal_ref(); }
  template<> decltype(auto) __fbthrift_get<1>() const&  { return boolVal_ref(); }
  template<> decltype(auto) __fbthrift_get<1>() &&      { return std::move(*this).boolVal_ref(); }
  template<> decltype(auto) __fbthrift_get<1>() const&& { return std::move(*this).boolVal_ref(); }
  template<> decltype(auto) __fbthrift_get<2>() &       { return byteVal_ref(); }
  template<> decltype(auto) __fbthrift_get<2>() const&  { return byteVal_ref(); }
  template<> decltype(auto) __fbthrift_get<2>() &&      { return std::move(*this).byteVal_ref(); }
  template<> decltype(auto) __fbthrift_get<2>() const&& { return std::move(*this).byteVal_ref(); }
  template<> decltype(auto) __fbthrift_get<3>() &       { return i16Val_ref(); }
  template<> decltype(auto) __fbthrift_get<3>() const&  { return i16Val_ref(); }
  template<> decltype(auto) __fbthrift_get<3>() &&      { return std::move(*this).i16Val_ref(); }
  template<> decltype(auto) __fbthrift_get<3>() const&& { return std::move(*this).i16Val_ref(); }
  template<> decltype(auto) __fbthrift_get<4>() &       { return i32Val_ref(); }
  template<> decltype(auto) __fbthrift_get<4>() const&  { return i32Val_ref(); }
  template<> decltype(auto) __fbthrift_get<4>() &&      { return std::move(*this).i32Val_ref(); }
  template<> decltype(auto) __fbthrift_get<4>() const&& { return std::move(*this).i32Val_ref(); }
  template<> decltype(auto) __fbthrift_get<5>() &       { return i64Val_ref(); }
  template<> decltype(auto) __fbthrift_get<5>() const&  { return i64Val_ref(); }
  template<> decltype(auto) __fbthrift_get<5>() &&      { return std::move(*this).i64Val_ref(); }
  template<> decltype(auto) __fbthrift_get<5>() const&& { return std::move(*this).i64Val_ref(); }
  template<> decltype(auto) __fbthrift_get<6>() &       { return floatVal_ref(); }
  template<> decltype(auto) __fbthrift_get<6>() const&  { return floatVal_ref(); }
  template<> decltype(auto) __fbthrift_get<6>() &&      { return std::move(*this).floatVal_ref(); }
  template<> decltype(auto) __fbthrift_get<6>() const&& { return std::move(*this).floatVal_ref(); }
  template<> decltype(auto) __fbthrift_get<7>() &       { return doubleVal_ref(); }
  template<> decltype(auto) __fbthrift_get<7>() const&  { return doubleVal_ref(); }
  template<> decltype(auto) __fbthrift_get<7>() &&      { return std::move(*this).doubleVal_ref(); }
  template<> decltype(auto) __fbthrift_get<7>() const&& { return std::move(*this).doubleVal_ref(); }
  template<> decltype(auto) __fbthrift_get<8>() &       { return stringVal_ref(); }
  template<> decltype(auto) __fbthrift_get<8>() const&  { return stringVal_ref(); }
  template<> decltype(auto) __fbthrift_get<8>() &&      { return std::move(*this).stringVal_ref(); }
  template<> decltype(auto) __fbthrift_get<8>() const&& { return std::move(*this).stringVal_ref(); }
  template<> decltype(auto) __fbthrift_get<9>() &       { return binaryVal_ref(); }
  template<> decltype(auto) __fbthrift_get<9>() const&  { return binaryVal_ref(); }
  template<> decltype(auto) __fbthrift_get<9>() &&      { return std::move(*this).binaryVal_ref(); }
  template<> decltype(auto) __fbthrift_get<9>() const&& { return std::move(*this).binaryVal_ref(); }
  template<> decltype(auto) __fbthrift_get<10>() &       { return structVal_ref(); }
  template<> decltype(auto) __fbthrift_get<10>() const&  { return structVal_ref(); }
  template<> decltype(auto) __fbthrift_get<10>() &&      { return std::move(*this).structVal_ref(); }
  template<> decltype(auto) __fbthrift_get<10>() const&& { return std::move(*this).structVal_ref(); }
  template<> decltype(auto) __fbthrift_get<11>() &       { return optBoolVal_ref(); }
  template<> decltype(auto) __fbthrift_get<11>() const&  { return optBoolVal_ref(); }
  template<> decltype(auto) __fbthrift_get<11>() &&      { return std::move(*this).optBoolVal_ref(); }
  template<> decltype(auto) __fbthrift_get<11>() const&& { return std::move(*this).optBoolVal_ref(); }
  template<> decltype(auto) __fbthrift_get<12>() &       { return optByteVal_ref(); }
  template<> decltype(auto) __fbthrift_get<12>() const&  { return optByteVal_ref(); }
  template<> decltype(auto) __fbthrift_get<12>() &&      { return std::move(*this).optByteVal_ref(); }
  template<> decltype(auto) __fbthrift_get<12>() const&& { return std::move(*this).optByteVal_ref(); }
  template<> decltype(auto) __fbthrift_get<13>() &       { return optI16Val_ref(); }
  template<> decltype(auto) __fbthrift_get<13>() const&  { return optI16Val_ref(); }
  template<> decltype(auto) __fbthrift_get<13>() &&      { return std::move(*this).optI16Val_ref(); }
  template<> decltype(auto) __fbthrift_get<13>() const&& { return std::move(*this).optI16Val_ref(); }
  template<> decltype(auto) __fbthrift_get<14>() &       { return optI32Val_ref(); }
  template<> decltype(auto) __fbthrift_get<14>() const&  { return optI32Val_ref(); }
  template<> decltype(auto) __fbthrift_get<14>() &&      { return std::move(*this).optI32Val_ref(); }
  template<> decltype(auto) __fbthrift_get<14>() const&& { return std::move(*this).optI32Val_ref(); }
  template<> decltype(auto) __fbthrift_get<15>() &       { return optI64Val_ref(); }
  template<> decltype(auto) __fbthrift_get<15>() const&  { return optI64Val_ref(); }
  template<> decltype(auto) __fbthrift_get<15>() &&      { return std::move(*this).optI64Val_ref(); }
  template<> decltype(auto) __fbthrift_get<15>() const&& { return std::move(*this).optI64Val_ref(); }
  template<> decltype(auto) __fbthrift_get<16>() &       { return optFloatVal_ref(); }
  template<> decltype(auto) __fbthrift_get<16>() const&  { return optFloatVal_ref(); }
  template<> decltype(auto) __fbthrift_get<16>() &&      { return std::move(*this).optFloatVal_ref(); }
  template<> decltype(auto) __fbthrift_get<16>() const&& { return std::move(*this).optFloatVal_ref(); }
  template<> decltype(auto) __fbthrift_get<17>() &       { return optDoubleVal_ref(); }
  template<> decltype(auto) __fbthrift_get<17>() const&  { return optDoubleVal_ref(); }
  template<> decltype(auto) __fbthrift_get<17>() &&      { return std::move(*this).optDoubleVal_ref(); }
  template<> decltype(auto) __fbthrift_get<17>() const&& { return std::move(*this).optDoubleVal_ref(); }
  template<> decltype(auto) __fbthrift_get<18>() &       { return optStringVal_ref(); }
  template<> decltype(auto) __fbthrift_get<18>() const&  { return optStringVal_ref(); }
  template<> decltype(auto) __fbthrift_get<18>() &&      { return std::move(*this).optStringVal_ref(); }
  template<> decltype(auto) __fbthrift_get<18>() const&& { return std::move(*this).optStringVal_ref(); }
  template<> decltype(auto) __fbthrift_get<19>() &       { return optBinaryVal_ref(); }
  template<> decltype(auto) __fbthrift_get<19>() const&  { return optBinaryVal_ref(); }
  template<> decltype(auto) __fbthrift_get<19>() &&      { return std::move(*this).optBinaryVal_ref(); }
  template<> decltype(auto) __fbthrift_get<19>() const&& { return std::move(*this).optBinaryVal_ref(); }
  template<> decltype(auto) __fbthrift_get<20>() &       { return optStructVal_ref(); }
  template<> decltype(auto) __fbthrift_get<20>() const&  { return optStructVal_ref(); }
  template<> decltype(auto) __fbthrift_get<20>() &&      { return std::move(*this).optStructVal_ref(); }
  template<> decltype(auto) __fbthrift_get<20>() const&& { return std::move(*this).optStructVal_ref(); }
  template<> decltype(auto) __fbthrift_get<21>() &       { return optListVal_ref(); }
  template<> decltype(auto) __fbthrift_get<21>() const&  { return optListVal_ref(); }
  template<> decltype(auto) __fbthrift_get<21>() &&      { return std::move(*this).optListVal_ref(); }
  template<> decltype(auto) __fbthrift_get<21>() const&& { return std::move(*this).optListVal_ref(); }
  template<> decltype(auto) __fbthrift_get<22>() &       { return optSetVal_ref(); }
  template<> decltype(auto) __fbthrift_get<22>() const&  { return optSetVal_ref(); }
  template<> decltype(auto) __fbthrift_get<22>() &&      { return std::move(*this).optSetVal_ref(); }
  template<> decltype(auto) __fbthrift_get<22>() const&& { return std::move(*this).optSetVal_ref(); }
  template<> decltype(auto) __fbthrift_get<23>() &       { return optMapVal_ref(); }
  template<> decltype(auto) __fbthrift_get<23>() const&  { return optMapVal_ref(); }
  template<> decltype(auto) __fbthrift_get<23>() &&      { return std::move(*this).optMapVal_ref(); }
  template<> decltype(auto) __fbthrift_get<23>() const&& { return std::move(*this).optMapVal_ref(); }

 public:

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStructPatch>;
  friend void swap(MyStructPatch& a, MyStructPatch& b);
};

template <class Protocol_>
unsigned long MyStructPatch::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
class MyStructValuePatch final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = true;
  static const char* __fbthrift_cpp2_gen_thrift_uri();
  using __fbthrift_fields = ::apache::thrift::type::fields<
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{1}, ::apache::thrift::type::struct_t<::cpp2::MyStruct>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{2}, ::apache::thrift::type::bool_t>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{3}, ::apache::thrift::type::struct_t<::cpp2::MyStructPatch>>
  >;

  void __fbthrift_clear();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStructValuePatch;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyStructValuePatch() :
      __fbthrift_field_clear() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStructValuePatch(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyStruct> assign__arg, bool clear__arg, ::cpp2::MyStructPatch patch__arg);

  MyStructValuePatch(MyStructValuePatch&&) noexcept;

  MyStructValuePatch(const MyStructValuePatch& src);


  MyStructValuePatch& operator=(MyStructValuePatch&&) noexcept;
  MyStructValuePatch& operator=(const MyStructValuePatch& src);
 private:
  ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyStruct> __fbthrift_field_assign;
 private:
  bool __fbthrift_field_clear;
 private:
  ::cpp2::MyStructPatch __fbthrift_field_patch;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyStructValuePatch&) const;
  bool operator<(const MyStructValuePatch&) const;

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> assign_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> assign_ref() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> assign_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> assign_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> assign() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> assign() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> assign() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> assign() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> clear_ref() const& {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> clear_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> clear_ref() & {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> clear_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> clear() const& {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> clear() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> clear() & {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> clear() && {
    return {static_cast<T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::cpp2::MyStructPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patch_ref() const& {
    return {this->__fbthrift_field_patch, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::cpp2::MyStructPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patch_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patch), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::cpp2::MyStructPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patch_ref() & {
    return {this->__fbthrift_field_patch, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::cpp2::MyStructPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patch_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_patch), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::cpp2::MyStructPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patch() const& {
    return {this->__fbthrift_field_patch, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::cpp2::MyStructPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patch() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patch), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::cpp2::MyStructPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patch() & {
    return {this->__fbthrift_field_patch, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::cpp2::MyStructPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patch() && {
    return {static_cast<T&&>(this->__fbthrift_field_patch), __isset.at(1), __isset.bit(1)};
  }
 private:
  template<std::underlying_type_t<::apache::thrift::FieldId>> decltype(auto) __fbthrift_get() &;
  template<std::underlying_type_t<::apache::thrift::FieldId>> decltype(auto) __fbthrift_get() const&;
  template<std::underlying_type_t<::apache::thrift::FieldId>> decltype(auto) __fbthrift_get() &&;
  template<std::underlying_type_t<::apache::thrift::FieldId>> decltype(auto) __fbthrift_get() const&&;
  template<> decltype(auto) __fbthrift_get<1>() &       { return assign_ref(); }
  template<> decltype(auto) __fbthrift_get<1>() const&  { return assign_ref(); }
  template<> decltype(auto) __fbthrift_get<1>() &&      { return std::move(*this).assign_ref(); }
  template<> decltype(auto) __fbthrift_get<1>() const&& { return std::move(*this).assign_ref(); }
  template<> decltype(auto) __fbthrift_get<2>() &       { return clear_ref(); }
  template<> decltype(auto) __fbthrift_get<2>() const&  { return clear_ref(); }
  template<> decltype(auto) __fbthrift_get<2>() &&      { return std::move(*this).clear_ref(); }
  template<> decltype(auto) __fbthrift_get<2>() const&& { return std::move(*this).clear_ref(); }
  template<> decltype(auto) __fbthrift_get<3>() &       { return patch_ref(); }
  template<> decltype(auto) __fbthrift_get<3>() const&  { return patch_ref(); }
  template<> decltype(auto) __fbthrift_get<3>() &&      { return std::move(*this).patch_ref(); }
  template<> decltype(auto) __fbthrift_get<3>() const&& { return std::move(*this).patch_ref(); }

 public:

  bool get_clear() const {
    return __fbthrift_field_clear;
  }

  [[deprecated("Use `FOO.clear_ref() = BAR;` instead of `FOO.set_clear(BAR);`")]]
  bool& set_clear(bool clear_) {
    clear_ref() = clear_;
    return __fbthrift_field_clear;
  }
  const ::cpp2::MyStructPatch& get_patch() const&;
  ::cpp2::MyStructPatch get_patch() &&;

  template <typename T_MyStructValuePatch_patch_struct_setter = ::cpp2::MyStructPatch>
  [[deprecated("Use `FOO.patch_ref() = BAR;` instead of `FOO.set_patch(BAR);`")]]
  ::cpp2::MyStructPatch& set_patch(T_MyStructValuePatch_patch_struct_setter&& patch_) {
    patch_ref() = std::forward<T_MyStructValuePatch_patch_struct_setter>(patch_);
    return __fbthrift_field_patch;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStructValuePatch>;
  friend void swap(MyStructValuePatch& a, MyStructValuePatch& b);
};

template <class Protocol_>
unsigned long MyStructValuePatch::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
class OptionalMyStructValuePatch final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = true;
  static const char* __fbthrift_cpp2_gen_thrift_uri();
  using __fbthrift_fields = ::apache::thrift::type::fields<
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{2}, ::apache::thrift::type::bool_t>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{3}, ::apache::thrift::type::struct_t<::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::cpp2::MyStructValuePatch>>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{4}, ::apache::thrift::type::struct_t<::cpp2::MyStruct>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{5}, ::apache::thrift::type::struct_t<::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::cpp2::MyStructValuePatch>>>
  >;

  void __fbthrift_clear();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = OptionalMyStructValuePatch;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  OptionalMyStructValuePatch() :
      __fbthrift_field_clear() {
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter, 3>(__fbthrift_field_patch, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter, 5>(__fbthrift_field_patchAfter, *this);
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  OptionalMyStructValuePatch(apache::thrift::FragileConstructor, bool clear__arg, ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::cpp2::MyStructValuePatch> patch__arg, ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyStruct> ensure__arg, ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::cpp2::MyStructValuePatch> patchAfter__arg);

  OptionalMyStructValuePatch(OptionalMyStructValuePatch&&) noexcept;
  OptionalMyStructValuePatch(const OptionalMyStructValuePatch& src);


  OptionalMyStructValuePatch& operator=(OptionalMyStructValuePatch&&) noexcept;
  OptionalMyStructValuePatch& operator=(const OptionalMyStructValuePatch& src);
 private:
  bool __fbthrift_field_clear;
 private:
  ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::cpp2::MyStructValuePatch> __fbthrift_field_patch;
 private:
  ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyStruct> __fbthrift_field_ensure;
 private:
  ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::cpp2::MyStructValuePatch> __fbthrift_field_patchAfter;
 private:
  apache::thrift::detail::isset_bitset<3, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const OptionalMyStructValuePatch&) const;
  bool operator<(const OptionalMyStructValuePatch&) const;

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> clear_ref() const& {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> clear_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> clear_ref() & {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> clear_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> clear() const& {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> clear() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> clear() & {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> clear() && {
    return {static_cast<T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::cpp2::MyStructValuePatch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patch_ref() const& {
    return {this->__fbthrift_field_patch, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::cpp2::MyStructValuePatch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patch_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patch), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::cpp2::MyStructValuePatch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patch_ref() & {
    return {this->__fbthrift_field_patch, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::cpp2::MyStructValuePatch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patch_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_patch), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::cpp2::MyStructValuePatch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patch() const& {
    return {this->__fbthrift_field_patch, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::cpp2::MyStructValuePatch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patch() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patch), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::cpp2::MyStructValuePatch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patch() & {
    return {this->__fbthrift_field_patch, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::cpp2::MyStructValuePatch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patch() && {
    return {static_cast<T&&>(this->__fbthrift_field_patch), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> ensure_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> ensure_ref() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> ensure_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> ensure_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> ensure() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> ensure() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> ensure() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> ensure() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::cpp2::MyStructValuePatch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patchAfter_ref() const& {
    return {this->__fbthrift_field_patchAfter, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::cpp2::MyStructValuePatch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patchAfter_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patchAfter), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::cpp2::MyStructValuePatch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patchAfter_ref() & {
    return {this->__fbthrift_field_patchAfter, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::cpp2::MyStructValuePatch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patchAfter_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_patchAfter), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::cpp2::MyStructValuePatch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patchAfter() const& {
    return {this->__fbthrift_field_patchAfter, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::cpp2::MyStructValuePatch>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patchAfter() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patchAfter), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::cpp2::MyStructValuePatch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patchAfter() & {
    return {this->__fbthrift_field_patchAfter, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StructPatchAdapter, ::cpp2::MyStructValuePatch>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patchAfter() && {
    return {static_cast<T&&>(this->__fbthrift_field_patchAfter), __isset.at(2), __isset.bit(2)};
  }
 private:
  template<std::underlying_type_t<::apache::thrift::FieldId>> decltype(auto) __fbthrift_get() &;
  template<std::underlying_type_t<::apache::thrift::FieldId>> decltype(auto) __fbthrift_get() const&;
  template<std::underlying_type_t<::apache::thrift::FieldId>> decltype(auto) __fbthrift_get() &&;
  template<std::underlying_type_t<::apache::thrift::FieldId>> decltype(auto) __fbthrift_get() const&&;
  template<> decltype(auto) __fbthrift_get<2>() &       { return clear_ref(); }
  template<> decltype(auto) __fbthrift_get<2>() const&  { return clear_ref(); }
  template<> decltype(auto) __fbthrift_get<2>() &&      { return std::move(*this).clear_ref(); }
  template<> decltype(auto) __fbthrift_get<2>() const&& { return std::move(*this).clear_ref(); }
  template<> decltype(auto) __fbthrift_get<3>() &       { return patch_ref(); }
  template<> decltype(auto) __fbthrift_get<3>() const&  { return patch_ref(); }
  template<> decltype(auto) __fbthrift_get<3>() &&      { return std::move(*this).patch_ref(); }
  template<> decltype(auto) __fbthrift_get<3>() const&& { return std::move(*this).patch_ref(); }
  template<> decltype(auto) __fbthrift_get<4>() &       { return ensure_ref(); }
  template<> decltype(auto) __fbthrift_get<4>() const&  { return ensure_ref(); }
  template<> decltype(auto) __fbthrift_get<4>() &&      { return std::move(*this).ensure_ref(); }
  template<> decltype(auto) __fbthrift_get<4>() const&& { return std::move(*this).ensure_ref(); }
  template<> decltype(auto) __fbthrift_get<5>() &       { return patchAfter_ref(); }
  template<> decltype(auto) __fbthrift_get<5>() const&  { return patchAfter_ref(); }
  template<> decltype(auto) __fbthrift_get<5>() &&      { return std::move(*this).patchAfter_ref(); }
  template<> decltype(auto) __fbthrift_get<5>() const&& { return std::move(*this).patchAfter_ref(); }

 public:

  bool get_clear() const {
    return __fbthrift_field_clear;
  }

  [[deprecated("Use `FOO.clear_ref() = BAR;` instead of `FOO.set_clear(BAR);`")]]
  bool& set_clear(bool clear_) {
    clear_ref() = clear_;
    return __fbthrift_field_clear;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<OptionalMyStructValuePatch>;
  friend void swap(OptionalMyStructValuePatch& a, OptionalMyStructValuePatch& b);
};

template <class Protocol_>
unsigned long OptionalMyStructValuePatch::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
