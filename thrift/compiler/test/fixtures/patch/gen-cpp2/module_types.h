/**
 * Autogenerated by Thrift for src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>

#include <thrift/lib/cpp2/type/Tag.h>

#include "thrift/lib/thrift/gen-cpp2/patch_types.h"

namespace apache {
namespace thrift {
namespace tag {
struct boolVal;
struct byteVal;
struct i16Val;
struct i32Val;
struct i64Val;
struct floatVal;
struct doubleVal;
struct stringVal;
struct binaryVal;
struct optBoolVal;
struct optByteVal;
struct optI16Val;
struct optI32Val;
struct optI64Val;
struct optFloatVal;
struct optDoubleVal;
struct optStringVal;
struct optBinaryVal;
struct boolVal;
struct byteVal;
struct i16Val;
struct i32Val;
struct i64Val;
struct floatVal;
struct doubleVal;
struct stringVal;
struct binaryVal;
struct optBoolVal;
struct optByteVal;
struct optI16Val;
struct optI32Val;
struct optI64Val;
struct optFloatVal;
struct optDoubleVal;
struct optStringVal;
struct optBinaryVal;
struct assign;
struct clear;
struct patch;
struct clear;
struct patch;
struct ensure;
struct patchAfter;
} // namespace tag
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_boolVal
#define APACHE_THRIFT_ACCESSOR_boolVal
APACHE_THRIFT_DEFINE_ACCESSOR(boolVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_byteVal
#define APACHE_THRIFT_ACCESSOR_byteVal
APACHE_THRIFT_DEFINE_ACCESSOR(byteVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_i16Val
#define APACHE_THRIFT_ACCESSOR_i16Val
APACHE_THRIFT_DEFINE_ACCESSOR(i16Val);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_i32Val
#define APACHE_THRIFT_ACCESSOR_i32Val
APACHE_THRIFT_DEFINE_ACCESSOR(i32Val);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_i64Val
#define APACHE_THRIFT_ACCESSOR_i64Val
APACHE_THRIFT_DEFINE_ACCESSOR(i64Val);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_floatVal
#define APACHE_THRIFT_ACCESSOR_floatVal
APACHE_THRIFT_DEFINE_ACCESSOR(floatVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_doubleVal
#define APACHE_THRIFT_ACCESSOR_doubleVal
APACHE_THRIFT_DEFINE_ACCESSOR(doubleVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_stringVal
#define APACHE_THRIFT_ACCESSOR_stringVal
APACHE_THRIFT_DEFINE_ACCESSOR(stringVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_binaryVal
#define APACHE_THRIFT_ACCESSOR_binaryVal
APACHE_THRIFT_DEFINE_ACCESSOR(binaryVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optBoolVal
#define APACHE_THRIFT_ACCESSOR_optBoolVal
APACHE_THRIFT_DEFINE_ACCESSOR(optBoolVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optByteVal
#define APACHE_THRIFT_ACCESSOR_optByteVal
APACHE_THRIFT_DEFINE_ACCESSOR(optByteVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optI16Val
#define APACHE_THRIFT_ACCESSOR_optI16Val
APACHE_THRIFT_DEFINE_ACCESSOR(optI16Val);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optI32Val
#define APACHE_THRIFT_ACCESSOR_optI32Val
APACHE_THRIFT_DEFINE_ACCESSOR(optI32Val);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optI64Val
#define APACHE_THRIFT_ACCESSOR_optI64Val
APACHE_THRIFT_DEFINE_ACCESSOR(optI64Val);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optFloatVal
#define APACHE_THRIFT_ACCESSOR_optFloatVal
APACHE_THRIFT_DEFINE_ACCESSOR(optFloatVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optDoubleVal
#define APACHE_THRIFT_ACCESSOR_optDoubleVal
APACHE_THRIFT_DEFINE_ACCESSOR(optDoubleVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optStringVal
#define APACHE_THRIFT_ACCESSOR_optStringVal
APACHE_THRIFT_DEFINE_ACCESSOR(optStringVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optBinaryVal
#define APACHE_THRIFT_ACCESSOR_optBinaryVal
APACHE_THRIFT_DEFINE_ACCESSOR(optBinaryVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_boolVal
#define APACHE_THRIFT_ACCESSOR_boolVal
APACHE_THRIFT_DEFINE_ACCESSOR(boolVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_byteVal
#define APACHE_THRIFT_ACCESSOR_byteVal
APACHE_THRIFT_DEFINE_ACCESSOR(byteVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_i16Val
#define APACHE_THRIFT_ACCESSOR_i16Val
APACHE_THRIFT_DEFINE_ACCESSOR(i16Val);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_i32Val
#define APACHE_THRIFT_ACCESSOR_i32Val
APACHE_THRIFT_DEFINE_ACCESSOR(i32Val);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_i64Val
#define APACHE_THRIFT_ACCESSOR_i64Val
APACHE_THRIFT_DEFINE_ACCESSOR(i64Val);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_floatVal
#define APACHE_THRIFT_ACCESSOR_floatVal
APACHE_THRIFT_DEFINE_ACCESSOR(floatVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_doubleVal
#define APACHE_THRIFT_ACCESSOR_doubleVal
APACHE_THRIFT_DEFINE_ACCESSOR(doubleVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_stringVal
#define APACHE_THRIFT_ACCESSOR_stringVal
APACHE_THRIFT_DEFINE_ACCESSOR(stringVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_binaryVal
#define APACHE_THRIFT_ACCESSOR_binaryVal
APACHE_THRIFT_DEFINE_ACCESSOR(binaryVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optBoolVal
#define APACHE_THRIFT_ACCESSOR_optBoolVal
APACHE_THRIFT_DEFINE_ACCESSOR(optBoolVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optByteVal
#define APACHE_THRIFT_ACCESSOR_optByteVal
APACHE_THRIFT_DEFINE_ACCESSOR(optByteVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optI16Val
#define APACHE_THRIFT_ACCESSOR_optI16Val
APACHE_THRIFT_DEFINE_ACCESSOR(optI16Val);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optI32Val
#define APACHE_THRIFT_ACCESSOR_optI32Val
APACHE_THRIFT_DEFINE_ACCESSOR(optI32Val);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optI64Val
#define APACHE_THRIFT_ACCESSOR_optI64Val
APACHE_THRIFT_DEFINE_ACCESSOR(optI64Val);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optFloatVal
#define APACHE_THRIFT_ACCESSOR_optFloatVal
APACHE_THRIFT_DEFINE_ACCESSOR(optFloatVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optDoubleVal
#define APACHE_THRIFT_ACCESSOR_optDoubleVal
APACHE_THRIFT_DEFINE_ACCESSOR(optDoubleVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optStringVal
#define APACHE_THRIFT_ACCESSOR_optStringVal
APACHE_THRIFT_DEFINE_ACCESSOR(optStringVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_optBinaryVal
#define APACHE_THRIFT_ACCESSOR_optBinaryVal
APACHE_THRIFT_DEFINE_ACCESSOR(optBinaryVal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_assign
#define APACHE_THRIFT_ACCESSOR_assign
APACHE_THRIFT_DEFINE_ACCESSOR(assign);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_clear
#define APACHE_THRIFT_ACCESSOR_clear
APACHE_THRIFT_DEFINE_ACCESSOR(clear);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patch
#define APACHE_THRIFT_ACCESSOR_patch
APACHE_THRIFT_DEFINE_ACCESSOR(patch);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_clear
#define APACHE_THRIFT_ACCESSOR_clear
APACHE_THRIFT_DEFINE_ACCESSOR(clear);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patch
#define APACHE_THRIFT_ACCESSOR_patch
APACHE_THRIFT_DEFINE_ACCESSOR(patch);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_ensure
#define APACHE_THRIFT_ACCESSOR_ensure
APACHE_THRIFT_DEFINE_ACCESSOR(ensure);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_patchAfter
#define APACHE_THRIFT_ACCESSOR_patchAfter
APACHE_THRIFT_DEFINE_ACCESSOR(patchAfter);
#endif
} // namespace detail
} // namespace thrift
} // namespace apache

// BEGIN declare_enums

// END declare_enums
// BEGIN forward_declare
namespace cpp2 {
class MyStruct;
class MyStructPatch;
class MyStructValuePatch;
class OptionalMyStructValuePatch;
} // cpp2
// END forward_declare
// BEGIN typedefs

// END typedefs
// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace cpp2 {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;
} // cpp2
namespace cpp2 {
class MyStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = true;
  static const char* __fbthrift_cpp2_gen_thrift_uri();
  using __fbthrift_fields = ::apache::thrift::type::fields<
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{1}, ::apache::thrift::type::bool_t>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{2}, ::apache::thrift::type::byte_t>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{3}, ::apache::thrift::type::i16_t>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{4}, ::apache::thrift::type::i32_t>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{5}, ::apache::thrift::type::i64_t>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{6}, ::apache::thrift::type::float_t>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{7}, ::apache::thrift::type::double_t>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{8}, ::apache::thrift::type::string_t>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{9}, ::apache::thrift::type::cpp_type<::folly::IOBuf, ::apache::thrift::type::binary_t>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{11}, ::apache::thrift::type::bool_t>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{12}, ::apache::thrift::type::byte_t>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{13}, ::apache::thrift::type::i16_t>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{14}, ::apache::thrift::type::i32_t>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{15}, ::apache::thrift::type::i64_t>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{16}, ::apache::thrift::type::float_t>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{17}, ::apache::thrift::type::double_t>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{18}, ::apache::thrift::type::string_t>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{19}, ::apache::thrift::type::cpp_type<::folly::IOBuf, ::apache::thrift::type::binary_t>>
  >;

  void __fbthrift_clear();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStruct(apache::thrift::FragileConstructor, bool boolVal__arg, ::std::int8_t byteVal__arg, ::std::int16_t i16Val__arg, ::std::int32_t i32Val__arg, ::std::int64_t i64Val__arg, float floatVal__arg, double doubleVal__arg, ::std::string stringVal__arg, ::folly::IOBuf binaryVal__arg, bool optBoolVal__arg, ::std::int8_t optByteVal__arg, ::std::int16_t optI16Val__arg, ::std::int32_t optI32Val__arg, ::std::int64_t optI64Val__arg, float optFloatVal__arg, double optDoubleVal__arg, ::std::string optStringVal__arg, ::folly::IOBuf optBinaryVal__arg);

  MyStruct(MyStruct&&) noexcept;

  MyStruct(const MyStruct& src);


  MyStruct& operator=(MyStruct&&) noexcept;
  MyStruct& operator=(const MyStruct& src);

  ~MyStruct();

 private:
  bool __fbthrift_field_boolVal;
 private:
  ::std::int8_t __fbthrift_field_byteVal;
 private:
  ::std::int16_t __fbthrift_field_i16Val;
 private:
  ::std::int32_t __fbthrift_field_i32Val;
 private:
  ::std::int64_t __fbthrift_field_i64Val;
 private:
  float __fbthrift_field_floatVal;
 private:
  double __fbthrift_field_doubleVal;
 private:
  ::std::string __fbthrift_field_stringVal;
 private:
  ::folly::IOBuf __fbthrift_field_binaryVal;
 private:
  bool __fbthrift_field_optBoolVal;
 private:
  ::std::int8_t __fbthrift_field_optByteVal;
 private:
  ::std::int16_t __fbthrift_field_optI16Val;
 private:
  ::std::int32_t __fbthrift_field_optI32Val;
 private:
  ::std::int64_t __fbthrift_field_optI64Val;
 private:
  float __fbthrift_field_optFloatVal;
 private:
  double __fbthrift_field_optDoubleVal;
 private:
  ::std::string __fbthrift_field_optStringVal;
 private:
  ::folly::IOBuf __fbthrift_field_optBinaryVal;
 private:
  apache::thrift::detail::isset_bitset<18, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyStruct&) const;
  bool operator<(const MyStruct&) const;

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> boolVal_ref() const& {
    return {this->__fbthrift_field_boolVal, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> boolVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_boolVal), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> boolVal_ref() & {
    return {this->__fbthrift_field_boolVal, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> boolVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_boolVal), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> boolVal() const& {
    return {this->__fbthrift_field_boolVal, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> boolVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_boolVal), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> boolVal() & {
    return {this->__fbthrift_field_boolVal, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> boolVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_boolVal), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> byteVal_ref() const& {
    return {this->__fbthrift_field_byteVal, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> byteVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_byteVal), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> byteVal_ref() & {
    return {this->__fbthrift_field_byteVal, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> byteVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_byteVal), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> byteVal() const& {
    return {this->__fbthrift_field_byteVal, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> byteVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_byteVal), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> byteVal() & {
    return {this->__fbthrift_field_byteVal, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> byteVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_byteVal), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> i16Val_ref() const& {
    return {this->__fbthrift_field_i16Val, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> i16Val_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_i16Val), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> i16Val_ref() & {
    return {this->__fbthrift_field_i16Val, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> i16Val_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_i16Val), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> i16Val() const& {
    return {this->__fbthrift_field_i16Val, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> i16Val() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_i16Val), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> i16Val() & {
    return {this->__fbthrift_field_i16Val, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> i16Val() && {
    return {static_cast<T&&>(this->__fbthrift_field_i16Val), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> i32Val_ref() const& {
    return {this->__fbthrift_field_i32Val, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> i32Val_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_i32Val), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> i32Val_ref() & {
    return {this->__fbthrift_field_i32Val, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> i32Val_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_i32Val), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> i32Val() const& {
    return {this->__fbthrift_field_i32Val, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> i32Val() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_i32Val), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> i32Val() & {
    return {this->__fbthrift_field_i32Val, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> i32Val() && {
    return {static_cast<T&&>(this->__fbthrift_field_i32Val), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> i64Val_ref() const& {
    return {this->__fbthrift_field_i64Val, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> i64Val_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_i64Val), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> i64Val_ref() & {
    return {this->__fbthrift_field_i64Val, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> i64Val_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_i64Val), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> i64Val() const& {
    return {this->__fbthrift_field_i64Val, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> i64Val() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_i64Val), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> i64Val() & {
    return {this->__fbthrift_field_i64Val, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> i64Val() && {
    return {static_cast<T&&>(this->__fbthrift_field_i64Val), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> floatVal_ref() const& {
    return {this->__fbthrift_field_floatVal, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> floatVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_floatVal), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> floatVal_ref() & {
    return {this->__fbthrift_field_floatVal, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> floatVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_floatVal), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> floatVal() const& {
    return {this->__fbthrift_field_floatVal, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> floatVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_floatVal), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> floatVal() & {
    return {this->__fbthrift_field_floatVal, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> floatVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_floatVal), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> doubleVal_ref() const& {
    return {this->__fbthrift_field_doubleVal, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> doubleVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_doubleVal), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> doubleVal_ref() & {
    return {this->__fbthrift_field_doubleVal, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> doubleVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_doubleVal), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> doubleVal() const& {
    return {this->__fbthrift_field_doubleVal, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> doubleVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_doubleVal), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> doubleVal() & {
    return {this->__fbthrift_field_doubleVal, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> doubleVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_doubleVal), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> stringVal_ref() const& {
    return {this->__fbthrift_field_stringVal, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> stringVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_stringVal), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> stringVal_ref() & {
    return {this->__fbthrift_field_stringVal, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> stringVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_stringVal), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> stringVal() const& {
    return {this->__fbthrift_field_stringVal, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> stringVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_stringVal), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> stringVal() & {
    return {this->__fbthrift_field_stringVal, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> stringVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_stringVal), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> binaryVal_ref() const& {
    return {this->__fbthrift_field_binaryVal, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> binaryVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_binaryVal), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> binaryVal_ref() & {
    return {this->__fbthrift_field_binaryVal, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> binaryVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_binaryVal), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> binaryVal() const& {
    return {this->__fbthrift_field_binaryVal, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> binaryVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_binaryVal), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> binaryVal() & {
    return {this->__fbthrift_field_binaryVal, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> binaryVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_binaryVal), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optBoolVal_ref() const& {
    return {this->__fbthrift_field_optBoolVal, __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optBoolVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optBoolVal), __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optBoolVal_ref() & {
    return {this->__fbthrift_field_optBoolVal, __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optBoolVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optBoolVal), __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optBoolVal() const& {
    return {this->__fbthrift_field_optBoolVal, __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optBoolVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optBoolVal), __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optBoolVal() & {
    return {this->__fbthrift_field_optBoolVal, __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optBoolVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optBoolVal), __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optByteVal_ref() const& {
    return {this->__fbthrift_field_optByteVal, __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optByteVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optByteVal), __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optByteVal_ref() & {
    return {this->__fbthrift_field_optByteVal, __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optByteVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optByteVal), __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optByteVal() const& {
    return {this->__fbthrift_field_optByteVal, __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optByteVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optByteVal), __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optByteVal() & {
    return {this->__fbthrift_field_optByteVal, __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::std::int8_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optByteVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optByteVal), __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optI16Val_ref() const& {
    return {this->__fbthrift_field_optI16Val, __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optI16Val_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optI16Val), __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optI16Val_ref() & {
    return {this->__fbthrift_field_optI16Val, __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optI16Val_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optI16Val), __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optI16Val() const& {
    return {this->__fbthrift_field_optI16Val, __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optI16Val() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optI16Val), __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optI16Val() & {
    return {this->__fbthrift_field_optI16Val, __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::std::int16_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optI16Val() && {
    return {static_cast<T&&>(this->__fbthrift_field_optI16Val), __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optI32Val_ref() const& {
    return {this->__fbthrift_field_optI32Val, __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optI32Val_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optI32Val), __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optI32Val_ref() & {
    return {this->__fbthrift_field_optI32Val, __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optI32Val_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optI32Val), __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optI32Val() const& {
    return {this->__fbthrift_field_optI32Val, __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optI32Val() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optI32Val), __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optI32Val() & {
    return {this->__fbthrift_field_optI32Val, __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optI32Val() && {
    return {static_cast<T&&>(this->__fbthrift_field_optI32Val), __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optI64Val_ref() const& {
    return {this->__fbthrift_field_optI64Val, __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optI64Val_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optI64Val), __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optI64Val_ref() & {
    return {this->__fbthrift_field_optI64Val, __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optI64Val_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optI64Val), __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optI64Val() const& {
    return {this->__fbthrift_field_optI64Val, __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optI64Val() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optI64Val), __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optI64Val() & {
    return {this->__fbthrift_field_optI64Val, __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optI64Val() && {
    return {static_cast<T&&>(this->__fbthrift_field_optI64Val), __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optFloatVal_ref() const& {
    return {this->__fbthrift_field_optFloatVal, __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optFloatVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optFloatVal), __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optFloatVal_ref() & {
    return {this->__fbthrift_field_optFloatVal, __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optFloatVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optFloatVal), __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optFloatVal() const& {
    return {this->__fbthrift_field_optFloatVal, __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optFloatVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optFloatVal), __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optFloatVal() & {
    return {this->__fbthrift_field_optFloatVal, __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = float>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optFloatVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optFloatVal), __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optDoubleVal_ref() const& {
    return {this->__fbthrift_field_optDoubleVal, __isset.at(15), __isset.bit(15)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optDoubleVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optDoubleVal), __isset.at(15), __isset.bit(15)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optDoubleVal_ref() & {
    return {this->__fbthrift_field_optDoubleVal, __isset.at(15), __isset.bit(15)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optDoubleVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optDoubleVal), __isset.at(15), __isset.bit(15)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optDoubleVal() const& {
    return {this->__fbthrift_field_optDoubleVal, __isset.at(15), __isset.bit(15)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optDoubleVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optDoubleVal), __isset.at(15), __isset.bit(15)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optDoubleVal() & {
    return {this->__fbthrift_field_optDoubleVal, __isset.at(15), __isset.bit(15)};
  }

  template <typename..., typename T = double>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optDoubleVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optDoubleVal), __isset.at(15), __isset.bit(15)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optStringVal_ref() const& {
    return {this->__fbthrift_field_optStringVal, __isset.at(16), __isset.bit(16)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optStringVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optStringVal), __isset.at(16), __isset.bit(16)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optStringVal_ref() & {
    return {this->__fbthrift_field_optStringVal, __isset.at(16), __isset.bit(16)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optStringVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optStringVal), __isset.at(16), __isset.bit(16)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optStringVal() const& {
    return {this->__fbthrift_field_optStringVal, __isset.at(16), __isset.bit(16)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optStringVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optStringVal), __isset.at(16), __isset.bit(16)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optStringVal() & {
    return {this->__fbthrift_field_optStringVal, __isset.at(16), __isset.bit(16)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optStringVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optStringVal), __isset.at(16), __isset.bit(16)};
  }

  template <typename..., typename T = ::folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optBinaryVal_ref() const& {
    return {this->__fbthrift_field_optBinaryVal, __isset.at(17), __isset.bit(17)};
  }

  template <typename..., typename T = ::folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optBinaryVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optBinaryVal), __isset.at(17), __isset.bit(17)};
  }

  template <typename..., typename T = ::folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optBinaryVal_ref() & {
    return {this->__fbthrift_field_optBinaryVal, __isset.at(17), __isset.bit(17)};
  }

  template <typename..., typename T = ::folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optBinaryVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optBinaryVal), __isset.at(17), __isset.bit(17)};
  }

  template <typename..., typename T = ::folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&> optBinaryVal() const& {
    return {this->__fbthrift_field_optBinaryVal, __isset.at(17), __isset.bit(17)};
  }

  template <typename..., typename T = ::folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<const T&&> optBinaryVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optBinaryVal), __isset.at(17), __isset.bit(17)};
  }

  template <typename..., typename T = ::folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&> optBinaryVal() & {
    return {this->__fbthrift_field_optBinaryVal, __isset.at(17), __isset.bit(17)};
  }

  template <typename..., typename T = ::folly::IOBuf>
  FOLLY_ERASE ::apache::thrift::optional_field_ref<T&&> optBinaryVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optBinaryVal), __isset.at(17), __isset.bit(17)};
  }
 private:
  template<::apache::thrift::FieldId> decltype(auto) __fbthrift_get() &;
  template<::apache::thrift::FieldId> decltype(auto) __fbthrift_get() const&;
  template<::apache::thrift::FieldId> decltype(auto) __fbthrift_get() &&;
  template<::apache::thrift::FieldId> decltype(auto) __fbthrift_get() const&&;
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{1}>() &       { return boolVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{1}>() const&  { return boolVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{1}>() &&      { return std::move(*this).boolVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{1}>() const&& { return std::move(*this).boolVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{2}>() &       { return byteVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{2}>() const&  { return byteVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{2}>() &&      { return std::move(*this).byteVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{2}>() const&& { return std::move(*this).byteVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{3}>() &       { return i16Val_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{3}>() const&  { return i16Val_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{3}>() &&      { return std::move(*this).i16Val_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{3}>() const&& { return std::move(*this).i16Val_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{4}>() &       { return i32Val_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{4}>() const&  { return i32Val_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{4}>() &&      { return std::move(*this).i32Val_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{4}>() const&& { return std::move(*this).i32Val_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{5}>() &       { return i64Val_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{5}>() const&  { return i64Val_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{5}>() &&      { return std::move(*this).i64Val_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{5}>() const&& { return std::move(*this).i64Val_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{6}>() &       { return floatVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{6}>() const&  { return floatVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{6}>() &&      { return std::move(*this).floatVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{6}>() const&& { return std::move(*this).floatVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{7}>() &       { return doubleVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{7}>() const&  { return doubleVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{7}>() &&      { return std::move(*this).doubleVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{7}>() const&& { return std::move(*this).doubleVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{8}>() &       { return stringVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{8}>() const&  { return stringVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{8}>() &&      { return std::move(*this).stringVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{8}>() const&& { return std::move(*this).stringVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{9}>() &       { return binaryVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{9}>() const&  { return binaryVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{9}>() &&      { return std::move(*this).binaryVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{9}>() const&& { return std::move(*this).binaryVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{11}>() &       { return optBoolVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{11}>() const&  { return optBoolVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{11}>() &&      { return std::move(*this).optBoolVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{11}>() const&& { return std::move(*this).optBoolVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{12}>() &       { return optByteVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{12}>() const&  { return optByteVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{12}>() &&      { return std::move(*this).optByteVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{12}>() const&& { return std::move(*this).optByteVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{13}>() &       { return optI16Val_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{13}>() const&  { return optI16Val_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{13}>() &&      { return std::move(*this).optI16Val_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{13}>() const&& { return std::move(*this).optI16Val_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{14}>() &       { return optI32Val_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{14}>() const&  { return optI32Val_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{14}>() &&      { return std::move(*this).optI32Val_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{14}>() const&& { return std::move(*this).optI32Val_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{15}>() &       { return optI64Val_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{15}>() const&  { return optI64Val_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{15}>() &&      { return std::move(*this).optI64Val_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{15}>() const&& { return std::move(*this).optI64Val_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{16}>() &       { return optFloatVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{16}>() const&  { return optFloatVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{16}>() &&      { return std::move(*this).optFloatVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{16}>() const&& { return std::move(*this).optFloatVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{17}>() &       { return optDoubleVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{17}>() const&  { return optDoubleVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{17}>() &&      { return std::move(*this).optDoubleVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{17}>() const&& { return std::move(*this).optDoubleVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{18}>() &       { return optStringVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{18}>() const&  { return optStringVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{18}>() &&      { return std::move(*this).optStringVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{18}>() const&& { return std::move(*this).optStringVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{19}>() &       { return optBinaryVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{19}>() const&  { return optBinaryVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{19}>() &&      { return std::move(*this).optBinaryVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{19}>() const&& { return std::move(*this).optBinaryVal_ref(); }

 public:

  bool get_boolVal() const {
    return __fbthrift_field_boolVal;
  }

  [[deprecated("Use `FOO.boolVal_ref() = BAR;` instead of `FOO.set_boolVal(BAR);`")]]
  bool& set_boolVal(bool boolVal_) {
    boolVal_ref() = boolVal_;
    return __fbthrift_field_boolVal;
  }

  ::std::int8_t get_byteVal() const {
    return __fbthrift_field_byteVal;
  }

  [[deprecated("Use `FOO.byteVal_ref() = BAR;` instead of `FOO.set_byteVal(BAR);`")]]
  ::std::int8_t& set_byteVal(::std::int8_t byteVal_) {
    byteVal_ref() = byteVal_;
    return __fbthrift_field_byteVal;
  }

  ::std::int16_t get_i16Val() const {
    return __fbthrift_field_i16Val;
  }

  [[deprecated("Use `FOO.i16Val_ref() = BAR;` instead of `FOO.set_i16Val(BAR);`")]]
  ::std::int16_t& set_i16Val(::std::int16_t i16Val_) {
    i16Val_ref() = i16Val_;
    return __fbthrift_field_i16Val;
  }

  ::std::int32_t get_i32Val() const {
    return __fbthrift_field_i32Val;
  }

  [[deprecated("Use `FOO.i32Val_ref() = BAR;` instead of `FOO.set_i32Val(BAR);`")]]
  ::std::int32_t& set_i32Val(::std::int32_t i32Val_) {
    i32Val_ref() = i32Val_;
    return __fbthrift_field_i32Val;
  }

  ::std::int64_t get_i64Val() const {
    return __fbthrift_field_i64Val;
  }

  [[deprecated("Use `FOO.i64Val_ref() = BAR;` instead of `FOO.set_i64Val(BAR);`")]]
  ::std::int64_t& set_i64Val(::std::int64_t i64Val_) {
    i64Val_ref() = i64Val_;
    return __fbthrift_field_i64Val;
  }

  float get_floatVal() const {
    return __fbthrift_field_floatVal;
  }

  [[deprecated("Use `FOO.floatVal_ref() = BAR;` instead of `FOO.set_floatVal(BAR);`")]]
  float& set_floatVal(float floatVal_) {
    floatVal_ref() = floatVal_;
    return __fbthrift_field_floatVal;
  }

  double get_doubleVal() const {
    return __fbthrift_field_doubleVal;
  }

  [[deprecated("Use `FOO.doubleVal_ref() = BAR;` instead of `FOO.set_doubleVal(BAR);`")]]
  double& set_doubleVal(double doubleVal_) {
    doubleVal_ref() = doubleVal_;
    return __fbthrift_field_doubleVal;
  }

  const ::std::string& get_stringVal() const& {
    return __fbthrift_field_stringVal;
  }

  ::std::string get_stringVal() && {
    return std::move(__fbthrift_field_stringVal);
  }

  template <typename T_MyStruct_stringVal_struct_setter = ::std::string>
  [[deprecated("Use `FOO.stringVal_ref() = BAR;` instead of `FOO.set_stringVal(BAR);`")]]
  ::std::string& set_stringVal(T_MyStruct_stringVal_struct_setter&& stringVal_) {
    stringVal_ref() = std::forward<T_MyStruct_stringVal_struct_setter>(stringVal_);
    return __fbthrift_field_stringVal;
  }

  const ::folly::IOBuf& get_binaryVal() const& {
    return __fbthrift_field_binaryVal;
  }

  ::folly::IOBuf get_binaryVal() && {
    return std::move(__fbthrift_field_binaryVal);
  }

  template <typename T_MyStruct_binaryVal_struct_setter = ::folly::IOBuf>
  [[deprecated("Use `FOO.binaryVal_ref() = BAR;` instead of `FOO.set_binaryVal(BAR);`")]]
  ::folly::IOBuf& set_binaryVal(T_MyStruct_binaryVal_struct_setter&& binaryVal_) {
    binaryVal_ref() = std::forward<T_MyStruct_binaryVal_struct_setter>(binaryVal_);
    return __fbthrift_field_binaryVal;
  }

  const bool* get_optBoolVal() const& {
    return optBoolVal_ref() ? std::addressof(__fbthrift_field_optBoolVal) : nullptr;
  }

  bool* get_optBoolVal() & {
    return optBoolVal_ref() ? std::addressof(__fbthrift_field_optBoolVal) : nullptr;
  }
  bool* get_optBoolVal() && = delete;

  [[deprecated("Use `FOO.optBoolVal_ref() = BAR;` instead of `FOO.set_optBoolVal(BAR);`")]]
  bool& set_optBoolVal(bool optBoolVal_) {
    optBoolVal_ref() = optBoolVal_;
    return __fbthrift_field_optBoolVal;
  }

  const ::std::int8_t* get_optByteVal() const& {
    return optByteVal_ref() ? std::addressof(__fbthrift_field_optByteVal) : nullptr;
  }

  ::std::int8_t* get_optByteVal() & {
    return optByteVal_ref() ? std::addressof(__fbthrift_field_optByteVal) : nullptr;
  }
  ::std::int8_t* get_optByteVal() && = delete;

  [[deprecated("Use `FOO.optByteVal_ref() = BAR;` instead of `FOO.set_optByteVal(BAR);`")]]
  ::std::int8_t& set_optByteVal(::std::int8_t optByteVal_) {
    optByteVal_ref() = optByteVal_;
    return __fbthrift_field_optByteVal;
  }

  const ::std::int16_t* get_optI16Val() const& {
    return optI16Val_ref() ? std::addressof(__fbthrift_field_optI16Val) : nullptr;
  }

  ::std::int16_t* get_optI16Val() & {
    return optI16Val_ref() ? std::addressof(__fbthrift_field_optI16Val) : nullptr;
  }
  ::std::int16_t* get_optI16Val() && = delete;

  [[deprecated("Use `FOO.optI16Val_ref() = BAR;` instead of `FOO.set_optI16Val(BAR);`")]]
  ::std::int16_t& set_optI16Val(::std::int16_t optI16Val_) {
    optI16Val_ref() = optI16Val_;
    return __fbthrift_field_optI16Val;
  }

  const ::std::int32_t* get_optI32Val() const& {
    return optI32Val_ref() ? std::addressof(__fbthrift_field_optI32Val) : nullptr;
  }

  ::std::int32_t* get_optI32Val() & {
    return optI32Val_ref() ? std::addressof(__fbthrift_field_optI32Val) : nullptr;
  }
  ::std::int32_t* get_optI32Val() && = delete;

  [[deprecated("Use `FOO.optI32Val_ref() = BAR;` instead of `FOO.set_optI32Val(BAR);`")]]
  ::std::int32_t& set_optI32Val(::std::int32_t optI32Val_) {
    optI32Val_ref() = optI32Val_;
    return __fbthrift_field_optI32Val;
  }

  const ::std::int64_t* get_optI64Val() const& {
    return optI64Val_ref() ? std::addressof(__fbthrift_field_optI64Val) : nullptr;
  }

  ::std::int64_t* get_optI64Val() & {
    return optI64Val_ref() ? std::addressof(__fbthrift_field_optI64Val) : nullptr;
  }
  ::std::int64_t* get_optI64Val() && = delete;

  [[deprecated("Use `FOO.optI64Val_ref() = BAR;` instead of `FOO.set_optI64Val(BAR);`")]]
  ::std::int64_t& set_optI64Val(::std::int64_t optI64Val_) {
    optI64Val_ref() = optI64Val_;
    return __fbthrift_field_optI64Val;
  }

  const float* get_optFloatVal() const& {
    return optFloatVal_ref() ? std::addressof(__fbthrift_field_optFloatVal) : nullptr;
  }

  float* get_optFloatVal() & {
    return optFloatVal_ref() ? std::addressof(__fbthrift_field_optFloatVal) : nullptr;
  }
  float* get_optFloatVal() && = delete;

  [[deprecated("Use `FOO.optFloatVal_ref() = BAR;` instead of `FOO.set_optFloatVal(BAR);`")]]
  float& set_optFloatVal(float optFloatVal_) {
    optFloatVal_ref() = optFloatVal_;
    return __fbthrift_field_optFloatVal;
  }

  const double* get_optDoubleVal() const& {
    return optDoubleVal_ref() ? std::addressof(__fbthrift_field_optDoubleVal) : nullptr;
  }

  double* get_optDoubleVal() & {
    return optDoubleVal_ref() ? std::addressof(__fbthrift_field_optDoubleVal) : nullptr;
  }
  double* get_optDoubleVal() && = delete;

  [[deprecated("Use `FOO.optDoubleVal_ref() = BAR;` instead of `FOO.set_optDoubleVal(BAR);`")]]
  double& set_optDoubleVal(double optDoubleVal_) {
    optDoubleVal_ref() = optDoubleVal_;
    return __fbthrift_field_optDoubleVal;
  }

  const ::std::string* get_optStringVal() const& {
    return optStringVal_ref() ? std::addressof(__fbthrift_field_optStringVal) : nullptr;
  }

  ::std::string* get_optStringVal() & {
    return optStringVal_ref() ? std::addressof(__fbthrift_field_optStringVal) : nullptr;
  }
  ::std::string* get_optStringVal() && = delete;

  template <typename T_MyStruct_optStringVal_struct_setter = ::std::string>
  [[deprecated("Use `FOO.optStringVal_ref() = BAR;` instead of `FOO.set_optStringVal(BAR);`")]]
  ::std::string& set_optStringVal(T_MyStruct_optStringVal_struct_setter&& optStringVal_) {
    optStringVal_ref() = std::forward<T_MyStruct_optStringVal_struct_setter>(optStringVal_);
    return __fbthrift_field_optStringVal;
  }

  const ::folly::IOBuf* get_optBinaryVal() const& {
    return optBinaryVal_ref() ? std::addressof(__fbthrift_field_optBinaryVal) : nullptr;
  }

  ::folly::IOBuf* get_optBinaryVal() & {
    return optBinaryVal_ref() ? std::addressof(__fbthrift_field_optBinaryVal) : nullptr;
  }
  ::folly::IOBuf* get_optBinaryVal() && = delete;

  template <typename T_MyStruct_optBinaryVal_struct_setter = ::folly::IOBuf>
  [[deprecated("Use `FOO.optBinaryVal_ref() = BAR;` instead of `FOO.set_optBinaryVal(BAR);`")]]
  ::folly::IOBuf& set_optBinaryVal(T_MyStruct_optBinaryVal_struct_setter&& optBinaryVal_) {
    optBinaryVal_ref() = std::forward<T_MyStruct_optBinaryVal_struct_setter>(optBinaryVal_);
    return __fbthrift_field_optBinaryVal;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStruct>;
  friend void swap(MyStruct& a, MyStruct& b);
};

template <class Protocol_>
unsigned long MyStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
class MyStructPatch final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = true;
  static const char* __fbthrift_cpp2_gen_thrift_uri();
  using __fbthrift_fields = ::apache::thrift::type::fields<
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{1}, ::apache::thrift::type::struct_t<::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::BoolPatchAdapter, ::apache::thrift::op::BoolPatchStruct>>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{2}, ::apache::thrift::type::struct_t<::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::BytePatchStruct>>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{3}, ::apache::thrift::type::struct_t<::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I16PatchStruct>>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{4}, ::apache::thrift::type::struct_t<::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I32PatchStruct>>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{5}, ::apache::thrift::type::struct_t<::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I64PatchStruct>>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{6}, ::apache::thrift::type::struct_t<::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::FloatPatchStruct>>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{7}, ::apache::thrift::type::struct_t<::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::DoublePatchStruct>>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{8}, ::apache::thrift::type::struct_t<::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StringPatchAdapter, ::apache::thrift::op::StringPatchStruct>>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{9}, ::apache::thrift::type::struct_t<::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::AssignPatchAdapter, ::apache::thrift::op::BinaryPatchStruct>>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{11}, ::apache::thrift::type::struct_t<::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBoolPatchStruct>>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{12}, ::apache::thrift::type::struct_t<::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBytePatchStruct>>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{13}, ::apache::thrift::type::struct_t<::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI16PatchStruct>>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{14}, ::apache::thrift::type::struct_t<::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI32PatchStruct>>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{15}, ::apache::thrift::type::struct_t<::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI64PatchStruct>>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{16}, ::apache::thrift::type::struct_t<::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalFloatPatchStruct>>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{17}, ::apache::thrift::type::struct_t<::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalDoublePatchStruct>>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{18}, ::apache::thrift::type::struct_t<::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalStringPatchStruct>>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{19}, ::apache::thrift::type::struct_t<::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBinaryPatchStruct>>>
  >;

  void __fbthrift_clear();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStructPatch;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyStructPatch() {
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::BoolPatchAdapter, 1>(__fbthrift_field_boolVal, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 2>(__fbthrift_field_byteVal, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 3>(__fbthrift_field_i16Val, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 4>(__fbthrift_field_i32Val, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 5>(__fbthrift_field_i64Val, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 6>(__fbthrift_field_floatVal, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 7>(__fbthrift_field_doubleVal, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter, 8>(__fbthrift_field_stringVal, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::AssignPatchAdapter, 9>(__fbthrift_field_binaryVal, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 11>(__fbthrift_field_optBoolVal, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 12>(__fbthrift_field_optByteVal, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 13>(__fbthrift_field_optI16Val, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 14>(__fbthrift_field_optI32Val, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 15>(__fbthrift_field_optI64Val, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 16>(__fbthrift_field_optFloatVal, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 17>(__fbthrift_field_optDoubleVal, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 18>(__fbthrift_field_optStringVal, *this);
    ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 19>(__fbthrift_field_optBinaryVal, *this);
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStructPatch(apache::thrift::FragileConstructor, ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::BoolPatchAdapter, ::apache::thrift::op::BoolPatchStruct> boolVal__arg, ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::BytePatchStruct> byteVal__arg, ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I16PatchStruct> i16Val__arg, ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I32PatchStruct> i32Val__arg, ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I64PatchStruct> i64Val__arg, ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::FloatPatchStruct> floatVal__arg, ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::DoublePatchStruct> doubleVal__arg, ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StringPatchAdapter, ::apache::thrift::op::StringPatchStruct> stringVal__arg, ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::AssignPatchAdapter, ::apache::thrift::op::BinaryPatchStruct> binaryVal__arg, ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBoolPatchStruct> optBoolVal__arg, ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBytePatchStruct> optByteVal__arg, ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI16PatchStruct> optI16Val__arg, ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI32PatchStruct> optI32Val__arg, ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI64PatchStruct> optI64Val__arg, ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalFloatPatchStruct> optFloatVal__arg, ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalDoublePatchStruct> optDoubleVal__arg, ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalStringPatchStruct> optStringVal__arg, ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBinaryPatchStruct> optBinaryVal__arg);

  MyStructPatch(MyStructPatch&&) noexcept;
  MyStructPatch(const MyStructPatch& src);


  MyStructPatch& operator=(MyStructPatch&&) noexcept;
  MyStructPatch& operator=(const MyStructPatch& src);
 private:
  ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::BoolPatchAdapter, ::apache::thrift::op::BoolPatchStruct> __fbthrift_field_boolVal;
 private:
  ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::BytePatchStruct> __fbthrift_field_byteVal;
 private:
  ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I16PatchStruct> __fbthrift_field_i16Val;
 private:
  ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I32PatchStruct> __fbthrift_field_i32Val;
 private:
  ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I64PatchStruct> __fbthrift_field_i64Val;
 private:
  ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::FloatPatchStruct> __fbthrift_field_floatVal;
 private:
  ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::DoublePatchStruct> __fbthrift_field_doubleVal;
 private:
  ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StringPatchAdapter, ::apache::thrift::op::StringPatchStruct> __fbthrift_field_stringVal;
 private:
  ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::AssignPatchAdapter, ::apache::thrift::op::BinaryPatchStruct> __fbthrift_field_binaryVal;
 private:
  ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBoolPatchStruct> __fbthrift_field_optBoolVal;
 private:
  ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBytePatchStruct> __fbthrift_field_optByteVal;
 private:
  ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI16PatchStruct> __fbthrift_field_optI16Val;
 private:
  ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI32PatchStruct> __fbthrift_field_optI32Val;
 private:
  ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI64PatchStruct> __fbthrift_field_optI64Val;
 private:
  ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalFloatPatchStruct> __fbthrift_field_optFloatVal;
 private:
  ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalDoublePatchStruct> __fbthrift_field_optDoubleVal;
 private:
  ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalStringPatchStruct> __fbthrift_field_optStringVal;
 private:
  ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBinaryPatchStruct> __fbthrift_field_optBinaryVal;
 private:
  apache::thrift::detail::isset_bitset<18, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyStructPatch&) const;
  bool operator<(const MyStructPatch&) const;

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::BoolPatchAdapter, ::apache::thrift::op::BoolPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> boolVal_ref() const& {
    return {this->__fbthrift_field_boolVal, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::BoolPatchAdapter, ::apache::thrift::op::BoolPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> boolVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_boolVal), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::BoolPatchAdapter, ::apache::thrift::op::BoolPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> boolVal_ref() & {
    return {this->__fbthrift_field_boolVal, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::BoolPatchAdapter, ::apache::thrift::op::BoolPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> boolVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_boolVal), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::BoolPatchAdapter, ::apache::thrift::op::BoolPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> boolVal() const& {
    return {this->__fbthrift_field_boolVal, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::BoolPatchAdapter, ::apache::thrift::op::BoolPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> boolVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_boolVal), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::BoolPatchAdapter, ::apache::thrift::op::BoolPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> boolVal() & {
    return {this->__fbthrift_field_boolVal, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::BoolPatchAdapter, ::apache::thrift::op::BoolPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> boolVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_boolVal), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::BytePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> byteVal_ref() const& {
    return {this->__fbthrift_field_byteVal, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::BytePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> byteVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_byteVal), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::BytePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> byteVal_ref() & {
    return {this->__fbthrift_field_byteVal, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::BytePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> byteVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_byteVal), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::BytePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> byteVal() const& {
    return {this->__fbthrift_field_byteVal, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::BytePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> byteVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_byteVal), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::BytePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> byteVal() & {
    return {this->__fbthrift_field_byteVal, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::BytePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> byteVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_byteVal), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I16PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> i16Val_ref() const& {
    return {this->__fbthrift_field_i16Val, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I16PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> i16Val_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_i16Val), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I16PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> i16Val_ref() & {
    return {this->__fbthrift_field_i16Val, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I16PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> i16Val_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_i16Val), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I16PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> i16Val() const& {
    return {this->__fbthrift_field_i16Val, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I16PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> i16Val() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_i16Val), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I16PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> i16Val() & {
    return {this->__fbthrift_field_i16Val, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I16PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> i16Val() && {
    return {static_cast<T&&>(this->__fbthrift_field_i16Val), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I32PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> i32Val_ref() const& {
    return {this->__fbthrift_field_i32Val, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I32PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> i32Val_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_i32Val), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I32PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> i32Val_ref() & {
    return {this->__fbthrift_field_i32Val, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I32PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> i32Val_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_i32Val), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I32PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> i32Val() const& {
    return {this->__fbthrift_field_i32Val, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I32PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> i32Val() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_i32Val), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I32PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> i32Val() & {
    return {this->__fbthrift_field_i32Val, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I32PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> i32Val() && {
    return {static_cast<T&&>(this->__fbthrift_field_i32Val), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I64PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> i64Val_ref() const& {
    return {this->__fbthrift_field_i64Val, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I64PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> i64Val_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_i64Val), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I64PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> i64Val_ref() & {
    return {this->__fbthrift_field_i64Val, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I64PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> i64Val_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_i64Val), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I64PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> i64Val() const& {
    return {this->__fbthrift_field_i64Val, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I64PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> i64Val() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_i64Val), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I64PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> i64Val() & {
    return {this->__fbthrift_field_i64Val, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::I64PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> i64Val() && {
    return {static_cast<T&&>(this->__fbthrift_field_i64Val), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::FloatPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> floatVal_ref() const& {
    return {this->__fbthrift_field_floatVal, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::FloatPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> floatVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_floatVal), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::FloatPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> floatVal_ref() & {
    return {this->__fbthrift_field_floatVal, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::FloatPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> floatVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_floatVal), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::FloatPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> floatVal() const& {
    return {this->__fbthrift_field_floatVal, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::FloatPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> floatVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_floatVal), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::FloatPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> floatVal() & {
    return {this->__fbthrift_field_floatVal, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::FloatPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> floatVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_floatVal), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::DoublePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> doubleVal_ref() const& {
    return {this->__fbthrift_field_doubleVal, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::DoublePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> doubleVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_doubleVal), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::DoublePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> doubleVal_ref() & {
    return {this->__fbthrift_field_doubleVal, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::DoublePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> doubleVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_doubleVal), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::DoublePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> doubleVal() const& {
    return {this->__fbthrift_field_doubleVal, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::DoublePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> doubleVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_doubleVal), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::DoublePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> doubleVal() & {
    return {this->__fbthrift_field_doubleVal, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::NumberPatchAdapter, ::apache::thrift::op::DoublePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> doubleVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_doubleVal), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StringPatchAdapter, ::apache::thrift::op::StringPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> stringVal_ref() const& {
    return {this->__fbthrift_field_stringVal, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StringPatchAdapter, ::apache::thrift::op::StringPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> stringVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_stringVal), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StringPatchAdapter, ::apache::thrift::op::StringPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> stringVal_ref() & {
    return {this->__fbthrift_field_stringVal, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StringPatchAdapter, ::apache::thrift::op::StringPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> stringVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_stringVal), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StringPatchAdapter, ::apache::thrift::op::StringPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> stringVal() const& {
    return {this->__fbthrift_field_stringVal, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StringPatchAdapter, ::apache::thrift::op::StringPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> stringVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_stringVal), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StringPatchAdapter, ::apache::thrift::op::StringPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> stringVal() & {
    return {this->__fbthrift_field_stringVal, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::StringPatchAdapter, ::apache::thrift::op::StringPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> stringVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_stringVal), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::AssignPatchAdapter, ::apache::thrift::op::BinaryPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> binaryVal_ref() const& {
    return {this->__fbthrift_field_binaryVal, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::AssignPatchAdapter, ::apache::thrift::op::BinaryPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> binaryVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_binaryVal), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::AssignPatchAdapter, ::apache::thrift::op::BinaryPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> binaryVal_ref() & {
    return {this->__fbthrift_field_binaryVal, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::AssignPatchAdapter, ::apache::thrift::op::BinaryPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> binaryVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_binaryVal), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::AssignPatchAdapter, ::apache::thrift::op::BinaryPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> binaryVal() const& {
    return {this->__fbthrift_field_binaryVal, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::AssignPatchAdapter, ::apache::thrift::op::BinaryPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> binaryVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_binaryVal), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::AssignPatchAdapter, ::apache::thrift::op::BinaryPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> binaryVal() & {
    return {this->__fbthrift_field_binaryVal, __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::AssignPatchAdapter, ::apache::thrift::op::BinaryPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> binaryVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_binaryVal), __isset.at(8), __isset.bit(8)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBoolPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optBoolVal_ref() const& {
    return {this->__fbthrift_field_optBoolVal, __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBoolPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optBoolVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optBoolVal), __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBoolPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optBoolVal_ref() & {
    return {this->__fbthrift_field_optBoolVal, __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBoolPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optBoolVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optBoolVal), __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBoolPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optBoolVal() const& {
    return {this->__fbthrift_field_optBoolVal, __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBoolPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optBoolVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optBoolVal), __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBoolPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optBoolVal() & {
    return {this->__fbthrift_field_optBoolVal, __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBoolPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optBoolVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optBoolVal), __isset.at(9), __isset.bit(9)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBytePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optByteVal_ref() const& {
    return {this->__fbthrift_field_optByteVal, __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBytePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optByteVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optByteVal), __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBytePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optByteVal_ref() & {
    return {this->__fbthrift_field_optByteVal, __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBytePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optByteVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optByteVal), __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBytePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optByteVal() const& {
    return {this->__fbthrift_field_optByteVal, __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBytePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optByteVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optByteVal), __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBytePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optByteVal() & {
    return {this->__fbthrift_field_optByteVal, __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBytePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optByteVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optByteVal), __isset.at(10), __isset.bit(10)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI16PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optI16Val_ref() const& {
    return {this->__fbthrift_field_optI16Val, __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI16PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optI16Val_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optI16Val), __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI16PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optI16Val_ref() & {
    return {this->__fbthrift_field_optI16Val, __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI16PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optI16Val_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optI16Val), __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI16PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optI16Val() const& {
    return {this->__fbthrift_field_optI16Val, __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI16PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optI16Val() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optI16Val), __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI16PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optI16Val() & {
    return {this->__fbthrift_field_optI16Val, __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI16PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optI16Val() && {
    return {static_cast<T&&>(this->__fbthrift_field_optI16Val), __isset.at(11), __isset.bit(11)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI32PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optI32Val_ref() const& {
    return {this->__fbthrift_field_optI32Val, __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI32PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optI32Val_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optI32Val), __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI32PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optI32Val_ref() & {
    return {this->__fbthrift_field_optI32Val, __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI32PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optI32Val_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optI32Val), __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI32PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optI32Val() const& {
    return {this->__fbthrift_field_optI32Val, __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI32PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optI32Val() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optI32Val), __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI32PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optI32Val() & {
    return {this->__fbthrift_field_optI32Val, __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI32PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optI32Val() && {
    return {static_cast<T&&>(this->__fbthrift_field_optI32Val), __isset.at(12), __isset.bit(12)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI64PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optI64Val_ref() const& {
    return {this->__fbthrift_field_optI64Val, __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI64PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optI64Val_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optI64Val), __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI64PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optI64Val_ref() & {
    return {this->__fbthrift_field_optI64Val, __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI64PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optI64Val_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optI64Val), __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI64PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optI64Val() const& {
    return {this->__fbthrift_field_optI64Val, __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI64PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optI64Val() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optI64Val), __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI64PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optI64Val() & {
    return {this->__fbthrift_field_optI64Val, __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalI64PatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optI64Val() && {
    return {static_cast<T&&>(this->__fbthrift_field_optI64Val), __isset.at(13), __isset.bit(13)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalFloatPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optFloatVal_ref() const& {
    return {this->__fbthrift_field_optFloatVal, __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalFloatPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optFloatVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optFloatVal), __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalFloatPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optFloatVal_ref() & {
    return {this->__fbthrift_field_optFloatVal, __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalFloatPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optFloatVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optFloatVal), __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalFloatPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optFloatVal() const& {
    return {this->__fbthrift_field_optFloatVal, __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalFloatPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optFloatVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optFloatVal), __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalFloatPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optFloatVal() & {
    return {this->__fbthrift_field_optFloatVal, __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalFloatPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optFloatVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optFloatVal), __isset.at(14), __isset.bit(14)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalDoublePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optDoubleVal_ref() const& {
    return {this->__fbthrift_field_optDoubleVal, __isset.at(15), __isset.bit(15)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalDoublePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optDoubleVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optDoubleVal), __isset.at(15), __isset.bit(15)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalDoublePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optDoubleVal_ref() & {
    return {this->__fbthrift_field_optDoubleVal, __isset.at(15), __isset.bit(15)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalDoublePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optDoubleVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optDoubleVal), __isset.at(15), __isset.bit(15)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalDoublePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optDoubleVal() const& {
    return {this->__fbthrift_field_optDoubleVal, __isset.at(15), __isset.bit(15)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalDoublePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optDoubleVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optDoubleVal), __isset.at(15), __isset.bit(15)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalDoublePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optDoubleVal() & {
    return {this->__fbthrift_field_optDoubleVal, __isset.at(15), __isset.bit(15)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalDoublePatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optDoubleVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optDoubleVal), __isset.at(15), __isset.bit(15)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalStringPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optStringVal_ref() const& {
    return {this->__fbthrift_field_optStringVal, __isset.at(16), __isset.bit(16)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalStringPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optStringVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optStringVal), __isset.at(16), __isset.bit(16)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalStringPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optStringVal_ref() & {
    return {this->__fbthrift_field_optStringVal, __isset.at(16), __isset.bit(16)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalStringPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optStringVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optStringVal), __isset.at(16), __isset.bit(16)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalStringPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optStringVal() const& {
    return {this->__fbthrift_field_optStringVal, __isset.at(16), __isset.bit(16)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalStringPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optStringVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optStringVal), __isset.at(16), __isset.bit(16)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalStringPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optStringVal() & {
    return {this->__fbthrift_field_optStringVal, __isset.at(16), __isset.bit(16)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalStringPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optStringVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optStringVal), __isset.at(16), __isset.bit(16)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBinaryPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optBinaryVal_ref() const& {
    return {this->__fbthrift_field_optBinaryVal, __isset.at(17), __isset.bit(17)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBinaryPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optBinaryVal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optBinaryVal), __isset.at(17), __isset.bit(17)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBinaryPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optBinaryVal_ref() & {
    return {this->__fbthrift_field_optBinaryVal, __isset.at(17), __isset.bit(17)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBinaryPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optBinaryVal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_optBinaryVal), __isset.at(17), __isset.bit(17)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBinaryPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> optBinaryVal() const& {
    return {this->__fbthrift_field_optBinaryVal, __isset.at(17), __isset.bit(17)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBinaryPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> optBinaryVal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_optBinaryVal), __isset.at(17), __isset.bit(17)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBinaryPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> optBinaryVal() & {
    return {this->__fbthrift_field_optBinaryVal, __isset.at(17), __isset.bit(17)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_t<::apache::thrift::op::detail::OptionalPatchAdapter, ::apache::thrift::op::OptionalBinaryPatchStruct>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> optBinaryVal() && {
    return {static_cast<T&&>(this->__fbthrift_field_optBinaryVal), __isset.at(17), __isset.bit(17)};
  }
 private:
  template<::apache::thrift::FieldId> decltype(auto) __fbthrift_get() &;
  template<::apache::thrift::FieldId> decltype(auto) __fbthrift_get() const&;
  template<::apache::thrift::FieldId> decltype(auto) __fbthrift_get() &&;
  template<::apache::thrift::FieldId> decltype(auto) __fbthrift_get() const&&;
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{1}>() &       { return boolVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{1}>() const&  { return boolVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{1}>() &&      { return std::move(*this).boolVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{1}>() const&& { return std::move(*this).boolVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{2}>() &       { return byteVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{2}>() const&  { return byteVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{2}>() &&      { return std::move(*this).byteVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{2}>() const&& { return std::move(*this).byteVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{3}>() &       { return i16Val_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{3}>() const&  { return i16Val_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{3}>() &&      { return std::move(*this).i16Val_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{3}>() const&& { return std::move(*this).i16Val_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{4}>() &       { return i32Val_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{4}>() const&  { return i32Val_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{4}>() &&      { return std::move(*this).i32Val_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{4}>() const&& { return std::move(*this).i32Val_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{5}>() &       { return i64Val_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{5}>() const&  { return i64Val_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{5}>() &&      { return std::move(*this).i64Val_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{5}>() const&& { return std::move(*this).i64Val_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{6}>() &       { return floatVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{6}>() const&  { return floatVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{6}>() &&      { return std::move(*this).floatVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{6}>() const&& { return std::move(*this).floatVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{7}>() &       { return doubleVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{7}>() const&  { return doubleVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{7}>() &&      { return std::move(*this).doubleVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{7}>() const&& { return std::move(*this).doubleVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{8}>() &       { return stringVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{8}>() const&  { return stringVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{8}>() &&      { return std::move(*this).stringVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{8}>() const&& { return std::move(*this).stringVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{9}>() &       { return binaryVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{9}>() const&  { return binaryVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{9}>() &&      { return std::move(*this).binaryVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{9}>() const&& { return std::move(*this).binaryVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{11}>() &       { return optBoolVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{11}>() const&  { return optBoolVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{11}>() &&      { return std::move(*this).optBoolVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{11}>() const&& { return std::move(*this).optBoolVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{12}>() &       { return optByteVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{12}>() const&  { return optByteVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{12}>() &&      { return std::move(*this).optByteVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{12}>() const&& { return std::move(*this).optByteVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{13}>() &       { return optI16Val_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{13}>() const&  { return optI16Val_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{13}>() &&      { return std::move(*this).optI16Val_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{13}>() const&& { return std::move(*this).optI16Val_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{14}>() &       { return optI32Val_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{14}>() const&  { return optI32Val_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{14}>() &&      { return std::move(*this).optI32Val_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{14}>() const&& { return std::move(*this).optI32Val_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{15}>() &       { return optI64Val_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{15}>() const&  { return optI64Val_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{15}>() &&      { return std::move(*this).optI64Val_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{15}>() const&& { return std::move(*this).optI64Val_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{16}>() &       { return optFloatVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{16}>() const&  { return optFloatVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{16}>() &&      { return std::move(*this).optFloatVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{16}>() const&& { return std::move(*this).optFloatVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{17}>() &       { return optDoubleVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{17}>() const&  { return optDoubleVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{17}>() &&      { return std::move(*this).optDoubleVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{17}>() const&& { return std::move(*this).optDoubleVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{18}>() &       { return optStringVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{18}>() const&  { return optStringVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{18}>() &&      { return std::move(*this).optStringVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{18}>() const&& { return std::move(*this).optStringVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{19}>() &       { return optBinaryVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{19}>() const&  { return optBinaryVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{19}>() &&      { return std::move(*this).optBinaryVal_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{19}>() const&& { return std::move(*this).optBinaryVal_ref(); }

 public:

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStructPatch>;
  friend void swap(MyStructPatch& a, MyStructPatch& b);
};

template <class Protocol_>
unsigned long MyStructPatch::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
class MyStructValuePatch final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = true;
  static const char* __fbthrift_cpp2_gen_thrift_uri();
  using __fbthrift_fields = ::apache::thrift::type::fields<
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{1}, ::apache::thrift::type::struct_t<::cpp2::MyStruct>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{2}, ::apache::thrift::type::bool_t>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{3}, ::apache::thrift::type::struct_t<::cpp2::MyStructPatch>>
  >;

  void __fbthrift_clear();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStructValuePatch;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyStructValuePatch() :
      __fbthrift_field_clear() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStructValuePatch(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyStruct> assign__arg, bool clear__arg, ::cpp2::MyStructPatch patch__arg);

  MyStructValuePatch(MyStructValuePatch&&) noexcept;

  MyStructValuePatch(const MyStructValuePatch& src);


  MyStructValuePatch& operator=(MyStructValuePatch&&) noexcept;
  MyStructValuePatch& operator=(const MyStructValuePatch& src);
 private:
  ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyStruct> __fbthrift_field_assign;
 private:
  bool __fbthrift_field_clear;
 private:
  ::cpp2::MyStructPatch __fbthrift_field_patch;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyStructValuePatch&) const;
  bool operator<(const MyStructValuePatch&) const;

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> assign_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> assign_ref() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> assign_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> assign_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> assign() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> assign() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> assign() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_assign};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> assign() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_assign)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> clear_ref() const& {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> clear_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> clear_ref() & {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> clear_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> clear() const& {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> clear() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> clear() & {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> clear() && {
    return {static_cast<T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::cpp2::MyStructPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patch_ref() const& {
    return {this->__fbthrift_field_patch, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::cpp2::MyStructPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patch_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patch), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::cpp2::MyStructPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patch_ref() & {
    return {this->__fbthrift_field_patch, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::cpp2::MyStructPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patch_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_patch), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::cpp2::MyStructPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patch() const& {
    return {this->__fbthrift_field_patch, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::cpp2::MyStructPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patch() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patch), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::cpp2::MyStructPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patch() & {
    return {this->__fbthrift_field_patch, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::cpp2::MyStructPatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patch() && {
    return {static_cast<T&&>(this->__fbthrift_field_patch), __isset.at(1), __isset.bit(1)};
  }
 private:
  template<::apache::thrift::FieldId> decltype(auto) __fbthrift_get() &;
  template<::apache::thrift::FieldId> decltype(auto) __fbthrift_get() const&;
  template<::apache::thrift::FieldId> decltype(auto) __fbthrift_get() &&;
  template<::apache::thrift::FieldId> decltype(auto) __fbthrift_get() const&&;
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{1}>() &       { return assign_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{1}>() const&  { return assign_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{1}>() &&      { return std::move(*this).assign_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{1}>() const&& { return std::move(*this).assign_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{2}>() &       { return clear_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{2}>() const&  { return clear_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{2}>() &&      { return std::move(*this).clear_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{2}>() const&& { return std::move(*this).clear_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{3}>() &       { return patch_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{3}>() const&  { return patch_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{3}>() &&      { return std::move(*this).patch_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{3}>() const&& { return std::move(*this).patch_ref(); }

 public:

  bool get_clear() const {
    return __fbthrift_field_clear;
  }

  [[deprecated("Use `FOO.clear_ref() = BAR;` instead of `FOO.set_clear(BAR);`")]]
  bool& set_clear(bool clear_) {
    clear_ref() = clear_;
    return __fbthrift_field_clear;
  }
  const ::cpp2::MyStructPatch& get_patch() const&;
  ::cpp2::MyStructPatch get_patch() &&;

  template <typename T_MyStructValuePatch_patch_struct_setter = ::cpp2::MyStructPatch>
  [[deprecated("Use `FOO.patch_ref() = BAR;` instead of `FOO.set_patch(BAR);`")]]
  ::cpp2::MyStructPatch& set_patch(T_MyStructValuePatch_patch_struct_setter&& patch_) {
    patch_ref() = std::forward<T_MyStructValuePatch_patch_struct_setter>(patch_);
    return __fbthrift_field_patch;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStructValuePatch>;
  friend void swap(MyStructValuePatch& a, MyStructValuePatch& b);
};

template <class Protocol_>
unsigned long MyStructValuePatch::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
namespace cpp2 {
class OptionalMyStructValuePatch final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static constexpr bool __fbthrift_cpp2_gen_nimble = false;
  static constexpr bool __fbthrift_cpp2_gen_has_thrift_uri = true;
  static const char* __fbthrift_cpp2_gen_thrift_uri();
  using __fbthrift_fields = ::apache::thrift::type::fields<
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{2}, ::apache::thrift::type::bool_t>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{3}, ::apache::thrift::type::struct_t<::cpp2::MyStructValuePatch>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{1}, ::apache::thrift::type::struct_t<::cpp2::MyStruct>>,
    ::apache::thrift::type::field_t<::apache::thrift::FieldId{4}, ::apache::thrift::type::struct_t<::cpp2::MyStructValuePatch>>
  >;

  void __fbthrift_clear();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = OptionalMyStructValuePatch;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  OptionalMyStructValuePatch() :
      __fbthrift_field_clear() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  OptionalMyStructValuePatch(apache::thrift::FragileConstructor, bool clear__arg, ::cpp2::MyStructValuePatch patch__arg, ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyStruct> ensure__arg, ::cpp2::MyStructValuePatch patchAfter__arg);

  OptionalMyStructValuePatch(OptionalMyStructValuePatch&&) noexcept;

  OptionalMyStructValuePatch(const OptionalMyStructValuePatch& src);


  OptionalMyStructValuePatch& operator=(OptionalMyStructValuePatch&&) noexcept;
  OptionalMyStructValuePatch& operator=(const OptionalMyStructValuePatch& src);
 private:
  bool __fbthrift_field_clear;
 private:
  ::cpp2::MyStructValuePatch __fbthrift_field_patch;
 private:
  ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyStruct> __fbthrift_field_ensure;
 private:
  ::cpp2::MyStructValuePatch __fbthrift_field_patchAfter;
 private:
  apache::thrift::detail::isset_bitset<3, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const OptionalMyStructValuePatch&) const;
  bool operator<(const OptionalMyStructValuePatch&) const;

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> clear_ref() const& {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> clear_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> clear_ref() & {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> clear_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> clear() const& {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> clear() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> clear() & {
    return {this->__fbthrift_field_clear, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> clear() && {
    return {static_cast<T&&>(this->__fbthrift_field_clear), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::cpp2::MyStructValuePatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patch_ref() const& {
    return {this->__fbthrift_field_patch, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::cpp2::MyStructValuePatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patch_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patch), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::cpp2::MyStructValuePatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patch_ref() & {
    return {this->__fbthrift_field_patch, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::cpp2::MyStructValuePatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patch_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_patch), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::cpp2::MyStructValuePatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patch() const& {
    return {this->__fbthrift_field_patch, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::cpp2::MyStructValuePatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patch() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patch), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::cpp2::MyStructValuePatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patch() & {
    return {this->__fbthrift_field_patch, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::cpp2::MyStructValuePatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patch() && {
    return {static_cast<T&&>(this->__fbthrift_field_patch), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> ensure_ref() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> ensure_ref() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> ensure_ref() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> ensure_ref() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&> ensure() const& {
    return ::apache::thrift::optional_boxed_field_ref<const T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<const T&&> ensure() const&& {
    return ::apache::thrift::optional_boxed_field_ref<const T&&>{static_cast<const T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&> ensure() & {
    return ::apache::thrift::optional_boxed_field_ref<T&>{this->__fbthrift_field_ensure};
  }

  template <typename..., typename T = ::apache::thrift::detail::boxed_value_ptr<::cpp2::MyStruct>>
  FOLLY_ERASE ::apache::thrift::optional_boxed_field_ref<T&&> ensure() && {
    return ::apache::thrift::optional_boxed_field_ref<T&&>{static_cast<T&&>(this->__fbthrift_field_ensure)};
  }

  template <typename..., typename T = ::cpp2::MyStructValuePatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patchAfter_ref() const& {
    return {this->__fbthrift_field_patchAfter, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::cpp2::MyStructValuePatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patchAfter_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patchAfter), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::cpp2::MyStructValuePatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patchAfter_ref() & {
    return {this->__fbthrift_field_patchAfter, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::cpp2::MyStructValuePatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patchAfter_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_patchAfter), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::cpp2::MyStructValuePatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> patchAfter() const& {
    return {this->__fbthrift_field_patchAfter, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::cpp2::MyStructValuePatch>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> patchAfter() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_patchAfter), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::cpp2::MyStructValuePatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> patchAfter() & {
    return {this->__fbthrift_field_patchAfter, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::cpp2::MyStructValuePatch>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> patchAfter() && {
    return {static_cast<T&&>(this->__fbthrift_field_patchAfter), __isset.at(2), __isset.bit(2)};
  }
 private:
  template<::apache::thrift::FieldId> decltype(auto) __fbthrift_get() &;
  template<::apache::thrift::FieldId> decltype(auto) __fbthrift_get() const&;
  template<::apache::thrift::FieldId> decltype(auto) __fbthrift_get() &&;
  template<::apache::thrift::FieldId> decltype(auto) __fbthrift_get() const&&;
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{2}>() &       { return clear_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{2}>() const&  { return clear_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{2}>() &&      { return std::move(*this).clear_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{2}>() const&& { return std::move(*this).clear_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{3}>() &       { return patch_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{3}>() const&  { return patch_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{3}>() &&      { return std::move(*this).patch_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{3}>() const&& { return std::move(*this).patch_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{1}>() &       { return ensure_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{1}>() const&  { return ensure_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{1}>() &&      { return std::move(*this).ensure_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{1}>() const&& { return std::move(*this).ensure_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{4}>() &       { return patchAfter_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{4}>() const&  { return patchAfter_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{4}>() &&      { return std::move(*this).patchAfter_ref(); }
  template<> decltype(auto) __fbthrift_get<::apache::thrift::FieldId{4}>() const&& { return std::move(*this).patchAfter_ref(); }

 public:

  bool get_clear() const {
    return __fbthrift_field_clear;
  }

  [[deprecated("Use `FOO.clear_ref() = BAR;` instead of `FOO.set_clear(BAR);`")]]
  bool& set_clear(bool clear_) {
    clear_ref() = clear_;
    return __fbthrift_field_clear;
  }
  const ::cpp2::MyStructValuePatch& get_patch() const&;
  ::cpp2::MyStructValuePatch get_patch() &&;

  template <typename T_OptionalMyStructValuePatch_patch_struct_setter = ::cpp2::MyStructValuePatch>
  [[deprecated("Use `FOO.patch_ref() = BAR;` instead of `FOO.set_patch(BAR);`")]]
  ::cpp2::MyStructValuePatch& set_patch(T_OptionalMyStructValuePatch_patch_struct_setter&& patch_) {
    patch_ref() = std::forward<T_OptionalMyStructValuePatch_patch_struct_setter>(patch_);
    return __fbthrift_field_patch;
  }
  const ::cpp2::MyStructValuePatch& get_patchAfter() const&;
  ::cpp2::MyStructValuePatch get_patchAfter() &&;

  template <typename T_OptionalMyStructValuePatch_patchAfter_struct_setter = ::cpp2::MyStructValuePatch>
  [[deprecated("Use `FOO.patchAfter_ref() = BAR;` instead of `FOO.set_patchAfter(BAR);`")]]
  ::cpp2::MyStructValuePatch& set_patchAfter(T_OptionalMyStructValuePatch_patchAfter_struct_setter&& patchAfter_) {
    patchAfter_ref() = std::forward<T_OptionalMyStructValuePatch_patchAfter_struct_setter>(patchAfter_);
    return __fbthrift_field_patchAfter;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<OptionalMyStructValuePatch>;
  friend void swap(OptionalMyStructValuePatch& a, OptionalMyStructValuePatch& b);
};

template <class Protocol_>
unsigned long OptionalMyStructValuePatch::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}

} // cpp2
