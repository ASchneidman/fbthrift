/**
 * Autogenerated by Thrift for src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#include "thrift/compiler/test/fixtures/patch/gen-cpp2/module_types.h"
#include "thrift/compiler/test/fixtures/patch/gen-cpp2/module_types.tcc"

#include <thrift/lib/cpp2/gen/module_types_cpp.h>

#include "thrift/compiler/test/fixtures/patch/gen-cpp2/module_data.h"


namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyData>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyData>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyData::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyData";
}

MyData::MyData(const MyData&) = default;
MyData& MyData::operator=(const MyData&) = default;
MyData::MyData(MyData&& other) noexcept  :
    __fbthrift_field_data1(std::move(other.__fbthrift_field_data1)),
    __fbthrift_field_data2(std::move(other.__fbthrift_field_data2)) {
}

MyData& MyData::operator=(FOLLY_MAYBE_UNUSED MyData&& other) noexcept {
    this->__fbthrift_field_data1 = std::move(other.__fbthrift_field_data1);
    this->__fbthrift_field_data2 = std::move(other.__fbthrift_field_data2);
    return *this;
}


MyData::MyData(apache::thrift::FragileConstructor, ::std::string data1__arg, ::std::int32_t data2__arg) :
    __fbthrift_field_data1(std::move(data1__arg)),
    __fbthrift_field_data2(std::move(data2__arg)) {
}


void MyData::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_data1 = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->__fbthrift_field_data2 = ::std::int32_t();
}

void MyData::__fbthrift_clear_terse_fields() {
  this->__fbthrift_field_data1 = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->__fbthrift_field_data2 = ::std::int32_t();
}

bool MyData::__fbthrift_is_empty() const {
  return !(!apache::thrift::StringTraits<std::string>::isEmpty(this->__fbthrift_field_data1)) &&
 !(this->__fbthrift_field_data2 != ::std::int32_t());
}

bool MyData::operator==(const MyData& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.data1_ref() == rhs.data1_ref())) {
    return false;
  }
  if (!(lhs.data2_ref() == rhs.data2_ref())) {
    return false;
  }
  return true;
}

bool MyData::operator<(const MyData& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.data1_ref() == rhs.data1_ref())) {
    return lhs.data1_ref() < rhs.data1_ref();
  }
  if (!(lhs.data2_ref() == rhs.data2_ref())) {
    return lhs.data2_ref() < rhs.data2_ref();
  }
  return false;
}


void swap(MyData& a, MyData& b) {
  using ::std::swap;
  swap(a.data1_ref().value(), b.data1_ref().value());
  swap(a.data2_ref().value(), b.data2_ref().value());
}

template void MyData::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyData::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyData::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyData::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyData::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyData::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyData::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyData::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::InnerUnion>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::InnerUnion>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache { namespace thrift {

constexpr std::size_t const TEnumTraits<::test::fixtures::patch::InnerUnion::Type>::size;
folly::Range<::test::fixtures::patch::InnerUnion::Type const*> const TEnumTraits<::test::fixtures::patch::InnerUnion::Type>::values = folly::range(TEnumDataStorage<::test::fixtures::patch::InnerUnion::Type>::values);
folly::Range<folly::StringPiece const*> const TEnumTraits<::test::fixtures::patch::InnerUnion::Type>::names = folly::range(TEnumDataStorage<::test::fixtures::patch::InnerUnion::Type>::names);

bool TEnumTraits<::test::fixtures::patch::InnerUnion::Type>::findName(type value, folly::StringPiece* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::test::fixtures::patch::InnerUnion::Type>::findValue(folly::StringPiece name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}
}} // apache::thrift
namespace test { namespace fixtures { namespace patch {

const char* InnerUnion::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/InnerUnion";
}

void InnerUnion::__fbthrift_clear() {
  // clear all fields
  if (type_ == Type::__EMPTY__) { return; }
  switch(type_) {
    case Type::innerOption:
      destruct(value_.innerOption);
      break;
    default:
      assert(false);
      break;
  }
  type_ = Type::__EMPTY__;
}

bool InnerUnion::__fbthrift_is_empty() const {
  return type_ == Type::__EMPTY__;
}

bool InnerUnion::operator==(const InnerUnion& rhs) const {
  if (type_ != rhs.type_) { return false; }
  switch(type_) {
    case Type::innerOption:
      return apache::thrift::StringTraits<std::string>::isEqual(
          value_.innerOption,
          rhs.value_.innerOption);
    default:
      return true;
  }
}

bool InnerUnion::operator<(const InnerUnion& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (lhs.type_ != rhs.type_) {
    return lhs.type_ < rhs.type_;
  }
  switch (lhs.type_) {
    case Type::innerOption:
    return !apache::thrift::StringTraits<std::string>::isEqual(value_.innerOption, rhs.value_.innerOption) &&
      apache::thrift::StringTraits<std::string>::isLess(value_.innerOption, rhs.value_.innerOption);
    default:
      return false;
  }
}

void swap(InnerUnion& a, InnerUnion& b) {
  InnerUnion temp(std::move(a));
  a = std::move(b);
  b = std::move(temp);
}

template void InnerUnion::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t InnerUnion::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t InnerUnion::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t InnerUnion::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void InnerUnion::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t InnerUnion::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t InnerUnion::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t InnerUnion::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyUnion>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyUnion>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache { namespace thrift {

constexpr std::size_t const TEnumTraits<::test::fixtures::patch::MyUnion::Type>::size;
folly::Range<::test::fixtures::patch::MyUnion::Type const*> const TEnumTraits<::test::fixtures::patch::MyUnion::Type>::values = folly::range(TEnumDataStorage<::test::fixtures::patch::MyUnion::Type>::values);
folly::Range<folly::StringPiece const*> const TEnumTraits<::test::fixtures::patch::MyUnion::Type>::names = folly::range(TEnumDataStorage<::test::fixtures::patch::MyUnion::Type>::names);

bool TEnumTraits<::test::fixtures::patch::MyUnion::Type>::findName(type value, folly::StringPiece* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::test::fixtures::patch::MyUnion::Type>::findValue(folly::StringPiece name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}
}} // apache::thrift
namespace test { namespace fixtures { namespace patch {

const char* MyUnion::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyUnion";
}

void MyUnion::__fbthrift_clear() {
  // clear all fields
  if (type_ == Type::__EMPTY__) { return; }
  switch(type_) {
    case Type::option1:
      destruct(value_.option1);
      break;
    case Type::option2:
      destruct(value_.option2);
      break;
    case Type::option3:
      destruct(value_.option3);
      break;
    default:
      assert(false);
      break;
  }
  type_ = Type::__EMPTY__;
}

bool MyUnion::__fbthrift_is_empty() const {
  return type_ == Type::__EMPTY__;
}

bool MyUnion::operator==(const MyUnion& rhs) const {
  if (type_ != rhs.type_) { return false; }
  switch(type_) {
    case Type::option1:
      return value_.option1 == rhs.value_.option1;
    case Type::option2:
      return value_.option2 == rhs.value_.option2;
    case Type::option3:
      return value_.option3 == rhs.value_.option3;
    default:
      return true;
  }
}

bool MyUnion::operator<(const MyUnion& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (lhs.type_ != rhs.type_) {
    return lhs.type_ < rhs.type_;
  }
  switch (lhs.type_) {
    case Type::option1:
      return lhs.value_.option1 < rhs.value_.option1;
    case Type::option2:
      return lhs.value_.option2 < rhs.value_.option2;
    case Type::option3:
      return lhs.value_.option3 < rhs.value_.option3;
    default:
      return false;
  }
}

void swap(MyUnion& a, MyUnion& b) {
  MyUnion temp(std::move(a));
  a = std::move(b);
  b = std::move(temp);
}

template void MyUnion::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyUnion::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyUnion::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyUnion::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyUnion::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyUnion::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyUnion::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyUnion::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyUnion,
        ::apache::thrift::type_class::variant,
        ::test::fixtures::patch::InnerUnion>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyStruct";
}

MyStruct::MyStruct(const MyStruct&) = default;
MyStruct& MyStruct::operator=(const MyStruct&) = default;
MyStruct::MyStruct() :
      __fbthrift_field_boolVal(),
      __fbthrift_field_byteVal(),
      __fbthrift_field_i16Val(),
      __fbthrift_field_i32Val(),
      __fbthrift_field_i64Val(),
      __fbthrift_field_floatVal(),
      __fbthrift_field_doubleVal(),
      __fbthrift_field_optBoolVal(),
      __fbthrift_field_optByteVal(),
      __fbthrift_field_optI16Val(),
      __fbthrift_field_optI32Val(),
      __fbthrift_field_optI64Val(),
      __fbthrift_field_optFloatVal(),
      __fbthrift_field_optDoubleVal() {
}


MyStruct::~MyStruct() {}

MyStruct::MyStruct(MyStruct&& other) noexcept  :
    __fbthrift_field_boolVal(std::move(other.__fbthrift_field_boolVal)),
    __fbthrift_field_byteVal(std::move(other.__fbthrift_field_byteVal)),
    __fbthrift_field_i16Val(std::move(other.__fbthrift_field_i16Val)),
    __fbthrift_field_i32Val(std::move(other.__fbthrift_field_i32Val)),
    __fbthrift_field_i64Val(std::move(other.__fbthrift_field_i64Val)),
    __fbthrift_field_floatVal(std::move(other.__fbthrift_field_floatVal)),
    __fbthrift_field_doubleVal(std::move(other.__fbthrift_field_doubleVal)),
    __fbthrift_field_stringVal(std::move(other.__fbthrift_field_stringVal)),
    __fbthrift_field_binaryVal(std::move(other.__fbthrift_field_binaryVal)),
    __fbthrift_field_structVal(std::move(other.__fbthrift_field_structVal)),
    __fbthrift_field_optBoolVal(std::move(other.__fbthrift_field_optBoolVal)),
    __fbthrift_field_optByteVal(std::move(other.__fbthrift_field_optByteVal)),
    __fbthrift_field_optI16Val(std::move(other.__fbthrift_field_optI16Val)),
    __fbthrift_field_optI32Val(std::move(other.__fbthrift_field_optI32Val)),
    __fbthrift_field_optI64Val(std::move(other.__fbthrift_field_optI64Val)),
    __fbthrift_field_optFloatVal(std::move(other.__fbthrift_field_optFloatVal)),
    __fbthrift_field_optDoubleVal(std::move(other.__fbthrift_field_optDoubleVal)),
    __fbthrift_field_optStringVal(std::move(other.__fbthrift_field_optStringVal)),
    __fbthrift_field_optBinaryVal(std::move(other.__fbthrift_field_optBinaryVal)),
    __fbthrift_field_optStructVal(std::move(other.__fbthrift_field_optStructVal)),
    __fbthrift_field_optListVal(std::move(other.__fbthrift_field_optListVal)),
    __fbthrift_field_optSetVal(std::move(other.__fbthrift_field_optSetVal)),
    __fbthrift_field_optMapVal(std::move(other.__fbthrift_field_optMapVal)),
    __fbthrift_field_unionVal(std::move(other.__fbthrift_field_unionVal)),
    __isset(other.__isset) {
}

MyStruct& MyStruct::operator=(FOLLY_MAYBE_UNUSED MyStruct&& other) noexcept {
    this->__fbthrift_field_boolVal = std::move(other.__fbthrift_field_boolVal);
    this->__fbthrift_field_byteVal = std::move(other.__fbthrift_field_byteVal);
    this->__fbthrift_field_i16Val = std::move(other.__fbthrift_field_i16Val);
    this->__fbthrift_field_i32Val = std::move(other.__fbthrift_field_i32Val);
    this->__fbthrift_field_i64Val = std::move(other.__fbthrift_field_i64Val);
    this->__fbthrift_field_floatVal = std::move(other.__fbthrift_field_floatVal);
    this->__fbthrift_field_doubleVal = std::move(other.__fbthrift_field_doubleVal);
    this->__fbthrift_field_stringVal = std::move(other.__fbthrift_field_stringVal);
    this->__fbthrift_field_binaryVal = std::move(other.__fbthrift_field_binaryVal);
    this->__fbthrift_field_structVal = std::move(other.__fbthrift_field_structVal);
    this->__fbthrift_field_optBoolVal = std::move(other.__fbthrift_field_optBoolVal);
    this->__fbthrift_field_optByteVal = std::move(other.__fbthrift_field_optByteVal);
    this->__fbthrift_field_optI16Val = std::move(other.__fbthrift_field_optI16Val);
    this->__fbthrift_field_optI32Val = std::move(other.__fbthrift_field_optI32Val);
    this->__fbthrift_field_optI64Val = std::move(other.__fbthrift_field_optI64Val);
    this->__fbthrift_field_optFloatVal = std::move(other.__fbthrift_field_optFloatVal);
    this->__fbthrift_field_optDoubleVal = std::move(other.__fbthrift_field_optDoubleVal);
    this->__fbthrift_field_optStringVal = std::move(other.__fbthrift_field_optStringVal);
    this->__fbthrift_field_optBinaryVal = std::move(other.__fbthrift_field_optBinaryVal);
    this->__fbthrift_field_optStructVal = std::move(other.__fbthrift_field_optStructVal);
    this->__fbthrift_field_optListVal = std::move(other.__fbthrift_field_optListVal);
    this->__fbthrift_field_optSetVal = std::move(other.__fbthrift_field_optSetVal);
    this->__fbthrift_field_optMapVal = std::move(other.__fbthrift_field_optMapVal);
    this->__fbthrift_field_unionVal = std::move(other.__fbthrift_field_unionVal);
    __isset = other.__isset;
    return *this;
}


MyStruct::MyStruct(apache::thrift::FragileConstructor, bool boolVal__arg, ::std::int8_t byteVal__arg, ::std::int16_t i16Val__arg, ::std::int32_t i32Val__arg, ::std::int64_t i64Val__arg, float floatVal__arg, double doubleVal__arg, ::std::string stringVal__arg, ::folly::IOBuf binaryVal__arg, ::test::fixtures::patch::MyData structVal__arg, bool optBoolVal__arg, ::std::int8_t optByteVal__arg, ::std::int16_t optI16Val__arg, ::std::int32_t optI32Val__arg, ::std::int64_t optI64Val__arg, float optFloatVal__arg, double optDoubleVal__arg, ::std::string optStringVal__arg, ::folly::IOBuf optBinaryVal__arg, ::test::fixtures::patch::MyData optStructVal__arg, ::std::vector<::std::int16_t> optListVal__arg, ::std::set<::std::string> optSetVal__arg, ::std::map<::std::string, ::std::string> optMapVal__arg, ::test::fixtures::patch::MyUnion unionVal__arg) :
    __fbthrift_field_boolVal(std::move(boolVal__arg)),
    __fbthrift_field_byteVal(std::move(byteVal__arg)),
    __fbthrift_field_i16Val(std::move(i16Val__arg)),
    __fbthrift_field_i32Val(std::move(i32Val__arg)),
    __fbthrift_field_i64Val(std::move(i64Val__arg)),
    __fbthrift_field_floatVal(std::move(floatVal__arg)),
    __fbthrift_field_doubleVal(std::move(doubleVal__arg)),
    __fbthrift_field_stringVal(std::move(stringVal__arg)),
    __fbthrift_field_binaryVal(std::move(binaryVal__arg)),
    __fbthrift_field_structVal(std::move(structVal__arg)),
    __fbthrift_field_optBoolVal(std::move(optBoolVal__arg)),
    __fbthrift_field_optByteVal(std::move(optByteVal__arg)),
    __fbthrift_field_optI16Val(std::move(optI16Val__arg)),
    __fbthrift_field_optI32Val(std::move(optI32Val__arg)),
    __fbthrift_field_optI64Val(std::move(optI64Val__arg)),
    __fbthrift_field_optFloatVal(std::move(optFloatVal__arg)),
    __fbthrift_field_optDoubleVal(std::move(optDoubleVal__arg)),
    __fbthrift_field_optStringVal(std::move(optStringVal__arg)),
    __fbthrift_field_optBinaryVal(std::move(optBinaryVal__arg)),
    __fbthrift_field_optStructVal(std::move(optStructVal__arg)),
    __fbthrift_field_optListVal(std::move(optListVal__arg)),
    __fbthrift_field_optSetVal(std::move(optSetVal__arg)),
    __fbthrift_field_optMapVal(std::move(optMapVal__arg)),
    __fbthrift_field_unionVal(std::move(unionVal__arg)) {
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
  __isset.set(folly::index_constant<7>(), true);
  __isset.set(folly::index_constant<8>(), true);
  __isset.set(folly::index_constant<9>(), true);
  __isset.set(folly::index_constant<10>(), true);
  __isset.set(folly::index_constant<11>(), true);
  __isset.set(folly::index_constant<12>(), true);
}


void MyStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_boolVal = bool();
  this->__fbthrift_field_byteVal = ::std::int8_t();
  this->__fbthrift_field_i16Val = ::std::int16_t();
  this->__fbthrift_field_i32Val = ::std::int32_t();
  this->__fbthrift_field_i64Val = ::std::int64_t();
  this->__fbthrift_field_floatVal = float();
  this->__fbthrift_field_doubleVal = double();
  this->__fbthrift_field_stringVal = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->__fbthrift_field_binaryVal = apache::thrift::StringTraits<::folly::IOBuf>::fromStringLiteral("");
  ::apache::thrift::clear(this->__fbthrift_field_structVal);
  this->__fbthrift_field_optBoolVal = bool();
  this->__fbthrift_field_optByteVal = ::std::int8_t();
  this->__fbthrift_field_optI16Val = ::std::int16_t();
  this->__fbthrift_field_optI32Val = ::std::int32_t();
  this->__fbthrift_field_optI64Val = ::std::int64_t();
  this->__fbthrift_field_optFloatVal = float();
  this->__fbthrift_field_optDoubleVal = double();
  this->__fbthrift_field_optStringVal = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->__fbthrift_field_optBinaryVal = apache::thrift::StringTraits<::folly::IOBuf>::fromStringLiteral("");
  ::apache::thrift::clear(this->__fbthrift_field_optStructVal);
  this->__fbthrift_field_optListVal.clear();
  this->__fbthrift_field_optSetVal.clear();
  this->__fbthrift_field_optMapVal.clear();
  ::apache::thrift::clear(this->__fbthrift_field_unionVal);
  __isset = {};
}

void MyStruct::__fbthrift_clear_terse_fields() {
  this->__fbthrift_field_boolVal = bool();
  this->__fbthrift_field_byteVal = ::std::int8_t();
  this->__fbthrift_field_i16Val = ::std::int16_t();
  this->__fbthrift_field_i32Val = ::std::int32_t();
  this->__fbthrift_field_i64Val = ::std::int64_t();
  this->__fbthrift_field_floatVal = float();
  this->__fbthrift_field_doubleVal = double();
  this->__fbthrift_field_stringVal = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->__fbthrift_field_binaryVal = apache::thrift::StringTraits<::folly::IOBuf>::fromStringLiteral("");
  ::apache::thrift::detail::st::clear_terse_fields(this->__fbthrift_field_structVal);
  ::apache::thrift::detail::st::clear_terse_fields(this->__fbthrift_field_unionVal);
}

bool MyStruct::__fbthrift_is_empty() const {
  return !(this->__fbthrift_field_boolVal != bool()) &&
 !(this->__fbthrift_field_byteVal != ::std::int8_t()) &&
 !(this->__fbthrift_field_i16Val != ::std::int16_t()) &&
 !(this->__fbthrift_field_i32Val != ::std::int32_t()) &&
 !(this->__fbthrift_field_i64Val != ::std::int64_t()) &&
 !(this->__fbthrift_field_floatVal != float()) &&
 !(this->__fbthrift_field_doubleVal != double()) &&
 !(!apache::thrift::StringTraits<std::string>::isEmpty(this->__fbthrift_field_stringVal)) &&
 !(!apache::thrift::StringTraits<::folly::IOBuf>::isEmpty(this->__fbthrift_field_binaryVal)) &&
 !(!::apache::thrift::empty(this->__fbthrift_field_structVal)) &&
 !(this->__isset.get(0)) &&
 !(this->__isset.get(1)) &&
 !(this->__isset.get(2)) &&
 !(this->__isset.get(3)) &&
 !(this->__isset.get(4)) &&
 !(this->__isset.get(5)) &&
 !(this->__isset.get(6)) &&
 !(this->__isset.get(7)) &&
 !(this->__isset.get(8)) &&
 !(this->__isset.get(9)) &&
 !(this->__isset.get(10)) &&
 !(this->__isset.get(11)) &&
 !(this->__isset.get(12)) &&
 !(!::apache::thrift::empty(this->__fbthrift_field_unionVal));
}

bool MyStruct::operator==(const MyStruct& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.boolVal_ref() == rhs.boolVal_ref())) {
    return false;
  }
  if (!(lhs.byteVal_ref() == rhs.byteVal_ref())) {
    return false;
  }
  if (!(lhs.i16Val_ref() == rhs.i16Val_ref())) {
    return false;
  }
  if (!(lhs.i32Val_ref() == rhs.i32Val_ref())) {
    return false;
  }
  if (!(lhs.i64Val_ref() == rhs.i64Val_ref())) {
    return false;
  }
  if (!(lhs.floatVal_ref() == rhs.floatVal_ref())) {
    return false;
  }
  if (!(lhs.doubleVal_ref() == rhs.doubleVal_ref())) {
    return false;
  }
  if (!(lhs.stringVal_ref() == rhs.stringVal_ref())) {
    return false;
  }
  if (!apache::thrift::StringTraits<::folly::IOBuf>::isEqual(lhs.__fbthrift_field_binaryVal, rhs.__fbthrift_field_binaryVal)) {
    return false;
  }
  if (!(lhs.structVal_ref() == rhs.structVal_ref())) {
    return false;
  }
  if (!(lhs.optBoolVal_ref() == rhs.optBoolVal_ref())) {
    return false;
  }
  if (!(lhs.optByteVal_ref() == rhs.optByteVal_ref())) {
    return false;
  }
  if (!(lhs.optI16Val_ref() == rhs.optI16Val_ref())) {
    return false;
  }
  if (!(lhs.optI32Val_ref() == rhs.optI32Val_ref())) {
    return false;
  }
  if (!(lhs.optI64Val_ref() == rhs.optI64Val_ref())) {
    return false;
  }
  if (!(lhs.optFloatVal_ref() == rhs.optFloatVal_ref())) {
    return false;
  }
  if (!(lhs.optDoubleVal_ref() == rhs.optDoubleVal_ref())) {
    return false;
  }
  if (!(lhs.optStringVal_ref() == rhs.optStringVal_ref())) {
    return false;
  }
  if (lhs.optBinaryVal_ref().has_value() != rhs.optBinaryVal_ref().has_value() || (lhs.optBinaryVal_ref().has_value() && !apache::thrift::StringTraits<::folly::IOBuf>::isEqual(lhs.__fbthrift_field_optBinaryVal, rhs.__fbthrift_field_optBinaryVal))) {
    return false;
  }
  if (!(lhs.optStructVal_ref() == rhs.optStructVal_ref())) {
    return false;
  }
  if (!(lhs.optListVal_ref() == rhs.optListVal_ref())) {
    return false;
  }
  if (!(lhs.optSetVal_ref() == rhs.optSetVal_ref())) {
    return false;
  }
  if (!(lhs.optMapVal_ref() == rhs.optMapVal_ref())) {
    return false;
  }
  if (!(lhs.unionVal_ref() == rhs.unionVal_ref())) {
    return false;
  }
  return true;
}

bool MyStruct::operator<(const MyStruct& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.boolVal_ref() == rhs.boolVal_ref())) {
    return lhs.boolVal_ref() < rhs.boolVal_ref();
  }
  if (!(lhs.byteVal_ref() == rhs.byteVal_ref())) {
    return lhs.byteVal_ref() < rhs.byteVal_ref();
  }
  if (!(lhs.i16Val_ref() == rhs.i16Val_ref())) {
    return lhs.i16Val_ref() < rhs.i16Val_ref();
  }
  if (!(lhs.i32Val_ref() == rhs.i32Val_ref())) {
    return lhs.i32Val_ref() < rhs.i32Val_ref();
  }
  if (!(lhs.i64Val_ref() == rhs.i64Val_ref())) {
    return lhs.i64Val_ref() < rhs.i64Val_ref();
  }
  if (!(lhs.floatVal_ref() == rhs.floatVal_ref())) {
    return lhs.floatVal_ref() < rhs.floatVal_ref();
  }
  if (!(lhs.doubleVal_ref() == rhs.doubleVal_ref())) {
    return lhs.doubleVal_ref() < rhs.doubleVal_ref();
  }
  if (!(lhs.stringVal_ref() == rhs.stringVal_ref())) {
    return lhs.stringVal_ref() < rhs.stringVal_ref();
  }
  if (!apache::thrift::StringTraits<::folly::IOBuf>::isEqual(lhs.__fbthrift_field_binaryVal, rhs.__fbthrift_field_binaryVal)) {
    return apache::thrift::StringTraits<::folly::IOBuf>::isLess(lhs.__fbthrift_field_binaryVal, rhs.__fbthrift_field_binaryVal);
  }
  if (!(lhs.structVal_ref() == rhs.structVal_ref())) {
    return lhs.structVal_ref() < rhs.structVal_ref();
  }
  if (!(lhs.optBoolVal_ref() == rhs.optBoolVal_ref())) {
    return lhs.optBoolVal_ref() < rhs.optBoolVal_ref();
  }
  if (!(lhs.optByteVal_ref() == rhs.optByteVal_ref())) {
    return lhs.optByteVal_ref() < rhs.optByteVal_ref();
  }
  if (!(lhs.optI16Val_ref() == rhs.optI16Val_ref())) {
    return lhs.optI16Val_ref() < rhs.optI16Val_ref();
  }
  if (!(lhs.optI32Val_ref() == rhs.optI32Val_ref())) {
    return lhs.optI32Val_ref() < rhs.optI32Val_ref();
  }
  if (!(lhs.optI64Val_ref() == rhs.optI64Val_ref())) {
    return lhs.optI64Val_ref() < rhs.optI64Val_ref();
  }
  if (!(lhs.optFloatVal_ref() == rhs.optFloatVal_ref())) {
    return lhs.optFloatVal_ref() < rhs.optFloatVal_ref();
  }
  if (!(lhs.optDoubleVal_ref() == rhs.optDoubleVal_ref())) {
    return lhs.optDoubleVal_ref() < rhs.optDoubleVal_ref();
  }
  if (!(lhs.optStringVal_ref() == rhs.optStringVal_ref())) {
    return lhs.optStringVal_ref() < rhs.optStringVal_ref();
  }
  if (lhs.optBinaryVal_ref().has_value() != rhs.optBinaryVal_ref().has_value() || (lhs.optBinaryVal_ref().has_value() && !apache::thrift::StringTraits<::folly::IOBuf>::isEqual(lhs.__fbthrift_field_optBinaryVal, rhs.__fbthrift_field_optBinaryVal))) {
    return !lhs.optBinaryVal_ref().has_value() || (rhs.optBinaryVal_ref().has_value() && apache::thrift::StringTraits<::folly::IOBuf>::isLess(lhs.__fbthrift_field_optBinaryVal, rhs.__fbthrift_field_optBinaryVal));
  }
  if (!(lhs.optStructVal_ref() == rhs.optStructVal_ref())) {
    return lhs.optStructVal_ref() < rhs.optStructVal_ref();
  }
  if (!(lhs.optListVal_ref() == rhs.optListVal_ref())) {
    return lhs.optListVal_ref() < rhs.optListVal_ref();
  }
  if (!(lhs.optSetVal_ref() == rhs.optSetVal_ref())) {
    return lhs.optSetVal_ref() < rhs.optSetVal_ref();
  }
  if (!(lhs.optMapVal_ref() == rhs.optMapVal_ref())) {
    return lhs.optMapVal_ref() < rhs.optMapVal_ref();
  }
  if (!(lhs.unionVal_ref() == rhs.unionVal_ref())) {
    return lhs.unionVal_ref() < rhs.unionVal_ref();
  }
  return false;
}

const ::test::fixtures::patch::MyData& MyStruct::get_structVal() const& {
  return __fbthrift_field_structVal;
}

::test::fixtures::patch::MyData MyStruct::get_structVal() && {
  return std::move(__fbthrift_field_structVal);
}

const ::test::fixtures::patch::MyData* MyStruct::get_optStructVal() const& {
  return optStructVal_ref().has_value() ? std::addressof(__fbthrift_field_optStructVal) : nullptr;
}

::test::fixtures::patch::MyData* MyStruct::get_optStructVal() & {
  return optStructVal_ref().has_value() ? std::addressof(__fbthrift_field_optStructVal) : nullptr;
}

const ::std::vector<::std::int16_t>* MyStruct::get_optListVal() const& {
  return optListVal_ref().has_value() ? std::addressof(__fbthrift_field_optListVal) : nullptr;
}

::std::vector<::std::int16_t>* MyStruct::get_optListVal() & {
  return optListVal_ref().has_value() ? std::addressof(__fbthrift_field_optListVal) : nullptr;
}

const ::std::set<::std::string>* MyStruct::get_optSetVal() const& {
  return optSetVal_ref().has_value() ? std::addressof(__fbthrift_field_optSetVal) : nullptr;
}

::std::set<::std::string>* MyStruct::get_optSetVal() & {
  return optSetVal_ref().has_value() ? std::addressof(__fbthrift_field_optSetVal) : nullptr;
}

const ::std::map<::std::string, ::std::string>* MyStruct::get_optMapVal() const& {
  return optMapVal_ref().has_value() ? std::addressof(__fbthrift_field_optMapVal) : nullptr;
}

::std::map<::std::string, ::std::string>* MyStruct::get_optMapVal() & {
  return optMapVal_ref().has_value() ? std::addressof(__fbthrift_field_optMapVal) : nullptr;
}

const ::test::fixtures::patch::MyUnion& MyStruct::get_unionVal() const& {
  return __fbthrift_field_unionVal;
}

::test::fixtures::patch::MyUnion MyStruct::get_unionVal() && {
  return std::move(__fbthrift_field_unionVal);
}


void swap(MyStruct& a, MyStruct& b) {
  using ::std::swap;
  swap(a.boolVal_ref().value(), b.boolVal_ref().value());
  swap(a.byteVal_ref().value(), b.byteVal_ref().value());
  swap(a.i16Val_ref().value(), b.i16Val_ref().value());
  swap(a.i32Val_ref().value(), b.i32Val_ref().value());
  swap(a.i64Val_ref().value(), b.i64Val_ref().value());
  swap(a.floatVal_ref().value(), b.floatVal_ref().value());
  swap(a.doubleVal_ref().value(), b.doubleVal_ref().value());
  swap(a.stringVal_ref().value(), b.stringVal_ref().value());
  swap(a.binaryVal_ref().value(), b.binaryVal_ref().value());
  swap(a.structVal_ref().value(), b.structVal_ref().value());
  swap(a.optBoolVal_ref().value_unchecked(), b.optBoolVal_ref().value_unchecked());
  swap(a.optByteVal_ref().value_unchecked(), b.optByteVal_ref().value_unchecked());
  swap(a.optI16Val_ref().value_unchecked(), b.optI16Val_ref().value_unchecked());
  swap(a.optI32Val_ref().value_unchecked(), b.optI32Val_ref().value_unchecked());
  swap(a.optI64Val_ref().value_unchecked(), b.optI64Val_ref().value_unchecked());
  swap(a.optFloatVal_ref().value_unchecked(), b.optFloatVal_ref().value_unchecked());
  swap(a.optDoubleVal_ref().value_unchecked(), b.optDoubleVal_ref().value_unchecked());
  swap(a.optStringVal_ref().value_unchecked(), b.optStringVal_ref().value_unchecked());
  swap(a.optBinaryVal_ref().value_unchecked(), b.optBinaryVal_ref().value_unchecked());
  swap(a.optStructVal_ref().value_unchecked(), b.optStructVal_ref().value_unchecked());
  swap(a.optListVal_ref().value_unchecked(), b.optListVal_ref().value_unchecked());
  swap(a.optSetVal_ref().value_unchecked(), b.optSetVal_ref().value_unchecked());
  swap(a.optMapVal_ref().value_unchecked(), b.optMapVal_ref().value_unchecked());
  swap(a.unionVal_ref().value(), b.unionVal_ref().value());
  swap(a.__isset, b.__isset);
}

template void MyStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyData>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyData>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStruct,
        ::apache::thrift::type_class::variant,
        ::test::fixtures::patch::MyUnion>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyDataPatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyDataPatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyDataPatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyDataPatch";
}

MyDataPatchStruct::MyDataPatchStruct(const MyDataPatchStruct& srcObj) {
  __fbthrift_field_data1 = srcObj.__fbthrift_field_data1;
  __isset.set(0,srcObj.__isset.get(0));
  __fbthrift_field_data2 = srcObj.__fbthrift_field_data2;
  __isset.set(1,srcObj.__isset.get(1));
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter, 1>(__fbthrift_field_data1, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 2>(__fbthrift_field_data2, *this);
}

MyDataPatchStruct& MyDataPatchStruct::operator=(const MyDataPatchStruct& src) {
  MyDataPatchStruct tmp(src);
  swap(*this, tmp);
  return *this;
}

MyDataPatchStruct::MyDataPatchStruct(MyDataPatchStruct&& other) noexcept  :
    __fbthrift_field_data1(std::move(other.__fbthrift_field_data1)),
    __fbthrift_field_data2(std::move(other.__fbthrift_field_data2)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter, 1>(__fbthrift_field_data1, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 2>(__fbthrift_field_data2, *this);
}

MyDataPatchStruct& MyDataPatchStruct::operator=(FOLLY_MAYBE_UNUSED MyDataPatchStruct&& other) noexcept {
    this->__fbthrift_field_data1 = std::move(other.__fbthrift_field_data1);
    this->__fbthrift_field_data2 = std::move(other.__fbthrift_field_data2);
    __isset = other.__isset;
    return *this;
}


MyDataPatchStruct::MyDataPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::op::StringPatch data1__arg, ::apache::thrift::op::I32Patch data2__arg) :
    __fbthrift_field_data1(std::move(data1__arg)),
    __fbthrift_field_data2(std::move(data2__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter, 1>(__fbthrift_field_data1, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 2>(__fbthrift_field_data2, *this);
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
}


void MyDataPatchStruct::__fbthrift_clear() {
  // clear all fields
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::StringPatchAdapter, 1>(__fbthrift_field_data1, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::NumberPatchAdapter, 2>(__fbthrift_field_data2, *this);
  __isset = {};
}

void MyDataPatchStruct::__fbthrift_clear_terse_fields() {
}

bool MyDataPatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool MyDataPatchStruct::operator==(const MyDataPatchStruct& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::StringPatchAdapter>(lhs.__fbthrift_field_data1, rhs.__fbthrift_field_data1)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_data2, rhs.__fbthrift_field_data2)) {
    return false;
  }
  return true;
}

bool MyDataPatchStruct::operator<(const MyDataPatchStruct& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::StringPatchAdapter>(lhs.__fbthrift_field_data1, rhs.__fbthrift_field_data1)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::StringPatchAdapter>(lhs.__fbthrift_field_data1, rhs.__fbthrift_field_data1);
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_data2, rhs.__fbthrift_field_data2)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_data2, rhs.__fbthrift_field_data2);
  }
  return false;
}


void swap(MyDataPatchStruct& a, MyDataPatchStruct& b) {
  using ::std::swap;
  swap(a.data1_ref().value(), b.data1_ref().value());
  swap(a.data2_ref().value(), b.data2_ref().value());
  swap(a.__isset, b.__isset);
}

template void MyDataPatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyDataPatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyDataPatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyDataPatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyDataPatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyDataPatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyDataPatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyDataPatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyDataPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::StringPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyDataPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::I32Patch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyDataValuePatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyDataValuePatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyDataValuePatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyDataValuePatch";
}

MyDataValuePatchStruct::MyDataValuePatchStruct(const MyDataValuePatchStruct& srcObj) {
  __fbthrift_field_assign = srcObj.__fbthrift_field_assign;
  __fbthrift_field_clear = srcObj.__fbthrift_field_clear;
  __isset.set(0,srcObj.__isset.get(0));
  __fbthrift_field_patch = srcObj.__fbthrift_field_patch;
  __isset.set(1,srcObj.__isset.get(1));
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter, 3>(__fbthrift_field_patch, *this);
}

MyDataValuePatchStruct& MyDataValuePatchStruct::operator=(const MyDataValuePatchStruct& src) {
  MyDataValuePatchStruct tmp(src);
  swap(*this, tmp);
  return *this;
}

MyDataValuePatchStruct::MyDataValuePatchStruct(MyDataValuePatchStruct&& other) noexcept  :
    __fbthrift_field_assign(std::move(other.__fbthrift_field_assign)),
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_patch(std::move(other.__fbthrift_field_patch)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter, 3>(__fbthrift_field_patch, *this);
}

MyDataValuePatchStruct& MyDataValuePatchStruct::operator=(FOLLY_MAYBE_UNUSED MyDataValuePatchStruct&& other) noexcept {
    this->__fbthrift_field_assign = std::move(other.__fbthrift_field_assign);
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_patch = std::move(other.__fbthrift_field_patch);
    __isset = other.__isset;
    return *this;
}


MyDataValuePatchStruct::MyDataValuePatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData> assign__arg, bool clear__arg, ::test::fixtures::patch::MyDataPatch patch__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_patch(std::move(patch__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter, 3>(__fbthrift_field_patch, *this);
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
}


void MyDataValuePatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_assign.reset();
  this->__fbthrift_field_clear = bool();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::StructPatchAdapter, 3>(__fbthrift_field_patch, *this);
  __isset = {};
}

void MyDataValuePatchStruct::__fbthrift_clear_terse_fields() {
}

bool MyDataValuePatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool MyDataValuePatchStruct::operator==(const MyDataValuePatchStruct& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if ((!::apache::thrift::detail::pointer_equal(lhs.assign_ref(), rhs.assign_ref()))) {
    return false;
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::StructPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return false;
  }
  return true;
}

bool MyDataValuePatchStruct::operator<(const MyDataValuePatchStruct& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if ((!::apache::thrift::detail::pointer_equal(lhs.assign_ref(), rhs.assign_ref()))) {
    return ::apache::thrift::detail::pointer_less(lhs.assign_ref(), rhs.assign_ref());
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return lhs.clear_ref() < rhs.clear_ref();
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::StructPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::StructPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch);
  }
  return false;
}


void swap(MyDataValuePatchStruct& a, MyDataValuePatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_assign, b.__fbthrift_field_assign);
  swap(a.clear_ref().value(), b.clear_ref().value());
  swap(a.patch_ref().value(), b.patch_ref().value());
  swap(a.__isset, b.__isset);
}

template void MyDataValuePatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyDataValuePatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyDataValuePatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyDataValuePatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyDataValuePatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyDataValuePatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyDataValuePatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyDataValuePatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyDataValuePatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyData>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyDataValuePatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyDataPatch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::OptionalMyDataValuePatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::OptionalMyDataValuePatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* OptionalMyDataValuePatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/OptionalMyDataValuePatch";
}

OptionalMyDataValuePatchStruct::OptionalMyDataValuePatchStruct(const OptionalMyDataValuePatchStruct& srcObj) {
  __fbthrift_field_clear = srcObj.__fbthrift_field_clear;
  __isset.set(0,srcObj.__isset.get(0));
  __fbthrift_field_patch = srcObj.__fbthrift_field_patch;
  __isset.set(1,srcObj.__isset.get(1));
  __fbthrift_field_ensure = srcObj.__fbthrift_field_ensure;
  __fbthrift_field_patchAfter = srcObj.__fbthrift_field_patchAfter;
  __isset.set(2,srcObj.__isset.get(2));
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructValuePatchAdapter, 3>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructValuePatchAdapter, 5>(__fbthrift_field_patchAfter, *this);
}

OptionalMyDataValuePatchStruct& OptionalMyDataValuePatchStruct::operator=(const OptionalMyDataValuePatchStruct& src) {
  OptionalMyDataValuePatchStruct tmp(src);
  swap(*this, tmp);
  return *this;
}

OptionalMyDataValuePatchStruct::OptionalMyDataValuePatchStruct(OptionalMyDataValuePatchStruct&& other) noexcept  :
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_patch(std::move(other.__fbthrift_field_patch)),
    __fbthrift_field_ensure(std::move(other.__fbthrift_field_ensure)),
    __fbthrift_field_patchAfter(std::move(other.__fbthrift_field_patchAfter)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructValuePatchAdapter, 3>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructValuePatchAdapter, 5>(__fbthrift_field_patchAfter, *this);
}

OptionalMyDataValuePatchStruct& OptionalMyDataValuePatchStruct::operator=(FOLLY_MAYBE_UNUSED OptionalMyDataValuePatchStruct&& other) noexcept {
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_patch = std::move(other.__fbthrift_field_patch);
    this->__fbthrift_field_ensure = std::move(other.__fbthrift_field_ensure);
    this->__fbthrift_field_patchAfter = std::move(other.__fbthrift_field_patchAfter);
    __isset = other.__isset;
    return *this;
}


OptionalMyDataValuePatchStruct::OptionalMyDataValuePatchStruct(apache::thrift::FragileConstructor, bool clear__arg, ::test::fixtures::patch::MyDataValuePatch patch__arg, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyData> ensure__arg, ::test::fixtures::patch::MyDataValuePatch patchAfter__arg) :
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_patch(std::move(patch__arg)),
    __fbthrift_field_ensure(std::move(ensure__arg)),
    __fbthrift_field_patchAfter(std::move(patchAfter__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructValuePatchAdapter, 3>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructValuePatchAdapter, 5>(__fbthrift_field_patchAfter, *this);
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
}


void OptionalMyDataValuePatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_clear = bool();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::StructValuePatchAdapter, 3>(__fbthrift_field_patch, *this);
  this->__fbthrift_field_ensure.reset();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::StructValuePatchAdapter, 5>(__fbthrift_field_patchAfter, *this);
  __isset = {};
}

void OptionalMyDataValuePatchStruct::__fbthrift_clear_terse_fields() {
}

bool OptionalMyDataValuePatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool OptionalMyDataValuePatchStruct::operator==(const OptionalMyDataValuePatchStruct& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::StructValuePatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return false;
  }
  if ((!::apache::thrift::detail::pointer_equal(lhs.ensure_ref(), rhs.ensure_ref()))) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::StructValuePatchAdapter>(lhs.__fbthrift_field_patchAfter, rhs.__fbthrift_field_patchAfter)) {
    return false;
  }
  return true;
}

bool OptionalMyDataValuePatchStruct::operator<(const OptionalMyDataValuePatchStruct& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return lhs.clear_ref() < rhs.clear_ref();
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::StructValuePatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::StructValuePatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch);
  }
  if ((!::apache::thrift::detail::pointer_equal(lhs.ensure_ref(), rhs.ensure_ref()))) {
    return ::apache::thrift::detail::pointer_less(lhs.ensure_ref(), rhs.ensure_ref());
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::StructValuePatchAdapter>(lhs.__fbthrift_field_patchAfter, rhs.__fbthrift_field_patchAfter)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::StructValuePatchAdapter>(lhs.__fbthrift_field_patchAfter, rhs.__fbthrift_field_patchAfter);
  }
  return false;
}


void swap(OptionalMyDataValuePatchStruct& a, OptionalMyDataValuePatchStruct& b) {
  using ::std::swap;
  swap(a.clear_ref().value(), b.clear_ref().value());
  swap(a.patch_ref().value(), b.patch_ref().value());
  swap(a.__fbthrift_field_ensure, b.__fbthrift_field_ensure);
  swap(a.patchAfter_ref().value(), b.patchAfter_ref().value());
  swap(a.__isset, b.__isset);
}

template void OptionalMyDataValuePatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t OptionalMyDataValuePatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t OptionalMyDataValuePatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t OptionalMyDataValuePatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void OptionalMyDataValuePatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t OptionalMyDataValuePatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t OptionalMyDataValuePatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t OptionalMyDataValuePatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        OptionalMyDataValuePatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyDataValuePatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        OptionalMyDataValuePatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyData>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        OptionalMyDataValuePatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyDataValuePatch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::InnerUnionPatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::InnerUnionPatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* InnerUnionPatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/InnerUnionPatch";
}

InnerUnionPatchStruct::InnerUnionPatchStruct(const InnerUnionPatchStruct& srcObj) {
  __fbthrift_field_innerOption = srcObj.__fbthrift_field_innerOption;
  __isset.set(0,srcObj.__isset.get(0));
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::AssignPatchAdapter, 1>(__fbthrift_field_innerOption, *this);
}

InnerUnionPatchStruct& InnerUnionPatchStruct::operator=(const InnerUnionPatchStruct& src) {
  InnerUnionPatchStruct tmp(src);
  swap(*this, tmp);
  return *this;
}

InnerUnionPatchStruct::InnerUnionPatchStruct(InnerUnionPatchStruct&& other) noexcept  :
    __fbthrift_field_innerOption(std::move(other.__fbthrift_field_innerOption)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::AssignPatchAdapter, 1>(__fbthrift_field_innerOption, *this);
}

InnerUnionPatchStruct& InnerUnionPatchStruct::operator=(FOLLY_MAYBE_UNUSED InnerUnionPatchStruct&& other) noexcept {
    this->__fbthrift_field_innerOption = std::move(other.__fbthrift_field_innerOption);
    __isset = other.__isset;
    return *this;
}


InnerUnionPatchStruct::InnerUnionPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::op::BinaryPatch innerOption__arg) :
    __fbthrift_field_innerOption(std::move(innerOption__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::AssignPatchAdapter, 1>(__fbthrift_field_innerOption, *this);
  __isset.set(folly::index_constant<0>(), true);
}


void InnerUnionPatchStruct::__fbthrift_clear() {
  // clear all fields
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::AssignPatchAdapter, 1>(__fbthrift_field_innerOption, *this);
  __isset = {};
}

void InnerUnionPatchStruct::__fbthrift_clear_terse_fields() {
}

bool InnerUnionPatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool InnerUnionPatchStruct::operator==(const InnerUnionPatchStruct& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::AssignPatchAdapter>(lhs.__fbthrift_field_innerOption, rhs.__fbthrift_field_innerOption)) {
    return false;
  }
  return true;
}

bool InnerUnionPatchStruct::operator<(const InnerUnionPatchStruct& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::AssignPatchAdapter>(lhs.__fbthrift_field_innerOption, rhs.__fbthrift_field_innerOption)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::AssignPatchAdapter>(lhs.__fbthrift_field_innerOption, rhs.__fbthrift_field_innerOption);
  }
  return false;
}


void swap(InnerUnionPatchStruct& a, InnerUnionPatchStruct& b) {
  using ::std::swap;
  swap(a.innerOption_ref().value(), b.innerOption_ref().value());
  swap(a.__isset, b.__isset);
}

template void InnerUnionPatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t InnerUnionPatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t InnerUnionPatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t InnerUnionPatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void InnerUnionPatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t InnerUnionPatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t InnerUnionPatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t InnerUnionPatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        InnerUnionPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::BinaryPatch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::InnerUnionValuePatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::InnerUnionValuePatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* InnerUnionValuePatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/InnerUnionValuePatch";
}

InnerUnionValuePatchStruct::InnerUnionValuePatchStruct(const InnerUnionValuePatchStruct& srcObj) {
  __fbthrift_field_clear = srcObj.__fbthrift_field_clear;
  __isset.set(0,srcObj.__isset.get(0));
  __fbthrift_field_patch = srcObj.__fbthrift_field_patch;
  __isset.set(1,srcObj.__isset.get(1));
  __fbthrift_field_ensure = srcObj.__fbthrift_field_ensure;
  __isset.set(2,srcObj.__isset.get(2));
  __fbthrift_field_patchAfter = srcObj.__fbthrift_field_patchAfter;
  __isset.set(3,srcObj.__isset.get(3));
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionPatchAdapter, 3>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionPatchAdapter, 5>(__fbthrift_field_patchAfter, *this);
}

InnerUnionValuePatchStruct& InnerUnionValuePatchStruct::operator=(const InnerUnionValuePatchStruct& src) {
  InnerUnionValuePatchStruct tmp(src);
  swap(*this, tmp);
  return *this;
}

InnerUnionValuePatchStruct::InnerUnionValuePatchStruct(InnerUnionValuePatchStruct&& other) noexcept  :
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_patch(std::move(other.__fbthrift_field_patch)),
    __fbthrift_field_ensure(std::move(other.__fbthrift_field_ensure)),
    __fbthrift_field_patchAfter(std::move(other.__fbthrift_field_patchAfter)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionPatchAdapter, 3>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionPatchAdapter, 5>(__fbthrift_field_patchAfter, *this);
}

InnerUnionValuePatchStruct& InnerUnionValuePatchStruct::operator=(FOLLY_MAYBE_UNUSED InnerUnionValuePatchStruct&& other) noexcept {
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_patch = std::move(other.__fbthrift_field_patch);
    this->__fbthrift_field_ensure = std::move(other.__fbthrift_field_ensure);
    this->__fbthrift_field_patchAfter = std::move(other.__fbthrift_field_patchAfter);
    __isset = other.__isset;
    return *this;
}


InnerUnionValuePatchStruct::InnerUnionValuePatchStruct(apache::thrift::FragileConstructor, bool clear__arg, ::test::fixtures::patch::InnerUnionPatch patch__arg, ::test::fixtures::patch::InnerUnion ensure__arg, ::test::fixtures::patch::InnerUnionPatch patchAfter__arg) :
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_patch(std::move(patch__arg)),
    __fbthrift_field_ensure(std::move(ensure__arg)),
    __fbthrift_field_patchAfter(std::move(patchAfter__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionPatchAdapter, 3>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionPatchAdapter, 5>(__fbthrift_field_patchAfter, *this);
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
}


void InnerUnionValuePatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_clear = bool();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::UnionPatchAdapter, 3>(__fbthrift_field_patch, *this);
  ::apache::thrift::clear(this->__fbthrift_field_ensure);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::UnionPatchAdapter, 5>(__fbthrift_field_patchAfter, *this);
  __isset = {};
}

void InnerUnionValuePatchStruct::__fbthrift_clear_terse_fields() {
}

bool InnerUnionValuePatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool InnerUnionValuePatchStruct::operator==(const InnerUnionValuePatchStruct& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::UnionPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return false;
  }
  if (!(lhs.ensure_ref() == rhs.ensure_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::UnionPatchAdapter>(lhs.__fbthrift_field_patchAfter, rhs.__fbthrift_field_patchAfter)) {
    return false;
  }
  return true;
}

bool InnerUnionValuePatchStruct::operator<(const InnerUnionValuePatchStruct& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return lhs.clear_ref() < rhs.clear_ref();
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::UnionPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::UnionPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch);
  }
  if (!(lhs.ensure_ref() == rhs.ensure_ref())) {
    return lhs.ensure_ref() < rhs.ensure_ref();
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::UnionPatchAdapter>(lhs.__fbthrift_field_patchAfter, rhs.__fbthrift_field_patchAfter)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::UnionPatchAdapter>(lhs.__fbthrift_field_patchAfter, rhs.__fbthrift_field_patchAfter);
  }
  return false;
}

const ::test::fixtures::patch::InnerUnion& InnerUnionValuePatchStruct::get_ensure() const& {
  return __fbthrift_field_ensure;
}

::test::fixtures::patch::InnerUnion InnerUnionValuePatchStruct::get_ensure() && {
  return std::move(__fbthrift_field_ensure);
}


void swap(InnerUnionValuePatchStruct& a, InnerUnionValuePatchStruct& b) {
  using ::std::swap;
  swap(a.clear_ref().value(), b.clear_ref().value());
  swap(a.patch_ref().value(), b.patch_ref().value());
  swap(a.ensure_ref().value(), b.ensure_ref().value());
  swap(a.patchAfter_ref().value(), b.patchAfter_ref().value());
  swap(a.__isset, b.__isset);
}

template void InnerUnionValuePatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t InnerUnionValuePatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t InnerUnionValuePatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t InnerUnionValuePatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void InnerUnionValuePatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t InnerUnionValuePatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t InnerUnionValuePatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t InnerUnionValuePatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        InnerUnionValuePatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::InnerUnionPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        InnerUnionValuePatchStruct,
        ::apache::thrift::type_class::variant,
        ::test::fixtures::patch::InnerUnion>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        InnerUnionValuePatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::InnerUnionPatch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::OptionalInnerUnionValuePatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::OptionalInnerUnionValuePatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* OptionalInnerUnionValuePatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/OptionalInnerUnionValuePatch";
}

OptionalInnerUnionValuePatchStruct::OptionalInnerUnionValuePatchStruct(const OptionalInnerUnionValuePatchStruct& srcObj) {
  __fbthrift_field_clear = srcObj.__fbthrift_field_clear;
  __isset.set(0,srcObj.__isset.get(0));
  __fbthrift_field_patch = srcObj.__fbthrift_field_patch;
  __isset.set(1,srcObj.__isset.get(1));
  __fbthrift_field_ensure = srcObj.__fbthrift_field_ensure;
  __fbthrift_field_patchAfter = srcObj.__fbthrift_field_patchAfter;
  __isset.set(2,srcObj.__isset.get(2));
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionValuePatchAdapter, 3>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionValuePatchAdapter, 5>(__fbthrift_field_patchAfter, *this);
}

OptionalInnerUnionValuePatchStruct& OptionalInnerUnionValuePatchStruct::operator=(const OptionalInnerUnionValuePatchStruct& src) {
  OptionalInnerUnionValuePatchStruct tmp(src);
  swap(*this, tmp);
  return *this;
}

OptionalInnerUnionValuePatchStruct::OptionalInnerUnionValuePatchStruct(OptionalInnerUnionValuePatchStruct&& other) noexcept  :
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_patch(std::move(other.__fbthrift_field_patch)),
    __fbthrift_field_ensure(std::move(other.__fbthrift_field_ensure)),
    __fbthrift_field_patchAfter(std::move(other.__fbthrift_field_patchAfter)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionValuePatchAdapter, 3>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionValuePatchAdapter, 5>(__fbthrift_field_patchAfter, *this);
}

OptionalInnerUnionValuePatchStruct& OptionalInnerUnionValuePatchStruct::operator=(FOLLY_MAYBE_UNUSED OptionalInnerUnionValuePatchStruct&& other) noexcept {
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_patch = std::move(other.__fbthrift_field_patch);
    this->__fbthrift_field_ensure = std::move(other.__fbthrift_field_ensure);
    this->__fbthrift_field_patchAfter = std::move(other.__fbthrift_field_patchAfter);
    __isset = other.__isset;
    return *this;
}


OptionalInnerUnionValuePatchStruct::OptionalInnerUnionValuePatchStruct(apache::thrift::FragileConstructor, bool clear__arg, ::test::fixtures::patch::InnerUnionValuePatch patch__arg, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::InnerUnion> ensure__arg, ::test::fixtures::patch::InnerUnionValuePatch patchAfter__arg) :
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_patch(std::move(patch__arg)),
    __fbthrift_field_ensure(std::move(ensure__arg)),
    __fbthrift_field_patchAfter(std::move(patchAfter__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionValuePatchAdapter, 3>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionValuePatchAdapter, 5>(__fbthrift_field_patchAfter, *this);
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
}


void OptionalInnerUnionValuePatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_clear = bool();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::UnionValuePatchAdapter, 3>(__fbthrift_field_patch, *this);
  this->__fbthrift_field_ensure.reset();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::UnionValuePatchAdapter, 5>(__fbthrift_field_patchAfter, *this);
  __isset = {};
}

void OptionalInnerUnionValuePatchStruct::__fbthrift_clear_terse_fields() {
}

bool OptionalInnerUnionValuePatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool OptionalInnerUnionValuePatchStruct::operator==(const OptionalInnerUnionValuePatchStruct& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::UnionValuePatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return false;
  }
  if ((!::apache::thrift::detail::pointer_equal(lhs.ensure_ref(), rhs.ensure_ref()))) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::UnionValuePatchAdapter>(lhs.__fbthrift_field_patchAfter, rhs.__fbthrift_field_patchAfter)) {
    return false;
  }
  return true;
}

bool OptionalInnerUnionValuePatchStruct::operator<(const OptionalInnerUnionValuePatchStruct& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return lhs.clear_ref() < rhs.clear_ref();
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::UnionValuePatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::UnionValuePatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch);
  }
  if ((!::apache::thrift::detail::pointer_equal(lhs.ensure_ref(), rhs.ensure_ref()))) {
    return ::apache::thrift::detail::pointer_less(lhs.ensure_ref(), rhs.ensure_ref());
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::UnionValuePatchAdapter>(lhs.__fbthrift_field_patchAfter, rhs.__fbthrift_field_patchAfter)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::UnionValuePatchAdapter>(lhs.__fbthrift_field_patchAfter, rhs.__fbthrift_field_patchAfter);
  }
  return false;
}


void swap(OptionalInnerUnionValuePatchStruct& a, OptionalInnerUnionValuePatchStruct& b) {
  using ::std::swap;
  swap(a.clear_ref().value(), b.clear_ref().value());
  swap(a.patch_ref().value(), b.patch_ref().value());
  swap(a.__fbthrift_field_ensure, b.__fbthrift_field_ensure);
  swap(a.patchAfter_ref().value(), b.patchAfter_ref().value());
  swap(a.__isset, b.__isset);
}

template void OptionalInnerUnionValuePatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t OptionalInnerUnionValuePatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t OptionalInnerUnionValuePatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t OptionalInnerUnionValuePatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void OptionalInnerUnionValuePatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t OptionalInnerUnionValuePatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t OptionalInnerUnionValuePatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t OptionalInnerUnionValuePatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        OptionalInnerUnionValuePatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::InnerUnionValuePatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        OptionalInnerUnionValuePatchStruct,
        ::apache::thrift::type_class::variant,
        ::test::fixtures::patch::InnerUnion>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        OptionalInnerUnionValuePatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::InnerUnionValuePatch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyUnionPatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyUnionPatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyUnionPatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyUnionPatch";
}

MyUnionPatchStruct::MyUnionPatchStruct(const MyUnionPatchStruct& srcObj) {
  __fbthrift_field_option1 = srcObj.__fbthrift_field_option1;
  __isset.set(0,srcObj.__isset.get(0));
  __fbthrift_field_option2 = srcObj.__fbthrift_field_option2;
  __isset.set(1,srcObj.__isset.get(1));
  __fbthrift_field_option3 = srcObj.__fbthrift_field_option3;
  __isset.set(2,srcObj.__isset.get(2));
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter, 1>(__fbthrift_field_option1, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 2>(__fbthrift_field_option2, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionValuePatchAdapter, 3>(__fbthrift_field_option3, *this);
}

MyUnionPatchStruct& MyUnionPatchStruct::operator=(const MyUnionPatchStruct& src) {
  MyUnionPatchStruct tmp(src);
  swap(*this, tmp);
  return *this;
}

MyUnionPatchStruct::MyUnionPatchStruct(MyUnionPatchStruct&& other) noexcept  :
    __fbthrift_field_option1(std::move(other.__fbthrift_field_option1)),
    __fbthrift_field_option2(std::move(other.__fbthrift_field_option2)),
    __fbthrift_field_option3(std::move(other.__fbthrift_field_option3)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter, 1>(__fbthrift_field_option1, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 2>(__fbthrift_field_option2, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionValuePatchAdapter, 3>(__fbthrift_field_option3, *this);
}

MyUnionPatchStruct& MyUnionPatchStruct::operator=(FOLLY_MAYBE_UNUSED MyUnionPatchStruct&& other) noexcept {
    this->__fbthrift_field_option1 = std::move(other.__fbthrift_field_option1);
    this->__fbthrift_field_option2 = std::move(other.__fbthrift_field_option2);
    this->__fbthrift_field_option3 = std::move(other.__fbthrift_field_option3);
    __isset = other.__isset;
    return *this;
}


MyUnionPatchStruct::MyUnionPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::op::StringPatch option1__arg, ::apache::thrift::op::I32Patch option2__arg, ::test::fixtures::patch::InnerUnionValuePatch option3__arg) :
    __fbthrift_field_option1(std::move(option1__arg)),
    __fbthrift_field_option2(std::move(option2__arg)),
    __fbthrift_field_option3(std::move(option3__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter, 1>(__fbthrift_field_option1, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 2>(__fbthrift_field_option2, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionValuePatchAdapter, 3>(__fbthrift_field_option3, *this);
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
}


void MyUnionPatchStruct::__fbthrift_clear() {
  // clear all fields
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::StringPatchAdapter, 1>(__fbthrift_field_option1, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::NumberPatchAdapter, 2>(__fbthrift_field_option2, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::UnionValuePatchAdapter, 3>(__fbthrift_field_option3, *this);
  __isset = {};
}

void MyUnionPatchStruct::__fbthrift_clear_terse_fields() {
}

bool MyUnionPatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool MyUnionPatchStruct::operator==(const MyUnionPatchStruct& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::StringPatchAdapter>(lhs.__fbthrift_field_option1, rhs.__fbthrift_field_option1)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_option2, rhs.__fbthrift_field_option2)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::UnionValuePatchAdapter>(lhs.__fbthrift_field_option3, rhs.__fbthrift_field_option3)) {
    return false;
  }
  return true;
}

bool MyUnionPatchStruct::operator<(const MyUnionPatchStruct& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::StringPatchAdapter>(lhs.__fbthrift_field_option1, rhs.__fbthrift_field_option1)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::StringPatchAdapter>(lhs.__fbthrift_field_option1, rhs.__fbthrift_field_option1);
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_option2, rhs.__fbthrift_field_option2)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_option2, rhs.__fbthrift_field_option2);
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::UnionValuePatchAdapter>(lhs.__fbthrift_field_option3, rhs.__fbthrift_field_option3)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::UnionValuePatchAdapter>(lhs.__fbthrift_field_option3, rhs.__fbthrift_field_option3);
  }
  return false;
}


void swap(MyUnionPatchStruct& a, MyUnionPatchStruct& b) {
  using ::std::swap;
  swap(a.option1_ref().value(), b.option1_ref().value());
  swap(a.option2_ref().value(), b.option2_ref().value());
  swap(a.option3_ref().value(), b.option3_ref().value());
  swap(a.__isset, b.__isset);
}

template void MyUnionPatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyUnionPatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyUnionPatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyUnionPatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyUnionPatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyUnionPatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyUnionPatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyUnionPatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyUnionPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::StringPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyUnionPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::I32Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyUnionPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::InnerUnionValuePatch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyUnionValuePatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyUnionValuePatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyUnionValuePatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyUnionValuePatch";
}

MyUnionValuePatchStruct::MyUnionValuePatchStruct(const MyUnionValuePatchStruct& srcObj) {
  __fbthrift_field_clear = srcObj.__fbthrift_field_clear;
  __isset.set(0,srcObj.__isset.get(0));
  __fbthrift_field_patch = srcObj.__fbthrift_field_patch;
  __isset.set(1,srcObj.__isset.get(1));
  __fbthrift_field_ensure = srcObj.__fbthrift_field_ensure;
  __isset.set(2,srcObj.__isset.get(2));
  __fbthrift_field_patchAfter = srcObj.__fbthrift_field_patchAfter;
  __isset.set(3,srcObj.__isset.get(3));
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionPatchAdapter, 3>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionPatchAdapter, 5>(__fbthrift_field_patchAfter, *this);
}

MyUnionValuePatchStruct& MyUnionValuePatchStruct::operator=(const MyUnionValuePatchStruct& src) {
  MyUnionValuePatchStruct tmp(src);
  swap(*this, tmp);
  return *this;
}

MyUnionValuePatchStruct::MyUnionValuePatchStruct(MyUnionValuePatchStruct&& other) noexcept  :
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_patch(std::move(other.__fbthrift_field_patch)),
    __fbthrift_field_ensure(std::move(other.__fbthrift_field_ensure)),
    __fbthrift_field_patchAfter(std::move(other.__fbthrift_field_patchAfter)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionPatchAdapter, 3>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionPatchAdapter, 5>(__fbthrift_field_patchAfter, *this);
}

MyUnionValuePatchStruct& MyUnionValuePatchStruct::operator=(FOLLY_MAYBE_UNUSED MyUnionValuePatchStruct&& other) noexcept {
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_patch = std::move(other.__fbthrift_field_patch);
    this->__fbthrift_field_ensure = std::move(other.__fbthrift_field_ensure);
    this->__fbthrift_field_patchAfter = std::move(other.__fbthrift_field_patchAfter);
    __isset = other.__isset;
    return *this;
}


MyUnionValuePatchStruct::MyUnionValuePatchStruct(apache::thrift::FragileConstructor, bool clear__arg, ::test::fixtures::patch::MyUnionPatch patch__arg, ::test::fixtures::patch::MyUnion ensure__arg, ::test::fixtures::patch::MyUnionPatch patchAfter__arg) :
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_patch(std::move(patch__arg)),
    __fbthrift_field_ensure(std::move(ensure__arg)),
    __fbthrift_field_patchAfter(std::move(patchAfter__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionPatchAdapter, 3>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionPatchAdapter, 5>(__fbthrift_field_patchAfter, *this);
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
}


void MyUnionValuePatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_clear = bool();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::UnionPatchAdapter, 3>(__fbthrift_field_patch, *this);
  ::apache::thrift::clear(this->__fbthrift_field_ensure);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::UnionPatchAdapter, 5>(__fbthrift_field_patchAfter, *this);
  __isset = {};
}

void MyUnionValuePatchStruct::__fbthrift_clear_terse_fields() {
}

bool MyUnionValuePatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool MyUnionValuePatchStruct::operator==(const MyUnionValuePatchStruct& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::UnionPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return false;
  }
  if (!(lhs.ensure_ref() == rhs.ensure_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::UnionPatchAdapter>(lhs.__fbthrift_field_patchAfter, rhs.__fbthrift_field_patchAfter)) {
    return false;
  }
  return true;
}

bool MyUnionValuePatchStruct::operator<(const MyUnionValuePatchStruct& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return lhs.clear_ref() < rhs.clear_ref();
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::UnionPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::UnionPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch);
  }
  if (!(lhs.ensure_ref() == rhs.ensure_ref())) {
    return lhs.ensure_ref() < rhs.ensure_ref();
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::UnionPatchAdapter>(lhs.__fbthrift_field_patchAfter, rhs.__fbthrift_field_patchAfter)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::UnionPatchAdapter>(lhs.__fbthrift_field_patchAfter, rhs.__fbthrift_field_patchAfter);
  }
  return false;
}

const ::test::fixtures::patch::MyUnion& MyUnionValuePatchStruct::get_ensure() const& {
  return __fbthrift_field_ensure;
}

::test::fixtures::patch::MyUnion MyUnionValuePatchStruct::get_ensure() && {
  return std::move(__fbthrift_field_ensure);
}


void swap(MyUnionValuePatchStruct& a, MyUnionValuePatchStruct& b) {
  using ::std::swap;
  swap(a.clear_ref().value(), b.clear_ref().value());
  swap(a.patch_ref().value(), b.patch_ref().value());
  swap(a.ensure_ref().value(), b.ensure_ref().value());
  swap(a.patchAfter_ref().value(), b.patchAfter_ref().value());
  swap(a.__isset, b.__isset);
}

template void MyUnionValuePatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyUnionValuePatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyUnionValuePatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyUnionValuePatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyUnionValuePatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyUnionValuePatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyUnionValuePatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyUnionValuePatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyUnionValuePatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyUnionPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyUnionValuePatchStruct,
        ::apache::thrift::type_class::variant,
        ::test::fixtures::patch::MyUnion>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyUnionValuePatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyUnionPatch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::OptionalMyUnionValuePatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::OptionalMyUnionValuePatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* OptionalMyUnionValuePatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/OptionalMyUnionValuePatch";
}

OptionalMyUnionValuePatchStruct::OptionalMyUnionValuePatchStruct(const OptionalMyUnionValuePatchStruct& srcObj) {
  __fbthrift_field_clear = srcObj.__fbthrift_field_clear;
  __isset.set(0,srcObj.__isset.get(0));
  __fbthrift_field_patch = srcObj.__fbthrift_field_patch;
  __isset.set(1,srcObj.__isset.get(1));
  __fbthrift_field_ensure = srcObj.__fbthrift_field_ensure;
  __fbthrift_field_patchAfter = srcObj.__fbthrift_field_patchAfter;
  __isset.set(2,srcObj.__isset.get(2));
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionValuePatchAdapter, 3>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionValuePatchAdapter, 5>(__fbthrift_field_patchAfter, *this);
}

OptionalMyUnionValuePatchStruct& OptionalMyUnionValuePatchStruct::operator=(const OptionalMyUnionValuePatchStruct& src) {
  OptionalMyUnionValuePatchStruct tmp(src);
  swap(*this, tmp);
  return *this;
}

OptionalMyUnionValuePatchStruct::OptionalMyUnionValuePatchStruct(OptionalMyUnionValuePatchStruct&& other) noexcept  :
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_patch(std::move(other.__fbthrift_field_patch)),
    __fbthrift_field_ensure(std::move(other.__fbthrift_field_ensure)),
    __fbthrift_field_patchAfter(std::move(other.__fbthrift_field_patchAfter)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionValuePatchAdapter, 3>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionValuePatchAdapter, 5>(__fbthrift_field_patchAfter, *this);
}

OptionalMyUnionValuePatchStruct& OptionalMyUnionValuePatchStruct::operator=(FOLLY_MAYBE_UNUSED OptionalMyUnionValuePatchStruct&& other) noexcept {
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_patch = std::move(other.__fbthrift_field_patch);
    this->__fbthrift_field_ensure = std::move(other.__fbthrift_field_ensure);
    this->__fbthrift_field_patchAfter = std::move(other.__fbthrift_field_patchAfter);
    __isset = other.__isset;
    return *this;
}


OptionalMyUnionValuePatchStruct::OptionalMyUnionValuePatchStruct(apache::thrift::FragileConstructor, bool clear__arg, ::test::fixtures::patch::MyUnionValuePatch patch__arg, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyUnion> ensure__arg, ::test::fixtures::patch::MyUnionValuePatch patchAfter__arg) :
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_patch(std::move(patch__arg)),
    __fbthrift_field_ensure(std::move(ensure__arg)),
    __fbthrift_field_patchAfter(std::move(patchAfter__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionValuePatchAdapter, 3>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionValuePatchAdapter, 5>(__fbthrift_field_patchAfter, *this);
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
}


void OptionalMyUnionValuePatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_clear = bool();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::UnionValuePatchAdapter, 3>(__fbthrift_field_patch, *this);
  this->__fbthrift_field_ensure.reset();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::UnionValuePatchAdapter, 5>(__fbthrift_field_patchAfter, *this);
  __isset = {};
}

void OptionalMyUnionValuePatchStruct::__fbthrift_clear_terse_fields() {
}

bool OptionalMyUnionValuePatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool OptionalMyUnionValuePatchStruct::operator==(const OptionalMyUnionValuePatchStruct& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::UnionValuePatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return false;
  }
  if ((!::apache::thrift::detail::pointer_equal(lhs.ensure_ref(), rhs.ensure_ref()))) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::UnionValuePatchAdapter>(lhs.__fbthrift_field_patchAfter, rhs.__fbthrift_field_patchAfter)) {
    return false;
  }
  return true;
}

bool OptionalMyUnionValuePatchStruct::operator<(const OptionalMyUnionValuePatchStruct& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return lhs.clear_ref() < rhs.clear_ref();
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::UnionValuePatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::UnionValuePatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch);
  }
  if ((!::apache::thrift::detail::pointer_equal(lhs.ensure_ref(), rhs.ensure_ref()))) {
    return ::apache::thrift::detail::pointer_less(lhs.ensure_ref(), rhs.ensure_ref());
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::UnionValuePatchAdapter>(lhs.__fbthrift_field_patchAfter, rhs.__fbthrift_field_patchAfter)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::UnionValuePatchAdapter>(lhs.__fbthrift_field_patchAfter, rhs.__fbthrift_field_patchAfter);
  }
  return false;
}


void swap(OptionalMyUnionValuePatchStruct& a, OptionalMyUnionValuePatchStruct& b) {
  using ::std::swap;
  swap(a.clear_ref().value(), b.clear_ref().value());
  swap(a.patch_ref().value(), b.patch_ref().value());
  swap(a.__fbthrift_field_ensure, b.__fbthrift_field_ensure);
  swap(a.patchAfter_ref().value(), b.patchAfter_ref().value());
  swap(a.__isset, b.__isset);
}

template void OptionalMyUnionValuePatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t OptionalMyUnionValuePatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t OptionalMyUnionValuePatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t OptionalMyUnionValuePatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void OptionalMyUnionValuePatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t OptionalMyUnionValuePatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t OptionalMyUnionValuePatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t OptionalMyUnionValuePatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        OptionalMyUnionValuePatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyUnionValuePatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        OptionalMyUnionValuePatchStruct,
        ::apache::thrift::type_class::variant,
        ::test::fixtures::patch::MyUnion>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        OptionalMyUnionValuePatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyUnionValuePatch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyStructField21PatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyStructField21PatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyStructField21PatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyStructField21Patch";
}

MyStructField21PatchStruct::MyStructField21PatchStruct(const MyStructField21PatchStruct&) = default;
MyStructField21PatchStruct& MyStructField21PatchStruct::operator=(const MyStructField21PatchStruct&) = default;
MyStructField21PatchStruct::MyStructField21PatchStruct(MyStructField21PatchStruct&& other) noexcept  :
    __fbthrift_field_assign(std::move(other.__fbthrift_field_assign)),
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_prepend(std::move(other.__fbthrift_field_prepend)),
    __fbthrift_field_append(std::move(other.__fbthrift_field_append)),
    __isset(other.__isset) {
}

MyStructField21PatchStruct& MyStructField21PatchStruct::operator=(FOLLY_MAYBE_UNUSED MyStructField21PatchStruct&& other) noexcept {
    this->__fbthrift_field_assign = std::move(other.__fbthrift_field_assign);
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_prepend = std::move(other.__fbthrift_field_prepend);
    this->__fbthrift_field_append = std::move(other.__fbthrift_field_append);
    __isset = other.__isset;
    return *this;
}


MyStructField21PatchStruct::MyStructField21PatchStruct(apache::thrift::FragileConstructor, ::std::vector<::std::int16_t> assign__arg, bool clear__arg, ::std::vector<::std::int16_t> prepend__arg, ::std::vector<::std::int16_t> append__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_prepend(std::move(prepend__arg)),
    __fbthrift_field_append(std::move(append__arg)) {
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
}


void MyStructField21PatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_assign.clear();
  this->__fbthrift_field_clear = bool();
  this->__fbthrift_field_prepend.clear();
  this->__fbthrift_field_append.clear();
  __isset = {};
}

void MyStructField21PatchStruct::__fbthrift_clear_terse_fields() {
}

bool MyStructField21PatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool MyStructField21PatchStruct::operator==(const MyStructField21PatchStruct& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.assign_ref() == rhs.assign_ref())) {
    return false;
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return false;
  }
  if (!(lhs.prepend_ref() == rhs.prepend_ref())) {
    return false;
  }
  if (!(lhs.append_ref() == rhs.append_ref())) {
    return false;
  }
  return true;
}

bool MyStructField21PatchStruct::operator<(const MyStructField21PatchStruct& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.assign_ref() == rhs.assign_ref())) {
    return lhs.assign_ref() < rhs.assign_ref();
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return lhs.clear_ref() < rhs.clear_ref();
  }
  if (!(lhs.prepend_ref() == rhs.prepend_ref())) {
    return lhs.prepend_ref() < rhs.prepend_ref();
  }
  if (!(lhs.append_ref() == rhs.append_ref())) {
    return lhs.append_ref() < rhs.append_ref();
  }
  return false;
}

const ::std::vector<::std::int16_t>* MyStructField21PatchStruct::get_assign() const& {
  return assign_ref().has_value() ? std::addressof(__fbthrift_field_assign) : nullptr;
}

::std::vector<::std::int16_t>* MyStructField21PatchStruct::get_assign() & {
  return assign_ref().has_value() ? std::addressof(__fbthrift_field_assign) : nullptr;
}

const ::std::vector<::std::int16_t>& MyStructField21PatchStruct::get_prepend() const& {
  return __fbthrift_field_prepend;
}

::std::vector<::std::int16_t> MyStructField21PatchStruct::get_prepend() && {
  return std::move(__fbthrift_field_prepend);
}

const ::std::vector<::std::int16_t>& MyStructField21PatchStruct::get_append() const& {
  return __fbthrift_field_append;
}

::std::vector<::std::int16_t> MyStructField21PatchStruct::get_append() && {
  return std::move(__fbthrift_field_append);
}


void swap(MyStructField21PatchStruct& a, MyStructField21PatchStruct& b) {
  using ::std::swap;
  swap(a.assign_ref().value_unchecked(), b.assign_ref().value_unchecked());
  swap(a.clear_ref().value(), b.clear_ref().value());
  swap(a.prepend_ref().value(), b.prepend_ref().value());
  swap(a.append_ref().value(), b.append_ref().value());
  swap(a.__isset, b.__isset);
}

template void MyStructField21PatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyStructField21PatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyStructField21PatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStructField21PatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyStructField21PatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStructField21PatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStructField21PatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStructField21PatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::OptionalMyStructField21PatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::OptionalMyStructField21PatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* OptionalMyStructField21PatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/OptionalMyStructField21Patch";
}

OptionalMyStructField21PatchStruct::OptionalMyStructField21PatchStruct(const OptionalMyStructField21PatchStruct& srcObj) {
  __fbthrift_field_clear = srcObj.__fbthrift_field_clear;
  __isset.set(0,srcObj.__isset.get(0));
  __fbthrift_field_patch = srcObj.__fbthrift_field_patch;
  __isset.set(1,srcObj.__isset.get(1));
  __fbthrift_field_ensure = srcObj.__fbthrift_field_ensure;
  __isset.set(2,srcObj.__isset.get(2));
  __fbthrift_field_patchAfter = srcObj.__fbthrift_field_patchAfter;
  __isset.set(3,srcObj.__isset.get(3));
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::ListPatchAdapter, 3>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::ListPatchAdapter, 5>(__fbthrift_field_patchAfter, *this);
}

OptionalMyStructField21PatchStruct& OptionalMyStructField21PatchStruct::operator=(const OptionalMyStructField21PatchStruct& src) {
  OptionalMyStructField21PatchStruct tmp(src);
  swap(*this, tmp);
  return *this;
}

OptionalMyStructField21PatchStruct::OptionalMyStructField21PatchStruct(OptionalMyStructField21PatchStruct&& other) noexcept  :
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_patch(std::move(other.__fbthrift_field_patch)),
    __fbthrift_field_ensure(std::move(other.__fbthrift_field_ensure)),
    __fbthrift_field_patchAfter(std::move(other.__fbthrift_field_patchAfter)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::ListPatchAdapter, 3>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::ListPatchAdapter, 5>(__fbthrift_field_patchAfter, *this);
}

OptionalMyStructField21PatchStruct& OptionalMyStructField21PatchStruct::operator=(FOLLY_MAYBE_UNUSED OptionalMyStructField21PatchStruct&& other) noexcept {
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_patch = std::move(other.__fbthrift_field_patch);
    this->__fbthrift_field_ensure = std::move(other.__fbthrift_field_ensure);
    this->__fbthrift_field_patchAfter = std::move(other.__fbthrift_field_patchAfter);
    __isset = other.__isset;
    return *this;
}


OptionalMyStructField21PatchStruct::OptionalMyStructField21PatchStruct(apache::thrift::FragileConstructor, bool clear__arg, ::test::fixtures::patch::MyStructField21Patch patch__arg, ::std::vector<::std::int16_t> ensure__arg, ::test::fixtures::patch::MyStructField21Patch patchAfter__arg) :
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_patch(std::move(patch__arg)),
    __fbthrift_field_ensure(std::move(ensure__arg)),
    __fbthrift_field_patchAfter(std::move(patchAfter__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::ListPatchAdapter, 3>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::ListPatchAdapter, 5>(__fbthrift_field_patchAfter, *this);
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
}


void OptionalMyStructField21PatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_clear = bool();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::ListPatchAdapter, 3>(__fbthrift_field_patch, *this);
  this->__fbthrift_field_ensure.clear();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::ListPatchAdapter, 5>(__fbthrift_field_patchAfter, *this);
  __isset = {};
}

void OptionalMyStructField21PatchStruct::__fbthrift_clear_terse_fields() {
}

bool OptionalMyStructField21PatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool OptionalMyStructField21PatchStruct::operator==(const OptionalMyStructField21PatchStruct& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::ListPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return false;
  }
  if (!(lhs.ensure_ref() == rhs.ensure_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::ListPatchAdapter>(lhs.__fbthrift_field_patchAfter, rhs.__fbthrift_field_patchAfter)) {
    return false;
  }
  return true;
}

bool OptionalMyStructField21PatchStruct::operator<(const OptionalMyStructField21PatchStruct& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return lhs.clear_ref() < rhs.clear_ref();
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::ListPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::ListPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch);
  }
  if (!(lhs.ensure_ref() == rhs.ensure_ref())) {
    return lhs.ensure_ref() < rhs.ensure_ref();
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::ListPatchAdapter>(lhs.__fbthrift_field_patchAfter, rhs.__fbthrift_field_patchAfter)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::ListPatchAdapter>(lhs.__fbthrift_field_patchAfter, rhs.__fbthrift_field_patchAfter);
  }
  return false;
}

const ::std::vector<::std::int16_t>* OptionalMyStructField21PatchStruct::get_ensure() const& {
  return ensure_ref().has_value() ? std::addressof(__fbthrift_field_ensure) : nullptr;
}

::std::vector<::std::int16_t>* OptionalMyStructField21PatchStruct::get_ensure() & {
  return ensure_ref().has_value() ? std::addressof(__fbthrift_field_ensure) : nullptr;
}


void swap(OptionalMyStructField21PatchStruct& a, OptionalMyStructField21PatchStruct& b) {
  using ::std::swap;
  swap(a.clear_ref().value(), b.clear_ref().value());
  swap(a.patch_ref().value(), b.patch_ref().value());
  swap(a.ensure_ref().value_unchecked(), b.ensure_ref().value_unchecked());
  swap(a.patchAfter_ref().value(), b.patchAfter_ref().value());
  swap(a.__isset, b.__isset);
}

template void OptionalMyStructField21PatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t OptionalMyStructField21PatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t OptionalMyStructField21PatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t OptionalMyStructField21PatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void OptionalMyStructField21PatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t OptionalMyStructField21PatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t OptionalMyStructField21PatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t OptionalMyStructField21PatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        OptionalMyStructField21PatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyStructField21Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        OptionalMyStructField21PatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyStructField21Patch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyStructField22PatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyStructField22PatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyStructField22PatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyStructField22Patch";
}

MyStructField22PatchStruct::MyStructField22PatchStruct(const MyStructField22PatchStruct&) = default;
MyStructField22PatchStruct& MyStructField22PatchStruct::operator=(const MyStructField22PatchStruct&) = default;
MyStructField22PatchStruct::MyStructField22PatchStruct(MyStructField22PatchStruct&& other) noexcept  :
    __fbthrift_field_assign(std::move(other.__fbthrift_field_assign)),
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_remove(std::move(other.__fbthrift_field_remove)),
    __fbthrift_field_add(std::move(other.__fbthrift_field_add)),
    __isset(other.__isset) {
}

MyStructField22PatchStruct& MyStructField22PatchStruct::operator=(FOLLY_MAYBE_UNUSED MyStructField22PatchStruct&& other) noexcept {
    this->__fbthrift_field_assign = std::move(other.__fbthrift_field_assign);
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_remove = std::move(other.__fbthrift_field_remove);
    this->__fbthrift_field_add = std::move(other.__fbthrift_field_add);
    __isset = other.__isset;
    return *this;
}


MyStructField22PatchStruct::MyStructField22PatchStruct(apache::thrift::FragileConstructor, ::std::set<::std::string> assign__arg, bool clear__arg, ::std::set<::std::string> remove__arg, ::std::set<::std::string> add__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_remove(std::move(remove__arg)),
    __fbthrift_field_add(std::move(add__arg)) {
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
}


void MyStructField22PatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_assign.clear();
  this->__fbthrift_field_clear = bool();
  this->__fbthrift_field_remove.clear();
  this->__fbthrift_field_add.clear();
  __isset = {};
}

void MyStructField22PatchStruct::__fbthrift_clear_terse_fields() {
}

bool MyStructField22PatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool MyStructField22PatchStruct::operator==(const MyStructField22PatchStruct& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.assign_ref() == rhs.assign_ref())) {
    return false;
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return false;
  }
  if (!(lhs.remove_ref() == rhs.remove_ref())) {
    return false;
  }
  if (!(lhs.add_ref() == rhs.add_ref())) {
    return false;
  }
  return true;
}

bool MyStructField22PatchStruct::operator<(const MyStructField22PatchStruct& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.assign_ref() == rhs.assign_ref())) {
    return lhs.assign_ref() < rhs.assign_ref();
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return lhs.clear_ref() < rhs.clear_ref();
  }
  if (!(lhs.remove_ref() == rhs.remove_ref())) {
    return lhs.remove_ref() < rhs.remove_ref();
  }
  if (!(lhs.add_ref() == rhs.add_ref())) {
    return lhs.add_ref() < rhs.add_ref();
  }
  return false;
}

const ::std::set<::std::string>* MyStructField22PatchStruct::get_assign() const& {
  return assign_ref().has_value() ? std::addressof(__fbthrift_field_assign) : nullptr;
}

::std::set<::std::string>* MyStructField22PatchStruct::get_assign() & {
  return assign_ref().has_value() ? std::addressof(__fbthrift_field_assign) : nullptr;
}

const ::std::set<::std::string>& MyStructField22PatchStruct::get_remove() const& {
  return __fbthrift_field_remove;
}

::std::set<::std::string> MyStructField22PatchStruct::get_remove() && {
  return std::move(__fbthrift_field_remove);
}

const ::std::set<::std::string>& MyStructField22PatchStruct::get_add() const& {
  return __fbthrift_field_add;
}

::std::set<::std::string> MyStructField22PatchStruct::get_add() && {
  return std::move(__fbthrift_field_add);
}


void swap(MyStructField22PatchStruct& a, MyStructField22PatchStruct& b) {
  using ::std::swap;
  swap(a.assign_ref().value_unchecked(), b.assign_ref().value_unchecked());
  swap(a.clear_ref().value(), b.clear_ref().value());
  swap(a.remove_ref().value(), b.remove_ref().value());
  swap(a.add_ref().value(), b.add_ref().value());
  swap(a.__isset, b.__isset);
}

template void MyStructField22PatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyStructField22PatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyStructField22PatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStructField22PatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyStructField22PatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStructField22PatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStructField22PatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStructField22PatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::OptionalMyStructField22PatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::OptionalMyStructField22PatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* OptionalMyStructField22PatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/OptionalMyStructField22Patch";
}

OptionalMyStructField22PatchStruct::OptionalMyStructField22PatchStruct(const OptionalMyStructField22PatchStruct& srcObj) {
  __fbthrift_field_clear = srcObj.__fbthrift_field_clear;
  __isset.set(0,srcObj.__isset.get(0));
  __fbthrift_field_patch = srcObj.__fbthrift_field_patch;
  __isset.set(1,srcObj.__isset.get(1));
  __fbthrift_field_ensure = srcObj.__fbthrift_field_ensure;
  __isset.set(2,srcObj.__isset.get(2));
  __fbthrift_field_patchAfter = srcObj.__fbthrift_field_patchAfter;
  __isset.set(3,srcObj.__isset.get(3));
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::SetPatchAdapter, 3>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::SetPatchAdapter, 5>(__fbthrift_field_patchAfter, *this);
}

OptionalMyStructField22PatchStruct& OptionalMyStructField22PatchStruct::operator=(const OptionalMyStructField22PatchStruct& src) {
  OptionalMyStructField22PatchStruct tmp(src);
  swap(*this, tmp);
  return *this;
}

OptionalMyStructField22PatchStruct::OptionalMyStructField22PatchStruct(OptionalMyStructField22PatchStruct&& other) noexcept  :
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_patch(std::move(other.__fbthrift_field_patch)),
    __fbthrift_field_ensure(std::move(other.__fbthrift_field_ensure)),
    __fbthrift_field_patchAfter(std::move(other.__fbthrift_field_patchAfter)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::SetPatchAdapter, 3>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::SetPatchAdapter, 5>(__fbthrift_field_patchAfter, *this);
}

OptionalMyStructField22PatchStruct& OptionalMyStructField22PatchStruct::operator=(FOLLY_MAYBE_UNUSED OptionalMyStructField22PatchStruct&& other) noexcept {
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_patch = std::move(other.__fbthrift_field_patch);
    this->__fbthrift_field_ensure = std::move(other.__fbthrift_field_ensure);
    this->__fbthrift_field_patchAfter = std::move(other.__fbthrift_field_patchAfter);
    __isset = other.__isset;
    return *this;
}


OptionalMyStructField22PatchStruct::OptionalMyStructField22PatchStruct(apache::thrift::FragileConstructor, bool clear__arg, ::test::fixtures::patch::MyStructField22Patch patch__arg, ::std::set<::std::string> ensure__arg, ::test::fixtures::patch::MyStructField22Patch patchAfter__arg) :
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_patch(std::move(patch__arg)),
    __fbthrift_field_ensure(std::move(ensure__arg)),
    __fbthrift_field_patchAfter(std::move(patchAfter__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::SetPatchAdapter, 3>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::SetPatchAdapter, 5>(__fbthrift_field_patchAfter, *this);
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
}


void OptionalMyStructField22PatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_clear = bool();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::SetPatchAdapter, 3>(__fbthrift_field_patch, *this);
  this->__fbthrift_field_ensure.clear();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::SetPatchAdapter, 5>(__fbthrift_field_patchAfter, *this);
  __isset = {};
}

void OptionalMyStructField22PatchStruct::__fbthrift_clear_terse_fields() {
}

bool OptionalMyStructField22PatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool OptionalMyStructField22PatchStruct::operator==(const OptionalMyStructField22PatchStruct& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::SetPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return false;
  }
  if (!(lhs.ensure_ref() == rhs.ensure_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::SetPatchAdapter>(lhs.__fbthrift_field_patchAfter, rhs.__fbthrift_field_patchAfter)) {
    return false;
  }
  return true;
}

bool OptionalMyStructField22PatchStruct::operator<(const OptionalMyStructField22PatchStruct& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return lhs.clear_ref() < rhs.clear_ref();
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::SetPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::SetPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch);
  }
  if (!(lhs.ensure_ref() == rhs.ensure_ref())) {
    return lhs.ensure_ref() < rhs.ensure_ref();
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::SetPatchAdapter>(lhs.__fbthrift_field_patchAfter, rhs.__fbthrift_field_patchAfter)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::SetPatchAdapter>(lhs.__fbthrift_field_patchAfter, rhs.__fbthrift_field_patchAfter);
  }
  return false;
}

const ::std::set<::std::string>* OptionalMyStructField22PatchStruct::get_ensure() const& {
  return ensure_ref().has_value() ? std::addressof(__fbthrift_field_ensure) : nullptr;
}

::std::set<::std::string>* OptionalMyStructField22PatchStruct::get_ensure() & {
  return ensure_ref().has_value() ? std::addressof(__fbthrift_field_ensure) : nullptr;
}


void swap(OptionalMyStructField22PatchStruct& a, OptionalMyStructField22PatchStruct& b) {
  using ::std::swap;
  swap(a.clear_ref().value(), b.clear_ref().value());
  swap(a.patch_ref().value(), b.patch_ref().value());
  swap(a.ensure_ref().value_unchecked(), b.ensure_ref().value_unchecked());
  swap(a.patchAfter_ref().value(), b.patchAfter_ref().value());
  swap(a.__isset, b.__isset);
}

template void OptionalMyStructField22PatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t OptionalMyStructField22PatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t OptionalMyStructField22PatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t OptionalMyStructField22PatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void OptionalMyStructField22PatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t OptionalMyStructField22PatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t OptionalMyStructField22PatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t OptionalMyStructField22PatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        OptionalMyStructField22PatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyStructField22Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        OptionalMyStructField22PatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyStructField22Patch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyStructField23PatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyStructField23PatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyStructField23PatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyStructField23Patch";
}

MyStructField23PatchStruct::MyStructField23PatchStruct(const MyStructField23PatchStruct&) = default;
MyStructField23PatchStruct& MyStructField23PatchStruct::operator=(const MyStructField23PatchStruct&) = default;
MyStructField23PatchStruct::MyStructField23PatchStruct(MyStructField23PatchStruct&& other) noexcept  :
    __fbthrift_field_assign(std::move(other.__fbthrift_field_assign)),
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_put(std::move(other.__fbthrift_field_put)),
    __isset(other.__isset) {
}

MyStructField23PatchStruct& MyStructField23PatchStruct::operator=(FOLLY_MAYBE_UNUSED MyStructField23PatchStruct&& other) noexcept {
    this->__fbthrift_field_assign = std::move(other.__fbthrift_field_assign);
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_put = std::move(other.__fbthrift_field_put);
    __isset = other.__isset;
    return *this;
}


MyStructField23PatchStruct::MyStructField23PatchStruct(apache::thrift::FragileConstructor, ::std::map<::std::string, ::std::string> assign__arg, bool clear__arg, ::std::map<::std::string, ::std::string> put__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_put(std::move(put__arg)) {
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
}


void MyStructField23PatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_assign.clear();
  this->__fbthrift_field_clear = bool();
  this->__fbthrift_field_put.clear();
  __isset = {};
}

void MyStructField23PatchStruct::__fbthrift_clear_terse_fields() {
}

bool MyStructField23PatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool MyStructField23PatchStruct::operator==(const MyStructField23PatchStruct& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.assign_ref() == rhs.assign_ref())) {
    return false;
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return false;
  }
  if (!(lhs.put_ref() == rhs.put_ref())) {
    return false;
  }
  return true;
}

bool MyStructField23PatchStruct::operator<(const MyStructField23PatchStruct& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.assign_ref() == rhs.assign_ref())) {
    return lhs.assign_ref() < rhs.assign_ref();
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return lhs.clear_ref() < rhs.clear_ref();
  }
  if (!(lhs.put_ref() == rhs.put_ref())) {
    return lhs.put_ref() < rhs.put_ref();
  }
  return false;
}

const ::std::map<::std::string, ::std::string>* MyStructField23PatchStruct::get_assign() const& {
  return assign_ref().has_value() ? std::addressof(__fbthrift_field_assign) : nullptr;
}

::std::map<::std::string, ::std::string>* MyStructField23PatchStruct::get_assign() & {
  return assign_ref().has_value() ? std::addressof(__fbthrift_field_assign) : nullptr;
}

const ::std::map<::std::string, ::std::string>& MyStructField23PatchStruct::get_put() const& {
  return __fbthrift_field_put;
}

::std::map<::std::string, ::std::string> MyStructField23PatchStruct::get_put() && {
  return std::move(__fbthrift_field_put);
}


void swap(MyStructField23PatchStruct& a, MyStructField23PatchStruct& b) {
  using ::std::swap;
  swap(a.assign_ref().value_unchecked(), b.assign_ref().value_unchecked());
  swap(a.clear_ref().value(), b.clear_ref().value());
  swap(a.put_ref().value(), b.put_ref().value());
  swap(a.__isset, b.__isset);
}

template void MyStructField23PatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyStructField23PatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyStructField23PatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStructField23PatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyStructField23PatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStructField23PatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStructField23PatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStructField23PatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::OptionalMyStructField23PatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::OptionalMyStructField23PatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* OptionalMyStructField23PatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/OptionalMyStructField23Patch";
}

OptionalMyStructField23PatchStruct::OptionalMyStructField23PatchStruct(const OptionalMyStructField23PatchStruct& srcObj) {
  __fbthrift_field_clear = srcObj.__fbthrift_field_clear;
  __isset.set(0,srcObj.__isset.get(0));
  __fbthrift_field_patch = srcObj.__fbthrift_field_patch;
  __isset.set(1,srcObj.__isset.get(1));
  __fbthrift_field_ensure = srcObj.__fbthrift_field_ensure;
  __isset.set(2,srcObj.__isset.get(2));
  __fbthrift_field_patchAfter = srcObj.__fbthrift_field_patchAfter;
  __isset.set(3,srcObj.__isset.get(3));
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::MapPatchAdapter, 3>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::MapPatchAdapter, 5>(__fbthrift_field_patchAfter, *this);
}

OptionalMyStructField23PatchStruct& OptionalMyStructField23PatchStruct::operator=(const OptionalMyStructField23PatchStruct& src) {
  OptionalMyStructField23PatchStruct tmp(src);
  swap(*this, tmp);
  return *this;
}

OptionalMyStructField23PatchStruct::OptionalMyStructField23PatchStruct(OptionalMyStructField23PatchStruct&& other) noexcept  :
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_patch(std::move(other.__fbthrift_field_patch)),
    __fbthrift_field_ensure(std::move(other.__fbthrift_field_ensure)),
    __fbthrift_field_patchAfter(std::move(other.__fbthrift_field_patchAfter)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::MapPatchAdapter, 3>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::MapPatchAdapter, 5>(__fbthrift_field_patchAfter, *this);
}

OptionalMyStructField23PatchStruct& OptionalMyStructField23PatchStruct::operator=(FOLLY_MAYBE_UNUSED OptionalMyStructField23PatchStruct&& other) noexcept {
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_patch = std::move(other.__fbthrift_field_patch);
    this->__fbthrift_field_ensure = std::move(other.__fbthrift_field_ensure);
    this->__fbthrift_field_patchAfter = std::move(other.__fbthrift_field_patchAfter);
    __isset = other.__isset;
    return *this;
}


OptionalMyStructField23PatchStruct::OptionalMyStructField23PatchStruct(apache::thrift::FragileConstructor, bool clear__arg, ::test::fixtures::patch::MyStructField23Patch patch__arg, ::std::map<::std::string, ::std::string> ensure__arg, ::test::fixtures::patch::MyStructField23Patch patchAfter__arg) :
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_patch(std::move(patch__arg)),
    __fbthrift_field_ensure(std::move(ensure__arg)),
    __fbthrift_field_patchAfter(std::move(patchAfter__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::MapPatchAdapter, 3>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::MapPatchAdapter, 5>(__fbthrift_field_patchAfter, *this);
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
}


void OptionalMyStructField23PatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_clear = bool();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::MapPatchAdapter, 3>(__fbthrift_field_patch, *this);
  this->__fbthrift_field_ensure.clear();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::MapPatchAdapter, 5>(__fbthrift_field_patchAfter, *this);
  __isset = {};
}

void OptionalMyStructField23PatchStruct::__fbthrift_clear_terse_fields() {
}

bool OptionalMyStructField23PatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool OptionalMyStructField23PatchStruct::operator==(const OptionalMyStructField23PatchStruct& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::MapPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return false;
  }
  if (!(lhs.ensure_ref() == rhs.ensure_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::MapPatchAdapter>(lhs.__fbthrift_field_patchAfter, rhs.__fbthrift_field_patchAfter)) {
    return false;
  }
  return true;
}

bool OptionalMyStructField23PatchStruct::operator<(const OptionalMyStructField23PatchStruct& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return lhs.clear_ref() < rhs.clear_ref();
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::MapPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::MapPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch);
  }
  if (!(lhs.ensure_ref() == rhs.ensure_ref())) {
    return lhs.ensure_ref() < rhs.ensure_ref();
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::MapPatchAdapter>(lhs.__fbthrift_field_patchAfter, rhs.__fbthrift_field_patchAfter)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::MapPatchAdapter>(lhs.__fbthrift_field_patchAfter, rhs.__fbthrift_field_patchAfter);
  }
  return false;
}

const ::std::map<::std::string, ::std::string>* OptionalMyStructField23PatchStruct::get_ensure() const& {
  return ensure_ref().has_value() ? std::addressof(__fbthrift_field_ensure) : nullptr;
}

::std::map<::std::string, ::std::string>* OptionalMyStructField23PatchStruct::get_ensure() & {
  return ensure_ref().has_value() ? std::addressof(__fbthrift_field_ensure) : nullptr;
}


void swap(OptionalMyStructField23PatchStruct& a, OptionalMyStructField23PatchStruct& b) {
  using ::std::swap;
  swap(a.clear_ref().value(), b.clear_ref().value());
  swap(a.patch_ref().value(), b.patch_ref().value());
  swap(a.ensure_ref().value_unchecked(), b.ensure_ref().value_unchecked());
  swap(a.patchAfter_ref().value(), b.patchAfter_ref().value());
  swap(a.__isset, b.__isset);
}

template void OptionalMyStructField23PatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t OptionalMyStructField23PatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t OptionalMyStructField23PatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t OptionalMyStructField23PatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void OptionalMyStructField23PatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t OptionalMyStructField23PatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t OptionalMyStructField23PatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t OptionalMyStructField23PatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        OptionalMyStructField23PatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyStructField23Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        OptionalMyStructField23PatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyStructField23Patch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyStructPatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyStructPatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyStructPatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyStructPatch";
}

MyStructPatchStruct::MyStructPatchStruct(const MyStructPatchStruct& srcObj) {
  __fbthrift_field_boolVal = srcObj.__fbthrift_field_boolVal;
  __isset.set(0,srcObj.__isset.get(0));
  __fbthrift_field_byteVal = srcObj.__fbthrift_field_byteVal;
  __isset.set(1,srcObj.__isset.get(1));
  __fbthrift_field_i16Val = srcObj.__fbthrift_field_i16Val;
  __isset.set(2,srcObj.__isset.get(2));
  __fbthrift_field_i32Val = srcObj.__fbthrift_field_i32Val;
  __isset.set(3,srcObj.__isset.get(3));
  __fbthrift_field_i64Val = srcObj.__fbthrift_field_i64Val;
  __isset.set(4,srcObj.__isset.get(4));
  __fbthrift_field_floatVal = srcObj.__fbthrift_field_floatVal;
  __isset.set(5,srcObj.__isset.get(5));
  __fbthrift_field_doubleVal = srcObj.__fbthrift_field_doubleVal;
  __isset.set(6,srcObj.__isset.get(6));
  __fbthrift_field_stringVal = srcObj.__fbthrift_field_stringVal;
  __isset.set(7,srcObj.__isset.get(7));
  __fbthrift_field_binaryVal = srcObj.__fbthrift_field_binaryVal;
  __isset.set(8,srcObj.__isset.get(8));
  __fbthrift_field_structVal = srcObj.__fbthrift_field_structVal;
  __isset.set(9,srcObj.__isset.get(9));
  __fbthrift_field_optBoolVal = srcObj.__fbthrift_field_optBoolVal;
  __isset.set(10,srcObj.__isset.get(10));
  __fbthrift_field_optByteVal = srcObj.__fbthrift_field_optByteVal;
  __isset.set(11,srcObj.__isset.get(11));
  __fbthrift_field_optI16Val = srcObj.__fbthrift_field_optI16Val;
  __isset.set(12,srcObj.__isset.get(12));
  __fbthrift_field_optI32Val = srcObj.__fbthrift_field_optI32Val;
  __isset.set(13,srcObj.__isset.get(13));
  __fbthrift_field_optI64Val = srcObj.__fbthrift_field_optI64Val;
  __isset.set(14,srcObj.__isset.get(14));
  __fbthrift_field_optFloatVal = srcObj.__fbthrift_field_optFloatVal;
  __isset.set(15,srcObj.__isset.get(15));
  __fbthrift_field_optDoubleVal = srcObj.__fbthrift_field_optDoubleVal;
  __isset.set(16,srcObj.__isset.get(16));
  __fbthrift_field_optStringVal = srcObj.__fbthrift_field_optStringVal;
  __isset.set(17,srcObj.__isset.get(17));
  __fbthrift_field_optBinaryVal = srcObj.__fbthrift_field_optBinaryVal;
  __isset.set(18,srcObj.__isset.get(18));
  __fbthrift_field_optStructVal = srcObj.__fbthrift_field_optStructVal;
  __isset.set(19,srcObj.__isset.get(19));
  __fbthrift_field_optListVal = srcObj.__fbthrift_field_optListVal;
  __isset.set(20,srcObj.__isset.get(20));
  __fbthrift_field_optSetVal = srcObj.__fbthrift_field_optSetVal;
  __isset.set(21,srcObj.__isset.get(21));
  __fbthrift_field_optMapVal = srcObj.__fbthrift_field_optMapVal;
  __isset.set(22,srcObj.__isset.get(22));
  __fbthrift_field_unionVal = srcObj.__fbthrift_field_unionVal;
  __isset.set(23,srcObj.__isset.get(23));
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::BoolPatchAdapter, 1>(__fbthrift_field_boolVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 2>(__fbthrift_field_byteVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 3>(__fbthrift_field_i16Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 4>(__fbthrift_field_i32Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 5>(__fbthrift_field_i64Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 6>(__fbthrift_field_floatVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 7>(__fbthrift_field_doubleVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter, 8>(__fbthrift_field_stringVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::AssignPatchAdapter, 9>(__fbthrift_field_binaryVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructValuePatchAdapter, 10>(__fbthrift_field_structVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 11>(__fbthrift_field_optBoolVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 12>(__fbthrift_field_optByteVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 13>(__fbthrift_field_optI16Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 14>(__fbthrift_field_optI32Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 15>(__fbthrift_field_optI64Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 16>(__fbthrift_field_optFloatVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 17>(__fbthrift_field_optDoubleVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 18>(__fbthrift_field_optStringVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 19>(__fbthrift_field_optBinaryVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 20>(__fbthrift_field_optStructVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 21>(__fbthrift_field_optListVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 22>(__fbthrift_field_optSetVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 23>(__fbthrift_field_optMapVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionValuePatchAdapter, 30>(__fbthrift_field_unionVal, *this);
}

MyStructPatchStruct& MyStructPatchStruct::operator=(const MyStructPatchStruct& src) {
  MyStructPatchStruct tmp(src);
  swap(*this, tmp);
  return *this;
}

MyStructPatchStruct::MyStructPatchStruct(MyStructPatchStruct&& other) noexcept  :
    __fbthrift_field_boolVal(std::move(other.__fbthrift_field_boolVal)),
    __fbthrift_field_byteVal(std::move(other.__fbthrift_field_byteVal)),
    __fbthrift_field_i16Val(std::move(other.__fbthrift_field_i16Val)),
    __fbthrift_field_i32Val(std::move(other.__fbthrift_field_i32Val)),
    __fbthrift_field_i64Val(std::move(other.__fbthrift_field_i64Val)),
    __fbthrift_field_floatVal(std::move(other.__fbthrift_field_floatVal)),
    __fbthrift_field_doubleVal(std::move(other.__fbthrift_field_doubleVal)),
    __fbthrift_field_stringVal(std::move(other.__fbthrift_field_stringVal)),
    __fbthrift_field_binaryVal(std::move(other.__fbthrift_field_binaryVal)),
    __fbthrift_field_structVal(std::move(other.__fbthrift_field_structVal)),
    __fbthrift_field_optBoolVal(std::move(other.__fbthrift_field_optBoolVal)),
    __fbthrift_field_optByteVal(std::move(other.__fbthrift_field_optByteVal)),
    __fbthrift_field_optI16Val(std::move(other.__fbthrift_field_optI16Val)),
    __fbthrift_field_optI32Val(std::move(other.__fbthrift_field_optI32Val)),
    __fbthrift_field_optI64Val(std::move(other.__fbthrift_field_optI64Val)),
    __fbthrift_field_optFloatVal(std::move(other.__fbthrift_field_optFloatVal)),
    __fbthrift_field_optDoubleVal(std::move(other.__fbthrift_field_optDoubleVal)),
    __fbthrift_field_optStringVal(std::move(other.__fbthrift_field_optStringVal)),
    __fbthrift_field_optBinaryVal(std::move(other.__fbthrift_field_optBinaryVal)),
    __fbthrift_field_optStructVal(std::move(other.__fbthrift_field_optStructVal)),
    __fbthrift_field_optListVal(std::move(other.__fbthrift_field_optListVal)),
    __fbthrift_field_optSetVal(std::move(other.__fbthrift_field_optSetVal)),
    __fbthrift_field_optMapVal(std::move(other.__fbthrift_field_optMapVal)),
    __fbthrift_field_unionVal(std::move(other.__fbthrift_field_unionVal)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::BoolPatchAdapter, 1>(__fbthrift_field_boolVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 2>(__fbthrift_field_byteVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 3>(__fbthrift_field_i16Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 4>(__fbthrift_field_i32Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 5>(__fbthrift_field_i64Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 6>(__fbthrift_field_floatVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 7>(__fbthrift_field_doubleVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter, 8>(__fbthrift_field_stringVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::AssignPatchAdapter, 9>(__fbthrift_field_binaryVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructValuePatchAdapter, 10>(__fbthrift_field_structVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 11>(__fbthrift_field_optBoolVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 12>(__fbthrift_field_optByteVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 13>(__fbthrift_field_optI16Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 14>(__fbthrift_field_optI32Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 15>(__fbthrift_field_optI64Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 16>(__fbthrift_field_optFloatVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 17>(__fbthrift_field_optDoubleVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 18>(__fbthrift_field_optStringVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 19>(__fbthrift_field_optBinaryVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 20>(__fbthrift_field_optStructVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 21>(__fbthrift_field_optListVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 22>(__fbthrift_field_optSetVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 23>(__fbthrift_field_optMapVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionValuePatchAdapter, 30>(__fbthrift_field_unionVal, *this);
}

MyStructPatchStruct& MyStructPatchStruct::operator=(FOLLY_MAYBE_UNUSED MyStructPatchStruct&& other) noexcept {
    this->__fbthrift_field_boolVal = std::move(other.__fbthrift_field_boolVal);
    this->__fbthrift_field_byteVal = std::move(other.__fbthrift_field_byteVal);
    this->__fbthrift_field_i16Val = std::move(other.__fbthrift_field_i16Val);
    this->__fbthrift_field_i32Val = std::move(other.__fbthrift_field_i32Val);
    this->__fbthrift_field_i64Val = std::move(other.__fbthrift_field_i64Val);
    this->__fbthrift_field_floatVal = std::move(other.__fbthrift_field_floatVal);
    this->__fbthrift_field_doubleVal = std::move(other.__fbthrift_field_doubleVal);
    this->__fbthrift_field_stringVal = std::move(other.__fbthrift_field_stringVal);
    this->__fbthrift_field_binaryVal = std::move(other.__fbthrift_field_binaryVal);
    this->__fbthrift_field_structVal = std::move(other.__fbthrift_field_structVal);
    this->__fbthrift_field_optBoolVal = std::move(other.__fbthrift_field_optBoolVal);
    this->__fbthrift_field_optByteVal = std::move(other.__fbthrift_field_optByteVal);
    this->__fbthrift_field_optI16Val = std::move(other.__fbthrift_field_optI16Val);
    this->__fbthrift_field_optI32Val = std::move(other.__fbthrift_field_optI32Val);
    this->__fbthrift_field_optI64Val = std::move(other.__fbthrift_field_optI64Val);
    this->__fbthrift_field_optFloatVal = std::move(other.__fbthrift_field_optFloatVal);
    this->__fbthrift_field_optDoubleVal = std::move(other.__fbthrift_field_optDoubleVal);
    this->__fbthrift_field_optStringVal = std::move(other.__fbthrift_field_optStringVal);
    this->__fbthrift_field_optBinaryVal = std::move(other.__fbthrift_field_optBinaryVal);
    this->__fbthrift_field_optStructVal = std::move(other.__fbthrift_field_optStructVal);
    this->__fbthrift_field_optListVal = std::move(other.__fbthrift_field_optListVal);
    this->__fbthrift_field_optSetVal = std::move(other.__fbthrift_field_optSetVal);
    this->__fbthrift_field_optMapVal = std::move(other.__fbthrift_field_optMapVal);
    this->__fbthrift_field_unionVal = std::move(other.__fbthrift_field_unionVal);
    __isset = other.__isset;
    return *this;
}


MyStructPatchStruct::MyStructPatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::op::BoolPatch boolVal__arg, ::apache::thrift::op::BytePatch byteVal__arg, ::apache::thrift::op::I16Patch i16Val__arg, ::apache::thrift::op::I32Patch i32Val__arg, ::apache::thrift::op::I64Patch i64Val__arg, ::apache::thrift::op::FloatPatch floatVal__arg, ::apache::thrift::op::DoublePatch doubleVal__arg, ::apache::thrift::op::StringPatch stringVal__arg, ::apache::thrift::op::BinaryPatch binaryVal__arg, ::test::fixtures::patch::MyDataValuePatch structVal__arg, ::apache::thrift::op::OptionalBoolPatch optBoolVal__arg, ::apache::thrift::op::OptionalBytePatch optByteVal__arg, ::apache::thrift::op::OptionalI16Patch optI16Val__arg, ::apache::thrift::op::OptionalI32Patch optI32Val__arg, ::apache::thrift::op::OptionalI64Patch optI64Val__arg, ::apache::thrift::op::OptionalFloatPatch optFloatVal__arg, ::apache::thrift::op::OptionalDoublePatch optDoubleVal__arg, ::apache::thrift::op::OptionalStringPatch optStringVal__arg, ::apache::thrift::op::OptionalBinaryPatch optBinaryVal__arg, ::test::fixtures::patch::OptionalMyDataValuePatch optStructVal__arg, ::test::fixtures::patch::OptionalMyStructField21Patch optListVal__arg, ::test::fixtures::patch::OptionalMyStructField22Patch optSetVal__arg, ::test::fixtures::patch::OptionalMyStructField23Patch optMapVal__arg, ::test::fixtures::patch::MyUnionValuePatch unionVal__arg) :
    __fbthrift_field_boolVal(std::move(boolVal__arg)),
    __fbthrift_field_byteVal(std::move(byteVal__arg)),
    __fbthrift_field_i16Val(std::move(i16Val__arg)),
    __fbthrift_field_i32Val(std::move(i32Val__arg)),
    __fbthrift_field_i64Val(std::move(i64Val__arg)),
    __fbthrift_field_floatVal(std::move(floatVal__arg)),
    __fbthrift_field_doubleVal(std::move(doubleVal__arg)),
    __fbthrift_field_stringVal(std::move(stringVal__arg)),
    __fbthrift_field_binaryVal(std::move(binaryVal__arg)),
    __fbthrift_field_structVal(std::move(structVal__arg)),
    __fbthrift_field_optBoolVal(std::move(optBoolVal__arg)),
    __fbthrift_field_optByteVal(std::move(optByteVal__arg)),
    __fbthrift_field_optI16Val(std::move(optI16Val__arg)),
    __fbthrift_field_optI32Val(std::move(optI32Val__arg)),
    __fbthrift_field_optI64Val(std::move(optI64Val__arg)),
    __fbthrift_field_optFloatVal(std::move(optFloatVal__arg)),
    __fbthrift_field_optDoubleVal(std::move(optDoubleVal__arg)),
    __fbthrift_field_optStringVal(std::move(optStringVal__arg)),
    __fbthrift_field_optBinaryVal(std::move(optBinaryVal__arg)),
    __fbthrift_field_optStructVal(std::move(optStructVal__arg)),
    __fbthrift_field_optListVal(std::move(optListVal__arg)),
    __fbthrift_field_optSetVal(std::move(optSetVal__arg)),
    __fbthrift_field_optMapVal(std::move(optMapVal__arg)),
    __fbthrift_field_unionVal(std::move(unionVal__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::BoolPatchAdapter, 1>(__fbthrift_field_boolVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 2>(__fbthrift_field_byteVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 3>(__fbthrift_field_i16Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 4>(__fbthrift_field_i32Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 5>(__fbthrift_field_i64Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 6>(__fbthrift_field_floatVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::NumberPatchAdapter, 7>(__fbthrift_field_doubleVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StringPatchAdapter, 8>(__fbthrift_field_stringVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::AssignPatchAdapter, 9>(__fbthrift_field_binaryVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructValuePatchAdapter, 10>(__fbthrift_field_structVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 11>(__fbthrift_field_optBoolVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 12>(__fbthrift_field_optByteVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 13>(__fbthrift_field_optI16Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 14>(__fbthrift_field_optI32Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 15>(__fbthrift_field_optI64Val, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 16>(__fbthrift_field_optFloatVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 17>(__fbthrift_field_optDoubleVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 18>(__fbthrift_field_optStringVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 19>(__fbthrift_field_optBinaryVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 20>(__fbthrift_field_optStructVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 21>(__fbthrift_field_optListVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 22>(__fbthrift_field_optSetVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::OptionalPatchAdapter, 23>(__fbthrift_field_optMapVal, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::UnionValuePatchAdapter, 30>(__fbthrift_field_unionVal, *this);
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
  __isset.set(folly::index_constant<7>(), true);
  __isset.set(folly::index_constant<8>(), true);
  __isset.set(folly::index_constant<9>(), true);
  __isset.set(folly::index_constant<10>(), true);
  __isset.set(folly::index_constant<11>(), true);
  __isset.set(folly::index_constant<12>(), true);
  __isset.set(folly::index_constant<13>(), true);
  __isset.set(folly::index_constant<14>(), true);
  __isset.set(folly::index_constant<15>(), true);
  __isset.set(folly::index_constant<16>(), true);
  __isset.set(folly::index_constant<17>(), true);
  __isset.set(folly::index_constant<18>(), true);
  __isset.set(folly::index_constant<19>(), true);
  __isset.set(folly::index_constant<20>(), true);
  __isset.set(folly::index_constant<21>(), true);
  __isset.set(folly::index_constant<22>(), true);
  __isset.set(folly::index_constant<23>(), true);
}


void MyStructPatchStruct::__fbthrift_clear() {
  // clear all fields
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::BoolPatchAdapter, 1>(__fbthrift_field_boolVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::NumberPatchAdapter, 2>(__fbthrift_field_byteVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::NumberPatchAdapter, 3>(__fbthrift_field_i16Val, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::NumberPatchAdapter, 4>(__fbthrift_field_i32Val, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::NumberPatchAdapter, 5>(__fbthrift_field_i64Val, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::NumberPatchAdapter, 6>(__fbthrift_field_floatVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::NumberPatchAdapter, 7>(__fbthrift_field_doubleVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::StringPatchAdapter, 8>(__fbthrift_field_stringVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::AssignPatchAdapter, 9>(__fbthrift_field_binaryVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::StructValuePatchAdapter, 10>(__fbthrift_field_structVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::OptionalPatchAdapter, 11>(__fbthrift_field_optBoolVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::OptionalPatchAdapter, 12>(__fbthrift_field_optByteVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::OptionalPatchAdapter, 13>(__fbthrift_field_optI16Val, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::OptionalPatchAdapter, 14>(__fbthrift_field_optI32Val, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::OptionalPatchAdapter, 15>(__fbthrift_field_optI64Val, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::OptionalPatchAdapter, 16>(__fbthrift_field_optFloatVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::OptionalPatchAdapter, 17>(__fbthrift_field_optDoubleVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::OptionalPatchAdapter, 18>(__fbthrift_field_optStringVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::OptionalPatchAdapter, 19>(__fbthrift_field_optBinaryVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::OptionalPatchAdapter, 20>(__fbthrift_field_optStructVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::OptionalPatchAdapter, 21>(__fbthrift_field_optListVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::OptionalPatchAdapter, 22>(__fbthrift_field_optSetVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::OptionalPatchAdapter, 23>(__fbthrift_field_optMapVal, *this);
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::UnionValuePatchAdapter, 30>(__fbthrift_field_unionVal, *this);
  __isset = {};
}

void MyStructPatchStruct::__fbthrift_clear_terse_fields() {
}

bool MyStructPatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool MyStructPatchStruct::operator==(const MyStructPatchStruct& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::BoolPatchAdapter>(lhs.__fbthrift_field_boolVal, rhs.__fbthrift_field_boolVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_byteVal, rhs.__fbthrift_field_byteVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_i16Val, rhs.__fbthrift_field_i16Val)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_i32Val, rhs.__fbthrift_field_i32Val)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_i64Val, rhs.__fbthrift_field_i64Val)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_floatVal, rhs.__fbthrift_field_floatVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_doubleVal, rhs.__fbthrift_field_doubleVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::StringPatchAdapter>(lhs.__fbthrift_field_stringVal, rhs.__fbthrift_field_stringVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::AssignPatchAdapter>(lhs.__fbthrift_field_binaryVal, rhs.__fbthrift_field_binaryVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::StructValuePatchAdapter>(lhs.__fbthrift_field_structVal, rhs.__fbthrift_field_structVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optBoolVal, rhs.__fbthrift_field_optBoolVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optByteVal, rhs.__fbthrift_field_optByteVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optI16Val, rhs.__fbthrift_field_optI16Val)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optI32Val, rhs.__fbthrift_field_optI32Val)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optI64Val, rhs.__fbthrift_field_optI64Val)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optFloatVal, rhs.__fbthrift_field_optFloatVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optDoubleVal, rhs.__fbthrift_field_optDoubleVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optStringVal, rhs.__fbthrift_field_optStringVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optBinaryVal, rhs.__fbthrift_field_optBinaryVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optStructVal, rhs.__fbthrift_field_optStructVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optListVal, rhs.__fbthrift_field_optListVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optSetVal, rhs.__fbthrift_field_optSetVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optMapVal, rhs.__fbthrift_field_optMapVal)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::UnionValuePatchAdapter>(lhs.__fbthrift_field_unionVal, rhs.__fbthrift_field_unionVal)) {
    return false;
  }
  return true;
}

bool MyStructPatchStruct::operator<(const MyStructPatchStruct& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::BoolPatchAdapter>(lhs.__fbthrift_field_boolVal, rhs.__fbthrift_field_boolVal)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::BoolPatchAdapter>(lhs.__fbthrift_field_boolVal, rhs.__fbthrift_field_boolVal);
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_byteVal, rhs.__fbthrift_field_byteVal)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_byteVal, rhs.__fbthrift_field_byteVal);
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_i16Val, rhs.__fbthrift_field_i16Val)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_i16Val, rhs.__fbthrift_field_i16Val);
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_i32Val, rhs.__fbthrift_field_i32Val)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_i32Val, rhs.__fbthrift_field_i32Val);
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_i64Val, rhs.__fbthrift_field_i64Val)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_i64Val, rhs.__fbthrift_field_i64Val);
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_floatVal, rhs.__fbthrift_field_floatVal)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_floatVal, rhs.__fbthrift_field_floatVal);
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_doubleVal, rhs.__fbthrift_field_doubleVal)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::NumberPatchAdapter>(lhs.__fbthrift_field_doubleVal, rhs.__fbthrift_field_doubleVal);
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::StringPatchAdapter>(lhs.__fbthrift_field_stringVal, rhs.__fbthrift_field_stringVal)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::StringPatchAdapter>(lhs.__fbthrift_field_stringVal, rhs.__fbthrift_field_stringVal);
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::AssignPatchAdapter>(lhs.__fbthrift_field_binaryVal, rhs.__fbthrift_field_binaryVal)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::AssignPatchAdapter>(lhs.__fbthrift_field_binaryVal, rhs.__fbthrift_field_binaryVal);
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::StructValuePatchAdapter>(lhs.__fbthrift_field_structVal, rhs.__fbthrift_field_structVal)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::StructValuePatchAdapter>(lhs.__fbthrift_field_structVal, rhs.__fbthrift_field_structVal);
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optBoolVal, rhs.__fbthrift_field_optBoolVal)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optBoolVal, rhs.__fbthrift_field_optBoolVal);
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optByteVal, rhs.__fbthrift_field_optByteVal)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optByteVal, rhs.__fbthrift_field_optByteVal);
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optI16Val, rhs.__fbthrift_field_optI16Val)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optI16Val, rhs.__fbthrift_field_optI16Val);
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optI32Val, rhs.__fbthrift_field_optI32Val)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optI32Val, rhs.__fbthrift_field_optI32Val);
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optI64Val, rhs.__fbthrift_field_optI64Val)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optI64Val, rhs.__fbthrift_field_optI64Val);
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optFloatVal, rhs.__fbthrift_field_optFloatVal)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optFloatVal, rhs.__fbthrift_field_optFloatVal);
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optDoubleVal, rhs.__fbthrift_field_optDoubleVal)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optDoubleVal, rhs.__fbthrift_field_optDoubleVal);
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optStringVal, rhs.__fbthrift_field_optStringVal)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optStringVal, rhs.__fbthrift_field_optStringVal);
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optBinaryVal, rhs.__fbthrift_field_optBinaryVal)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optBinaryVal, rhs.__fbthrift_field_optBinaryVal);
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optStructVal, rhs.__fbthrift_field_optStructVal)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optStructVal, rhs.__fbthrift_field_optStructVal);
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optListVal, rhs.__fbthrift_field_optListVal)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optListVal, rhs.__fbthrift_field_optListVal);
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optSetVal, rhs.__fbthrift_field_optSetVal)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optSetVal, rhs.__fbthrift_field_optSetVal);
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optMapVal, rhs.__fbthrift_field_optMapVal)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::OptionalPatchAdapter>(lhs.__fbthrift_field_optMapVal, rhs.__fbthrift_field_optMapVal);
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::UnionValuePatchAdapter>(lhs.__fbthrift_field_unionVal, rhs.__fbthrift_field_unionVal)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::UnionValuePatchAdapter>(lhs.__fbthrift_field_unionVal, rhs.__fbthrift_field_unionVal);
  }
  return false;
}


void swap(MyStructPatchStruct& a, MyStructPatchStruct& b) {
  using ::std::swap;
  swap(a.boolVal_ref().value(), b.boolVal_ref().value());
  swap(a.byteVal_ref().value(), b.byteVal_ref().value());
  swap(a.i16Val_ref().value(), b.i16Val_ref().value());
  swap(a.i32Val_ref().value(), b.i32Val_ref().value());
  swap(a.i64Val_ref().value(), b.i64Val_ref().value());
  swap(a.floatVal_ref().value(), b.floatVal_ref().value());
  swap(a.doubleVal_ref().value(), b.doubleVal_ref().value());
  swap(a.stringVal_ref().value(), b.stringVal_ref().value());
  swap(a.binaryVal_ref().value(), b.binaryVal_ref().value());
  swap(a.structVal_ref().value(), b.structVal_ref().value());
  swap(a.optBoolVal_ref().value(), b.optBoolVal_ref().value());
  swap(a.optByteVal_ref().value(), b.optByteVal_ref().value());
  swap(a.optI16Val_ref().value(), b.optI16Val_ref().value());
  swap(a.optI32Val_ref().value(), b.optI32Val_ref().value());
  swap(a.optI64Val_ref().value(), b.optI64Val_ref().value());
  swap(a.optFloatVal_ref().value(), b.optFloatVal_ref().value());
  swap(a.optDoubleVal_ref().value(), b.optDoubleVal_ref().value());
  swap(a.optStringVal_ref().value(), b.optStringVal_ref().value());
  swap(a.optBinaryVal_ref().value(), b.optBinaryVal_ref().value());
  swap(a.optStructVal_ref().value(), b.optStructVal_ref().value());
  swap(a.optListVal_ref().value(), b.optListVal_ref().value());
  swap(a.optSetVal_ref().value(), b.optSetVal_ref().value());
  swap(a.optMapVal_ref().value(), b.optMapVal_ref().value());
  swap(a.unionVal_ref().value(), b.unionVal_ref().value());
  swap(a.__isset, b.__isset);
}

template void MyStructPatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyStructPatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyStructPatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStructPatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyStructPatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStructPatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStructPatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStructPatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::BoolPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::BytePatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::I16Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::I32Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::I64Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::FloatPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::DoublePatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::StringPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::BinaryPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyDataValuePatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::OptionalBoolPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::OptionalBytePatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::OptionalI16Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::OptionalI32Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::OptionalI64Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::OptionalFloatPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::OptionalDoublePatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::OptionalStringPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructPatchStruct,
        ::apache::thrift::type_class::structure,
        ::apache::thrift::op::OptionalBinaryPatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::OptionalMyDataValuePatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::OptionalMyStructField21Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::OptionalMyStructField22Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::OptionalMyStructField23Patch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructPatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyUnionValuePatch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::MyStructValuePatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::MyStructValuePatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* MyStructValuePatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/MyStructValuePatch";
}

MyStructValuePatchStruct::MyStructValuePatchStruct(const MyStructValuePatchStruct& srcObj) {
  __fbthrift_field_assign = srcObj.__fbthrift_field_assign;
  __fbthrift_field_clear = srcObj.__fbthrift_field_clear;
  __isset.set(0,srcObj.__isset.get(0));
  __fbthrift_field_patch = srcObj.__fbthrift_field_patch;
  __isset.set(1,srcObj.__isset.get(1));
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter, 3>(__fbthrift_field_patch, *this);
}

MyStructValuePatchStruct& MyStructValuePatchStruct::operator=(const MyStructValuePatchStruct& src) {
  MyStructValuePatchStruct tmp(src);
  swap(*this, tmp);
  return *this;
}

MyStructValuePatchStruct::MyStructValuePatchStruct(MyStructValuePatchStruct&& other) noexcept  :
    __fbthrift_field_assign(std::move(other.__fbthrift_field_assign)),
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_patch(std::move(other.__fbthrift_field_patch)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter, 3>(__fbthrift_field_patch, *this);
}

MyStructValuePatchStruct& MyStructValuePatchStruct::operator=(FOLLY_MAYBE_UNUSED MyStructValuePatchStruct&& other) noexcept {
    this->__fbthrift_field_assign = std::move(other.__fbthrift_field_assign);
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_patch = std::move(other.__fbthrift_field_patch);
    __isset = other.__isset;
    return *this;
}


MyStructValuePatchStruct::MyStructValuePatchStruct(apache::thrift::FragileConstructor, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyStruct> assign__arg, bool clear__arg, ::test::fixtures::patch::MyStructPatch patch__arg) :
    __fbthrift_field_assign(std::move(assign__arg)),
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_patch(std::move(patch__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructPatchAdapter, 3>(__fbthrift_field_patch, *this);
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
}


void MyStructValuePatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_assign.reset();
  this->__fbthrift_field_clear = bool();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::StructPatchAdapter, 3>(__fbthrift_field_patch, *this);
  __isset = {};
}

void MyStructValuePatchStruct::__fbthrift_clear_terse_fields() {
}

bool MyStructValuePatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool MyStructValuePatchStruct::operator==(const MyStructValuePatchStruct& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if ((!::apache::thrift::detail::pointer_equal(lhs.assign_ref(), rhs.assign_ref()))) {
    return false;
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::StructPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return false;
  }
  return true;
}

bool MyStructValuePatchStruct::operator<(const MyStructValuePatchStruct& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if ((!::apache::thrift::detail::pointer_equal(lhs.assign_ref(), rhs.assign_ref()))) {
    return ::apache::thrift::detail::pointer_less(lhs.assign_ref(), rhs.assign_ref());
  }
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return lhs.clear_ref() < rhs.clear_ref();
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::StructPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::StructPatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch);
  }
  return false;
}


void swap(MyStructValuePatchStruct& a, MyStructValuePatchStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_assign, b.__fbthrift_field_assign);
  swap(a.clear_ref().value(), b.clear_ref().value());
  swap(a.patch_ref().value(), b.patch_ref().value());
  swap(a.__isset, b.__isset);
}

template void MyStructValuePatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyStructValuePatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyStructValuePatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStructValuePatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyStructValuePatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStructValuePatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStructValuePatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStructValuePatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructValuePatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStructValuePatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyStructPatch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::patch::OptionalMyStructValuePatchStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::patch::OptionalMyStructValuePatchStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace patch {

const char* OptionalMyStructValuePatchStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/patch/OptionalMyStructValuePatch";
}

OptionalMyStructValuePatchStruct::OptionalMyStructValuePatchStruct(const OptionalMyStructValuePatchStruct& srcObj) {
  __fbthrift_field_clear = srcObj.__fbthrift_field_clear;
  __isset.set(0,srcObj.__isset.get(0));
  __fbthrift_field_patch = srcObj.__fbthrift_field_patch;
  __isset.set(1,srcObj.__isset.get(1));
  __fbthrift_field_ensure = srcObj.__fbthrift_field_ensure;
  __fbthrift_field_patchAfter = srcObj.__fbthrift_field_patchAfter;
  __isset.set(2,srcObj.__isset.get(2));
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructValuePatchAdapter, 3>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructValuePatchAdapter, 5>(__fbthrift_field_patchAfter, *this);
}

OptionalMyStructValuePatchStruct& OptionalMyStructValuePatchStruct::operator=(const OptionalMyStructValuePatchStruct& src) {
  OptionalMyStructValuePatchStruct tmp(src);
  swap(*this, tmp);
  return *this;
}

OptionalMyStructValuePatchStruct::OptionalMyStructValuePatchStruct(OptionalMyStructValuePatchStruct&& other) noexcept  :
    __fbthrift_field_clear(std::move(other.__fbthrift_field_clear)),
    __fbthrift_field_patch(std::move(other.__fbthrift_field_patch)),
    __fbthrift_field_ensure(std::move(other.__fbthrift_field_ensure)),
    __fbthrift_field_patchAfter(std::move(other.__fbthrift_field_patchAfter)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructValuePatchAdapter, 3>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructValuePatchAdapter, 5>(__fbthrift_field_patchAfter, *this);
}

OptionalMyStructValuePatchStruct& OptionalMyStructValuePatchStruct::operator=(FOLLY_MAYBE_UNUSED OptionalMyStructValuePatchStruct&& other) noexcept {
    this->__fbthrift_field_clear = std::move(other.__fbthrift_field_clear);
    this->__fbthrift_field_patch = std::move(other.__fbthrift_field_patch);
    this->__fbthrift_field_ensure = std::move(other.__fbthrift_field_ensure);
    this->__fbthrift_field_patchAfter = std::move(other.__fbthrift_field_patchAfter);
    __isset = other.__isset;
    return *this;
}


OptionalMyStructValuePatchStruct::OptionalMyStructValuePatchStruct(apache::thrift::FragileConstructor, bool clear__arg, ::test::fixtures::patch::MyStructValuePatch patch__arg, ::apache::thrift::detail::boxed_value_ptr<::test::fixtures::patch::MyStruct> ensure__arg, ::test::fixtures::patch::MyStructValuePatch patchAfter__arg) :
    __fbthrift_field_clear(std::move(clear__arg)),
    __fbthrift_field_patch(std::move(patch__arg)),
    __fbthrift_field_ensure(std::move(ensure__arg)),
    __fbthrift_field_patchAfter(std::move(patchAfter__arg)) {
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructValuePatchAdapter, 3>(__fbthrift_field_patch, *this);
  ::apache::thrift::adapt_detail::construct<::apache::thrift::op::detail::StructValuePatchAdapter, 5>(__fbthrift_field_patchAfter, *this);
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
}


void OptionalMyStructValuePatchStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_clear = bool();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::StructValuePatchAdapter, 3>(__fbthrift_field_patch, *this);
  this->__fbthrift_field_ensure.reset();
  ::apache::thrift::adapt_detail::clear<::apache::thrift::op::detail::StructValuePatchAdapter, 5>(__fbthrift_field_patchAfter, *this);
  __isset = {};
}

void OptionalMyStructValuePatchStruct::__fbthrift_clear_terse_fields() {
}

bool OptionalMyStructValuePatchStruct::__fbthrift_is_empty() const {
  return false;
}

bool OptionalMyStructValuePatchStruct::operator==(const OptionalMyStructValuePatchStruct& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::StructValuePatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return false;
  }
  if ((!::apache::thrift::detail::pointer_equal(lhs.ensure_ref(), rhs.ensure_ref()))) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::StructValuePatchAdapter>(lhs.__fbthrift_field_patchAfter, rhs.__fbthrift_field_patchAfter)) {
    return false;
  }
  return true;
}

bool OptionalMyStructValuePatchStruct::operator<(const OptionalMyStructValuePatchStruct& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.clear_ref() == rhs.clear_ref())) {
    return lhs.clear_ref() < rhs.clear_ref();
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::StructValuePatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::StructValuePatchAdapter>(lhs.__fbthrift_field_patch, rhs.__fbthrift_field_patch);
  }
  if ((!::apache::thrift::detail::pointer_equal(lhs.ensure_ref(), rhs.ensure_ref()))) {
    return ::apache::thrift::detail::pointer_less(lhs.ensure_ref(), rhs.ensure_ref());
  }
  if (::apache::thrift::adapt_detail::not_equal<::apache::thrift::op::detail::StructValuePatchAdapter>(lhs.__fbthrift_field_patchAfter, rhs.__fbthrift_field_patchAfter)) {
    return ::apache::thrift::adapt_detail::less<::apache::thrift::op::detail::StructValuePatchAdapter>(lhs.__fbthrift_field_patchAfter, rhs.__fbthrift_field_patchAfter);
  }
  return false;
}


void swap(OptionalMyStructValuePatchStruct& a, OptionalMyStructValuePatchStruct& b) {
  using ::std::swap;
  swap(a.clear_ref().value(), b.clear_ref().value());
  swap(a.patch_ref().value(), b.patch_ref().value());
  swap(a.__fbthrift_field_ensure, b.__fbthrift_field_ensure);
  swap(a.patchAfter_ref().value(), b.patchAfter_ref().value());
  swap(a.__isset, b.__isset);
}

template void OptionalMyStructValuePatchStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t OptionalMyStructValuePatchStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t OptionalMyStructValuePatchStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t OptionalMyStructValuePatchStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void OptionalMyStructValuePatchStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t OptionalMyStructValuePatchStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t OptionalMyStructValuePatchStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t OptionalMyStructValuePatchStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        OptionalMyStructValuePatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyStructValuePatch>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        OptionalMyStructValuePatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        OptionalMyStructValuePatchStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::patch::MyStructValuePatch>,
    "inconsistent use of json option");

}}} // test::fixtures::patch

namespace test { namespace fixtures { namespace patch { namespace {
FOLLY_MAYBE_UNUSED FOLLY_ERASE void validateAdapters() {
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::StringPatchAdapter, 1, ::apache::thrift::op::StringPatchStruct, ::test::fixtures::patch::MyDataPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::NumberPatchAdapter, 2, ::apache::thrift::op::I32PatchStruct, ::test::fixtures::patch::MyDataPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::StructPatchAdapter, 3, ::test::fixtures::patch::MyDataPatchStruct, ::test::fixtures::patch::MyDataValuePatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::StructValuePatchAdapter, 3, ::test::fixtures::patch::MyDataValuePatchStruct, ::test::fixtures::patch::OptionalMyDataValuePatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::StructValuePatchAdapter, 5, ::test::fixtures::patch::MyDataValuePatchStruct, ::test::fixtures::patch::OptionalMyDataValuePatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::AssignPatchAdapter, 1, ::apache::thrift::op::BinaryPatchStruct, ::test::fixtures::patch::InnerUnionPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::UnionPatchAdapter, 3, ::test::fixtures::patch::InnerUnionPatchStruct, ::test::fixtures::patch::InnerUnionValuePatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::UnionPatchAdapter, 5, ::test::fixtures::patch::InnerUnionPatchStruct, ::test::fixtures::patch::InnerUnionValuePatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::UnionValuePatchAdapter, 3, ::test::fixtures::patch::InnerUnionValuePatchStruct, ::test::fixtures::patch::OptionalInnerUnionValuePatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::UnionValuePatchAdapter, 5, ::test::fixtures::patch::InnerUnionValuePatchStruct, ::test::fixtures::patch::OptionalInnerUnionValuePatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::StringPatchAdapter, 1, ::apache::thrift::op::StringPatchStruct, ::test::fixtures::patch::MyUnionPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::NumberPatchAdapter, 2, ::apache::thrift::op::I32PatchStruct, ::test::fixtures::patch::MyUnionPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::UnionValuePatchAdapter, 3, ::test::fixtures::patch::InnerUnionValuePatchStruct, ::test::fixtures::patch::MyUnionPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::UnionPatchAdapter, 3, ::test::fixtures::patch::MyUnionPatchStruct, ::test::fixtures::patch::MyUnionValuePatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::UnionPatchAdapter, 5, ::test::fixtures::patch::MyUnionPatchStruct, ::test::fixtures::patch::MyUnionValuePatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::UnionValuePatchAdapter, 3, ::test::fixtures::patch::MyUnionValuePatchStruct, ::test::fixtures::patch::OptionalMyUnionValuePatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::UnionValuePatchAdapter, 5, ::test::fixtures::patch::MyUnionValuePatchStruct, ::test::fixtures::patch::OptionalMyUnionValuePatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::ListPatchAdapter, 3, ::test::fixtures::patch::MyStructField21PatchStruct, ::test::fixtures::patch::OptionalMyStructField21PatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::ListPatchAdapter, 5, ::test::fixtures::patch::MyStructField21PatchStruct, ::test::fixtures::patch::OptionalMyStructField21PatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::SetPatchAdapter, 3, ::test::fixtures::patch::MyStructField22PatchStruct, ::test::fixtures::patch::OptionalMyStructField22PatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::SetPatchAdapter, 5, ::test::fixtures::patch::MyStructField22PatchStruct, ::test::fixtures::patch::OptionalMyStructField22PatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::MapPatchAdapter, 3, ::test::fixtures::patch::MyStructField23PatchStruct, ::test::fixtures::patch::OptionalMyStructField23PatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::MapPatchAdapter, 5, ::test::fixtures::patch::MyStructField23PatchStruct, ::test::fixtures::patch::OptionalMyStructField23PatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::BoolPatchAdapter, 1, ::apache::thrift::op::BoolPatchStruct, ::test::fixtures::patch::MyStructPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::NumberPatchAdapter, 2, ::apache::thrift::op::BytePatchStruct, ::test::fixtures::patch::MyStructPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::NumberPatchAdapter, 3, ::apache::thrift::op::I16PatchStruct, ::test::fixtures::patch::MyStructPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::NumberPatchAdapter, 4, ::apache::thrift::op::I32PatchStruct, ::test::fixtures::patch::MyStructPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::NumberPatchAdapter, 5, ::apache::thrift::op::I64PatchStruct, ::test::fixtures::patch::MyStructPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::NumberPatchAdapter, 6, ::apache::thrift::op::FloatPatchStruct, ::test::fixtures::patch::MyStructPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::NumberPatchAdapter, 7, ::apache::thrift::op::DoublePatchStruct, ::test::fixtures::patch::MyStructPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::StringPatchAdapter, 8, ::apache::thrift::op::StringPatchStruct, ::test::fixtures::patch::MyStructPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::AssignPatchAdapter, 9, ::apache::thrift::op::BinaryPatchStruct, ::test::fixtures::patch::MyStructPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::StructValuePatchAdapter, 10, ::test::fixtures::patch::MyDataValuePatchStruct, ::test::fixtures::patch::MyStructPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::OptionalPatchAdapter, 11, ::apache::thrift::op::OptionalBoolPatchStruct, ::test::fixtures::patch::MyStructPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::OptionalPatchAdapter, 12, ::apache::thrift::op::OptionalBytePatchStruct, ::test::fixtures::patch::MyStructPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::OptionalPatchAdapter, 13, ::apache::thrift::op::OptionalI16PatchStruct, ::test::fixtures::patch::MyStructPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::OptionalPatchAdapter, 14, ::apache::thrift::op::OptionalI32PatchStruct, ::test::fixtures::patch::MyStructPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::OptionalPatchAdapter, 15, ::apache::thrift::op::OptionalI64PatchStruct, ::test::fixtures::patch::MyStructPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::OptionalPatchAdapter, 16, ::apache::thrift::op::OptionalFloatPatchStruct, ::test::fixtures::patch::MyStructPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::OptionalPatchAdapter, 17, ::apache::thrift::op::OptionalDoublePatchStruct, ::test::fixtures::patch::MyStructPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::OptionalPatchAdapter, 18, ::apache::thrift::op::OptionalStringPatchStruct, ::test::fixtures::patch::MyStructPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::OptionalPatchAdapter, 19, ::apache::thrift::op::OptionalBinaryPatchStruct, ::test::fixtures::patch::MyStructPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::OptionalPatchAdapter, 20, ::test::fixtures::patch::OptionalMyDataValuePatchStruct, ::test::fixtures::patch::MyStructPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::OptionalPatchAdapter, 21, ::test::fixtures::patch::OptionalMyStructField21PatchStruct, ::test::fixtures::patch::MyStructPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::OptionalPatchAdapter, 22, ::test::fixtures::patch::OptionalMyStructField22PatchStruct, ::test::fixtures::patch::MyStructPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::OptionalPatchAdapter, 23, ::test::fixtures::patch::OptionalMyStructField23PatchStruct, ::test::fixtures::patch::MyStructPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::UnionValuePatchAdapter, 30, ::test::fixtures::patch::MyUnionValuePatchStruct, ::test::fixtures::patch::MyStructPatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::StructPatchAdapter, 3, ::test::fixtures::patch::MyStructPatchStruct, ::test::fixtures::patch::MyStructValuePatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::StructValuePatchAdapter, 3, ::test::fixtures::patch::MyStructValuePatchStruct, ::test::fixtures::patch::OptionalMyStructValuePatchStruct>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<::apache::thrift::op::detail::StructValuePatchAdapter, 5, ::test::fixtures::patch::MyStructValuePatchStruct, ::test::fixtures::patch::OptionalMyStructValuePatchStruct>();
}
}}}} // test::fixtures::patch
