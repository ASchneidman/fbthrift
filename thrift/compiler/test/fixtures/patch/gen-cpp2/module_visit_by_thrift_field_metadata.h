/**
 * Autogenerated by Thrift for src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/visitation/visit_by_thrift_field_metadata.h>
#include "thrift/compiler/test/fixtures/patch/gen-cpp2/module_metadata.h"

namespace apache {
namespace thrift {
namespace detail {

template <>
struct VisitByFieldId<::cpp2::MyData> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).data1_ref());
    case 2:
      return f(1, static_cast<T&&>(t).data2_ref());
    default:
      throwInvalidThriftId(fieldId, "::cpp2::MyData");
    }
  }
};

template <>
struct VisitByFieldId<::cpp2::MyStruct> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).boolVal_ref());
    case 2:
      return f(1, static_cast<T&&>(t).byteVal_ref());
    case 3:
      return f(2, static_cast<T&&>(t).i16Val_ref());
    case 4:
      return f(3, static_cast<T&&>(t).i32Val_ref());
    case 5:
      return f(4, static_cast<T&&>(t).i64Val_ref());
    case 6:
      return f(5, static_cast<T&&>(t).floatVal_ref());
    case 7:
      return f(6, static_cast<T&&>(t).doubleVal_ref());
    case 8:
      return f(7, static_cast<T&&>(t).stringVal_ref());
    case 9:
      return f(8, static_cast<T&&>(t).binaryVal_ref());
    case 10:
      return f(9, static_cast<T&&>(t).structVal_ref());
    case 11:
      return f(10, static_cast<T&&>(t).optBoolVal_ref());
    case 12:
      return f(11, static_cast<T&&>(t).optByteVal_ref());
    case 13:
      return f(12, static_cast<T&&>(t).optI16Val_ref());
    case 14:
      return f(13, static_cast<T&&>(t).optI32Val_ref());
    case 15:
      return f(14, static_cast<T&&>(t).optI64Val_ref());
    case 16:
      return f(15, static_cast<T&&>(t).optFloatVal_ref());
    case 17:
      return f(16, static_cast<T&&>(t).optDoubleVal_ref());
    case 18:
      return f(17, static_cast<T&&>(t).optStringVal_ref());
    case 19:
      return f(18, static_cast<T&&>(t).optBinaryVal_ref());
    case 20:
      return f(19, static_cast<T&&>(t).optStructVal_ref());
    case 21:
      return f(20, static_cast<T&&>(t).optListVal_ref());
    case 22:
      return f(21, static_cast<T&&>(t).optSetVal_ref());
    case 23:
      return f(22, static_cast<T&&>(t).optMapVal_ref());
    default:
      throwInvalidThriftId(fieldId, "::cpp2::MyStruct");
    }
  }
};

template <>
struct VisitByFieldId<::cpp2::MyDataPatch> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).data1_ref());
    case 2:
      return f(1, static_cast<T&&>(t).data2_ref());
    default:
      throwInvalidThriftId(fieldId, "::cpp2::MyDataPatch");
    }
  }
};

template <>
struct VisitByFieldId<::cpp2::MyDataValuePatch> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).assign_ref());
    case 2:
      return f(1, static_cast<T&&>(t).clear_ref());
    case 3:
      return f(2, static_cast<T&&>(t).patch_ref());
    default:
      throwInvalidThriftId(fieldId, "::cpp2::MyDataValuePatch");
    }
  }
};

template <>
struct VisitByFieldId<::cpp2::OptionalMyDataValuePatch> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 2:
      return f(0, static_cast<T&&>(t).clear_ref());
    case 3:
      return f(1, static_cast<T&&>(t).patch_ref());
    case 1:
      return f(2, static_cast<T&&>(t).ensure_ref());
    case 4:
      return f(3, static_cast<T&&>(t).patchAfter_ref());
    default:
      throwInvalidThriftId(fieldId, "::cpp2::OptionalMyDataValuePatch");
    }
  }
};

template <>
struct VisitByFieldId<::cpp2::MyStructField21Patch> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).assign_ref());
    case 2:
      return f(1, static_cast<T&&>(t).clear_ref());
    case 4:
      return f(2, static_cast<T&&>(t).prepend_ref());
    case 5:
      return f(3, static_cast<T&&>(t).append_ref());
    default:
      throwInvalidThriftId(fieldId, "::cpp2::MyStructField21Patch");
    }
  }
};

template <>
struct VisitByFieldId<::cpp2::OptionalMyStructField21Patch> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 2:
      return f(0, static_cast<T&&>(t).clear_ref());
    case 3:
      return f(1, static_cast<T&&>(t).patch_ref());
    case 1:
      return f(2, static_cast<T&&>(t).ensure_ref());
    case 4:
      return f(3, static_cast<T&&>(t).patchAfter_ref());
    default:
      throwInvalidThriftId(fieldId, "::cpp2::OptionalMyStructField21Patch");
    }
  }
};

template <>
struct VisitByFieldId<::cpp2::MyStructField22Patch> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).assign_ref());
    case 2:
      return f(1, static_cast<T&&>(t).clear_ref());
    case 4:
      return f(2, static_cast<T&&>(t).remove_ref());
    case 5:
      return f(3, static_cast<T&&>(t).add_ref());
    default:
      throwInvalidThriftId(fieldId, "::cpp2::MyStructField22Patch");
    }
  }
};

template <>
struct VisitByFieldId<::cpp2::OptionalMyStructField22Patch> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 2:
      return f(0, static_cast<T&&>(t).clear_ref());
    case 3:
      return f(1, static_cast<T&&>(t).patch_ref());
    case 1:
      return f(2, static_cast<T&&>(t).ensure_ref());
    case 4:
      return f(3, static_cast<T&&>(t).patchAfter_ref());
    default:
      throwInvalidThriftId(fieldId, "::cpp2::OptionalMyStructField22Patch");
    }
  }
};

template <>
struct VisitByFieldId<::cpp2::MyStructField23Patch> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).assign_ref());
    case 2:
      return f(1, static_cast<T&&>(t).clear_ref());
    case 7:
      return f(2, static_cast<T&&>(t).put_ref());
    default:
      throwInvalidThriftId(fieldId, "::cpp2::MyStructField23Patch");
    }
  }
};

template <>
struct VisitByFieldId<::cpp2::OptionalMyStructField23Patch> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 2:
      return f(0, static_cast<T&&>(t).clear_ref());
    case 3:
      return f(1, static_cast<T&&>(t).patch_ref());
    case 1:
      return f(2, static_cast<T&&>(t).ensure_ref());
    case 4:
      return f(3, static_cast<T&&>(t).patchAfter_ref());
    default:
      throwInvalidThriftId(fieldId, "::cpp2::OptionalMyStructField23Patch");
    }
  }
};

template <>
struct VisitByFieldId<::cpp2::MyStructPatch> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).boolVal_ref());
    case 2:
      return f(1, static_cast<T&&>(t).byteVal_ref());
    case 3:
      return f(2, static_cast<T&&>(t).i16Val_ref());
    case 4:
      return f(3, static_cast<T&&>(t).i32Val_ref());
    case 5:
      return f(4, static_cast<T&&>(t).i64Val_ref());
    case 6:
      return f(5, static_cast<T&&>(t).floatVal_ref());
    case 7:
      return f(6, static_cast<T&&>(t).doubleVal_ref());
    case 8:
      return f(7, static_cast<T&&>(t).stringVal_ref());
    case 9:
      return f(8, static_cast<T&&>(t).binaryVal_ref());
    case 10:
      return f(9, static_cast<T&&>(t).structVal_ref());
    case 11:
      return f(10, static_cast<T&&>(t).optBoolVal_ref());
    case 12:
      return f(11, static_cast<T&&>(t).optByteVal_ref());
    case 13:
      return f(12, static_cast<T&&>(t).optI16Val_ref());
    case 14:
      return f(13, static_cast<T&&>(t).optI32Val_ref());
    case 15:
      return f(14, static_cast<T&&>(t).optI64Val_ref());
    case 16:
      return f(15, static_cast<T&&>(t).optFloatVal_ref());
    case 17:
      return f(16, static_cast<T&&>(t).optDoubleVal_ref());
    case 18:
      return f(17, static_cast<T&&>(t).optStringVal_ref());
    case 19:
      return f(18, static_cast<T&&>(t).optBinaryVal_ref());
    case 20:
      return f(19, static_cast<T&&>(t).optStructVal_ref());
    case 21:
      return f(20, static_cast<T&&>(t).optListVal_ref());
    case 22:
      return f(21, static_cast<T&&>(t).optSetVal_ref());
    case 23:
      return f(22, static_cast<T&&>(t).optMapVal_ref());
    default:
      throwInvalidThriftId(fieldId, "::cpp2::MyStructPatch");
    }
  }
};

template <>
struct VisitByFieldId<::cpp2::MyStructValuePatch> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 1:
      return f(0, static_cast<T&&>(t).assign_ref());
    case 2:
      return f(1, static_cast<T&&>(t).clear_ref());
    case 3:
      return f(2, static_cast<T&&>(t).patch_ref());
    default:
      throwInvalidThriftId(fieldId, "::cpp2::MyStructValuePatch");
    }
  }
};

template <>
struct VisitByFieldId<::cpp2::OptionalMyStructValuePatch> {
  template <typename F, typename T>
  void operator()(FOLLY_MAYBE_UNUSED F&& f, int32_t fieldId, FOLLY_MAYBE_UNUSED T&& t) const {
    switch (fieldId) {
    case 2:
      return f(0, static_cast<T&&>(t).clear_ref());
    case 3:
      return f(1, static_cast<T&&>(t).patch_ref());
    case 1:
      return f(2, static_cast<T&&>(t).ensure_ref());
    case 4:
      return f(3, static_cast<T&&>(t).patchAfter_ref());
    default:
      throwInvalidThriftId(fieldId, "::cpp2::OptionalMyStructValuePatch");
    }
  }
};
} // namespace detail
} // namespace thrift
} // namespace apache
