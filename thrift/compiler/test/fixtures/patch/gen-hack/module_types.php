<?hh
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

/**
 * Original thrift struct:-
 * MyStruct
 */
class MyStruct implements \IThriftSyncStruct, \IThriftShapishSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    1 => shape(
      'var' => 'boolVal',
      'type' => \TType::BOOL,
    ),
    2 => shape(
      'var' => 'byteVal',
      'type' => \TType::BYTE,
    ),
    3 => shape(
      'var' => 'i16Val',
      'type' => \TType::I16,
    ),
    4 => shape(
      'var' => 'i32Val',
      'type' => \TType::I32,
    ),
    5 => shape(
      'var' => 'i64Val',
      'type' => \TType::I64,
    ),
    6 => shape(
      'var' => 'floatVal',
      'type' => \TType::FLOAT,
    ),
    7 => shape(
      'var' => 'doubleVal',
      'type' => \TType::DOUBLE,
    ),
    8 => shape(
      'var' => 'stringVal',
      'type' => \TType::STRING,
    ),
    9 => shape(
      'var' => 'binaryVal',
      'type' => \TType::STRING,
    ),
    11 => shape(
      'var' => 'optBoolVal',
      'type' => \TType::BOOL,
    ),
    12 => shape(
      'var' => 'optByteVal',
      'type' => \TType::BYTE,
    ),
    13 => shape(
      'var' => 'optI16Val',
      'type' => \TType::I16,
    ),
    14 => shape(
      'var' => 'optI32Val',
      'type' => \TType::I32,
    ),
    15 => shape(
      'var' => 'optI64Val',
      'type' => \TType::I64,
    ),
    16 => shape(
      'var' => 'optFloatVal',
      'type' => \TType::FLOAT,
    ),
    17 => shape(
      'var' => 'optDoubleVal',
      'type' => \TType::DOUBLE,
    ),
    18 => shape(
      'var' => 'optStringVal',
      'type' => \TType::STRING,
    ),
    19 => shape(
      'var' => 'optBinaryVal',
      'type' => \TType::STRING,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'boolVal' => 1,
    'byteVal' => 2,
    'i16Val' => 3,
    'i32Val' => 4,
    'i64Val' => 5,
    'floatVal' => 6,
    'doubleVal' => 7,
    'stringVal' => 8,
    'binaryVal' => 9,
    'optBoolVal' => 11,
    'optByteVal' => 12,
    'optI16Val' => 13,
    'optI32Val' => 14,
    'optI64Val' => 15,
    'optFloatVal' => 16,
    'optDoubleVal' => 17,
    'optStringVal' => 18,
    'optBinaryVal' => 19,
  ];

  const type TConstructorShape = shape(
    ?'boolVal' => ?bool,
    ?'byteVal' => ?int,
    ?'i16Val' => ?int,
    ?'i32Val' => ?int,
    ?'i64Val' => ?int,
    ?'floatVal' => ?float,
    ?'doubleVal' => ?float,
    ?'stringVal' => ?string,
    ?'binaryVal' => ?string,
    ?'optBoolVal' => ?bool,
    ?'optByteVal' => ?int,
    ?'optI16Val' => ?int,
    ?'optI32Val' => ?int,
    ?'optI64Val' => ?int,
    ?'optFloatVal' => ?float,
    ?'optDoubleVal' => ?float,
    ?'optStringVal' => ?string,
    ?'optBinaryVal' => ?string,
  );

  const type TShape = shape(
    'boolVal' => bool,
    'byteVal' => int,
    'i16Val' => int,
    'i32Val' => int,
    'i64Val' => int,
    'floatVal' => float,
    'doubleVal' => float,
    'stringVal' => string,
    'binaryVal' => string,
    ?'optBoolVal' => ?bool,
    ?'optByteVal' => ?int,
    ?'optI16Val' => ?int,
    ?'optI32Val' => ?int,
    ?'optI64Val' => ?int,
    ?'optFloatVal' => ?float,
    ?'optDoubleVal' => ?float,
    ?'optStringVal' => ?string,
    ?'optBinaryVal' => ?string,
    ...
  );
  const int STRUCTURAL_ID = 8977776213243343424;
  /**
   * Original thrift field:-
   * 1: bool boolVal
   */
  public bool $boolVal;
  /**
   * Original thrift field:-
   * 2: byte byteVal
   */
  public int $byteVal;
  /**
   * Original thrift field:-
   * 3: i16 i16Val
   */
  public int $i16Val;
  /**
   * Original thrift field:-
   * 4: i32 i32Val
   */
  public int $i32Val;
  /**
   * Original thrift field:-
   * 5: i64 i64Val
   */
  public int $i64Val;
  /**
   * Original thrift field:-
   * 6: float floatVal
   */
  public float $floatVal;
  /**
   * Original thrift field:-
   * 7: double doubleVal
   */
  public float $doubleVal;
  /**
   * Original thrift field:-
   * 8: string stringVal
   */
  public string $stringVal;
  /**
   * Original thrift field:-
   * 9: binary binaryVal
   */
  public string $binaryVal;
  /**
   * Original thrift field:-
   * 11: bool optBoolVal
   */
  public ?bool $optBoolVal;
  /**
   * Original thrift field:-
   * 12: byte optByteVal
   */
  public ?int $optByteVal;
  /**
   * Original thrift field:-
   * 13: i16 optI16Val
   */
  public ?int $optI16Val;
  /**
   * Original thrift field:-
   * 14: i32 optI32Val
   */
  public ?int $optI32Val;
  /**
   * Original thrift field:-
   * 15: i64 optI64Val
   */
  public ?int $optI64Val;
  /**
   * Original thrift field:-
   * 16: float optFloatVal
   */
  public ?float $optFloatVal;
  /**
   * Original thrift field:-
   * 17: double optDoubleVal
   */
  public ?float $optDoubleVal;
  /**
   * Original thrift field:-
   * 18: string optStringVal
   */
  public ?string $optStringVal;
  /**
   * Original thrift field:-
   * 19: binary optBinaryVal
   */
  public ?string $optBinaryVal;

  public function __construct(?bool $boolVal = null, ?int $byteVal = null, ?int $i16Val = null, ?int $i32Val = null, ?int $i64Val = null, ?float $floatVal = null, ?float $doubleVal = null, ?string $stringVal = null, ?string $binaryVal = null, ?bool $optBoolVal = null, ?int $optByteVal = null, ?int $optI16Val = null, ?int $optI32Val = null, ?int $optI64Val = null, ?float $optFloatVal = null, ?float $optDoubleVal = null, ?string $optStringVal = null, ?string $optBinaryVal = null  )[] {
    $this->boolVal = $boolVal ?? false;
    $this->byteVal = $byteVal ?? 0;
    $this->i16Val = $i16Val ?? 0;
    $this->i32Val = $i32Val ?? 0;
    $this->i64Val = $i64Val ?? 0;
    $this->floatVal = $floatVal ?? 0.0;
    $this->doubleVal = $doubleVal ?? 0.0;
    $this->stringVal = $stringVal ?? '';
    $this->binaryVal = $binaryVal ?? '';
    $this->optBoolVal = $optBoolVal;
    $this->optByteVal = $optByteVal;
    $this->optI16Val = $optI16Val;
    $this->optI32Val = $optI32Val;
    $this->optI64Val = $optI64Val;
    $this->optFloatVal = $optFloatVal;
    $this->optDoubleVal = $optDoubleVal;
    $this->optStringVal = $optStringVal;
    $this->optBinaryVal = $optBinaryVal;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'boolVal'),
      Shapes::idx($shape, 'byteVal'),
      Shapes::idx($shape, 'i16Val'),
      Shapes::idx($shape, 'i32Val'),
      Shapes::idx($shape, 'i64Val'),
      Shapes::idx($shape, 'floatVal'),
      Shapes::idx($shape, 'doubleVal'),
      Shapes::idx($shape, 'stringVal'),
      Shapes::idx($shape, 'binaryVal'),
      Shapes::idx($shape, 'optBoolVal'),
      Shapes::idx($shape, 'optByteVal'),
      Shapes::idx($shape, 'optI16Val'),
      Shapes::idx($shape, 'optI32Val'),
      Shapes::idx($shape, 'optI64Val'),
      Shapes::idx($shape, 'optFloatVal'),
      Shapes::idx($shape, 'optDoubleVal'),
      Shapes::idx($shape, 'optStringVal'),
      Shapes::idx($shape, 'optBinaryVal'),
    );
  }

  public function getName()[]: string {
    return 'MyStruct';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.MyStruct",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_BOOL_TYPE,
                )
              ),
              "name" => "boolVal",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_BYTE_TYPE,
                )
              ),
              "name" => "byteVal",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 3,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_I16_TYPE,
                )
              ),
              "name" => "i16Val",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 4,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_I32_TYPE,
                )
              ),
              "name" => "i32Val",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 5,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_I64_TYPE,
                )
              ),
              "name" => "i64Val",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 6,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_FLOAT_TYPE,
                )
              ),
              "name" => "floatVal",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 7,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_DOUBLE_TYPE,
                )
              ),
              "name" => "doubleVal",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 8,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_STRING_TYPE,
                )
              ),
              "name" => "stringVal",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 9,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_BINARY_TYPE,
                )
              ),
              "name" => "binaryVal",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 11,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_BOOL_TYPE,
                )
              ),
              "name" => "optBoolVal",
              "is_optional" => true,
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 12,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_BYTE_TYPE,
                )
              ),
              "name" => "optByteVal",
              "is_optional" => true,
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 13,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_I16_TYPE,
                )
              ),
              "name" => "optI16Val",
              "is_optional" => true,
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 14,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_I32_TYPE,
                )
              ),
              "name" => "optI32Val",
              "is_optional" => true,
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 15,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_I64_TYPE,
                )
              ),
              "name" => "optI64Val",
              "is_optional" => true,
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 16,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_FLOAT_TYPE,
                )
              ),
              "name" => "optFloatVal",
              "is_optional" => true,
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 17,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_DOUBLE_TYPE,
                )
              ),
              "name" => "optDoubleVal",
              "is_optional" => true,
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 18,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_STRING_TYPE,
                )
              ),
              "name" => "optStringVal",
              "is_optional" => true,
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 19,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_BINARY_TYPE,
                )
              ),
              "name" => "optBinaryVal",
              "is_optional" => true,
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[]: \TStructAnnotations {
    return shape(
      'struct' => dict[
        'GeneratePatch' => GeneratePatch::fromShape(
          shape(
          )
        ),
      ],
      'fields' => dict[
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
      $shape['boolVal'],
      $shape['byteVal'],
      $shape['i16Val'],
      $shape['i32Val'],
      $shape['i64Val'],
      $shape['floatVal'],
      $shape['doubleVal'],
      $shape['stringVal'],
      $shape['binaryVal'],
      Shapes::idx($shape, 'optBoolVal'),
      Shapes::idx($shape, 'optByteVal'),
      Shapes::idx($shape, 'optI16Val'),
      Shapes::idx($shape, 'optI32Val'),
      Shapes::idx($shape, 'optI64Val'),
      Shapes::idx($shape, 'optFloatVal'),
      Shapes::idx($shape, 'optDoubleVal'),
      Shapes::idx($shape, 'optStringVal'),
      Shapes::idx($shape, 'optBinaryVal'),
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
      'boolVal' => $this->boolVal,
      'byteVal' => $this->byteVal,
      'i16Val' => $this->i16Val,
      'i32Val' => $this->i32Val,
      'i64Val' => $this->i64Val,
      'floatVal' => $this->floatVal,
      'doubleVal' => $this->doubleVal,
      'stringVal' => $this->stringVal,
      'binaryVal' => $this->binaryVal,
      'optBoolVal' => $this->optBoolVal,
      'optByteVal' => $this->optByteVal,
      'optI16Val' => $this->optI16Val,
      'optI32Val' => $this->optI32Val,
      'optI64Val' => $this->optI64Val,
      'optFloatVal' => $this->optFloatVal,
      'optDoubleVal' => $this->optDoubleVal,
      'optStringVal' => $this->optStringVal,
      'optBinaryVal' => $this->optBinaryVal,
    );
  }
  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'boolVal') !== null) {
      $this->boolVal = /* HH_FIXME[4110] */ $parsed['boolVal'];
    }    
    if (idx($parsed, 'byteVal') !== null) {
      $_tmp0 = (int)/* HH_FIXME[4110] */ $parsed['byteVal'];
      if ($_tmp0 > 0x7f) {
        throw new \TProtocolException("number exceeds limit in field");
      } else {
        $this->byteVal = (int)$_tmp0;
      }
    }    
    if (idx($parsed, 'i16Val') !== null) {
      $_tmp1 = (int)/* HH_FIXME[4110] */ $parsed['i16Val'];
      if ($_tmp1 > 0x7fff) {
        throw new \TProtocolException("number exceeds limit in field");
      } else {
        $this->i16Val = (int)$_tmp1;
      }
    }    
    if (idx($parsed, 'i32Val') !== null) {
      $_tmp2 = (int)/* HH_FIXME[4110] */ $parsed['i32Val'];
      if ($_tmp2 > 0x7fffffff) {
        throw new \TProtocolException("number exceeds limit in field");
      } else {
        $this->i32Val = (int)$_tmp2;
      }
    }    
    if (idx($parsed, 'i64Val') !== null) {
      $this->i64Val = /* HH_FIXME[4110] */ $parsed['i64Val'];
    }    
    if (idx($parsed, 'floatVal') !== null) {
      $this->floatVal = /* HH_FIXME[4110] */ $parsed['floatVal'];
    }    
    if (idx($parsed, 'doubleVal') !== null) {
      $this->doubleVal = /* HH_FIXME[4110] */ $parsed['doubleVal'];
    }    
    if (idx($parsed, 'stringVal') !== null) {
      $this->stringVal = /* HH_FIXME[4110] */ $parsed['stringVal'];
    }    
    if (idx($parsed, 'binaryVal') !== null) {
      $this->binaryVal = /* HH_FIXME[4110] */ $parsed['binaryVal'];
    }    
    if (idx($parsed, 'optBoolVal') !== null) {
      $this->optBoolVal = /* HH_FIXME[4110] */ $parsed['optBoolVal'];
    }    
    if (idx($parsed, 'optByteVal') !== null) {
      $_tmp3 = (int)/* HH_FIXME[4110] */ $parsed['optByteVal'];
      if ($_tmp3 > 0x7f) {
        throw new \TProtocolException("number exceeds limit in field");
      } else {
        $this->optByteVal = (int)$_tmp3;
      }
    }    
    if (idx($parsed, 'optI16Val') !== null) {
      $_tmp4 = (int)/* HH_FIXME[4110] */ $parsed['optI16Val'];
      if ($_tmp4 > 0x7fff) {
        throw new \TProtocolException("number exceeds limit in field");
      } else {
        $this->optI16Val = (int)$_tmp4;
      }
    }    
    if (idx($parsed, 'optI32Val') !== null) {
      $_tmp5 = (int)/* HH_FIXME[4110] */ $parsed['optI32Val'];
      if ($_tmp5 > 0x7fffffff) {
        throw new \TProtocolException("number exceeds limit in field");
      } else {
        $this->optI32Val = (int)$_tmp5;
      }
    }    
    if (idx($parsed, 'optI64Val') !== null) {
      $this->optI64Val = /* HH_FIXME[4110] */ $parsed['optI64Val'];
    }    
    if (idx($parsed, 'optFloatVal') !== null) {
      $this->optFloatVal = /* HH_FIXME[4110] */ $parsed['optFloatVal'];
    }    
    if (idx($parsed, 'optDoubleVal') !== null) {
      $this->optDoubleVal = /* HH_FIXME[4110] */ $parsed['optDoubleVal'];
    }    
    if (idx($parsed, 'optStringVal') !== null) {
      $this->optStringVal = /* HH_FIXME[4110] */ $parsed['optStringVal'];
    }    
    if (idx($parsed, 'optBinaryVal') !== null) {
      $this->optBinaryVal = /* HH_FIXME[4110] */ $parsed['optBinaryVal'];
    }    
  }

}

/**
 * Original thrift struct:-
 * MyStructPatch
 */
class MyStructPatch implements \IThriftSyncStruct, \IThriftShapishSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    1 => shape(
      'var' => 'boolVal',
      'type' => \TType::STRUCT,
      'class' => BoolPatch::class,
    ),
    2 => shape(
      'var' => 'byteVal',
      'type' => \TType::STRUCT,
      'class' => BytePatch::class,
    ),
    3 => shape(
      'var' => 'i16Val',
      'type' => \TType::STRUCT,
      'class' => I16Patch::class,
    ),
    4 => shape(
      'var' => 'i32Val',
      'type' => \TType::STRUCT,
      'class' => I32Patch::class,
    ),
    5 => shape(
      'var' => 'i64Val',
      'type' => \TType::STRUCT,
      'class' => I64Patch::class,
    ),
    6 => shape(
      'var' => 'floatVal',
      'type' => \TType::STRUCT,
      'class' => FloatPatch::class,
    ),
    7 => shape(
      'var' => 'doubleVal',
      'type' => \TType::STRUCT,
      'class' => DoublePatch::class,
    ),
    8 => shape(
      'var' => 'stringVal',
      'type' => \TType::STRUCT,
      'class' => StringPatch::class,
    ),
    9 => shape(
      'var' => 'binaryVal',
      'type' => \TType::STRUCT,
      'class' => BinaryPatch::class,
    ),
    11 => shape(
      'var' => 'optBoolVal',
      'type' => \TType::STRUCT,
      'class' => OptionalBoolPatch::class,
    ),
    12 => shape(
      'var' => 'optByteVal',
      'type' => \TType::STRUCT,
      'class' => OptionalBytePatch::class,
    ),
    13 => shape(
      'var' => 'optI16Val',
      'type' => \TType::STRUCT,
      'class' => OptionalI16Patch::class,
    ),
    14 => shape(
      'var' => 'optI32Val',
      'type' => \TType::STRUCT,
      'class' => OptionalI32Patch::class,
    ),
    15 => shape(
      'var' => 'optI64Val',
      'type' => \TType::STRUCT,
      'class' => OptionalI64Patch::class,
    ),
    16 => shape(
      'var' => 'optFloatVal',
      'type' => \TType::STRUCT,
      'class' => OptionalFloatPatch::class,
    ),
    17 => shape(
      'var' => 'optDoubleVal',
      'type' => \TType::STRUCT,
      'class' => OptionalDoublePatch::class,
    ),
    18 => shape(
      'var' => 'optStringVal',
      'type' => \TType::STRUCT,
      'class' => OptionalStringPatch::class,
    ),
    19 => shape(
      'var' => 'optBinaryVal',
      'type' => \TType::STRUCT,
      'class' => OptionalBinaryPatch::class,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'boolVal' => 1,
    'byteVal' => 2,
    'i16Val' => 3,
    'i32Val' => 4,
    'i64Val' => 5,
    'floatVal' => 6,
    'doubleVal' => 7,
    'stringVal' => 8,
    'binaryVal' => 9,
    'optBoolVal' => 11,
    'optByteVal' => 12,
    'optI16Val' => 13,
    'optI32Val' => 14,
    'optI64Val' => 15,
    'optFloatVal' => 16,
    'optDoubleVal' => 17,
    'optStringVal' => 18,
    'optBinaryVal' => 19,
  ];

  const type TConstructorShape = shape(
    ?'boolVal' => ?BoolPatch,
    ?'byteVal' => ?BytePatch,
    ?'i16Val' => ?I16Patch,
    ?'i32Val' => ?I32Patch,
    ?'i64Val' => ?I64Patch,
    ?'floatVal' => ?FloatPatch,
    ?'doubleVal' => ?DoublePatch,
    ?'stringVal' => ?StringPatch,
    ?'binaryVal' => ?BinaryPatch,
    ?'optBoolVal' => ?OptionalBoolPatch,
    ?'optByteVal' => ?OptionalBytePatch,
    ?'optI16Val' => ?OptionalI16Patch,
    ?'optI32Val' => ?OptionalI32Patch,
    ?'optI64Val' => ?OptionalI64Patch,
    ?'optFloatVal' => ?OptionalFloatPatch,
    ?'optDoubleVal' => ?OptionalDoublePatch,
    ?'optStringVal' => ?OptionalStringPatch,
    ?'optBinaryVal' => ?OptionalBinaryPatch,
  );

  const type TShape = shape(
    ?'boolVal' => ?BoolPatch::TShape,
    ?'byteVal' => ?BytePatch::TShape,
    ?'i16Val' => ?I16Patch::TShape,
    ?'i32Val' => ?I32Patch::TShape,
    ?'i64Val' => ?I64Patch::TShape,
    ?'floatVal' => ?FloatPatch::TShape,
    ?'doubleVal' => ?DoublePatch::TShape,
    ?'stringVal' => ?StringPatch::TShape,
    ?'binaryVal' => ?BinaryPatch::TShape,
    ?'optBoolVal' => ?OptionalBoolPatch::TShape,
    ?'optByteVal' => ?OptionalBytePatch::TShape,
    ?'optI16Val' => ?OptionalI16Patch::TShape,
    ?'optI32Val' => ?OptionalI32Patch::TShape,
    ?'optI64Val' => ?OptionalI64Patch::TShape,
    ?'optFloatVal' => ?OptionalFloatPatch::TShape,
    ?'optDoubleVal' => ?OptionalDoublePatch::TShape,
    ?'optStringVal' => ?OptionalStringPatch::TShape,
    ?'optBinaryVal' => ?OptionalBinaryPatch::TShape,
    ...
  );
  const int STRUCTURAL_ID = 7638830398815647899;
  /**
   * Original thrift field:-
   * 1: struct patch.BoolPatch boolVal
   */
  public ?BoolPatch $boolVal;
  /**
   * Original thrift field:-
   * 2: struct patch.BytePatch byteVal
   */
  public ?BytePatch $byteVal;
  /**
   * Original thrift field:-
   * 3: struct patch.I16Patch i16Val
   */
  public ?I16Patch $i16Val;
  /**
   * Original thrift field:-
   * 4: struct patch.I32Patch i32Val
   */
  public ?I32Patch $i32Val;
  /**
   * Original thrift field:-
   * 5: struct patch.I64Patch i64Val
   */
  public ?I64Patch $i64Val;
  /**
   * Original thrift field:-
   * 6: struct patch.FloatPatch floatVal
   */
  public ?FloatPatch $floatVal;
  /**
   * Original thrift field:-
   * 7: struct patch.DoublePatch doubleVal
   */
  public ?DoublePatch $doubleVal;
  /**
   * Original thrift field:-
   * 8: struct patch.StringPatch stringVal
   */
  public ?StringPatch $stringVal;
  /**
   * Original thrift field:-
   * 9: struct patch.BinaryPatch binaryVal
   */
  public ?BinaryPatch $binaryVal;
  /**
   * Original thrift field:-
   * 11: struct patch.OptionalBoolPatch optBoolVal
   */
  public ?OptionalBoolPatch $optBoolVal;
  /**
   * Original thrift field:-
   * 12: struct patch.OptionalBytePatch optByteVal
   */
  public ?OptionalBytePatch $optByteVal;
  /**
   * Original thrift field:-
   * 13: struct patch.OptionalI16Patch optI16Val
   */
  public ?OptionalI16Patch $optI16Val;
  /**
   * Original thrift field:-
   * 14: struct patch.OptionalI32Patch optI32Val
   */
  public ?OptionalI32Patch $optI32Val;
  /**
   * Original thrift field:-
   * 15: struct patch.OptionalI64Patch optI64Val
   */
  public ?OptionalI64Patch $optI64Val;
  /**
   * Original thrift field:-
   * 16: struct patch.OptionalFloatPatch optFloatVal
   */
  public ?OptionalFloatPatch $optFloatVal;
  /**
   * Original thrift field:-
   * 17: struct patch.OptionalDoublePatch optDoubleVal
   */
  public ?OptionalDoublePatch $optDoubleVal;
  /**
   * Original thrift field:-
   * 18: struct patch.OptionalStringPatch optStringVal
   */
  public ?OptionalStringPatch $optStringVal;
  /**
   * Original thrift field:-
   * 19: struct patch.OptionalBinaryPatch optBinaryVal
   */
  public ?OptionalBinaryPatch $optBinaryVal;

  public function __construct(?BoolPatch $boolVal = null, ?BytePatch $byteVal = null, ?I16Patch $i16Val = null, ?I32Patch $i32Val = null, ?I64Patch $i64Val = null, ?FloatPatch $floatVal = null, ?DoublePatch $doubleVal = null, ?StringPatch $stringVal = null, ?BinaryPatch $binaryVal = null, ?OptionalBoolPatch $optBoolVal = null, ?OptionalBytePatch $optByteVal = null, ?OptionalI16Patch $optI16Val = null, ?OptionalI32Patch $optI32Val = null, ?OptionalI64Patch $optI64Val = null, ?OptionalFloatPatch $optFloatVal = null, ?OptionalDoublePatch $optDoubleVal = null, ?OptionalStringPatch $optStringVal = null, ?OptionalBinaryPatch $optBinaryVal = null  )[] {
    $this->boolVal = $boolVal;
    $this->byteVal = $byteVal;
    $this->i16Val = $i16Val;
    $this->i32Val = $i32Val;
    $this->i64Val = $i64Val;
    $this->floatVal = $floatVal;
    $this->doubleVal = $doubleVal;
    $this->stringVal = $stringVal;
    $this->binaryVal = $binaryVal;
    $this->optBoolVal = $optBoolVal;
    $this->optByteVal = $optByteVal;
    $this->optI16Val = $optI16Val;
    $this->optI32Val = $optI32Val;
    $this->optI64Val = $optI64Val;
    $this->optFloatVal = $optFloatVal;
    $this->optDoubleVal = $optDoubleVal;
    $this->optStringVal = $optStringVal;
    $this->optBinaryVal = $optBinaryVal;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'boolVal'),
      Shapes::idx($shape, 'byteVal'),
      Shapes::idx($shape, 'i16Val'),
      Shapes::idx($shape, 'i32Val'),
      Shapes::idx($shape, 'i64Val'),
      Shapes::idx($shape, 'floatVal'),
      Shapes::idx($shape, 'doubleVal'),
      Shapes::idx($shape, 'stringVal'),
      Shapes::idx($shape, 'binaryVal'),
      Shapes::idx($shape, 'optBoolVal'),
      Shapes::idx($shape, 'optByteVal'),
      Shapes::idx($shape, 'optI16Val'),
      Shapes::idx($shape, 'optI32Val'),
      Shapes::idx($shape, 'optI64Val'),
      Shapes::idx($shape, 'optFloatVal'),
      Shapes::idx($shape, 'optDoubleVal'),
      Shapes::idx($shape, 'optStringVal'),
      Shapes::idx($shape, 'optBinaryVal'),
    );
  }

  public function getName()[]: string {
    return 'MyStructPatch';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.MyStructPatch",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.BoolPatch",
                    )
                  ),
                )
              ),
              "name" => "boolVal",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.BytePatch",
                    )
                  ),
                )
              ),
              "name" => "byteVal",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 3,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.I16Patch",
                    )
                  ),
                )
              ),
              "name" => "i16Val",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 4,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.I32Patch",
                    )
                  ),
                )
              ),
              "name" => "i32Val",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 5,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.I64Patch",
                    )
                  ),
                )
              ),
              "name" => "i64Val",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 6,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.FloatPatch",
                    )
                  ),
                )
              ),
              "name" => "floatVal",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 7,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.DoublePatch",
                    )
                  ),
                )
              ),
              "name" => "doubleVal",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 8,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.StringPatch",
                    )
                  ),
                )
              ),
              "name" => "stringVal",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 9,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.BinaryPatch",
                    )
                  ),
                )
              ),
              "name" => "binaryVal",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 11,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.OptionalBoolPatch",
                    )
                  ),
                )
              ),
              "name" => "optBoolVal",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 12,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.OptionalBytePatch",
                    )
                  ),
                )
              ),
              "name" => "optByteVal",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 13,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.OptionalI16Patch",
                    )
                  ),
                )
              ),
              "name" => "optI16Val",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 14,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.OptionalI32Patch",
                    )
                  ),
                )
              ),
              "name" => "optI32Val",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 15,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.OptionalI64Patch",
                    )
                  ),
                )
              ),
              "name" => "optI64Val",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 16,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.OptionalFloatPatch",
                    )
                  ),
                )
              ),
              "name" => "optFloatVal",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 17,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.OptionalDoublePatch",
                    )
                  ),
                )
              ),
              "name" => "optDoubleVal",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 18,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.OptionalStringPatch",
                    )
                  ),
                )
              ),
              "name" => "optStringVal",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 19,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.OptionalBinaryPatch",
                    )
                  ),
                )
              ),
              "name" => "optBinaryVal",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
        'boolVal' => shape(
          'field' => dict[],
          'type' => dict[
            'GenerateOptionalPatch' => GenerateOptionalPatch::fromShape(
              shape(
              )
            ),
            'facebook_thrift_annotation_thrift_Experimental' => facebook_thrift_annotation_thrift_Experimental::fromShape(
              shape(
              )
            ),
          ],
        ),
        'byteVal' => shape(
          'field' => dict[],
          'type' => dict[
            'GenerateOptionalPatch' => GenerateOptionalPatch::fromShape(
              shape(
              )
            ),
            'facebook_thrift_annotation_thrift_Experimental' => facebook_thrift_annotation_thrift_Experimental::fromShape(
              shape(
              )
            ),
          ],
        ),
        'i16Val' => shape(
          'field' => dict[],
          'type' => dict[
            'GenerateOptionalPatch' => GenerateOptionalPatch::fromShape(
              shape(
              )
            ),
            'facebook_thrift_annotation_thrift_Experimental' => facebook_thrift_annotation_thrift_Experimental::fromShape(
              shape(
              )
            ),
          ],
        ),
        'i32Val' => shape(
          'field' => dict[],
          'type' => dict[
            'GenerateOptionalPatch' => GenerateOptionalPatch::fromShape(
              shape(
              )
            ),
            'facebook_thrift_annotation_thrift_Experimental' => facebook_thrift_annotation_thrift_Experimental::fromShape(
              shape(
              )
            ),
          ],
        ),
        'i64Val' => shape(
          'field' => dict[],
          'type' => dict[
            'GenerateOptionalPatch' => GenerateOptionalPatch::fromShape(
              shape(
              )
            ),
            'facebook_thrift_annotation_thrift_Experimental' => facebook_thrift_annotation_thrift_Experimental::fromShape(
              shape(
              )
            ),
          ],
        ),
        'floatVal' => shape(
          'field' => dict[],
          'type' => dict[
            'GenerateOptionalPatch' => GenerateOptionalPatch::fromShape(
              shape(
              )
            ),
            'facebook_thrift_annotation_thrift_Experimental' => facebook_thrift_annotation_thrift_Experimental::fromShape(
              shape(
              )
            ),
          ],
        ),
        'doubleVal' => shape(
          'field' => dict[],
          'type' => dict[
            'GenerateOptionalPatch' => GenerateOptionalPatch::fromShape(
              shape(
              )
            ),
            'facebook_thrift_annotation_thrift_Experimental' => facebook_thrift_annotation_thrift_Experimental::fromShape(
              shape(
              )
            ),
          ],
        ),
        'stringVal' => shape(
          'field' => dict[],
          'type' => dict[
            'GenerateOptionalPatch' => GenerateOptionalPatch::fromShape(
              shape(
              )
            ),
            'facebook_thrift_annotation_thrift_Experimental' => facebook_thrift_annotation_thrift_Experimental::fromShape(
              shape(
              )
            ),
          ],
        ),
        'binaryVal' => shape(
          'field' => dict[],
          'type' => dict[
            'GenerateOptionalPatch' => GenerateOptionalPatch::fromShape(
              shape(
              )
            ),
            'facebook_thrift_annotation_thrift_Experimental' => facebook_thrift_annotation_thrift_Experimental::fromShape(
              shape(
              )
            ),
          ],
        ),
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'boolVal') === null ? null : (BoolPatch::__fromShape($shape['boolVal'])),
      Shapes::idx($shape, 'byteVal') === null ? null : (BytePatch::__fromShape($shape['byteVal'])),
      Shapes::idx($shape, 'i16Val') === null ? null : (I16Patch::__fromShape($shape['i16Val'])),
      Shapes::idx($shape, 'i32Val') === null ? null : (I32Patch::__fromShape($shape['i32Val'])),
      Shapes::idx($shape, 'i64Val') === null ? null : (I64Patch::__fromShape($shape['i64Val'])),
      Shapes::idx($shape, 'floatVal') === null ? null : (FloatPatch::__fromShape($shape['floatVal'])),
      Shapes::idx($shape, 'doubleVal') === null ? null : (DoublePatch::__fromShape($shape['doubleVal'])),
      Shapes::idx($shape, 'stringVal') === null ? null : (StringPatch::__fromShape($shape['stringVal'])),
      Shapes::idx($shape, 'binaryVal') === null ? null : (BinaryPatch::__fromShape($shape['binaryVal'])),
      Shapes::idx($shape, 'optBoolVal') === null ? null : (OptionalBoolPatch::__fromShape($shape['optBoolVal'])),
      Shapes::idx($shape, 'optByteVal') === null ? null : (OptionalBytePatch::__fromShape($shape['optByteVal'])),
      Shapes::idx($shape, 'optI16Val') === null ? null : (OptionalI16Patch::__fromShape($shape['optI16Val'])),
      Shapes::idx($shape, 'optI32Val') === null ? null : (OptionalI32Patch::__fromShape($shape['optI32Val'])),
      Shapes::idx($shape, 'optI64Val') === null ? null : (OptionalI64Patch::__fromShape($shape['optI64Val'])),
      Shapes::idx($shape, 'optFloatVal') === null ? null : (OptionalFloatPatch::__fromShape($shape['optFloatVal'])),
      Shapes::idx($shape, 'optDoubleVal') === null ? null : (OptionalDoublePatch::__fromShape($shape['optDoubleVal'])),
      Shapes::idx($shape, 'optStringVal') === null ? null : (OptionalStringPatch::__fromShape($shape['optStringVal'])),
      Shapes::idx($shape, 'optBinaryVal') === null ? null : (OptionalBinaryPatch::__fromShape($shape['optBinaryVal'])),
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
      'boolVal' => $this->boolVal?->__toShape(),
      'byteVal' => $this->byteVal?->__toShape(),
      'i16Val' => $this->i16Val?->__toShape(),
      'i32Val' => $this->i32Val?->__toShape(),
      'i64Val' => $this->i64Val?->__toShape(),
      'floatVal' => $this->floatVal?->__toShape(),
      'doubleVal' => $this->doubleVal?->__toShape(),
      'stringVal' => $this->stringVal?->__toShape(),
      'binaryVal' => $this->binaryVal?->__toShape(),
      'optBoolVal' => $this->optBoolVal?->__toShape(),
      'optByteVal' => $this->optByteVal?->__toShape(),
      'optI16Val' => $this->optI16Val?->__toShape(),
      'optI32Val' => $this->optI32Val?->__toShape(),
      'optI64Val' => $this->optI64Val?->__toShape(),
      'optFloatVal' => $this->optFloatVal?->__toShape(),
      'optDoubleVal' => $this->optDoubleVal?->__toShape(),
      'optStringVal' => $this->optStringVal?->__toShape(),
      'optBinaryVal' => $this->optBinaryVal?->__toShape(),
    );
  }
  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'boolVal') !== null) {
      $_tmp0 = json_encode(/* HH_FIXME[4110] */ $parsed['boolVal']);
      $_tmp1 = BoolPatch::withDefaultValues();
      $_tmp1->readFromJson($_tmp0);
      $this->boolVal = $_tmp1;
    }    
    if (idx($parsed, 'byteVal') !== null) {
      $_tmp2 = json_encode(/* HH_FIXME[4110] */ $parsed['byteVal']);
      $_tmp3 = BytePatch::withDefaultValues();
      $_tmp3->readFromJson($_tmp2);
      $this->byteVal = $_tmp3;
    }    
    if (idx($parsed, 'i16Val') !== null) {
      $_tmp4 = json_encode(/* HH_FIXME[4110] */ $parsed['i16Val']);
      $_tmp5 = I16Patch::withDefaultValues();
      $_tmp5->readFromJson($_tmp4);
      $this->i16Val = $_tmp5;
    }    
    if (idx($parsed, 'i32Val') !== null) {
      $_tmp6 = json_encode(/* HH_FIXME[4110] */ $parsed['i32Val']);
      $_tmp7 = I32Patch::withDefaultValues();
      $_tmp7->readFromJson($_tmp6);
      $this->i32Val = $_tmp7;
    }    
    if (idx($parsed, 'i64Val') !== null) {
      $_tmp8 = json_encode(/* HH_FIXME[4110] */ $parsed['i64Val']);
      $_tmp9 = I64Patch::withDefaultValues();
      $_tmp9->readFromJson($_tmp8);
      $this->i64Val = $_tmp9;
    }    
    if (idx($parsed, 'floatVal') !== null) {
      $_tmp10 = json_encode(/* HH_FIXME[4110] */ $parsed['floatVal']);
      $_tmp11 = FloatPatch::withDefaultValues();
      $_tmp11->readFromJson($_tmp10);
      $this->floatVal = $_tmp11;
    }    
    if (idx($parsed, 'doubleVal') !== null) {
      $_tmp12 = json_encode(/* HH_FIXME[4110] */ $parsed['doubleVal']);
      $_tmp13 = DoublePatch::withDefaultValues();
      $_tmp13->readFromJson($_tmp12);
      $this->doubleVal = $_tmp13;
    }    
    if (idx($parsed, 'stringVal') !== null) {
      $_tmp14 = json_encode(/* HH_FIXME[4110] */ $parsed['stringVal']);
      $_tmp15 = StringPatch::withDefaultValues();
      $_tmp15->readFromJson($_tmp14);
      $this->stringVal = $_tmp15;
    }    
    if (idx($parsed, 'binaryVal') !== null) {
      $_tmp16 = json_encode(/* HH_FIXME[4110] */ $parsed['binaryVal']);
      $_tmp17 = BinaryPatch::withDefaultValues();
      $_tmp17->readFromJson($_tmp16);
      $this->binaryVal = $_tmp17;
    }    
    if (idx($parsed, 'optBoolVal') !== null) {
      $_tmp18 = json_encode(/* HH_FIXME[4110] */ $parsed['optBoolVal']);
      $_tmp19 = OptionalBoolPatch::withDefaultValues();
      $_tmp19->readFromJson($_tmp18);
      $this->optBoolVal = $_tmp19;
    }    
    if (idx($parsed, 'optByteVal') !== null) {
      $_tmp20 = json_encode(/* HH_FIXME[4110] */ $parsed['optByteVal']);
      $_tmp21 = OptionalBytePatch::withDefaultValues();
      $_tmp21->readFromJson($_tmp20);
      $this->optByteVal = $_tmp21;
    }    
    if (idx($parsed, 'optI16Val') !== null) {
      $_tmp22 = json_encode(/* HH_FIXME[4110] */ $parsed['optI16Val']);
      $_tmp23 = OptionalI16Patch::withDefaultValues();
      $_tmp23->readFromJson($_tmp22);
      $this->optI16Val = $_tmp23;
    }    
    if (idx($parsed, 'optI32Val') !== null) {
      $_tmp24 = json_encode(/* HH_FIXME[4110] */ $parsed['optI32Val']);
      $_tmp25 = OptionalI32Patch::withDefaultValues();
      $_tmp25->readFromJson($_tmp24);
      $this->optI32Val = $_tmp25;
    }    
    if (idx($parsed, 'optI64Val') !== null) {
      $_tmp26 = json_encode(/* HH_FIXME[4110] */ $parsed['optI64Val']);
      $_tmp27 = OptionalI64Patch::withDefaultValues();
      $_tmp27->readFromJson($_tmp26);
      $this->optI64Val = $_tmp27;
    }    
    if (idx($parsed, 'optFloatVal') !== null) {
      $_tmp28 = json_encode(/* HH_FIXME[4110] */ $parsed['optFloatVal']);
      $_tmp29 = OptionalFloatPatch::withDefaultValues();
      $_tmp29->readFromJson($_tmp28);
      $this->optFloatVal = $_tmp29;
    }    
    if (idx($parsed, 'optDoubleVal') !== null) {
      $_tmp30 = json_encode(/* HH_FIXME[4110] */ $parsed['optDoubleVal']);
      $_tmp31 = OptionalDoublePatch::withDefaultValues();
      $_tmp31->readFromJson($_tmp30);
      $this->optDoubleVal = $_tmp31;
    }    
    if (idx($parsed, 'optStringVal') !== null) {
      $_tmp32 = json_encode(/* HH_FIXME[4110] */ $parsed['optStringVal']);
      $_tmp33 = OptionalStringPatch::withDefaultValues();
      $_tmp33->readFromJson($_tmp32);
      $this->optStringVal = $_tmp33;
    }    
    if (idx($parsed, 'optBinaryVal') !== null) {
      $_tmp34 = json_encode(/* HH_FIXME[4110] */ $parsed['optBinaryVal']);
      $_tmp35 = OptionalBinaryPatch::withDefaultValues();
      $_tmp35->readFromJson($_tmp34);
      $this->optBinaryVal = $_tmp35;
    }    
  }

}

/**
 * Original thrift struct:-
 * MyStructValuePatch
 */
class MyStructValuePatch implements \IThriftSyncStruct, \IThriftShapishSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    1 => shape(
      'var' => 'assign',
      'type' => \TType::STRUCT,
      'class' => MyStruct::class,
    ),
    2 => shape(
      'var' => 'clear',
      'type' => \TType::BOOL,
    ),
    3 => shape(
      'var' => 'patch',
      'type' => \TType::STRUCT,
      'class' => MyStructPatch::class,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'assign' => 1,
    'clear' => 2,
    'patch' => 3,
  ];

  const type TConstructorShape = shape(
    ?'assign' => ?MyStruct,
    ?'clear' => ?bool,
    ?'patch' => ?MyStructPatch,
  );

  const type TShape = shape(
    ?'assign' => ?MyStruct::TShape,
    'clear' => bool,
    ?'patch' => ?MyStructPatch::TShape,
    ...
  );
  const int STRUCTURAL_ID = 2768499115510098920;
  /**
   * Assigns to a given struct. If set, all other operations are ignored.
   * 
   * Original thrift field:-
   * 1: struct module.MyStruct assign
   */
  public ?MyStruct $assign;
  /**
   * Clears a given struct. Applied first.
   * 
   * Original thrift field:-
   * 2: bool clear
   */
  public bool $clear;
  /**
   * Patches a given struct. Applied second.
   * 
   * Original thrift field:-
   * 3: struct module.MyStructPatch patch
   */
  public ?MyStructPatch $patch;

  public function __construct(?MyStruct $assign = null, ?bool $clear = null, ?MyStructPatch $patch = null  )[] {
    $this->assign = $assign;
    $this->clear = $clear ?? false;
    $this->patch = $patch;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'assign'),
      Shapes::idx($shape, 'clear'),
      Shapes::idx($shape, 'patch'),
    );
  }

  public function getName()[]: string {
    return 'MyStructValuePatch';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.MyStructValuePatch",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.MyStruct",
                    )
                  ),
                )
              ),
              "name" => "assign",
              "is_optional" => true,
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_BOOL_TYPE,
                )
              ),
              "name" => "clear",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 3,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.MyStructPatch",
                    )
                  ),
                )
              ),
              "name" => "patch",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
        'assign' => shape(
          'field' => dict[],
          'type' => dict[
            'GeneratePatch' => GeneratePatch::fromShape(
              shape(
              )
            ),
          ],
        ),
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'assign') === null ? null : (MyStruct::__fromShape($shape['assign'])),
      $shape['clear'],
      Shapes::idx($shape, 'patch') === null ? null : (MyStructPatch::__fromShape($shape['patch'])),
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
      'assign' => $this->assign?->__toShape(),
      'clear' => $this->clear,
      'patch' => $this->patch?->__toShape(),
    );
  }
  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'assign') !== null) {
      $_tmp0 = json_encode(/* HH_FIXME[4110] */ $parsed['assign']);
      $_tmp1 = MyStruct::withDefaultValues();
      $_tmp1->readFromJson($_tmp0);
      $this->assign = $_tmp1;
    }    
    if (idx($parsed, 'clear') !== null) {
      $this->clear = /* HH_FIXME[4110] */ $parsed['clear'];
    }    
    if (idx($parsed, 'patch') !== null) {
      $_tmp2 = json_encode(/* HH_FIXME[4110] */ $parsed['patch']);
      $_tmp3 = MyStructPatch::withDefaultValues();
      $_tmp3->readFromJson($_tmp2);
      $this->patch = $_tmp3;
    }    
  }

}

/**
 * Original thrift struct:-
 * OptionalMyStructValuePatch
 */
class OptionalMyStructValuePatch implements \IThriftSyncStruct, \IThriftShapishSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    2 => shape(
      'var' => 'clear',
      'type' => \TType::BOOL,
    ),
    3 => shape(
      'var' => 'patch',
      'type' => \TType::STRUCT,
      'class' => MyStructValuePatch::class,
    ),
    1 => shape(
      'var' => 'ensure',
      'type' => \TType::STRUCT,
      'class' => MyStruct::class,
    ),
    4 => shape(
      'var' => 'patchAfter',
      'type' => \TType::STRUCT,
      'class' => MyStructValuePatch::class,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'clear' => 2,
    'patch' => 3,
    'ensure' => 1,
    'patchAfter' => 4,
  ];

  const type TConstructorShape = shape(
    ?'clear' => ?bool,
    ?'patch' => ?MyStructValuePatch,
    ?'ensure' => ?MyStruct,
    ?'patchAfter' => ?MyStructValuePatch,
  );

  const type TShape = shape(
    'clear' => bool,
    ?'patch' => ?MyStructValuePatch::TShape,
    ?'ensure' => ?MyStruct::TShape,
    ?'patchAfter' => ?MyStructValuePatch::TShape,
    ...
  );
  const int STRUCTURAL_ID = 1742817034691857525;
  /**
   * If the optional value should be cleared. Applied first.
   * 
   * Original thrift field:-
   * 2: bool clear
   */
  public bool $clear;
  /**
   * The patch to apply to any set value. Applied second.
   * 
   * Original thrift field:-
   * 3: struct module.MyStructValuePatch patch
   */
  public ?MyStructValuePatch $patch;
  /**
   * The value with which to initialize any unset value. Applied third.
   * 
   * Original thrift field:-
   * 1: struct module.MyStruct ensure
   */
  public ?MyStruct $ensure;
  /**
   * The patch to apply to any set value, including newly set values. Applied fourth.
   * 
   * Original thrift field:-
   * 4: struct module.MyStructValuePatch patchAfter
   */
  public ?MyStructValuePatch $patchAfter;

  public function __construct(?bool $clear = null, ?MyStructValuePatch $patch = null, ?MyStruct $ensure = null, ?MyStructValuePatch $patchAfter = null  )[] {
    $this->clear = $clear ?? false;
    $this->patch = $patch;
    $this->ensure = $ensure;
    $this->patchAfter = $patchAfter;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'clear'),
      Shapes::idx($shape, 'patch'),
      Shapes::idx($shape, 'ensure'),
      Shapes::idx($shape, 'patchAfter'),
    );
  }

  public function getName()[]: string {
    return 'OptionalMyStructValuePatch';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.OptionalMyStructValuePatch",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_BOOL_TYPE,
                )
              ),
              "name" => "clear",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 3,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.MyStructValuePatch",
                    )
                  ),
                )
              ),
              "name" => "patch",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.MyStruct",
                    )
                  ),
                )
              ),
              "name" => "ensure",
              "is_optional" => true,
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 4,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.MyStructValuePatch",
                    )
                  ),
                )
              ),
              "name" => "patchAfter",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
        'ensure' => shape(
          'field' => dict[],
          'type' => dict[
            'GeneratePatch' => GeneratePatch::fromShape(
              shape(
              )
            ),
          ],
        ),
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
      $shape['clear'],
      Shapes::idx($shape, 'patch') === null ? null : (MyStructValuePatch::__fromShape($shape['patch'])),
      Shapes::idx($shape, 'ensure') === null ? null : (MyStruct::__fromShape($shape['ensure'])),
      Shapes::idx($shape, 'patchAfter') === null ? null : (MyStructValuePatch::__fromShape($shape['patchAfter'])),
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
      'clear' => $this->clear,
      'patch' => $this->patch?->__toShape(),
      'ensure' => $this->ensure?->__toShape(),
      'patchAfter' => $this->patchAfter?->__toShape(),
    );
  }
  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'clear') !== null) {
      $this->clear = /* HH_FIXME[4110] */ $parsed['clear'];
    }    
    if (idx($parsed, 'patch') !== null) {
      $_tmp0 = json_encode(/* HH_FIXME[4110] */ $parsed['patch']);
      $_tmp1 = MyStructValuePatch::withDefaultValues();
      $_tmp1->readFromJson($_tmp0);
      $this->patch = $_tmp1;
    }    
    if (idx($parsed, 'ensure') !== null) {
      $_tmp2 = json_encode(/* HH_FIXME[4110] */ $parsed['ensure']);
      $_tmp3 = MyStruct::withDefaultValues();
      $_tmp3->readFromJson($_tmp2);
      $this->ensure = $_tmp3;
    }    
    if (idx($parsed, 'patchAfter') !== null) {
      $_tmp4 = json_encode(/* HH_FIXME[4110] */ $parsed['patchAfter']);
      $_tmp5 = MyStructValuePatch::withDefaultValues();
      $_tmp5->readFromJson($_tmp4);
      $this->patchAfter = $_tmp5;
    }    
  }

}

