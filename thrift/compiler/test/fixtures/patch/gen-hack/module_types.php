<?hh
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

/**
 * Original thrift struct:-
 * MyData
 */
class MyData implements \IThriftSyncStruct, \IThriftShapishSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    1 => shape(
      'var' => 'data1',
      'type' => \TType::STRING,
    ),
    2 => shape(
      'var' => 'data2',
      'type' => \TType::I32,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'data1' => 1,
    'data2' => 2,
  ];

  const type TConstructorShape = shape(
    ?'data1' => ?string,
    ?'data2' => ?int,
  );

  const type TShape = shape(
    'data1' => string,
    'data2' => int,
    ...
  );
  const int STRUCTURAL_ID = 5497211930825790974;
  /**
   * Original thrift field:-
   * 1: string data1
   */
  public string $data1;
  /**
   * Original thrift field:-
   * 2: i32 data2
   */
  public int $data2;

  public function __construct(?string $data1 = null, ?int $data2 = null  )[] {
    $this->data1 = $data1 ?? '';
    $this->data2 = $data2 ?? 0;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'data1'),
      Shapes::idx($shape, 'data2'),
    );
  }

  public function getName()[]: string {
    return 'MyData';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.MyData",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_STRING_TYPE,
                )
              ),
              "name" => "data1",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_I32_TYPE,
                )
              ),
              "name" => "data2",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
      $shape['data1'],
      $shape['data2'],
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
      'data1' => $this->data1,
      'data2' => $this->data2,
    );
  }
  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'data1') !== null) {
      $this->data1 = /* HH_FIXME[4110] */ $parsed['data1'];
    }    
    if (idx($parsed, 'data2') !== null) {
      $_tmp0 = (int)/* HH_FIXME[4110] */ $parsed['data2'];
      if ($_tmp0 > 0x7fffffff) {
        throw new \TProtocolException("number exceeds limit in field");
      } else {
        $this->data2 = (int)$_tmp0;
      }
    }    
  }

}

enum MyUnionEnum: int {
  _EMPTY_ = 0;
  option1 = 1;
  option2 = 2;
}

/**
 * Original thrift struct:-
 * MyUnion
 */
class MyUnion implements \IThriftSyncStruct, \IThriftUnion<MyUnionEnum>, \IThriftShapishSyncStruct {
  use \ThriftUnionSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    1 => shape(
      'var' => 'option1',
      'union' => true,
      'type' => \TType::STRING,
    ),
    2 => shape(
      'var' => 'option2',
      'union' => true,
      'type' => \TType::I32,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'option1' => 1,
    'option2' => 2,
  ];

  const type TConstructorShape = shape(
    ?'option1' => ?string,
    ?'option2' => ?int,
  );

  const type TShape = shape(
    ?'option1' => ?string,
    ?'option2' => ?int,
    ...
  );
  const int STRUCTURAL_ID = 2852365033411015550;
  /**
   * Original thrift field:-
   * 1: string option1
   */
  public ?string $option1;
  /**
   * Original thrift field:-
   * 2: i32 option2
   */
  public ?int $option2;
  protected MyUnionEnum $_type = MyUnionEnum::_EMPTY_;

  public function __construct(?string $option1 = null, ?int $option2 = null  )[] {
    $this->_type = MyUnionEnum::_EMPTY_;
    if ($option1 !== null) {
      $this->option1 = $option1;
      $this->_type = MyUnionEnum::option1;
    }
    if ($option2 !== null) {
      $this->option2 = $option2;
      $this->_type = MyUnionEnum::option2;
    }
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'option1'),
      Shapes::idx($shape, 'option2'),
    );
  }

  public function getName()[]: string {
    return 'MyUnion';
  }

  public function getType()[]: MyUnionEnum {
    return $this->_type;
  }

  public function reset()[write_props]: void {
    switch ($this->_type) {
      case MyUnionEnum::option1:
        $this->option1 = null;
        break;
      case MyUnionEnum::option2:
        $this->option2 = null;
        break;
      case MyUnionEnum::_EMPTY_:
        break;
    }
    $this->_type = MyUnionEnum::_EMPTY_;
  }

  public function set_option1(string $option1)[write_props]: this {
    $this->reset();
    $this->_type = MyUnionEnum::option1;
    $this->option1 = $option1;
    return $this;
  }

  public function get_option1()[]: ?string {
    return $this->option1;
  }

  public function getx_option1()[]: string {
    invariant(
      $this->_type === MyUnionEnum::option1,
      'get_option1 called on an instance of MyUnion whose current type is %s',
      (string)$this->_type,
    );
    return $this->option1 as nonnull;
  }

  public function set_option2(int $option2)[write_props]: this {
    $this->reset();
    $this->_type = MyUnionEnum::option2;
    $this->option2 = $option2;
    return $this;
  }

  public function get_option2()[]: ?int {
    return $this->option2;
  }

  public function getx_option2()[]: int {
    invariant(
      $this->_type === MyUnionEnum::option2,
      'get_option2 called on an instance of MyUnion whose current type is %s',
      (string)$this->_type,
    );
    return $this->option2 as nonnull;
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.MyUnion",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_STRING_TYPE,
                )
              ),
              "name" => "option1",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_I32_TYPE,
                )
              ),
              "name" => "option2",
            )
          ),
        ],
        "is_union" => true,
      )
    );
  }

  public static function getAllStructuredAnnotations()[]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'option1'),
      Shapes::idx($shape, 'option2'),
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
      'option1' => $this->option1,
      'option2' => $this->option2,
    );
  }
  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

  public function readFromJson(string $jsonText): void {
    $this->_type = MyUnionEnum::_EMPTY_;
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'option1') !== null) {
      $this->option1 = /* HH_FIXME[4110] */ $parsed['option1'];
      $this->_type = MyUnionEnum::option1;
    }    
    if (idx($parsed, 'option2') !== null) {
      $_tmp0 = (int)/* HH_FIXME[4110] */ $parsed['option2'];
      if ($_tmp0 > 0x7fffffff) {
        throw new \TProtocolException("number exceeds limit in field");
      } else {
        $this->option2 = (int)$_tmp0;
      }
      $this->_type = MyUnionEnum::option2;
    }    
  }

}

/**
 * Original thrift struct:-
 * MyStruct
 */
class MyStruct implements \IThriftSyncStruct, \IThriftShapishSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    1 => shape(
      'var' => 'boolVal',
      'type' => \TType::BOOL,
    ),
    2 => shape(
      'var' => 'byteVal',
      'type' => \TType::BYTE,
    ),
    3 => shape(
      'var' => 'i16Val',
      'type' => \TType::I16,
    ),
    4 => shape(
      'var' => 'i32Val',
      'type' => \TType::I32,
    ),
    5 => shape(
      'var' => 'i64Val',
      'type' => \TType::I64,
    ),
    6 => shape(
      'var' => 'floatVal',
      'type' => \TType::FLOAT,
    ),
    7 => shape(
      'var' => 'doubleVal',
      'type' => \TType::DOUBLE,
    ),
    8 => shape(
      'var' => 'stringVal',
      'type' => \TType::STRING,
    ),
    9 => shape(
      'var' => 'binaryVal',
      'type' => \TType::STRING,
    ),
    10 => shape(
      'var' => 'structVal',
      'type' => \TType::STRUCT,
      'class' => MyData::class,
    ),
    11 => shape(
      'var' => 'optBoolVal',
      'type' => \TType::BOOL,
    ),
    12 => shape(
      'var' => 'optByteVal',
      'type' => \TType::BYTE,
    ),
    13 => shape(
      'var' => 'optI16Val',
      'type' => \TType::I16,
    ),
    14 => shape(
      'var' => 'optI32Val',
      'type' => \TType::I32,
    ),
    15 => shape(
      'var' => 'optI64Val',
      'type' => \TType::I64,
    ),
    16 => shape(
      'var' => 'optFloatVal',
      'type' => \TType::FLOAT,
    ),
    17 => shape(
      'var' => 'optDoubleVal',
      'type' => \TType::DOUBLE,
    ),
    18 => shape(
      'var' => 'optStringVal',
      'type' => \TType::STRING,
    ),
    19 => shape(
      'var' => 'optBinaryVal',
      'type' => \TType::STRING,
    ),
    20 => shape(
      'var' => 'optStructVal',
      'type' => \TType::STRUCT,
      'class' => MyData::class,
    ),
    21 => shape(
      'var' => 'optListVal',
      'type' => \TType::LST,
      'etype' => \TType::I16,
      'elem' => shape(
        'type' => \TType::I16,
      ),
      'format' => 'collection',
    ),
    22 => shape(
      'var' => 'optSetVal',
      'type' => \TType::SET,
      'etype' => \TType::STRING,
      'elem' => shape(
        'type' => \TType::STRING,
      ),
      'format' => 'collection',
    ),
    23 => shape(
      'var' => 'optMapVal',
      'type' => \TType::MAP,
      'ktype' => \TType::STRING,
      'vtype' => \TType::STRING,
      'key' => shape(
        'type' => \TType::STRING,
      ),
      'val' => shape(
        'type' => \TType::STRING,
      ),
      'format' => 'collection',
    ),
    30 => shape(
      'var' => 'unionVal',
      'type' => \TType::STRUCT,
      'class' => MyUnion::class,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'boolVal' => 1,
    'byteVal' => 2,
    'i16Val' => 3,
    'i32Val' => 4,
    'i64Val' => 5,
    'floatVal' => 6,
    'doubleVal' => 7,
    'stringVal' => 8,
    'binaryVal' => 9,
    'structVal' => 10,
    'optBoolVal' => 11,
    'optByteVal' => 12,
    'optI16Val' => 13,
    'optI32Val' => 14,
    'optI64Val' => 15,
    'optFloatVal' => 16,
    'optDoubleVal' => 17,
    'optStringVal' => 18,
    'optBinaryVal' => 19,
    'optStructVal' => 20,
    'optListVal' => 21,
    'optSetVal' => 22,
    'optMapVal' => 23,
    'unionVal' => 30,
  ];

  const type TConstructorShape = shape(
    ?'boolVal' => ?bool,
    ?'byteVal' => ?int,
    ?'i16Val' => ?int,
    ?'i32Val' => ?int,
    ?'i64Val' => ?int,
    ?'floatVal' => ?float,
    ?'doubleVal' => ?float,
    ?'stringVal' => ?string,
    ?'binaryVal' => ?string,
    ?'structVal' => ?MyData,
    ?'optBoolVal' => ?bool,
    ?'optByteVal' => ?int,
    ?'optI16Val' => ?int,
    ?'optI32Val' => ?int,
    ?'optI64Val' => ?int,
    ?'optFloatVal' => ?float,
    ?'optDoubleVal' => ?float,
    ?'optStringVal' => ?string,
    ?'optBinaryVal' => ?string,
    ?'optStructVal' => ?MyData,
    ?'optListVal' => ?Vector<int>,
    ?'optSetVal' => ?Set<string>,
    ?'optMapVal' => ?Map<string, string>,
    ?'unionVal' => ?MyUnion,
  );

  const type TShape = shape(
    'boolVal' => bool,
    'byteVal' => int,
    'i16Val' => int,
    'i32Val' => int,
    'i64Val' => int,
    'floatVal' => float,
    'doubleVal' => float,
    'stringVal' => string,
    'binaryVal' => string,
    ?'structVal' => ?MyData::TShape,
    ?'optBoolVal' => ?bool,
    ?'optByteVal' => ?int,
    ?'optI16Val' => ?int,
    ?'optI32Val' => ?int,
    ?'optI64Val' => ?int,
    ?'optFloatVal' => ?float,
    ?'optDoubleVal' => ?float,
    ?'optStringVal' => ?string,
    ?'optBinaryVal' => ?string,
    ?'optStructVal' => ?MyData::TShape,
    ?'optListVal' => ?vec<int>,
    ?'optSetVal' => ?dict<string, bool>,
    ?'optMapVal' => ?dict<string, string>,
    ?'unionVal' => ?MyUnion::TShape,
    ...
  );
  const int STRUCTURAL_ID = 4304632649704893106;
  /**
   * Original thrift field:-
   * 1: bool boolVal
   */
  public bool $boolVal;
  /**
   * Original thrift field:-
   * 2: byte byteVal
   */
  public int $byteVal;
  /**
   * Original thrift field:-
   * 3: i16 i16Val
   */
  public int $i16Val;
  /**
   * Original thrift field:-
   * 4: i32 i32Val
   */
  public int $i32Val;
  /**
   * Original thrift field:-
   * 5: i64 i64Val
   */
  public int $i64Val;
  /**
   * Original thrift field:-
   * 6: float floatVal
   */
  public float $floatVal;
  /**
   * Original thrift field:-
   * 7: double doubleVal
   */
  public float $doubleVal;
  /**
   * Original thrift field:-
   * 8: string stringVal
   */
  public string $stringVal;
  /**
   * Original thrift field:-
   * 9: binary binaryVal
   */
  public string $binaryVal;
  /**
   * Original thrift field:-
   * 10: struct module.MyData structVal
   */
  public ?MyData $structVal;
  /**
   * Original thrift field:-
   * 11: bool optBoolVal
   */
  public ?bool $optBoolVal;
  /**
   * Original thrift field:-
   * 12: byte optByteVal
   */
  public ?int $optByteVal;
  /**
   * Original thrift field:-
   * 13: i16 optI16Val
   */
  public ?int $optI16Val;
  /**
   * Original thrift field:-
   * 14: i32 optI32Val
   */
  public ?int $optI32Val;
  /**
   * Original thrift field:-
   * 15: i64 optI64Val
   */
  public ?int $optI64Val;
  /**
   * Original thrift field:-
   * 16: float optFloatVal
   */
  public ?float $optFloatVal;
  /**
   * Original thrift field:-
   * 17: double optDoubleVal
   */
  public ?float $optDoubleVal;
  /**
   * Original thrift field:-
   * 18: string optStringVal
   */
  public ?string $optStringVal;
  /**
   * Original thrift field:-
   * 19: binary optBinaryVal
   */
  public ?string $optBinaryVal;
  /**
   * Original thrift field:-
   * 20: struct module.MyData optStructVal
   */
  public ?MyData $optStructVal;
  /**
   * Original thrift field:-
   * 21: list<i16> optListVal
   */
  public ?Vector<int> $optListVal;
  /**
   * Original thrift field:-
   * 22: set<string> optSetVal
   */
  public ?Set<string> $optSetVal;
  /**
   * Original thrift field:-
   * 23: map<string, string> optMapVal
   */
  public ?Map<string, string> $optMapVal;
  /**
   * Original thrift field:-
   * 30: struct module.MyUnion unionVal
   */
  public ?MyUnion $unionVal;

  public function __construct(?bool $boolVal = null, ?int $byteVal = null, ?int $i16Val = null, ?int $i32Val = null, ?int $i64Val = null, ?float $floatVal = null, ?float $doubleVal = null, ?string $stringVal = null, ?string $binaryVal = null, ?MyData $structVal = null, ?bool $optBoolVal = null, ?int $optByteVal = null, ?int $optI16Val = null, ?int $optI32Val = null, ?int $optI64Val = null, ?float $optFloatVal = null, ?float $optDoubleVal = null, ?string $optStringVal = null, ?string $optBinaryVal = null, ?MyData $optStructVal = null, ?Vector<int> $optListVal = null, ?Set<string> $optSetVal = null, ?Map<string, string> $optMapVal = null, ?MyUnion $unionVal = null  )[] {
    $this->boolVal = $boolVal ?? false;
    $this->byteVal = $byteVal ?? 0;
    $this->i16Val = $i16Val ?? 0;
    $this->i32Val = $i32Val ?? 0;
    $this->i64Val = $i64Val ?? 0;
    $this->floatVal = $floatVal ?? 0.0;
    $this->doubleVal = $doubleVal ?? 0.0;
    $this->stringVal = $stringVal ?? '';
    $this->binaryVal = $binaryVal ?? '';
    $this->structVal = $structVal;
    $this->optBoolVal = $optBoolVal;
    $this->optByteVal = $optByteVal;
    $this->optI16Val = $optI16Val;
    $this->optI32Val = $optI32Val;
    $this->optI64Val = $optI64Val;
    $this->optFloatVal = $optFloatVal;
    $this->optDoubleVal = $optDoubleVal;
    $this->optStringVal = $optStringVal;
    $this->optBinaryVal = $optBinaryVal;
    $this->optStructVal = $optStructVal;
    $this->optListVal = $optListVal;
    $this->optSetVal = $optSetVal;
    $this->optMapVal = $optMapVal;
    $this->unionVal = $unionVal;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'boolVal'),
      Shapes::idx($shape, 'byteVal'),
      Shapes::idx($shape, 'i16Val'),
      Shapes::idx($shape, 'i32Val'),
      Shapes::idx($shape, 'i64Val'),
      Shapes::idx($shape, 'floatVal'),
      Shapes::idx($shape, 'doubleVal'),
      Shapes::idx($shape, 'stringVal'),
      Shapes::idx($shape, 'binaryVal'),
      Shapes::idx($shape, 'structVal'),
      Shapes::idx($shape, 'optBoolVal'),
      Shapes::idx($shape, 'optByteVal'),
      Shapes::idx($shape, 'optI16Val'),
      Shapes::idx($shape, 'optI32Val'),
      Shapes::idx($shape, 'optI64Val'),
      Shapes::idx($shape, 'optFloatVal'),
      Shapes::idx($shape, 'optDoubleVal'),
      Shapes::idx($shape, 'optStringVal'),
      Shapes::idx($shape, 'optBinaryVal'),
      Shapes::idx($shape, 'optStructVal'),
      Shapes::idx($shape, 'optListVal'),
      Shapes::idx($shape, 'optSetVal'),
      Shapes::idx($shape, 'optMapVal'),
      Shapes::idx($shape, 'unionVal'),
    );
  }

  public function getName()[]: string {
    return 'MyStruct';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.MyStruct",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_BOOL_TYPE,
                )
              ),
              "name" => "boolVal",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_BYTE_TYPE,
                )
              ),
              "name" => "byteVal",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 3,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_I16_TYPE,
                )
              ),
              "name" => "i16Val",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 4,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_I32_TYPE,
                )
              ),
              "name" => "i32Val",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 5,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_I64_TYPE,
                )
              ),
              "name" => "i64Val",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 6,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_FLOAT_TYPE,
                )
              ),
              "name" => "floatVal",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 7,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_DOUBLE_TYPE,
                )
              ),
              "name" => "doubleVal",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 8,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_STRING_TYPE,
                )
              ),
              "name" => "stringVal",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 9,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_BINARY_TYPE,
                )
              ),
              "name" => "binaryVal",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 10,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.MyData",
                    )
                  ),
                )
              ),
              "name" => "structVal",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 11,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_BOOL_TYPE,
                )
              ),
              "name" => "optBoolVal",
              "is_optional" => true,
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 12,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_BYTE_TYPE,
                )
              ),
              "name" => "optByteVal",
              "is_optional" => true,
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 13,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_I16_TYPE,
                )
              ),
              "name" => "optI16Val",
              "is_optional" => true,
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 14,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_I32_TYPE,
                )
              ),
              "name" => "optI32Val",
              "is_optional" => true,
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 15,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_I64_TYPE,
                )
              ),
              "name" => "optI64Val",
              "is_optional" => true,
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 16,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_FLOAT_TYPE,
                )
              ),
              "name" => "optFloatVal",
              "is_optional" => true,
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 17,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_DOUBLE_TYPE,
                )
              ),
              "name" => "optDoubleVal",
              "is_optional" => true,
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 18,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_STRING_TYPE,
                )
              ),
              "name" => "optStringVal",
              "is_optional" => true,
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 19,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_BINARY_TYPE,
                )
              ),
              "name" => "optBinaryVal",
              "is_optional" => true,
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 20,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.MyData",
                    )
                  ),
                )
              ),
              "name" => "optStructVal",
              "is_optional" => true,
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 21,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_list" => tmeta_ThriftListType::fromShape(
                    shape(
                      "valueType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_I16_TYPE,
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "optListVal",
              "is_optional" => true,
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 22,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_set" => tmeta_ThriftSetType::fromShape(
                    shape(
                      "valueType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_STRING_TYPE,
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "optSetVal",
              "is_optional" => true,
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 23,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_map" => tmeta_ThriftMapType::fromShape(
                    shape(
                      "keyType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_STRING_TYPE,
                        )
                      ),
                      "valueType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_STRING_TYPE,
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "optMapVal",
              "is_optional" => true,
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 30,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.MyUnion",
                    )
                  ),
                )
              ),
              "name" => "unionVal",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
      $shape['boolVal'],
      $shape['byteVal'],
      $shape['i16Val'],
      $shape['i32Val'],
      $shape['i64Val'],
      $shape['floatVal'],
      $shape['doubleVal'],
      $shape['stringVal'],
      $shape['binaryVal'],
      Shapes::idx($shape, 'structVal') === null ? null : (MyData::__fromShape($shape['structVal'])),
      Shapes::idx($shape, 'optBoolVal'),
      Shapes::idx($shape, 'optByteVal'),
      Shapes::idx($shape, 'optI16Val'),
      Shapes::idx($shape, 'optI32Val'),
      Shapes::idx($shape, 'optI64Val'),
      Shapes::idx($shape, 'optFloatVal'),
      Shapes::idx($shape, 'optDoubleVal'),
      Shapes::idx($shape, 'optStringVal'),
      Shapes::idx($shape, 'optBinaryVal'),
      Shapes::idx($shape, 'optStructVal') === null ? null : (MyData::__fromShape($shape['optStructVal'])),
      Shapes::idx($shape, 'optListVal') === null ? null : ((new Vector($shape['optListVal']))),
      Shapes::idx($shape, 'optSetVal') === null ? null : (new Set(Keyset\keys($shape['optSetVal']))),
      Shapes::idx($shape, 'optMapVal') === null ? null : ((new Map($shape['optMapVal']))),
      Shapes::idx($shape, 'unionVal') === null ? null : (MyUnion::__fromShape($shape['unionVal'])),
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
      'boolVal' => $this->boolVal,
      'byteVal' => $this->byteVal,
      'i16Val' => $this->i16Val,
      'i32Val' => $this->i32Val,
      'i64Val' => $this->i64Val,
      'floatVal' => $this->floatVal,
      'doubleVal' => $this->doubleVal,
      'stringVal' => $this->stringVal,
      'binaryVal' => $this->binaryVal,
      'structVal' => $this->structVal?->__toShape(),
      'optBoolVal' => $this->optBoolVal,
      'optByteVal' => $this->optByteVal,
      'optI16Val' => $this->optI16Val,
      'optI32Val' => $this->optI32Val,
      'optI64Val' => $this->optI64Val,
      'optFloatVal' => $this->optFloatVal,
      'optDoubleVal' => $this->optDoubleVal,
      'optStringVal' => $this->optStringVal,
      'optBinaryVal' => $this->optBinaryVal,
      'optStructVal' => $this->optStructVal?->__toShape(),
      'optListVal' => $this->optListVal
        |> $$ === null ? null : vec($$),
      'optSetVal' => $this->optSetVal
        |> $$ === null ? null : ThriftUtil::toDArray(Dict\fill_keys($$->toValuesArray(), true), static::class),
      'optMapVal' => $this->optMapVal
        |> $$ === null ? null : dict($$),
      'unionVal' => $this->unionVal?->__toShape(),
    );
  }
  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'boolVal') !== null) {
      $this->boolVal = /* HH_FIXME[4110] */ $parsed['boolVal'];
    }    
    if (idx($parsed, 'byteVal') !== null) {
      $_tmp0 = (int)/* HH_FIXME[4110] */ $parsed['byteVal'];
      if ($_tmp0 > 0x7f) {
        throw new \TProtocolException("number exceeds limit in field");
      } else {
        $this->byteVal = (int)$_tmp0;
      }
    }    
    if (idx($parsed, 'i16Val') !== null) {
      $_tmp1 = (int)/* HH_FIXME[4110] */ $parsed['i16Val'];
      if ($_tmp1 > 0x7fff) {
        throw new \TProtocolException("number exceeds limit in field");
      } else {
        $this->i16Val = (int)$_tmp1;
      }
    }    
    if (idx($parsed, 'i32Val') !== null) {
      $_tmp2 = (int)/* HH_FIXME[4110] */ $parsed['i32Val'];
      if ($_tmp2 > 0x7fffffff) {
        throw new \TProtocolException("number exceeds limit in field");
      } else {
        $this->i32Val = (int)$_tmp2;
      }
    }    
    if (idx($parsed, 'i64Val') !== null) {
      $this->i64Val = /* HH_FIXME[4110] */ $parsed['i64Val'];
    }    
    if (idx($parsed, 'floatVal') !== null) {
      $this->floatVal = /* HH_FIXME[4110] */ $parsed['floatVal'];
    }    
    if (idx($parsed, 'doubleVal') !== null) {
      $this->doubleVal = /* HH_FIXME[4110] */ $parsed['doubleVal'];
    }    
    if (idx($parsed, 'stringVal') !== null) {
      $this->stringVal = /* HH_FIXME[4110] */ $parsed['stringVal'];
    }    
    if (idx($parsed, 'binaryVal') !== null) {
      $this->binaryVal = /* HH_FIXME[4110] */ $parsed['binaryVal'];
    }    
    if (idx($parsed, 'structVal') !== null) {
      $_tmp3 = json_encode(/* HH_FIXME[4110] */ $parsed['structVal']);
      $_tmp4 = MyData::withDefaultValues();
      $_tmp4->readFromJson($_tmp3);
      $this->structVal = $_tmp4;
    }    
    if (idx($parsed, 'optBoolVal') !== null) {
      $this->optBoolVal = /* HH_FIXME[4110] */ $parsed['optBoolVal'];
    }    
    if (idx($parsed, 'optByteVal') !== null) {
      $_tmp5 = (int)/* HH_FIXME[4110] */ $parsed['optByteVal'];
      if ($_tmp5 > 0x7f) {
        throw new \TProtocolException("number exceeds limit in field");
      } else {
        $this->optByteVal = (int)$_tmp5;
      }
    }    
    if (idx($parsed, 'optI16Val') !== null) {
      $_tmp6 = (int)/* HH_FIXME[4110] */ $parsed['optI16Val'];
      if ($_tmp6 > 0x7fff) {
        throw new \TProtocolException("number exceeds limit in field");
      } else {
        $this->optI16Val = (int)$_tmp6;
      }
    }    
    if (idx($parsed, 'optI32Val') !== null) {
      $_tmp7 = (int)/* HH_FIXME[4110] */ $parsed['optI32Val'];
      if ($_tmp7 > 0x7fffffff) {
        throw new \TProtocolException("number exceeds limit in field");
      } else {
        $this->optI32Val = (int)$_tmp7;
      }
    }    
    if (idx($parsed, 'optI64Val') !== null) {
      $this->optI64Val = /* HH_FIXME[4110] */ $parsed['optI64Val'];
    }    
    if (idx($parsed, 'optFloatVal') !== null) {
      $this->optFloatVal = /* HH_FIXME[4110] */ $parsed['optFloatVal'];
    }    
    if (idx($parsed, 'optDoubleVal') !== null) {
      $this->optDoubleVal = /* HH_FIXME[4110] */ $parsed['optDoubleVal'];
    }    
    if (idx($parsed, 'optStringVal') !== null) {
      $this->optStringVal = /* HH_FIXME[4110] */ $parsed['optStringVal'];
    }    
    if (idx($parsed, 'optBinaryVal') !== null) {
      $this->optBinaryVal = /* HH_FIXME[4110] */ $parsed['optBinaryVal'];
    }    
    if (idx($parsed, 'optStructVal') !== null) {
      $_tmp8 = json_encode(/* HH_FIXME[4110] */ $parsed['optStructVal']);
      $_tmp9 = MyData::withDefaultValues();
      $_tmp9->readFromJson($_tmp8);
      $this->optStructVal = $_tmp9;
    }    
    if (idx($parsed, 'optListVal') !== null) {
      $_json13 = /* HH_FIXME[4110] */ $parsed['optListVal'];
      $_container14 = Vector {};
      foreach(/* HH_FIXME[4110] */ $_json13 as $_key11 => $_value12) {
        $_elem15 = 0;
        $_tmp16 = (int)$_value12;
        if ($_tmp16 > 0x7fff) {
          throw new \TProtocolException("number exceeds limit in field");
        } else {
          $_elem15 = (int)$_tmp16;
        }
        $_container14 []= $_elem15;
      }
      $this->optListVal = $_container14;
    }    
    if (idx($parsed, 'optSetVal') !== null) {
      $_json20 = /* HH_FIXME[4110] */ $parsed['optSetVal'];
      $_container21 = Set {};
      foreach(/* HH_FIXME[4110] */ $_json20 as $_key18 => $_value19) {
        $_elem22 = '';
        $_elem22 = $_value19;
        $_container21->add($_elem22);
      }
      $this->optSetVal = $_container21;
    }    
    if (idx($parsed, 'optMapVal') !== null) {
      $_json26 = /* HH_FIXME[4110] */ $parsed['optMapVal'];
      $_container27 = Map {};
      foreach(/* HH_FIXME[4110] */ $_json26 as $_key24 => $_value25) {
        $_value28 = '';
        $_value28 = $_value25;
        $_container27[$_key24] = $_value28;
      }
      $this->optMapVal = $_container27;
    }    
    if (idx($parsed, 'unionVal') !== null) {
      $_tmp29 = json_encode(/* HH_FIXME[4110] */ $parsed['unionVal']);
      $_tmp30 = MyUnion::withDefaultValues();
      $_tmp30->readFromJson($_tmp29);
      $this->unionVal = $_tmp30;
    }    
  }

}

/**
 * Original thrift struct:-
 * MyDataPatch
 */
class MyDataPatch implements \IThriftSyncStruct, \IThriftShapishSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    1 => shape(
      'var' => 'data1',
      'type' => \TType::STRUCT,
      'class' => StringPatch::class,
    ),
    2 => shape(
      'var' => 'data2',
      'type' => \TType::STRUCT,
      'class' => I32Patch::class,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'data1' => 1,
    'data2' => 2,
  ];

  const type TConstructorShape = shape(
    ?'data1' => ?StringPatch,
    ?'data2' => ?I32Patch,
  );

  const type TShape = shape(
    ?'data1' => ?StringPatch::TShape,
    ?'data2' => ?I32Patch::TShape,
    ...
  );
  const int STRUCTURAL_ID = 6838201112512803660;
  /**
   * Original thrift field:-
   * 1: struct patch.StringPatch data1
   */
  public ?StringPatch $data1;
  /**
   * Original thrift field:-
   * 2: struct patch.I32Patch data2
   */
  public ?I32Patch $data2;

  public function __construct(?StringPatch $data1 = null, ?I32Patch $data2 = null  )[] {
    $this->data1 = $data1;
    $this->data2 = $data2;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'data1'),
      Shapes::idx($shape, 'data2'),
    );
  }

  public function getName()[]: string {
    return 'MyDataPatch';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.MyDataPatch",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.StringPatch",
                    )
                  ),
                )
              ),
              "name" => "data1",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.I32Patch",
                    )
                  ),
                )
              ),
              "name" => "data2",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
        'data1' => shape(
          'field' => dict[],
          'type' => dict[
            'GenerateOptionalPatch' => GenerateOptionalPatch::fromShape(
              shape(
              )
            ),
            'facebook_thrift_annotation_thrift_Experimental' => facebook_thrift_annotation_thrift_Experimental::fromShape(
              shape(
              )
            ),
          ],
        ),
        'data2' => shape(
          'field' => dict[],
          'type' => dict[
            'GenerateOptionalPatch' => GenerateOptionalPatch::fromShape(
              shape(
              )
            ),
            'facebook_thrift_annotation_thrift_Experimental' => facebook_thrift_annotation_thrift_Experimental::fromShape(
              shape(
              )
            ),
          ],
        ),
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'data1') === null ? null : (StringPatch::__fromShape($shape['data1'])),
      Shapes::idx($shape, 'data2') === null ? null : (I32Patch::__fromShape($shape['data2'])),
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
      'data1' => $this->data1?->__toShape(),
      'data2' => $this->data2?->__toShape(),
    );
  }
  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'data1') !== null) {
      $_tmp0 = json_encode(/* HH_FIXME[4110] */ $parsed['data1']);
      $_tmp1 = StringPatch::withDefaultValues();
      $_tmp1->readFromJson($_tmp0);
      $this->data1 = $_tmp1;
    }    
    if (idx($parsed, 'data2') !== null) {
      $_tmp2 = json_encode(/* HH_FIXME[4110] */ $parsed['data2']);
      $_tmp3 = I32Patch::withDefaultValues();
      $_tmp3->readFromJson($_tmp2);
      $this->data2 = $_tmp3;
    }    
  }

}

/**
 * Original thrift struct:-
 * MyDataValuePatch
 */
class MyDataValuePatch implements \IThriftSyncStruct, \IThriftShapishSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    1 => shape(
      'var' => 'assign',
      'type' => \TType::STRUCT,
      'class' => MyData::class,
    ),
    2 => shape(
      'var' => 'clear',
      'type' => \TType::BOOL,
    ),
    3 => shape(
      'var' => 'patch',
      'type' => \TType::STRUCT,
      'class' => MyDataPatch::class,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'assign' => 1,
    'clear' => 2,
    'patch' => 3,
  ];

  const type TConstructorShape = shape(
    ?'assign' => ?MyData,
    ?'clear' => ?bool,
    ?'patch' => ?MyDataPatch,
  );

  const type TShape = shape(
    ?'assign' => ?MyData::TShape,
    'clear' => bool,
    ?'patch' => ?MyDataPatch::TShape,
    ...
  );
  const int STRUCTURAL_ID = 3788431670946880573;
  /**
   * Assigns a value. If set, all other operations are ignored.
   * 
   * Original thrift field:-
   * 1: struct module.MyData assign
   */
  public ?MyData $assign;
  /**
   * Clears a value. Applies first.
   * 
   * Original thrift field:-
   * 2: bool clear
   */
  public bool $clear;
  /**
   * Patches a value. Applies second.
   * 
   * Original thrift field:-
   * 3: struct module.MyDataPatch patch
   */
  public ?MyDataPatch $patch;

  public function __construct(?MyData $assign = null, ?bool $clear = null, ?MyDataPatch $patch = null  )[] {
    $this->assign = $assign;
    $this->clear = $clear ?? false;
    $this->patch = $patch;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'assign'),
      Shapes::idx($shape, 'clear'),
      Shapes::idx($shape, 'patch'),
    );
  }

  public function getName()[]: string {
    return 'MyDataValuePatch';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.MyDataValuePatch",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.MyData",
                    )
                  ),
                )
              ),
              "name" => "assign",
              "is_optional" => true,
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_BOOL_TYPE,
                )
              ),
              "name" => "clear",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 3,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.MyDataPatch",
                    )
                  ),
                )
              ),
              "name" => "patch",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'assign') === null ? null : (MyData::__fromShape($shape['assign'])),
      $shape['clear'],
      Shapes::idx($shape, 'patch') === null ? null : (MyDataPatch::__fromShape($shape['patch'])),
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
      'assign' => $this->assign?->__toShape(),
      'clear' => $this->clear,
      'patch' => $this->patch?->__toShape(),
    );
  }
  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'assign') !== null) {
      $_tmp0 = json_encode(/* HH_FIXME[4110] */ $parsed['assign']);
      $_tmp1 = MyData::withDefaultValues();
      $_tmp1->readFromJson($_tmp0);
      $this->assign = $_tmp1;
    }    
    if (idx($parsed, 'clear') !== null) {
      $this->clear = /* HH_FIXME[4110] */ $parsed['clear'];
    }    
    if (idx($parsed, 'patch') !== null) {
      $_tmp2 = json_encode(/* HH_FIXME[4110] */ $parsed['patch']);
      $_tmp3 = MyDataPatch::withDefaultValues();
      $_tmp3->readFromJson($_tmp2);
      $this->patch = $_tmp3;
    }    
  }

}

/**
 * Original thrift struct:-
 * OptionalMyDataValuePatch
 */
class OptionalMyDataValuePatch implements \IThriftSyncStruct, \IThriftShapishSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    2 => shape(
      'var' => 'clear',
      'type' => \TType::BOOL,
    ),
    3 => shape(
      'var' => 'patch',
      'type' => \TType::STRUCT,
      'class' => MyDataValuePatch::class,
    ),
    4 => shape(
      'var' => 'ensure',
      'type' => \TType::STRUCT,
      'class' => MyData::class,
    ),
    5 => shape(
      'var' => 'patchAfter',
      'type' => \TType::STRUCT,
      'class' => MyDataValuePatch::class,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'clear' => 2,
    'patch' => 3,
    'ensure' => 4,
    'patchAfter' => 5,
  ];

  const type TConstructorShape = shape(
    ?'clear' => ?bool,
    ?'patch' => ?MyDataValuePatch,
    ?'ensure' => ?MyData,
    ?'patchAfter' => ?MyDataValuePatch,
  );

  const type TShape = shape(
    'clear' => bool,
    ?'patch' => ?MyDataValuePatch::TShape,
    ?'ensure' => ?MyData::TShape,
    ?'patchAfter' => ?MyDataValuePatch::TShape,
    ...
  );
  const int STRUCTURAL_ID = 7951490030433375737;
  /**
   * Clears any set value. Applies first.
   * 
   * Original thrift field:-
   * 2: bool clear
   */
  public bool $clear;
  /**
   * Patches any set value. Applies second.
   * 
   * Original thrift field:-
   * 3: struct module.MyDataValuePatch patch
   */
  public ?MyDataValuePatch $patch;
  /**
   * Assigns the value, if not already set. Applies third.
   * 
   * Original thrift field:-
   * 4: struct module.MyData ensure
   */
  public ?MyData $ensure;
  /**
   * Patches any set value, including newly set values. Applies fourth.
   * 
   * Original thrift field:-
   * 5: struct module.MyDataValuePatch patchAfter
   */
  public ?MyDataValuePatch $patchAfter;

  public function __construct(?bool $clear = null, ?MyDataValuePatch $patch = null, ?MyData $ensure = null, ?MyDataValuePatch $patchAfter = null  )[] {
    $this->clear = $clear ?? false;
    $this->patch = $patch;
    $this->ensure = $ensure;
    $this->patchAfter = $patchAfter;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'clear'),
      Shapes::idx($shape, 'patch'),
      Shapes::idx($shape, 'ensure'),
      Shapes::idx($shape, 'patchAfter'),
    );
  }

  public function getName()[]: string {
    return 'OptionalMyDataValuePatch';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.OptionalMyDataValuePatch",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_BOOL_TYPE,
                )
              ),
              "name" => "clear",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 3,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.MyDataValuePatch",
                    )
                  ),
                )
              ),
              "name" => "patch",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 4,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.MyData",
                    )
                  ),
                )
              ),
              "name" => "ensure",
              "is_optional" => true,
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 5,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.MyDataValuePatch",
                    )
                  ),
                )
              ),
              "name" => "patchAfter",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
      $shape['clear'],
      Shapes::idx($shape, 'patch') === null ? null : (MyDataValuePatch::__fromShape($shape['patch'])),
      Shapes::idx($shape, 'ensure') === null ? null : (MyData::__fromShape($shape['ensure'])),
      Shapes::idx($shape, 'patchAfter') === null ? null : (MyDataValuePatch::__fromShape($shape['patchAfter'])),
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
      'clear' => $this->clear,
      'patch' => $this->patch?->__toShape(),
      'ensure' => $this->ensure?->__toShape(),
      'patchAfter' => $this->patchAfter?->__toShape(),
    );
  }
  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'clear') !== null) {
      $this->clear = /* HH_FIXME[4110] */ $parsed['clear'];
    }    
    if (idx($parsed, 'patch') !== null) {
      $_tmp0 = json_encode(/* HH_FIXME[4110] */ $parsed['patch']);
      $_tmp1 = MyDataValuePatch::withDefaultValues();
      $_tmp1->readFromJson($_tmp0);
      $this->patch = $_tmp1;
    }    
    if (idx($parsed, 'ensure') !== null) {
      $_tmp2 = json_encode(/* HH_FIXME[4110] */ $parsed['ensure']);
      $_tmp3 = MyData::withDefaultValues();
      $_tmp3->readFromJson($_tmp2);
      $this->ensure = $_tmp3;
    }    
    if (idx($parsed, 'patchAfter') !== null) {
      $_tmp4 = json_encode(/* HH_FIXME[4110] */ $parsed['patchAfter']);
      $_tmp5 = MyDataValuePatch::withDefaultValues();
      $_tmp5->readFromJson($_tmp4);
      $this->patchAfter = $_tmp5;
    }    
  }

}

/**
 * Original thrift struct:-
 * MyUnionPatch
 */
class MyUnionPatch implements \IThriftSyncStruct, \IThriftShapishSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    1 => shape(
      'var' => 'option1',
      'type' => \TType::STRUCT,
      'class' => StringPatch::class,
    ),
    2 => shape(
      'var' => 'option2',
      'type' => \TType::STRUCT,
      'class' => I32Patch::class,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'option1' => 1,
    'option2' => 2,
  ];

  const type TConstructorShape = shape(
    ?'option1' => ?StringPatch,
    ?'option2' => ?I32Patch,
  );

  const type TShape = shape(
    ?'option1' => ?StringPatch::TShape,
    ?'option2' => ?I32Patch::TShape,
    ...
  );
  const int STRUCTURAL_ID = 5886980803206528534;
  /**
   * Original thrift field:-
   * 1: struct patch.StringPatch option1
   */
  public ?StringPatch $option1;
  /**
   * Original thrift field:-
   * 2: struct patch.I32Patch option2
   */
  public ?I32Patch $option2;

  public function __construct(?StringPatch $option1 = null, ?I32Patch $option2 = null  )[] {
    $this->option1 = $option1;
    $this->option2 = $option2;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'option1'),
      Shapes::idx($shape, 'option2'),
    );
  }

  public function getName()[]: string {
    return 'MyUnionPatch';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.MyUnionPatch",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.StringPatch",
                    )
                  ),
                )
              ),
              "name" => "option1",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.I32Patch",
                    )
                  ),
                )
              ),
              "name" => "option2",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
        'option1' => shape(
          'field' => dict[],
          'type' => dict[
            'GenerateOptionalPatch' => GenerateOptionalPatch::fromShape(
              shape(
              )
            ),
            'facebook_thrift_annotation_thrift_Experimental' => facebook_thrift_annotation_thrift_Experimental::fromShape(
              shape(
              )
            ),
          ],
        ),
        'option2' => shape(
          'field' => dict[],
          'type' => dict[
            'GenerateOptionalPatch' => GenerateOptionalPatch::fromShape(
              shape(
              )
            ),
            'facebook_thrift_annotation_thrift_Experimental' => facebook_thrift_annotation_thrift_Experimental::fromShape(
              shape(
              )
            ),
          ],
        ),
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'option1') === null ? null : (StringPatch::__fromShape($shape['option1'])),
      Shapes::idx($shape, 'option2') === null ? null : (I32Patch::__fromShape($shape['option2'])),
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
      'option1' => $this->option1?->__toShape(),
      'option2' => $this->option2?->__toShape(),
    );
  }
  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'option1') !== null) {
      $_tmp0 = json_encode(/* HH_FIXME[4110] */ $parsed['option1']);
      $_tmp1 = StringPatch::withDefaultValues();
      $_tmp1->readFromJson($_tmp0);
      $this->option1 = $_tmp1;
    }    
    if (idx($parsed, 'option2') !== null) {
      $_tmp2 = json_encode(/* HH_FIXME[4110] */ $parsed['option2']);
      $_tmp3 = I32Patch::withDefaultValues();
      $_tmp3->readFromJson($_tmp2);
      $this->option2 = $_tmp3;
    }    
  }

}

/**
 * Original thrift struct:-
 * MyUnionValuePatch
 */
class MyUnionValuePatch implements \IThriftSyncStruct, \IThriftShapishSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    2 => shape(
      'var' => 'clear',
      'type' => \TType::BOOL,
    ),
    3 => shape(
      'var' => 'patch',
      'type' => \TType::STRUCT,
      'class' => MyUnionPatch::class,
    ),
    4 => shape(
      'var' => 'ensure',
      'type' => \TType::STRUCT,
      'class' => MyUnion::class,
    ),
    5 => shape(
      'var' => 'patchAfter',
      'type' => \TType::STRUCT,
      'class' => MyUnionPatch::class,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'clear' => 2,
    'patch' => 3,
    'ensure' => 4,
    'patchAfter' => 5,
  ];

  const type TConstructorShape = shape(
    ?'clear' => ?bool,
    ?'patch' => ?MyUnionPatch,
    ?'ensure' => ?MyUnion,
    ?'patchAfter' => ?MyUnionPatch,
  );

  const type TShape = shape(
    'clear' => bool,
    ?'patch' => ?MyUnionPatch::TShape,
    ?'ensure' => ?MyUnion::TShape,
    ?'patchAfter' => ?MyUnionPatch::TShape,
    ...
  );
  const int STRUCTURAL_ID = 4542531292588103659;
  /**
   * Clears any set value. Applies first.
   * 
   * Original thrift field:-
   * 2: bool clear
   */
  public bool $clear;
  /**
   * Patches any set value. Applies second.
   * 
   * Original thrift field:-
   * 3: struct module.MyUnionPatch patch
   */
  public ?MyUnionPatch $patch;
  /**
   * Assigns the value, if not already set. Applies third.
   * 
   * Original thrift field:-
   * 4: struct module.MyUnion ensure
   */
  public ?MyUnion $ensure;
  /**
   * Patches any set value, including newly set values. Applies fourth.
   * 
   * Original thrift field:-
   * 5: struct module.MyUnionPatch patchAfter
   */
  public ?MyUnionPatch $patchAfter;

  public function __construct(?bool $clear = null, ?MyUnionPatch $patch = null, ?MyUnion $ensure = null, ?MyUnionPatch $patchAfter = null  )[] {
    $this->clear = $clear ?? false;
    $this->patch = $patch;
    $this->ensure = $ensure;
    $this->patchAfter = $patchAfter;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'clear'),
      Shapes::idx($shape, 'patch'),
      Shapes::idx($shape, 'ensure'),
      Shapes::idx($shape, 'patchAfter'),
    );
  }

  public function getName()[]: string {
    return 'MyUnionValuePatch';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.MyUnionValuePatch",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_BOOL_TYPE,
                )
              ),
              "name" => "clear",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 3,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.MyUnionPatch",
                    )
                  ),
                )
              ),
              "name" => "patch",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 4,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.MyUnion",
                    )
                  ),
                )
              ),
              "name" => "ensure",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 5,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.MyUnionPatch",
                    )
                  ),
                )
              ),
              "name" => "patchAfter",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
      $shape['clear'],
      Shapes::idx($shape, 'patch') === null ? null : (MyUnionPatch::__fromShape($shape['patch'])),
      Shapes::idx($shape, 'ensure') === null ? null : (MyUnion::__fromShape($shape['ensure'])),
      Shapes::idx($shape, 'patchAfter') === null ? null : (MyUnionPatch::__fromShape($shape['patchAfter'])),
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
      'clear' => $this->clear,
      'patch' => $this->patch?->__toShape(),
      'ensure' => $this->ensure?->__toShape(),
      'patchAfter' => $this->patchAfter?->__toShape(),
    );
  }
  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'clear') !== null) {
      $this->clear = /* HH_FIXME[4110] */ $parsed['clear'];
    }    
    if (idx($parsed, 'patch') !== null) {
      $_tmp0 = json_encode(/* HH_FIXME[4110] */ $parsed['patch']);
      $_tmp1 = MyUnionPatch::withDefaultValues();
      $_tmp1->readFromJson($_tmp0);
      $this->patch = $_tmp1;
    }    
    if (idx($parsed, 'ensure') !== null) {
      $_tmp2 = json_encode(/* HH_FIXME[4110] */ $parsed['ensure']);
      $_tmp3 = MyUnion::withDefaultValues();
      $_tmp3->readFromJson($_tmp2);
      $this->ensure = $_tmp3;
    }    
    if (idx($parsed, 'patchAfter') !== null) {
      $_tmp4 = json_encode(/* HH_FIXME[4110] */ $parsed['patchAfter']);
      $_tmp5 = MyUnionPatch::withDefaultValues();
      $_tmp5->readFromJson($_tmp4);
      $this->patchAfter = $_tmp5;
    }    
  }

}

/**
 * Original thrift struct:-
 * OptionalMyUnionValuePatch
 */
class OptionalMyUnionValuePatch implements \IThriftSyncStruct, \IThriftShapishSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    2 => shape(
      'var' => 'clear',
      'type' => \TType::BOOL,
    ),
    3 => shape(
      'var' => 'patch',
      'type' => \TType::STRUCT,
      'class' => MyUnionValuePatch::class,
    ),
    4 => shape(
      'var' => 'ensure',
      'type' => \TType::STRUCT,
      'class' => MyUnion::class,
    ),
    5 => shape(
      'var' => 'patchAfter',
      'type' => \TType::STRUCT,
      'class' => MyUnionValuePatch::class,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'clear' => 2,
    'patch' => 3,
    'ensure' => 4,
    'patchAfter' => 5,
  ];

  const type TConstructorShape = shape(
    ?'clear' => ?bool,
    ?'patch' => ?MyUnionValuePatch,
    ?'ensure' => ?MyUnion,
    ?'patchAfter' => ?MyUnionValuePatch,
  );

  const type TShape = shape(
    'clear' => bool,
    ?'patch' => ?MyUnionValuePatch::TShape,
    ?'ensure' => ?MyUnion::TShape,
    ?'patchAfter' => ?MyUnionValuePatch::TShape,
    ...
  );
  const int STRUCTURAL_ID = 1268025857994486738;
  /**
   * Clears any set value. Applies first.
   * 
   * Original thrift field:-
   * 2: bool clear
   */
  public bool $clear;
  /**
   * Patches any set value. Applies second.
   * 
   * Original thrift field:-
   * 3: struct module.MyUnionValuePatch patch
   */
  public ?MyUnionValuePatch $patch;
  /**
   * Assigns the value, if not already set. Applies third.
   * 
   * Original thrift field:-
   * 4: struct module.MyUnion ensure
   */
  public ?MyUnion $ensure;
  /**
   * Patches any set value, including newly set values. Applies fourth.
   * 
   * Original thrift field:-
   * 5: struct module.MyUnionValuePatch patchAfter
   */
  public ?MyUnionValuePatch $patchAfter;

  public function __construct(?bool $clear = null, ?MyUnionValuePatch $patch = null, ?MyUnion $ensure = null, ?MyUnionValuePatch $patchAfter = null  )[] {
    $this->clear = $clear ?? false;
    $this->patch = $patch;
    $this->ensure = $ensure;
    $this->patchAfter = $patchAfter;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'clear'),
      Shapes::idx($shape, 'patch'),
      Shapes::idx($shape, 'ensure'),
      Shapes::idx($shape, 'patchAfter'),
    );
  }

  public function getName()[]: string {
    return 'OptionalMyUnionValuePatch';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.OptionalMyUnionValuePatch",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_BOOL_TYPE,
                )
              ),
              "name" => "clear",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 3,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.MyUnionValuePatch",
                    )
                  ),
                )
              ),
              "name" => "patch",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 4,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.MyUnion",
                    )
                  ),
                )
              ),
              "name" => "ensure",
              "is_optional" => true,
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 5,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.MyUnionValuePatch",
                    )
                  ),
                )
              ),
              "name" => "patchAfter",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
      $shape['clear'],
      Shapes::idx($shape, 'patch') === null ? null : (MyUnionValuePatch::__fromShape($shape['patch'])),
      Shapes::idx($shape, 'ensure') === null ? null : (MyUnion::__fromShape($shape['ensure'])),
      Shapes::idx($shape, 'patchAfter') === null ? null : (MyUnionValuePatch::__fromShape($shape['patchAfter'])),
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
      'clear' => $this->clear,
      'patch' => $this->patch?->__toShape(),
      'ensure' => $this->ensure?->__toShape(),
      'patchAfter' => $this->patchAfter?->__toShape(),
    );
  }
  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'clear') !== null) {
      $this->clear = /* HH_FIXME[4110] */ $parsed['clear'];
    }    
    if (idx($parsed, 'patch') !== null) {
      $_tmp0 = json_encode(/* HH_FIXME[4110] */ $parsed['patch']);
      $_tmp1 = MyUnionValuePatch::withDefaultValues();
      $_tmp1->readFromJson($_tmp0);
      $this->patch = $_tmp1;
    }    
    if (idx($parsed, 'ensure') !== null) {
      $_tmp2 = json_encode(/* HH_FIXME[4110] */ $parsed['ensure']);
      $_tmp3 = MyUnion::withDefaultValues();
      $_tmp3->readFromJson($_tmp2);
      $this->ensure = $_tmp3;
    }    
    if (idx($parsed, 'patchAfter') !== null) {
      $_tmp4 = json_encode(/* HH_FIXME[4110] */ $parsed['patchAfter']);
      $_tmp5 = MyUnionValuePatch::withDefaultValues();
      $_tmp5->readFromJson($_tmp4);
      $this->patchAfter = $_tmp5;
    }    
  }

}

/**
 * Original thrift struct:-
 * MyStructPatch
 */
class MyStructPatch implements \IThriftSyncStruct, \IThriftShapishSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    1 => shape(
      'var' => 'boolVal',
      'type' => \TType::STRUCT,
      'class' => BoolPatch::class,
    ),
    2 => shape(
      'var' => 'byteVal',
      'type' => \TType::STRUCT,
      'class' => BytePatch::class,
    ),
    3 => shape(
      'var' => 'i16Val',
      'type' => \TType::STRUCT,
      'class' => I16Patch::class,
    ),
    4 => shape(
      'var' => 'i32Val',
      'type' => \TType::STRUCT,
      'class' => I32Patch::class,
    ),
    5 => shape(
      'var' => 'i64Val',
      'type' => \TType::STRUCT,
      'class' => I64Patch::class,
    ),
    6 => shape(
      'var' => 'floatVal',
      'type' => \TType::STRUCT,
      'class' => FloatPatch::class,
    ),
    7 => shape(
      'var' => 'doubleVal',
      'type' => \TType::STRUCT,
      'class' => DoublePatch::class,
    ),
    8 => shape(
      'var' => 'stringVal',
      'type' => \TType::STRUCT,
      'class' => StringPatch::class,
    ),
    9 => shape(
      'var' => 'binaryVal',
      'type' => \TType::STRUCT,
      'class' => BinaryPatch::class,
    ),
    10 => shape(
      'var' => 'structVal',
      'type' => \TType::STRUCT,
      'class' => MyDataValuePatch::class,
    ),
    11 => shape(
      'var' => 'optBoolVal',
      'type' => \TType::STRUCT,
      'class' => OptionalBoolPatch::class,
    ),
    12 => shape(
      'var' => 'optByteVal',
      'type' => \TType::STRUCT,
      'class' => OptionalBytePatch::class,
    ),
    13 => shape(
      'var' => 'optI16Val',
      'type' => \TType::STRUCT,
      'class' => OptionalI16Patch::class,
    ),
    14 => shape(
      'var' => 'optI32Val',
      'type' => \TType::STRUCT,
      'class' => OptionalI32Patch::class,
    ),
    15 => shape(
      'var' => 'optI64Val',
      'type' => \TType::STRUCT,
      'class' => OptionalI64Patch::class,
    ),
    16 => shape(
      'var' => 'optFloatVal',
      'type' => \TType::STRUCT,
      'class' => OptionalFloatPatch::class,
    ),
    17 => shape(
      'var' => 'optDoubleVal',
      'type' => \TType::STRUCT,
      'class' => OptionalDoublePatch::class,
    ),
    18 => shape(
      'var' => 'optStringVal',
      'type' => \TType::STRUCT,
      'class' => OptionalStringPatch::class,
    ),
    19 => shape(
      'var' => 'optBinaryVal',
      'type' => \TType::STRUCT,
      'class' => OptionalBinaryPatch::class,
    ),
    20 => shape(
      'var' => 'optStructVal',
      'type' => \TType::STRUCT,
      'class' => OptionalMyDataValuePatch::class,
    ),
    21 => shape(
      'var' => 'optListVal',
      'type' => \TType::STRUCT,
      'class' => OptionalMyStructField21Patch::class,
    ),
    22 => shape(
      'var' => 'optSetVal',
      'type' => \TType::STRUCT,
      'class' => OptionalMyStructField22Patch::class,
    ),
    23 => shape(
      'var' => 'optMapVal',
      'type' => \TType::STRUCT,
      'class' => OptionalMyStructField23Patch::class,
    ),
    30 => shape(
      'var' => 'unionVal',
      'type' => \TType::STRUCT,
      'class' => MyUnionValuePatch::class,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'boolVal' => 1,
    'byteVal' => 2,
    'i16Val' => 3,
    'i32Val' => 4,
    'i64Val' => 5,
    'floatVal' => 6,
    'doubleVal' => 7,
    'stringVal' => 8,
    'binaryVal' => 9,
    'structVal' => 10,
    'optBoolVal' => 11,
    'optByteVal' => 12,
    'optI16Val' => 13,
    'optI32Val' => 14,
    'optI64Val' => 15,
    'optFloatVal' => 16,
    'optDoubleVal' => 17,
    'optStringVal' => 18,
    'optBinaryVal' => 19,
    'optStructVal' => 20,
    'optListVal' => 21,
    'optSetVal' => 22,
    'optMapVal' => 23,
    'unionVal' => 30,
  ];

  const type TConstructorShape = shape(
    ?'boolVal' => ?BoolPatch,
    ?'byteVal' => ?BytePatch,
    ?'i16Val' => ?I16Patch,
    ?'i32Val' => ?I32Patch,
    ?'i64Val' => ?I64Patch,
    ?'floatVal' => ?FloatPatch,
    ?'doubleVal' => ?DoublePatch,
    ?'stringVal' => ?StringPatch,
    ?'binaryVal' => ?BinaryPatch,
    ?'structVal' => ?MyDataValuePatch,
    ?'optBoolVal' => ?OptionalBoolPatch,
    ?'optByteVal' => ?OptionalBytePatch,
    ?'optI16Val' => ?OptionalI16Patch,
    ?'optI32Val' => ?OptionalI32Patch,
    ?'optI64Val' => ?OptionalI64Patch,
    ?'optFloatVal' => ?OptionalFloatPatch,
    ?'optDoubleVal' => ?OptionalDoublePatch,
    ?'optStringVal' => ?OptionalStringPatch,
    ?'optBinaryVal' => ?OptionalBinaryPatch,
    ?'optStructVal' => ?OptionalMyDataValuePatch,
    ?'optListVal' => ?OptionalMyStructField21Patch,
    ?'optSetVal' => ?OptionalMyStructField22Patch,
    ?'optMapVal' => ?OptionalMyStructField23Patch,
    ?'unionVal' => ?MyUnionValuePatch,
  );

  const type TShape = shape(
    ?'boolVal' => ?BoolPatch::TShape,
    ?'byteVal' => ?BytePatch::TShape,
    ?'i16Val' => ?I16Patch::TShape,
    ?'i32Val' => ?I32Patch::TShape,
    ?'i64Val' => ?I64Patch::TShape,
    ?'floatVal' => ?FloatPatch::TShape,
    ?'doubleVal' => ?DoublePatch::TShape,
    ?'stringVal' => ?StringPatch::TShape,
    ?'binaryVal' => ?BinaryPatch::TShape,
    ?'structVal' => ?MyDataValuePatch::TShape,
    ?'optBoolVal' => ?OptionalBoolPatch::TShape,
    ?'optByteVal' => ?OptionalBytePatch::TShape,
    ?'optI16Val' => ?OptionalI16Patch::TShape,
    ?'optI32Val' => ?OptionalI32Patch::TShape,
    ?'optI64Val' => ?OptionalI64Patch::TShape,
    ?'optFloatVal' => ?OptionalFloatPatch::TShape,
    ?'optDoubleVal' => ?OptionalDoublePatch::TShape,
    ?'optStringVal' => ?OptionalStringPatch::TShape,
    ?'optBinaryVal' => ?OptionalBinaryPatch::TShape,
    ?'optStructVal' => ?OptionalMyDataValuePatch::TShape,
    ?'optListVal' => ?OptionalMyStructField21Patch::TShape,
    ?'optSetVal' => ?OptionalMyStructField22Patch::TShape,
    ?'optMapVal' => ?OptionalMyStructField23Patch::TShape,
    ?'unionVal' => ?MyUnionValuePatch::TShape,
    ...
  );
  const int STRUCTURAL_ID = 7507825226095496861;
  /**
   * Original thrift field:-
   * 1: struct patch.BoolPatch boolVal
   */
  public ?BoolPatch $boolVal;
  /**
   * Original thrift field:-
   * 2: struct patch.BytePatch byteVal
   */
  public ?BytePatch $byteVal;
  /**
   * Original thrift field:-
   * 3: struct patch.I16Patch i16Val
   */
  public ?I16Patch $i16Val;
  /**
   * Original thrift field:-
   * 4: struct patch.I32Patch i32Val
   */
  public ?I32Patch $i32Val;
  /**
   * Original thrift field:-
   * 5: struct patch.I64Patch i64Val
   */
  public ?I64Patch $i64Val;
  /**
   * Original thrift field:-
   * 6: struct patch.FloatPatch floatVal
   */
  public ?FloatPatch $floatVal;
  /**
   * Original thrift field:-
   * 7: struct patch.DoublePatch doubleVal
   */
  public ?DoublePatch $doubleVal;
  /**
   * Original thrift field:-
   * 8: struct patch.StringPatch stringVal
   */
  public ?StringPatch $stringVal;
  /**
   * Original thrift field:-
   * 9: struct patch.BinaryPatch binaryVal
   */
  public ?BinaryPatch $binaryVal;
  /**
   * Original thrift field:-
   * 10: struct module.MyDataValuePatch structVal
   */
  public ?MyDataValuePatch $structVal;
  /**
   * Original thrift field:-
   * 11: struct patch.OptionalBoolPatch optBoolVal
   */
  public ?OptionalBoolPatch $optBoolVal;
  /**
   * Original thrift field:-
   * 12: struct patch.OptionalBytePatch optByteVal
   */
  public ?OptionalBytePatch $optByteVal;
  /**
   * Original thrift field:-
   * 13: struct patch.OptionalI16Patch optI16Val
   */
  public ?OptionalI16Patch $optI16Val;
  /**
   * Original thrift field:-
   * 14: struct patch.OptionalI32Patch optI32Val
   */
  public ?OptionalI32Patch $optI32Val;
  /**
   * Original thrift field:-
   * 15: struct patch.OptionalI64Patch optI64Val
   */
  public ?OptionalI64Patch $optI64Val;
  /**
   * Original thrift field:-
   * 16: struct patch.OptionalFloatPatch optFloatVal
   */
  public ?OptionalFloatPatch $optFloatVal;
  /**
   * Original thrift field:-
   * 17: struct patch.OptionalDoublePatch optDoubleVal
   */
  public ?OptionalDoublePatch $optDoubleVal;
  /**
   * Original thrift field:-
   * 18: struct patch.OptionalStringPatch optStringVal
   */
  public ?OptionalStringPatch $optStringVal;
  /**
   * Original thrift field:-
   * 19: struct patch.OptionalBinaryPatch optBinaryVal
   */
  public ?OptionalBinaryPatch $optBinaryVal;
  /**
   * Original thrift field:-
   * 20: struct module.OptionalMyDataValuePatch optStructVal
   */
  public ?OptionalMyDataValuePatch $optStructVal;
  /**
   * Original thrift field:-
   * 21: struct module.OptionalMyStructField21Patch optListVal
   */
  public ?OptionalMyStructField21Patch $optListVal;
  /**
   * Original thrift field:-
   * 22: struct module.OptionalMyStructField22Patch optSetVal
   */
  public ?OptionalMyStructField22Patch $optSetVal;
  /**
   * Original thrift field:-
   * 23: struct module.OptionalMyStructField23Patch optMapVal
   */
  public ?OptionalMyStructField23Patch $optMapVal;
  /**
   * Original thrift field:-
   * 30: struct module.MyUnionValuePatch unionVal
   */
  public ?MyUnionValuePatch $unionVal;

  public function __construct(?BoolPatch $boolVal = null, ?BytePatch $byteVal = null, ?I16Patch $i16Val = null, ?I32Patch $i32Val = null, ?I64Patch $i64Val = null, ?FloatPatch $floatVal = null, ?DoublePatch $doubleVal = null, ?StringPatch $stringVal = null, ?BinaryPatch $binaryVal = null, ?MyDataValuePatch $structVal = null, ?OptionalBoolPatch $optBoolVal = null, ?OptionalBytePatch $optByteVal = null, ?OptionalI16Patch $optI16Val = null, ?OptionalI32Patch $optI32Val = null, ?OptionalI64Patch $optI64Val = null, ?OptionalFloatPatch $optFloatVal = null, ?OptionalDoublePatch $optDoubleVal = null, ?OptionalStringPatch $optStringVal = null, ?OptionalBinaryPatch $optBinaryVal = null, ?OptionalMyDataValuePatch $optStructVal = null, ?OptionalMyStructField21Patch $optListVal = null, ?OptionalMyStructField22Patch $optSetVal = null, ?OptionalMyStructField23Patch $optMapVal = null, ?MyUnionValuePatch $unionVal = null  )[] {
    $this->boolVal = $boolVal;
    $this->byteVal = $byteVal;
    $this->i16Val = $i16Val;
    $this->i32Val = $i32Val;
    $this->i64Val = $i64Val;
    $this->floatVal = $floatVal;
    $this->doubleVal = $doubleVal;
    $this->stringVal = $stringVal;
    $this->binaryVal = $binaryVal;
    $this->structVal = $structVal;
    $this->optBoolVal = $optBoolVal;
    $this->optByteVal = $optByteVal;
    $this->optI16Val = $optI16Val;
    $this->optI32Val = $optI32Val;
    $this->optI64Val = $optI64Val;
    $this->optFloatVal = $optFloatVal;
    $this->optDoubleVal = $optDoubleVal;
    $this->optStringVal = $optStringVal;
    $this->optBinaryVal = $optBinaryVal;
    $this->optStructVal = $optStructVal;
    $this->optListVal = $optListVal;
    $this->optSetVal = $optSetVal;
    $this->optMapVal = $optMapVal;
    $this->unionVal = $unionVal;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'boolVal'),
      Shapes::idx($shape, 'byteVal'),
      Shapes::idx($shape, 'i16Val'),
      Shapes::idx($shape, 'i32Val'),
      Shapes::idx($shape, 'i64Val'),
      Shapes::idx($shape, 'floatVal'),
      Shapes::idx($shape, 'doubleVal'),
      Shapes::idx($shape, 'stringVal'),
      Shapes::idx($shape, 'binaryVal'),
      Shapes::idx($shape, 'structVal'),
      Shapes::idx($shape, 'optBoolVal'),
      Shapes::idx($shape, 'optByteVal'),
      Shapes::idx($shape, 'optI16Val'),
      Shapes::idx($shape, 'optI32Val'),
      Shapes::idx($shape, 'optI64Val'),
      Shapes::idx($shape, 'optFloatVal'),
      Shapes::idx($shape, 'optDoubleVal'),
      Shapes::idx($shape, 'optStringVal'),
      Shapes::idx($shape, 'optBinaryVal'),
      Shapes::idx($shape, 'optStructVal'),
      Shapes::idx($shape, 'optListVal'),
      Shapes::idx($shape, 'optSetVal'),
      Shapes::idx($shape, 'optMapVal'),
      Shapes::idx($shape, 'unionVal'),
    );
  }

  public function getName()[]: string {
    return 'MyStructPatch';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.MyStructPatch",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.BoolPatch",
                    )
                  ),
                )
              ),
              "name" => "boolVal",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.BytePatch",
                    )
                  ),
                )
              ),
              "name" => "byteVal",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 3,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.I16Patch",
                    )
                  ),
                )
              ),
              "name" => "i16Val",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 4,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.I32Patch",
                    )
                  ),
                )
              ),
              "name" => "i32Val",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 5,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.I64Patch",
                    )
                  ),
                )
              ),
              "name" => "i64Val",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 6,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.FloatPatch",
                    )
                  ),
                )
              ),
              "name" => "floatVal",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 7,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.DoublePatch",
                    )
                  ),
                )
              ),
              "name" => "doubleVal",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 8,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.StringPatch",
                    )
                  ),
                )
              ),
              "name" => "stringVal",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 9,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.BinaryPatch",
                    )
                  ),
                )
              ),
              "name" => "binaryVal",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 10,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.MyDataValuePatch",
                    )
                  ),
                )
              ),
              "name" => "structVal",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 11,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.OptionalBoolPatch",
                    )
                  ),
                )
              ),
              "name" => "optBoolVal",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 12,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.OptionalBytePatch",
                    )
                  ),
                )
              ),
              "name" => "optByteVal",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 13,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.OptionalI16Patch",
                    )
                  ),
                )
              ),
              "name" => "optI16Val",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 14,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.OptionalI32Patch",
                    )
                  ),
                )
              ),
              "name" => "optI32Val",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 15,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.OptionalI64Patch",
                    )
                  ),
                )
              ),
              "name" => "optI64Val",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 16,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.OptionalFloatPatch",
                    )
                  ),
                )
              ),
              "name" => "optFloatVal",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 17,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.OptionalDoublePatch",
                    )
                  ),
                )
              ),
              "name" => "optDoubleVal",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 18,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.OptionalStringPatch",
                    )
                  ),
                )
              ),
              "name" => "optStringVal",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 19,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.OptionalBinaryPatch",
                    )
                  ),
                )
              ),
              "name" => "optBinaryVal",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 20,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.OptionalMyDataValuePatch",
                    )
                  ),
                )
              ),
              "name" => "optStructVal",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 21,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.OptionalMyStructField21Patch",
                    )
                  ),
                )
              ),
              "name" => "optListVal",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 22,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.OptionalMyStructField22Patch",
                    )
                  ),
                )
              ),
              "name" => "optSetVal",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 23,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.OptionalMyStructField23Patch",
                    )
                  ),
                )
              ),
              "name" => "optMapVal",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 30,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.MyUnionValuePatch",
                    )
                  ),
                )
              ),
              "name" => "unionVal",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
        'boolVal' => shape(
          'field' => dict[],
          'type' => dict[
            'GenerateOptionalPatch' => GenerateOptionalPatch::fromShape(
              shape(
              )
            ),
            'facebook_thrift_annotation_thrift_Experimental' => facebook_thrift_annotation_thrift_Experimental::fromShape(
              shape(
              )
            ),
          ],
        ),
        'byteVal' => shape(
          'field' => dict[],
          'type' => dict[
            'GenerateOptionalPatch' => GenerateOptionalPatch::fromShape(
              shape(
              )
            ),
            'facebook_thrift_annotation_thrift_Experimental' => facebook_thrift_annotation_thrift_Experimental::fromShape(
              shape(
              )
            ),
          ],
        ),
        'i16Val' => shape(
          'field' => dict[],
          'type' => dict[
            'GenerateOptionalPatch' => GenerateOptionalPatch::fromShape(
              shape(
              )
            ),
            'facebook_thrift_annotation_thrift_Experimental' => facebook_thrift_annotation_thrift_Experimental::fromShape(
              shape(
              )
            ),
          ],
        ),
        'i32Val' => shape(
          'field' => dict[],
          'type' => dict[
            'GenerateOptionalPatch' => GenerateOptionalPatch::fromShape(
              shape(
              )
            ),
            'facebook_thrift_annotation_thrift_Experimental' => facebook_thrift_annotation_thrift_Experimental::fromShape(
              shape(
              )
            ),
          ],
        ),
        'i64Val' => shape(
          'field' => dict[],
          'type' => dict[
            'GenerateOptionalPatch' => GenerateOptionalPatch::fromShape(
              shape(
              )
            ),
            'facebook_thrift_annotation_thrift_Experimental' => facebook_thrift_annotation_thrift_Experimental::fromShape(
              shape(
              )
            ),
          ],
        ),
        'floatVal' => shape(
          'field' => dict[],
          'type' => dict[
            'GenerateOptionalPatch' => GenerateOptionalPatch::fromShape(
              shape(
              )
            ),
            'facebook_thrift_annotation_thrift_Experimental' => facebook_thrift_annotation_thrift_Experimental::fromShape(
              shape(
              )
            ),
          ],
        ),
        'doubleVal' => shape(
          'field' => dict[],
          'type' => dict[
            'GenerateOptionalPatch' => GenerateOptionalPatch::fromShape(
              shape(
              )
            ),
            'facebook_thrift_annotation_thrift_Experimental' => facebook_thrift_annotation_thrift_Experimental::fromShape(
              shape(
              )
            ),
          ],
        ),
        'stringVal' => shape(
          'field' => dict[],
          'type' => dict[
            'GenerateOptionalPatch' => GenerateOptionalPatch::fromShape(
              shape(
              )
            ),
            'facebook_thrift_annotation_thrift_Experimental' => facebook_thrift_annotation_thrift_Experimental::fromShape(
              shape(
              )
            ),
          ],
        ),
        'binaryVal' => shape(
          'field' => dict[],
          'type' => dict[
            'GenerateOptionalPatch' => GenerateOptionalPatch::fromShape(
              shape(
              )
            ),
            'facebook_thrift_annotation_thrift_Experimental' => facebook_thrift_annotation_thrift_Experimental::fromShape(
              shape(
              )
            ),
          ],
        ),
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'boolVal') === null ? null : (BoolPatch::__fromShape($shape['boolVal'])),
      Shapes::idx($shape, 'byteVal') === null ? null : (BytePatch::__fromShape($shape['byteVal'])),
      Shapes::idx($shape, 'i16Val') === null ? null : (I16Patch::__fromShape($shape['i16Val'])),
      Shapes::idx($shape, 'i32Val') === null ? null : (I32Patch::__fromShape($shape['i32Val'])),
      Shapes::idx($shape, 'i64Val') === null ? null : (I64Patch::__fromShape($shape['i64Val'])),
      Shapes::idx($shape, 'floatVal') === null ? null : (FloatPatch::__fromShape($shape['floatVal'])),
      Shapes::idx($shape, 'doubleVal') === null ? null : (DoublePatch::__fromShape($shape['doubleVal'])),
      Shapes::idx($shape, 'stringVal') === null ? null : (StringPatch::__fromShape($shape['stringVal'])),
      Shapes::idx($shape, 'binaryVal') === null ? null : (BinaryPatch::__fromShape($shape['binaryVal'])),
      Shapes::idx($shape, 'structVal') === null ? null : (MyDataValuePatch::__fromShape($shape['structVal'])),
      Shapes::idx($shape, 'optBoolVal') === null ? null : (OptionalBoolPatch::__fromShape($shape['optBoolVal'])),
      Shapes::idx($shape, 'optByteVal') === null ? null : (OptionalBytePatch::__fromShape($shape['optByteVal'])),
      Shapes::idx($shape, 'optI16Val') === null ? null : (OptionalI16Patch::__fromShape($shape['optI16Val'])),
      Shapes::idx($shape, 'optI32Val') === null ? null : (OptionalI32Patch::__fromShape($shape['optI32Val'])),
      Shapes::idx($shape, 'optI64Val') === null ? null : (OptionalI64Patch::__fromShape($shape['optI64Val'])),
      Shapes::idx($shape, 'optFloatVal') === null ? null : (OptionalFloatPatch::__fromShape($shape['optFloatVal'])),
      Shapes::idx($shape, 'optDoubleVal') === null ? null : (OptionalDoublePatch::__fromShape($shape['optDoubleVal'])),
      Shapes::idx($shape, 'optStringVal') === null ? null : (OptionalStringPatch::__fromShape($shape['optStringVal'])),
      Shapes::idx($shape, 'optBinaryVal') === null ? null : (OptionalBinaryPatch::__fromShape($shape['optBinaryVal'])),
      Shapes::idx($shape, 'optStructVal') === null ? null : (OptionalMyDataValuePatch::__fromShape($shape['optStructVal'])),
      Shapes::idx($shape, 'optListVal') === null ? null : (OptionalMyStructField21Patch::__fromShape($shape['optListVal'])),
      Shapes::idx($shape, 'optSetVal') === null ? null : (OptionalMyStructField22Patch::__fromShape($shape['optSetVal'])),
      Shapes::idx($shape, 'optMapVal') === null ? null : (OptionalMyStructField23Patch::__fromShape($shape['optMapVal'])),
      Shapes::idx($shape, 'unionVal') === null ? null : (MyUnionValuePatch::__fromShape($shape['unionVal'])),
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
      'boolVal' => $this->boolVal?->__toShape(),
      'byteVal' => $this->byteVal?->__toShape(),
      'i16Val' => $this->i16Val?->__toShape(),
      'i32Val' => $this->i32Val?->__toShape(),
      'i64Val' => $this->i64Val?->__toShape(),
      'floatVal' => $this->floatVal?->__toShape(),
      'doubleVal' => $this->doubleVal?->__toShape(),
      'stringVal' => $this->stringVal?->__toShape(),
      'binaryVal' => $this->binaryVal?->__toShape(),
      'structVal' => $this->structVal?->__toShape(),
      'optBoolVal' => $this->optBoolVal?->__toShape(),
      'optByteVal' => $this->optByteVal?->__toShape(),
      'optI16Val' => $this->optI16Val?->__toShape(),
      'optI32Val' => $this->optI32Val?->__toShape(),
      'optI64Val' => $this->optI64Val?->__toShape(),
      'optFloatVal' => $this->optFloatVal?->__toShape(),
      'optDoubleVal' => $this->optDoubleVal?->__toShape(),
      'optStringVal' => $this->optStringVal?->__toShape(),
      'optBinaryVal' => $this->optBinaryVal?->__toShape(),
      'optStructVal' => $this->optStructVal?->__toShape(),
      'optListVal' => $this->optListVal?->__toShape(),
      'optSetVal' => $this->optSetVal?->__toShape(),
      'optMapVal' => $this->optMapVal?->__toShape(),
      'unionVal' => $this->unionVal?->__toShape(),
    );
  }
  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'boolVal') !== null) {
      $_tmp0 = json_encode(/* HH_FIXME[4110] */ $parsed['boolVal']);
      $_tmp1 = BoolPatch::withDefaultValues();
      $_tmp1->readFromJson($_tmp0);
      $this->boolVal = $_tmp1;
    }    
    if (idx($parsed, 'byteVal') !== null) {
      $_tmp2 = json_encode(/* HH_FIXME[4110] */ $parsed['byteVal']);
      $_tmp3 = BytePatch::withDefaultValues();
      $_tmp3->readFromJson($_tmp2);
      $this->byteVal = $_tmp3;
    }    
    if (idx($parsed, 'i16Val') !== null) {
      $_tmp4 = json_encode(/* HH_FIXME[4110] */ $parsed['i16Val']);
      $_tmp5 = I16Patch::withDefaultValues();
      $_tmp5->readFromJson($_tmp4);
      $this->i16Val = $_tmp5;
    }    
    if (idx($parsed, 'i32Val') !== null) {
      $_tmp6 = json_encode(/* HH_FIXME[4110] */ $parsed['i32Val']);
      $_tmp7 = I32Patch::withDefaultValues();
      $_tmp7->readFromJson($_tmp6);
      $this->i32Val = $_tmp7;
    }    
    if (idx($parsed, 'i64Val') !== null) {
      $_tmp8 = json_encode(/* HH_FIXME[4110] */ $parsed['i64Val']);
      $_tmp9 = I64Patch::withDefaultValues();
      $_tmp9->readFromJson($_tmp8);
      $this->i64Val = $_tmp9;
    }    
    if (idx($parsed, 'floatVal') !== null) {
      $_tmp10 = json_encode(/* HH_FIXME[4110] */ $parsed['floatVal']);
      $_tmp11 = FloatPatch::withDefaultValues();
      $_tmp11->readFromJson($_tmp10);
      $this->floatVal = $_tmp11;
    }    
    if (idx($parsed, 'doubleVal') !== null) {
      $_tmp12 = json_encode(/* HH_FIXME[4110] */ $parsed['doubleVal']);
      $_tmp13 = DoublePatch::withDefaultValues();
      $_tmp13->readFromJson($_tmp12);
      $this->doubleVal = $_tmp13;
    }    
    if (idx($parsed, 'stringVal') !== null) {
      $_tmp14 = json_encode(/* HH_FIXME[4110] */ $parsed['stringVal']);
      $_tmp15 = StringPatch::withDefaultValues();
      $_tmp15->readFromJson($_tmp14);
      $this->stringVal = $_tmp15;
    }    
    if (idx($parsed, 'binaryVal') !== null) {
      $_tmp16 = json_encode(/* HH_FIXME[4110] */ $parsed['binaryVal']);
      $_tmp17 = BinaryPatch::withDefaultValues();
      $_tmp17->readFromJson($_tmp16);
      $this->binaryVal = $_tmp17;
    }    
    if (idx($parsed, 'structVal') !== null) {
      $_tmp18 = json_encode(/* HH_FIXME[4110] */ $parsed['structVal']);
      $_tmp19 = MyDataValuePatch::withDefaultValues();
      $_tmp19->readFromJson($_tmp18);
      $this->structVal = $_tmp19;
    }    
    if (idx($parsed, 'optBoolVal') !== null) {
      $_tmp20 = json_encode(/* HH_FIXME[4110] */ $parsed['optBoolVal']);
      $_tmp21 = OptionalBoolPatch::withDefaultValues();
      $_tmp21->readFromJson($_tmp20);
      $this->optBoolVal = $_tmp21;
    }    
    if (idx($parsed, 'optByteVal') !== null) {
      $_tmp22 = json_encode(/* HH_FIXME[4110] */ $parsed['optByteVal']);
      $_tmp23 = OptionalBytePatch::withDefaultValues();
      $_tmp23->readFromJson($_tmp22);
      $this->optByteVal = $_tmp23;
    }    
    if (idx($parsed, 'optI16Val') !== null) {
      $_tmp24 = json_encode(/* HH_FIXME[4110] */ $parsed['optI16Val']);
      $_tmp25 = OptionalI16Patch::withDefaultValues();
      $_tmp25->readFromJson($_tmp24);
      $this->optI16Val = $_tmp25;
    }    
    if (idx($parsed, 'optI32Val') !== null) {
      $_tmp26 = json_encode(/* HH_FIXME[4110] */ $parsed['optI32Val']);
      $_tmp27 = OptionalI32Patch::withDefaultValues();
      $_tmp27->readFromJson($_tmp26);
      $this->optI32Val = $_tmp27;
    }    
    if (idx($parsed, 'optI64Val') !== null) {
      $_tmp28 = json_encode(/* HH_FIXME[4110] */ $parsed['optI64Val']);
      $_tmp29 = OptionalI64Patch::withDefaultValues();
      $_tmp29->readFromJson($_tmp28);
      $this->optI64Val = $_tmp29;
    }    
    if (idx($parsed, 'optFloatVal') !== null) {
      $_tmp30 = json_encode(/* HH_FIXME[4110] */ $parsed['optFloatVal']);
      $_tmp31 = OptionalFloatPatch::withDefaultValues();
      $_tmp31->readFromJson($_tmp30);
      $this->optFloatVal = $_tmp31;
    }    
    if (idx($parsed, 'optDoubleVal') !== null) {
      $_tmp32 = json_encode(/* HH_FIXME[4110] */ $parsed['optDoubleVal']);
      $_tmp33 = OptionalDoublePatch::withDefaultValues();
      $_tmp33->readFromJson($_tmp32);
      $this->optDoubleVal = $_tmp33;
    }    
    if (idx($parsed, 'optStringVal') !== null) {
      $_tmp34 = json_encode(/* HH_FIXME[4110] */ $parsed['optStringVal']);
      $_tmp35 = OptionalStringPatch::withDefaultValues();
      $_tmp35->readFromJson($_tmp34);
      $this->optStringVal = $_tmp35;
    }    
    if (idx($parsed, 'optBinaryVal') !== null) {
      $_tmp36 = json_encode(/* HH_FIXME[4110] */ $parsed['optBinaryVal']);
      $_tmp37 = OptionalBinaryPatch::withDefaultValues();
      $_tmp37->readFromJson($_tmp36);
      $this->optBinaryVal = $_tmp37;
    }    
    if (idx($parsed, 'optStructVal') !== null) {
      $_tmp38 = json_encode(/* HH_FIXME[4110] */ $parsed['optStructVal']);
      $_tmp39 = OptionalMyDataValuePatch::withDefaultValues();
      $_tmp39->readFromJson($_tmp38);
      $this->optStructVal = $_tmp39;
    }    
    if (idx($parsed, 'optListVal') !== null) {
      $_tmp40 = json_encode(/* HH_FIXME[4110] */ $parsed['optListVal']);
      $_tmp41 = OptionalMyStructField21Patch::withDefaultValues();
      $_tmp41->readFromJson($_tmp40);
      $this->optListVal = $_tmp41;
    }    
    if (idx($parsed, 'optSetVal') !== null) {
      $_tmp42 = json_encode(/* HH_FIXME[4110] */ $parsed['optSetVal']);
      $_tmp43 = OptionalMyStructField22Patch::withDefaultValues();
      $_tmp43->readFromJson($_tmp42);
      $this->optSetVal = $_tmp43;
    }    
    if (idx($parsed, 'optMapVal') !== null) {
      $_tmp44 = json_encode(/* HH_FIXME[4110] */ $parsed['optMapVal']);
      $_tmp45 = OptionalMyStructField23Patch::withDefaultValues();
      $_tmp45->readFromJson($_tmp44);
      $this->optMapVal = $_tmp45;
    }    
    if (idx($parsed, 'unionVal') !== null) {
      $_tmp46 = json_encode(/* HH_FIXME[4110] */ $parsed['unionVal']);
      $_tmp47 = MyUnionValuePatch::withDefaultValues();
      $_tmp47->readFromJson($_tmp46);
      $this->unionVal = $_tmp47;
    }    
  }

}

/**
 * Original thrift struct:-
 * MyStructField21Patch
 */
class MyStructField21Patch implements \IThriftSyncStruct, \IThriftShapishSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    1 => shape(
      'var' => 'assign',
      'type' => \TType::LST,
      'etype' => \TType::I16,
      'elem' => shape(
        'type' => \TType::I16,
      ),
      'format' => 'collection',
    ),
    2 => shape(
      'var' => 'clear',
      'type' => \TType::BOOL,
    ),
    4 => shape(
      'var' => 'prepend',
      'type' => \TType::LST,
      'etype' => \TType::I16,
      'elem' => shape(
        'type' => \TType::I16,
      ),
      'format' => 'collection',
    ),
    5 => shape(
      'var' => 'append',
      'type' => \TType::LST,
      'etype' => \TType::I16,
      'elem' => shape(
        'type' => \TType::I16,
      ),
      'format' => 'collection',
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'assign' => 1,
    'clear' => 2,
    'prepend' => 4,
    'append' => 5,
  ];

  const type TConstructorShape = shape(
    ?'assign' => ?Vector<int>,
    ?'clear' => ?bool,
    ?'prepend' => ?Vector<int>,
    ?'append' => ?Vector<int>,
  );

  const type TShape = shape(
    ?'assign' => ?vec<int>,
    'clear' => bool,
    'prepend' => vec<int>,
    'append' => vec<int>,
    ...
  );
  const int STRUCTURAL_ID = 8926399708196000015;
  /**
   * Assigns a value. If set, all other operations are ignored.
   * 
   * Original thrift field:-
   * 1: list<i16> assign
   */
  public ?Vector<int> $assign;
  /**
   * Clears a value. Applies first.
   * 
   * Original thrift field:-
   * 2: bool clear
   */
  public bool $clear;
  /**
   * Prepends to the front of a given list.
   * 
   * Original thrift field:-
   * 4: list<i16> prepend
   */
  public Vector<int> $prepend;
  /**
   * Appends to the back of a given list.
   * 
   * Original thrift field:-
   * 5: list<i16> append
   */
  public Vector<int> $append;

  public function __construct(?Vector<int> $assign = null, ?bool $clear = null, ?Vector<int> $prepend = null, ?Vector<int> $append = null  )[] {
    $this->assign = $assign;
    $this->clear = $clear ?? false;
    $this->prepend = $prepend ?? Vector {};
    $this->append = $append ?? Vector {};
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'assign'),
      Shapes::idx($shape, 'clear'),
      Shapes::idx($shape, 'prepend'),
      Shapes::idx($shape, 'append'),
    );
  }

  public function getName()[]: string {
    return 'MyStructField21Patch';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.MyStructField21Patch",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_list" => tmeta_ThriftListType::fromShape(
                    shape(
                      "valueType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_I16_TYPE,
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "assign",
              "is_optional" => true,
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_BOOL_TYPE,
                )
              ),
              "name" => "clear",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 4,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_list" => tmeta_ThriftListType::fromShape(
                    shape(
                      "valueType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_I16_TYPE,
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "prepend",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 5,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_list" => tmeta_ThriftListType::fromShape(
                    shape(
                      "valueType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_I16_TYPE,
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "append",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'assign') === null ? null : ((new Vector($shape['assign']))),
      $shape['clear'],
      (new Vector($shape['prepend'])),
      (new Vector($shape['append'])),
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
      'assign' => $this->assign
        |> $$ === null ? null : vec($$),
      'clear' => $this->clear,
      'prepend' => vec($this->prepend),
      'append' => vec($this->append),
    );
  }
  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'assign') !== null) {
      $_json3 = /* HH_FIXME[4110] */ $parsed['assign'];
      $_container4 = Vector {};
      foreach(/* HH_FIXME[4110] */ $_json3 as $_key1 => $_value2) {
        $_elem5 = 0;
        $_tmp6 = (int)$_value2;
        if ($_tmp6 > 0x7fff) {
          throw new \TProtocolException("number exceeds limit in field");
        } else {
          $_elem5 = (int)$_tmp6;
        }
        $_container4 []= $_elem5;
      }
      $this->assign = $_container4;
    }    
    if (idx($parsed, 'clear') !== null) {
      $this->clear = /* HH_FIXME[4110] */ $parsed['clear'];
    }    
    if (idx($parsed, 'prepend') !== null) {
      $_json10 = /* HH_FIXME[4110] */ $parsed['prepend'];
      $_container11 = Vector {};
      foreach(/* HH_FIXME[4110] */ $_json10 as $_key8 => $_value9) {
        $_elem12 = 0;
        $_tmp13 = (int)$_value9;
        if ($_tmp13 > 0x7fff) {
          throw new \TProtocolException("number exceeds limit in field");
        } else {
          $_elem12 = (int)$_tmp13;
        }
        $_container11 []= $_elem12;
      }
      $this->prepend = $_container11;
    }    
    if (idx($parsed, 'append') !== null) {
      $_json17 = /* HH_FIXME[4110] */ $parsed['append'];
      $_container18 = Vector {};
      foreach(/* HH_FIXME[4110] */ $_json17 as $_key15 => $_value16) {
        $_elem19 = 0;
        $_tmp20 = (int)$_value16;
        if ($_tmp20 > 0x7fff) {
          throw new \TProtocolException("number exceeds limit in field");
        } else {
          $_elem19 = (int)$_tmp20;
        }
        $_container18 []= $_elem19;
      }
      $this->append = $_container18;
    }    
  }

}

/**
 * Original thrift struct:-
 * OptionalMyStructField21Patch
 */
class OptionalMyStructField21Patch implements \IThriftSyncStruct, \IThriftShapishSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    2 => shape(
      'var' => 'clear',
      'type' => \TType::BOOL,
    ),
    3 => shape(
      'var' => 'patch',
      'type' => \TType::STRUCT,
      'class' => MyStructField21Patch::class,
    ),
    4 => shape(
      'var' => 'ensure',
      'type' => \TType::LST,
      'etype' => \TType::I16,
      'elem' => shape(
        'type' => \TType::I16,
      ),
      'format' => 'collection',
    ),
    5 => shape(
      'var' => 'patchAfter',
      'type' => \TType::STRUCT,
      'class' => MyStructField21Patch::class,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'clear' => 2,
    'patch' => 3,
    'ensure' => 4,
    'patchAfter' => 5,
  ];

  const type TConstructorShape = shape(
    ?'clear' => ?bool,
    ?'patch' => ?MyStructField21Patch,
    ?'ensure' => ?Vector<int>,
    ?'patchAfter' => ?MyStructField21Patch,
  );

  const type TShape = shape(
    'clear' => bool,
    ?'patch' => ?MyStructField21Patch::TShape,
    ?'ensure' => ?vec<int>,
    ?'patchAfter' => ?MyStructField21Patch::TShape,
    ...
  );
  const int STRUCTURAL_ID = 2539352043513030315;
  /**
   * Clears any set value. Applies first.
   * 
   * Original thrift field:-
   * 2: bool clear
   */
  public bool $clear;
  /**
   * Patches any set value. Applies second.
   * 
   * Original thrift field:-
   * 3: struct module.MyStructField21Patch patch
   */
  public ?MyStructField21Patch $patch;
  /**
   * Assigns the value, if not already set. Applies third.
   * 
   * Original thrift field:-
   * 4: list<i16> ensure
   */
  public ?Vector<int> $ensure;
  /**
   * Patches any set value, including newly set values. Applies fourth.
   * 
   * Original thrift field:-
   * 5: struct module.MyStructField21Patch patchAfter
   */
  public ?MyStructField21Patch $patchAfter;

  public function __construct(?bool $clear = null, ?MyStructField21Patch $patch = null, ?Vector<int> $ensure = null, ?MyStructField21Patch $patchAfter = null  )[] {
    $this->clear = $clear ?? false;
    $this->patch = $patch;
    $this->ensure = $ensure;
    $this->patchAfter = $patchAfter;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'clear'),
      Shapes::idx($shape, 'patch'),
      Shapes::idx($shape, 'ensure'),
      Shapes::idx($shape, 'patchAfter'),
    );
  }

  public function getName()[]: string {
    return 'OptionalMyStructField21Patch';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.OptionalMyStructField21Patch",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_BOOL_TYPE,
                )
              ),
              "name" => "clear",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 3,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.MyStructField21Patch",
                    )
                  ),
                )
              ),
              "name" => "patch",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 4,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_list" => tmeta_ThriftListType::fromShape(
                    shape(
                      "valueType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_I16_TYPE,
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "ensure",
              "is_optional" => true,
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 5,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.MyStructField21Patch",
                    )
                  ),
                )
              ),
              "name" => "patchAfter",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
      $shape['clear'],
      Shapes::idx($shape, 'patch') === null ? null : (MyStructField21Patch::__fromShape($shape['patch'])),
      Shapes::idx($shape, 'ensure') === null ? null : ((new Vector($shape['ensure']))),
      Shapes::idx($shape, 'patchAfter') === null ? null : (MyStructField21Patch::__fromShape($shape['patchAfter'])),
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
      'clear' => $this->clear,
      'patch' => $this->patch?->__toShape(),
      'ensure' => $this->ensure
        |> $$ === null ? null : vec($$),
      'patchAfter' => $this->patchAfter?->__toShape(),
    );
  }
  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'clear') !== null) {
      $this->clear = /* HH_FIXME[4110] */ $parsed['clear'];
    }    
    if (idx($parsed, 'patch') !== null) {
      $_tmp0 = json_encode(/* HH_FIXME[4110] */ $parsed['patch']);
      $_tmp1 = MyStructField21Patch::withDefaultValues();
      $_tmp1->readFromJson($_tmp0);
      $this->patch = $_tmp1;
    }    
    if (idx($parsed, 'ensure') !== null) {
      $_json5 = /* HH_FIXME[4110] */ $parsed['ensure'];
      $_container6 = Vector {};
      foreach(/* HH_FIXME[4110] */ $_json5 as $_key3 => $_value4) {
        $_elem7 = 0;
        $_tmp8 = (int)$_value4;
        if ($_tmp8 > 0x7fff) {
          throw new \TProtocolException("number exceeds limit in field");
        } else {
          $_elem7 = (int)$_tmp8;
        }
        $_container6 []= $_elem7;
      }
      $this->ensure = $_container6;
    }    
    if (idx($parsed, 'patchAfter') !== null) {
      $_tmp9 = json_encode(/* HH_FIXME[4110] */ $parsed['patchAfter']);
      $_tmp10 = MyStructField21Patch::withDefaultValues();
      $_tmp10->readFromJson($_tmp9);
      $this->patchAfter = $_tmp10;
    }    
  }

}

/**
 * Original thrift struct:-
 * MyStructField22Patch
 */
class MyStructField22Patch implements \IThriftSyncStruct, \IThriftShapishSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    1 => shape(
      'var' => 'assign',
      'type' => \TType::SET,
      'etype' => \TType::STRING,
      'elem' => shape(
        'type' => \TType::STRING,
      ),
      'format' => 'collection',
    ),
    2 => shape(
      'var' => 'clear',
      'type' => \TType::BOOL,
    ),
    4 => shape(
      'var' => 'remove',
      'type' => \TType::SET,
      'etype' => \TType::STRING,
      'elem' => shape(
        'type' => \TType::STRING,
      ),
      'format' => 'collection',
    ),
    5 => shape(
      'var' => 'add',
      'type' => \TType::SET,
      'etype' => \TType::STRING,
      'elem' => shape(
        'type' => \TType::STRING,
      ),
      'format' => 'collection',
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'assign' => 1,
    'clear' => 2,
    'remove' => 4,
    'add' => 5,
  ];

  const type TConstructorShape = shape(
    ?'assign' => ?Set<string>,
    ?'clear' => ?bool,
    ?'remove' => ?Set<string>,
    ?'add' => ?Set<string>,
  );

  const type TShape = shape(
    ?'assign' => ?dict<string, bool>,
    'clear' => bool,
    'remove' => dict<string, bool>,
    'add' => dict<string, bool>,
    ...
  );
  const int STRUCTURAL_ID = 3786953850343586867;
  /**
   * Assigns a value. If set, all other operations are ignored.
   * 
   * Original thrift field:-
   * 1: set<string> assign
   */
  public ?Set<string> $assign;
  /**
   * Clears a value. Applies first.
   * 
   * Original thrift field:-
   * 2: bool clear
   */
  public bool $clear;
  /**
   * Removes entries, if present. Applies thrid.
   * 
   * Original thrift field:-
   * 4: set<string> remove
   */
  public Set<string> $remove;
  /**
   * Adds entries, if not already present. Applies fourth.
   * 
   * Original thrift field:-
   * 5: set<string> add
   */
  public Set<string> $add;

  public function __construct(?Set<string> $assign = null, ?bool $clear = null, ?Set<string> $remove = null, ?Set<string> $add = null  )[] {
    $this->assign = $assign;
    $this->clear = $clear ?? false;
    $this->remove = $remove ?? Set {};
    $this->add = $add ?? Set {};
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'assign'),
      Shapes::idx($shape, 'clear'),
      Shapes::idx($shape, 'remove'),
      Shapes::idx($shape, 'add'),
    );
  }

  public function getName()[]: string {
    return 'MyStructField22Patch';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.MyStructField22Patch",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_set" => tmeta_ThriftSetType::fromShape(
                    shape(
                      "valueType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_STRING_TYPE,
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "assign",
              "is_optional" => true,
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_BOOL_TYPE,
                )
              ),
              "name" => "clear",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 4,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_set" => tmeta_ThriftSetType::fromShape(
                    shape(
                      "valueType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_STRING_TYPE,
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "remove",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 5,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_set" => tmeta_ThriftSetType::fromShape(
                    shape(
                      "valueType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_STRING_TYPE,
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "add",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'assign') === null ? null : (new Set(Keyset\keys($shape['assign']))),
      $shape['clear'],
      new Set(Keyset\keys($shape['remove'])),
      new Set(Keyset\keys($shape['add'])),
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
      'assign' => $this->assign
        |> $$ === null ? null : ThriftUtil::toDArray(Dict\fill_keys($$->toValuesArray(), true), static::class),
      'clear' => $this->clear,
      'remove' => ThriftUtil::toDArray(Dict\fill_keys($this->remove->toValuesArray(), true), static::class),
      'add' => ThriftUtil::toDArray(Dict\fill_keys($this->add->toValuesArray(), true), static::class),
    );
  }
  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'assign') !== null) {
      $_json3 = /* HH_FIXME[4110] */ $parsed['assign'];
      $_container4 = Set {};
      foreach(/* HH_FIXME[4110] */ $_json3 as $_key1 => $_value2) {
        $_elem5 = '';
        $_elem5 = $_value2;
        $_container4->add($_elem5);
      }
      $this->assign = $_container4;
    }    
    if (idx($parsed, 'clear') !== null) {
      $this->clear = /* HH_FIXME[4110] */ $parsed['clear'];
    }    
    if (idx($parsed, 'remove') !== null) {
      $_json9 = /* HH_FIXME[4110] */ $parsed['remove'];
      $_container10 = Set {};
      foreach(/* HH_FIXME[4110] */ $_json9 as $_key7 => $_value8) {
        $_elem11 = '';
        $_elem11 = $_value8;
        $_container10->add($_elem11);
      }
      $this->remove = $_container10;
    }    
    if (idx($parsed, 'add') !== null) {
      $_json15 = /* HH_FIXME[4110] */ $parsed['add'];
      $_container16 = Set {};
      foreach(/* HH_FIXME[4110] */ $_json15 as $_key13 => $_value14) {
        $_elem17 = '';
        $_elem17 = $_value14;
        $_container16->add($_elem17);
      }
      $this->add = $_container16;
    }    
  }

}

/**
 * Original thrift struct:-
 * OptionalMyStructField22Patch
 */
class OptionalMyStructField22Patch implements \IThriftSyncStruct, \IThriftShapishSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    2 => shape(
      'var' => 'clear',
      'type' => \TType::BOOL,
    ),
    3 => shape(
      'var' => 'patch',
      'type' => \TType::STRUCT,
      'class' => MyStructField22Patch::class,
    ),
    4 => shape(
      'var' => 'ensure',
      'type' => \TType::SET,
      'etype' => \TType::STRING,
      'elem' => shape(
        'type' => \TType::STRING,
      ),
      'format' => 'collection',
    ),
    5 => shape(
      'var' => 'patchAfter',
      'type' => \TType::STRUCT,
      'class' => MyStructField22Patch::class,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'clear' => 2,
    'patch' => 3,
    'ensure' => 4,
    'patchAfter' => 5,
  ];

  const type TConstructorShape = shape(
    ?'clear' => ?bool,
    ?'patch' => ?MyStructField22Patch,
    ?'ensure' => ?Set<string>,
    ?'patchAfter' => ?MyStructField22Patch,
  );

  const type TShape = shape(
    'clear' => bool,
    ?'patch' => ?MyStructField22Patch::TShape,
    ?'ensure' => ?dict<string, bool>,
    ?'patchAfter' => ?MyStructField22Patch::TShape,
    ...
  );
  const int STRUCTURAL_ID = 538516277866350462;
  /**
   * Clears any set value. Applies first.
   * 
   * Original thrift field:-
   * 2: bool clear
   */
  public bool $clear;
  /**
   * Patches any set value. Applies second.
   * 
   * Original thrift field:-
   * 3: struct module.MyStructField22Patch patch
   */
  public ?MyStructField22Patch $patch;
  /**
   * Assigns the value, if not already set. Applies third.
   * 
   * Original thrift field:-
   * 4: set<string> ensure
   */
  public ?Set<string> $ensure;
  /**
   * Patches any set value, including newly set values. Applies fourth.
   * 
   * Original thrift field:-
   * 5: struct module.MyStructField22Patch patchAfter
   */
  public ?MyStructField22Patch $patchAfter;

  public function __construct(?bool $clear = null, ?MyStructField22Patch $patch = null, ?Set<string> $ensure = null, ?MyStructField22Patch $patchAfter = null  )[] {
    $this->clear = $clear ?? false;
    $this->patch = $patch;
    $this->ensure = $ensure;
    $this->patchAfter = $patchAfter;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'clear'),
      Shapes::idx($shape, 'patch'),
      Shapes::idx($shape, 'ensure'),
      Shapes::idx($shape, 'patchAfter'),
    );
  }

  public function getName()[]: string {
    return 'OptionalMyStructField22Patch';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.OptionalMyStructField22Patch",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_BOOL_TYPE,
                )
              ),
              "name" => "clear",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 3,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.MyStructField22Patch",
                    )
                  ),
                )
              ),
              "name" => "patch",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 4,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_set" => tmeta_ThriftSetType::fromShape(
                    shape(
                      "valueType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_STRING_TYPE,
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "ensure",
              "is_optional" => true,
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 5,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.MyStructField22Patch",
                    )
                  ),
                )
              ),
              "name" => "patchAfter",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
      $shape['clear'],
      Shapes::idx($shape, 'patch') === null ? null : (MyStructField22Patch::__fromShape($shape['patch'])),
      Shapes::idx($shape, 'ensure') === null ? null : (new Set(Keyset\keys($shape['ensure']))),
      Shapes::idx($shape, 'patchAfter') === null ? null : (MyStructField22Patch::__fromShape($shape['patchAfter'])),
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
      'clear' => $this->clear,
      'patch' => $this->patch?->__toShape(),
      'ensure' => $this->ensure
        |> $$ === null ? null : ThriftUtil::toDArray(Dict\fill_keys($$->toValuesArray(), true), static::class),
      'patchAfter' => $this->patchAfter?->__toShape(),
    );
  }
  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'clear') !== null) {
      $this->clear = /* HH_FIXME[4110] */ $parsed['clear'];
    }    
    if (idx($parsed, 'patch') !== null) {
      $_tmp0 = json_encode(/* HH_FIXME[4110] */ $parsed['patch']);
      $_tmp1 = MyStructField22Patch::withDefaultValues();
      $_tmp1->readFromJson($_tmp0);
      $this->patch = $_tmp1;
    }    
    if (idx($parsed, 'ensure') !== null) {
      $_json5 = /* HH_FIXME[4110] */ $parsed['ensure'];
      $_container6 = Set {};
      foreach(/* HH_FIXME[4110] */ $_json5 as $_key3 => $_value4) {
        $_elem7 = '';
        $_elem7 = $_value4;
        $_container6->add($_elem7);
      }
      $this->ensure = $_container6;
    }    
    if (idx($parsed, 'patchAfter') !== null) {
      $_tmp8 = json_encode(/* HH_FIXME[4110] */ $parsed['patchAfter']);
      $_tmp9 = MyStructField22Patch::withDefaultValues();
      $_tmp9->readFromJson($_tmp8);
      $this->patchAfter = $_tmp9;
    }    
  }

}

/**
 * Original thrift struct:-
 * MyStructField23Patch
 */
class MyStructField23Patch implements \IThriftSyncStruct, \IThriftShapishSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    1 => shape(
      'var' => 'assign',
      'type' => \TType::MAP,
      'ktype' => \TType::STRING,
      'vtype' => \TType::STRING,
      'key' => shape(
        'type' => \TType::STRING,
      ),
      'val' => shape(
        'type' => \TType::STRING,
      ),
      'format' => 'collection',
    ),
    2 => shape(
      'var' => 'clear',
      'type' => \TType::BOOL,
    ),
    7 => shape(
      'var' => 'put',
      'type' => \TType::MAP,
      'ktype' => \TType::STRING,
      'vtype' => \TType::STRING,
      'key' => shape(
        'type' => \TType::STRING,
      ),
      'val' => shape(
        'type' => \TType::STRING,
      ),
      'format' => 'collection',
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'assign' => 1,
    'clear' => 2,
    'put' => 7,
  ];

  const type TConstructorShape = shape(
    ?'assign' => ?Map<string, string>,
    ?'clear' => ?bool,
    ?'put' => ?Map<string, string>,
  );

  const type TShape = shape(
    ?'assign' => ?dict<string, string>,
    'clear' => bool,
    'put' => dict<string, string>,
    ...
  );
  const int STRUCTURAL_ID = 3108140902371026640;
  /**
   * Assigns a value. If set, all other operations are ignored.
   * 
   * Original thrift field:-
   * 1: map<string, string> assign
   */
  public ?Map<string, string> $assign;
  /**
   * Clears a value. Applies first.
   * 
   * Original thrift field:-
   * 2: bool clear
   */
  public bool $clear;
  /**
   * Adds or replaces the given key/value pairs. Applies Second.
   * 
   * Original thrift field:-
   * 7: map<string, string> put
   */
  public Map<string, string> $put;

  public function __construct(?Map<string, string> $assign = null, ?bool $clear = null, ?Map<string, string> $put = null  )[] {
    $this->assign = $assign;
    $this->clear = $clear ?? false;
    $this->put = $put ?? Map {};
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'assign'),
      Shapes::idx($shape, 'clear'),
      Shapes::idx($shape, 'put'),
    );
  }

  public function getName()[]: string {
    return 'MyStructField23Patch';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.MyStructField23Patch",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_map" => tmeta_ThriftMapType::fromShape(
                    shape(
                      "keyType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_STRING_TYPE,
                        )
                      ),
                      "valueType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_STRING_TYPE,
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "assign",
              "is_optional" => true,
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_BOOL_TYPE,
                )
              ),
              "name" => "clear",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 7,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_map" => tmeta_ThriftMapType::fromShape(
                    shape(
                      "keyType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_STRING_TYPE,
                        )
                      ),
                      "valueType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_STRING_TYPE,
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "put",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'assign') === null ? null : ((new Map($shape['assign']))),
      $shape['clear'],
      (new Map($shape['put'])),
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
      'assign' => $this->assign
        |> $$ === null ? null : dict($$),
      'clear' => $this->clear,
      'put' => dict($this->put),
    );
  }
  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'assign') !== null) {
      $_json3 = /* HH_FIXME[4110] */ $parsed['assign'];
      $_container4 = Map {};
      foreach(/* HH_FIXME[4110] */ $_json3 as $_key1 => $_value2) {
        $_value5 = '';
        $_value5 = $_value2;
        $_container4[$_key1] = $_value5;
      }
      $this->assign = $_container4;
    }    
    if (idx($parsed, 'clear') !== null) {
      $this->clear = /* HH_FIXME[4110] */ $parsed['clear'];
    }    
    if (idx($parsed, 'put') !== null) {
      $_json9 = /* HH_FIXME[4110] */ $parsed['put'];
      $_container10 = Map {};
      foreach(/* HH_FIXME[4110] */ $_json9 as $_key7 => $_value8) {
        $_value11 = '';
        $_value11 = $_value8;
        $_container10[$_key7] = $_value11;
      }
      $this->put = $_container10;
    }    
  }

}

/**
 * Original thrift struct:-
 * OptionalMyStructField23Patch
 */
class OptionalMyStructField23Patch implements \IThriftSyncStruct, \IThriftShapishSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    2 => shape(
      'var' => 'clear',
      'type' => \TType::BOOL,
    ),
    3 => shape(
      'var' => 'patch',
      'type' => \TType::STRUCT,
      'class' => MyStructField23Patch::class,
    ),
    4 => shape(
      'var' => 'ensure',
      'type' => \TType::MAP,
      'ktype' => \TType::STRING,
      'vtype' => \TType::STRING,
      'key' => shape(
        'type' => \TType::STRING,
      ),
      'val' => shape(
        'type' => \TType::STRING,
      ),
      'format' => 'collection',
    ),
    5 => shape(
      'var' => 'patchAfter',
      'type' => \TType::STRUCT,
      'class' => MyStructField23Patch::class,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'clear' => 2,
    'patch' => 3,
    'ensure' => 4,
    'patchAfter' => 5,
  ];

  const type TConstructorShape = shape(
    ?'clear' => ?bool,
    ?'patch' => ?MyStructField23Patch,
    ?'ensure' => ?Map<string, string>,
    ?'patchAfter' => ?MyStructField23Patch,
  );

  const type TShape = shape(
    'clear' => bool,
    ?'patch' => ?MyStructField23Patch::TShape,
    ?'ensure' => ?dict<string, string>,
    ?'patchAfter' => ?MyStructField23Patch::TShape,
    ...
  );
  const int STRUCTURAL_ID = 7974181378426791717;
  /**
   * Clears any set value. Applies first.
   * 
   * Original thrift field:-
   * 2: bool clear
   */
  public bool $clear;
  /**
   * Patches any set value. Applies second.
   * 
   * Original thrift field:-
   * 3: struct module.MyStructField23Patch patch
   */
  public ?MyStructField23Patch $patch;
  /**
   * Assigns the value, if not already set. Applies third.
   * 
   * Original thrift field:-
   * 4: map<string, string> ensure
   */
  public ?Map<string, string> $ensure;
  /**
   * Patches any set value, including newly set values. Applies fourth.
   * 
   * Original thrift field:-
   * 5: struct module.MyStructField23Patch patchAfter
   */
  public ?MyStructField23Patch $patchAfter;

  public function __construct(?bool $clear = null, ?MyStructField23Patch $patch = null, ?Map<string, string> $ensure = null, ?MyStructField23Patch $patchAfter = null  )[] {
    $this->clear = $clear ?? false;
    $this->patch = $patch;
    $this->ensure = $ensure;
    $this->patchAfter = $patchAfter;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'clear'),
      Shapes::idx($shape, 'patch'),
      Shapes::idx($shape, 'ensure'),
      Shapes::idx($shape, 'patchAfter'),
    );
  }

  public function getName()[]: string {
    return 'OptionalMyStructField23Patch';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.OptionalMyStructField23Patch",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_BOOL_TYPE,
                )
              ),
              "name" => "clear",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 3,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.MyStructField23Patch",
                    )
                  ),
                )
              ),
              "name" => "patch",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 4,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_map" => tmeta_ThriftMapType::fromShape(
                    shape(
                      "keyType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_STRING_TYPE,
                        )
                      ),
                      "valueType" => tmeta_ThriftType::fromShape(
                        shape(
                          "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_STRING_TYPE,
                        )
                      ),
                    )
                  ),
                )
              ),
              "name" => "ensure",
              "is_optional" => true,
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 5,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.MyStructField23Patch",
                    )
                  ),
                )
              ),
              "name" => "patchAfter",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
      $shape['clear'],
      Shapes::idx($shape, 'patch') === null ? null : (MyStructField23Patch::__fromShape($shape['patch'])),
      Shapes::idx($shape, 'ensure') === null ? null : ((new Map($shape['ensure']))),
      Shapes::idx($shape, 'patchAfter') === null ? null : (MyStructField23Patch::__fromShape($shape['patchAfter'])),
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
      'clear' => $this->clear,
      'patch' => $this->patch?->__toShape(),
      'ensure' => $this->ensure
        |> $$ === null ? null : dict($$),
      'patchAfter' => $this->patchAfter?->__toShape(),
    );
  }
  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'clear') !== null) {
      $this->clear = /* HH_FIXME[4110] */ $parsed['clear'];
    }    
    if (idx($parsed, 'patch') !== null) {
      $_tmp0 = json_encode(/* HH_FIXME[4110] */ $parsed['patch']);
      $_tmp1 = MyStructField23Patch::withDefaultValues();
      $_tmp1->readFromJson($_tmp0);
      $this->patch = $_tmp1;
    }    
    if (idx($parsed, 'ensure') !== null) {
      $_json5 = /* HH_FIXME[4110] */ $parsed['ensure'];
      $_container6 = Map {};
      foreach(/* HH_FIXME[4110] */ $_json5 as $_key3 => $_value4) {
        $_value7 = '';
        $_value7 = $_value4;
        $_container6[$_key3] = $_value7;
      }
      $this->ensure = $_container6;
    }    
    if (idx($parsed, 'patchAfter') !== null) {
      $_tmp8 = json_encode(/* HH_FIXME[4110] */ $parsed['patchAfter']);
      $_tmp9 = MyStructField23Patch::withDefaultValues();
      $_tmp9->readFromJson($_tmp8);
      $this->patchAfter = $_tmp9;
    }    
  }

}

/**
 * Original thrift struct:-
 * MyStructValuePatch
 */
class MyStructValuePatch implements \IThriftSyncStruct, \IThriftShapishSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    1 => shape(
      'var' => 'assign',
      'type' => \TType::STRUCT,
      'class' => MyStruct::class,
    ),
    2 => shape(
      'var' => 'clear',
      'type' => \TType::BOOL,
    ),
    3 => shape(
      'var' => 'patch',
      'type' => \TType::STRUCT,
      'class' => MyStructPatch::class,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'assign' => 1,
    'clear' => 2,
    'patch' => 3,
  ];

  const type TConstructorShape = shape(
    ?'assign' => ?MyStruct,
    ?'clear' => ?bool,
    ?'patch' => ?MyStructPatch,
  );

  const type TShape = shape(
    ?'assign' => ?MyStruct::TShape,
    'clear' => bool,
    ?'patch' => ?MyStructPatch::TShape,
    ...
  );
  const int STRUCTURAL_ID = 7671876747903930798;
  /**
   * Assigns a value. If set, all other operations are ignored.
   * 
   * Original thrift field:-
   * 1: struct module.MyStruct assign
   */
  public ?MyStruct $assign;
  /**
   * Clears a value. Applies first.
   * 
   * Original thrift field:-
   * 2: bool clear
   */
  public bool $clear;
  /**
   * Patches a value. Applies second.
   * 
   * Original thrift field:-
   * 3: struct module.MyStructPatch patch
   */
  public ?MyStructPatch $patch;

  public function __construct(?MyStruct $assign = null, ?bool $clear = null, ?MyStructPatch $patch = null  )[] {
    $this->assign = $assign;
    $this->clear = $clear ?? false;
    $this->patch = $patch;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'assign'),
      Shapes::idx($shape, 'clear'),
      Shapes::idx($shape, 'patch'),
    );
  }

  public function getName()[]: string {
    return 'MyStructValuePatch';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.MyStructValuePatch",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.MyStruct",
                    )
                  ),
                )
              ),
              "name" => "assign",
              "is_optional" => true,
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_BOOL_TYPE,
                )
              ),
              "name" => "clear",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 3,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.MyStructPatch",
                    )
                  ),
                )
              ),
              "name" => "patch",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'assign') === null ? null : (MyStruct::__fromShape($shape['assign'])),
      $shape['clear'],
      Shapes::idx($shape, 'patch') === null ? null : (MyStructPatch::__fromShape($shape['patch'])),
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
      'assign' => $this->assign?->__toShape(),
      'clear' => $this->clear,
      'patch' => $this->patch?->__toShape(),
    );
  }
  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'assign') !== null) {
      $_tmp0 = json_encode(/* HH_FIXME[4110] */ $parsed['assign']);
      $_tmp1 = MyStruct::withDefaultValues();
      $_tmp1->readFromJson($_tmp0);
      $this->assign = $_tmp1;
    }    
    if (idx($parsed, 'clear') !== null) {
      $this->clear = /* HH_FIXME[4110] */ $parsed['clear'];
    }    
    if (idx($parsed, 'patch') !== null) {
      $_tmp2 = json_encode(/* HH_FIXME[4110] */ $parsed['patch']);
      $_tmp3 = MyStructPatch::withDefaultValues();
      $_tmp3->readFromJson($_tmp2);
      $this->patch = $_tmp3;
    }    
  }

}

/**
 * Original thrift struct:-
 * OptionalMyStructValuePatch
 */
class OptionalMyStructValuePatch implements \IThriftSyncStruct, \IThriftShapishSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    2 => shape(
      'var' => 'clear',
      'type' => \TType::BOOL,
    ),
    3 => shape(
      'var' => 'patch',
      'type' => \TType::STRUCT,
      'class' => MyStructValuePatch::class,
    ),
    4 => shape(
      'var' => 'ensure',
      'type' => \TType::STRUCT,
      'class' => MyStruct::class,
    ),
    5 => shape(
      'var' => 'patchAfter',
      'type' => \TType::STRUCT,
      'class' => MyStructValuePatch::class,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'clear' => 2,
    'patch' => 3,
    'ensure' => 4,
    'patchAfter' => 5,
  ];

  const type TConstructorShape = shape(
    ?'clear' => ?bool,
    ?'patch' => ?MyStructValuePatch,
    ?'ensure' => ?MyStruct,
    ?'patchAfter' => ?MyStructValuePatch,
  );

  const type TShape = shape(
    'clear' => bool,
    ?'patch' => ?MyStructValuePatch::TShape,
    ?'ensure' => ?MyStruct::TShape,
    ?'patchAfter' => ?MyStructValuePatch::TShape,
    ...
  );
  const int STRUCTURAL_ID = 8161960229420258971;
  /**
   * Clears any set value. Applies first.
   * 
   * Original thrift field:-
   * 2: bool clear
   */
  public bool $clear;
  /**
   * Patches any set value. Applies second.
   * 
   * Original thrift field:-
   * 3: struct module.MyStructValuePatch patch
   */
  public ?MyStructValuePatch $patch;
  /**
   * Assigns the value, if not already set. Applies third.
   * 
   * Original thrift field:-
   * 4: struct module.MyStruct ensure
   */
  public ?MyStruct $ensure;
  /**
   * Patches any set value, including newly set values. Applies fourth.
   * 
   * Original thrift field:-
   * 5: struct module.MyStructValuePatch patchAfter
   */
  public ?MyStructValuePatch $patchAfter;

  public function __construct(?bool $clear = null, ?MyStructValuePatch $patch = null, ?MyStruct $ensure = null, ?MyStructValuePatch $patchAfter = null  )[] {
    $this->clear = $clear ?? false;
    $this->patch = $patch;
    $this->ensure = $ensure;
    $this->patchAfter = $patchAfter;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'clear'),
      Shapes::idx($shape, 'patch'),
      Shapes::idx($shape, 'ensure'),
      Shapes::idx($shape, 'patchAfter'),
    );
  }

  public function getName()[]: string {
    return 'OptionalMyStructValuePatch';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "module.OptionalMyStructValuePatch",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_BOOL_TYPE,
                )
              ),
              "name" => "clear",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 3,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.MyStructValuePatch",
                    )
                  ),
                )
              ),
              "name" => "patch",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 4,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.MyStruct",
                    )
                  ),
                )
              ),
              "name" => "ensure",
              "is_optional" => true,
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 5,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "module.MyStructValuePatch",
                    )
                  ),
                )
              ),
              "name" => "patchAfter",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
      $shape['clear'],
      Shapes::idx($shape, 'patch') === null ? null : (MyStructValuePatch::__fromShape($shape['patch'])),
      Shapes::idx($shape, 'ensure') === null ? null : (MyStruct::__fromShape($shape['ensure'])),
      Shapes::idx($shape, 'patchAfter') === null ? null : (MyStructValuePatch::__fromShape($shape['patchAfter'])),
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
      'clear' => $this->clear,
      'patch' => $this->patch?->__toShape(),
      'ensure' => $this->ensure?->__toShape(),
      'patchAfter' => $this->patchAfter?->__toShape(),
    );
  }
  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'clear') !== null) {
      $this->clear = /* HH_FIXME[4110] */ $parsed['clear'];
    }    
    if (idx($parsed, 'patch') !== null) {
      $_tmp0 = json_encode(/* HH_FIXME[4110] */ $parsed['patch']);
      $_tmp1 = MyStructValuePatch::withDefaultValues();
      $_tmp1->readFromJson($_tmp0);
      $this->patch = $_tmp1;
    }    
    if (idx($parsed, 'ensure') !== null) {
      $_tmp2 = json_encode(/* HH_FIXME[4110] */ $parsed['ensure']);
      $_tmp3 = MyStruct::withDefaultValues();
      $_tmp3->readFromJson($_tmp2);
      $this->ensure = $_tmp3;
    }    
    if (idx($parsed, 'patchAfter') !== null) {
      $_tmp4 = json_encode(/* HH_FIXME[4110] */ $parsed['patchAfter']);
      $_tmp5 = MyStructValuePatch::withDefaultValues();
      $_tmp5->readFromJson($_tmp4);
      $this->patchAfter = $_tmp5;
    }    
  }

}

