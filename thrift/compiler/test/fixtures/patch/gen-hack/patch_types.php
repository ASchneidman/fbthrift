<?hh
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

/**
 * Original thrift struct:-
 * GeneratePatch
 */
class GeneratePatch implements \IThriftSyncStruct, \IThriftShapishSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
  ];
  const dict<string, int> FIELDMAP = dict[
  ];

  const type TConstructorShape = shape(
  );

  const type TShape = shape(
    ...
  );
  const int STRUCTURAL_ID = 957977401221134810;

  public function __construct(  )[] {
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
    );
  }

  public function getName()[]: string {
    return 'GeneratePatch';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "patch.GeneratePatch",
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[]: \TStructAnnotations {
    return shape(
      'struct' => dict[
        'facebook_thrift_annotation_Struct' => facebook_thrift_annotation_Struct::fromShape(
          shape(
          )
        ),
        'facebook_thrift_annotation_Program' => facebook_thrift_annotation_Program::fromShape(
          shape(
          )
        ),
        'facebook_thrift_annotation_thrift_Experimental' => facebook_thrift_annotation_thrift_Experimental::fromShape(
          shape(
          )
        ),
      ],
      'fields' => dict[
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
    );
  }
  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

  }

}

/**
 * Original thrift struct:-
 * GenerateOptionalPatch
 */
class GenerateOptionalPatch implements \IThriftSyncStruct, \IThriftShapishSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
  ];
  const dict<string, int> FIELDMAP = dict[
  ];

  const type TConstructorShape = shape(
  );

  const type TShape = shape(
    ...
  );
  const int STRUCTURAL_ID = 957977401221134810;

  public function __construct(  )[] {
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
    );
  }

  public function getName()[]: string {
    return 'GenerateOptionalPatch';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "patch.GenerateOptionalPatch",
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[]: \TStructAnnotations {
    return shape(
      'struct' => dict[
        'facebook_thrift_annotation_Struct' => facebook_thrift_annotation_Struct::fromShape(
          shape(
          )
        ),
        'facebook_thrift_annotation_thrift_Experimental' => facebook_thrift_annotation_thrift_Experimental::fromShape(
          shape(
          )
        ),
      ],
      'fields' => dict[
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
    );
  }
  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

  }

}

/**
 * Original thrift struct:-
 * BoolPatch
 */
class BoolPatch implements \IThriftSyncStruct, \IThriftShapishSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    1 => shape(
      'var' => 'assign',
      'type' => \TType::BOOL,
    ),
    2 => shape(
      'var' => 'invert',
      'type' => \TType::BOOL,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'assign' => 1,
    'invert' => 2,
  ];

  const type TConstructorShape = shape(
    ?'assign' => ?bool,
    ?'invert' => ?bool,
  );

  const type TShape = shape(
    ?'assign' => ?bool,
    'invert' => bool,
    ...
  );
  const int STRUCTURAL_ID = 1475054624686789997;
  /**
   * Original thrift field:-
   * 1: bool assign
   */
  public ?bool $assign;
  /**
   * Original thrift field:-
   * 2: bool invert
   */
  public bool $invert;

  public function __construct(?bool $assign = null, ?bool $invert = null  )[] {
    $this->assign = $assign;
    $this->invert = $invert ?? false;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'assign'),
      Shapes::idx($shape, 'invert'),
    );
  }

  public function getName()[]: string {
    return 'BoolPatch';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "patch.BoolPatch",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_BOOL_TYPE,
                )
              ),
              "name" => "assign",
              "is_optional" => true,
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_BOOL_TYPE,
                )
              ),
              "name" => "invert",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[]: \TStructAnnotations {
    return shape(
      'struct' => dict[
        'GenerateOptionalPatch' => GenerateOptionalPatch::fromShape(
          shape(
          )
        ),
        'facebook_thrift_annotation_thrift_Experimental' => facebook_thrift_annotation_thrift_Experimental::fromShape(
          shape(
          )
        ),
      ],
      'fields' => dict[
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'assign'),
      $shape['invert'],
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
      'assign' => $this->assign,
      'invert' => $this->invert,
    );
  }
  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'assign') !== null) {
      $this->assign = /* HH_FIXME[4110] */ $parsed['assign'];
    }    
    if (idx($parsed, 'invert') !== null) {
      $this->invert = /* HH_FIXME[4110] */ $parsed['invert'];
    }    
  }

}

/**
 * Original thrift struct:-
 * BytePatch
 */
class BytePatch implements \IThriftSyncStruct, \IThriftShapishSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    1 => shape(
      'var' => 'assign',
      'type' => \TType::BYTE,
    ),
    2 => shape(
      'var' => 'add',
      'type' => \TType::BYTE,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'assign' => 1,
    'add' => 2,
  ];

  const type TConstructorShape = shape(
    ?'assign' => ?int,
    ?'add' => ?int,
  );

  const type TShape = shape(
    ?'assign' => ?int,
    'add' => int,
    ...
  );
  const int STRUCTURAL_ID = 2534945701469748168;
  /**
   * Original thrift field:-
   * 1: byte assign
   */
  public ?int $assign;
  /**
   * Original thrift field:-
   * 2: byte add
   */
  public int $add;

  public function __construct(?int $assign = null, ?int $add = null  )[] {
    $this->assign = $assign;
    $this->add = $add ?? 0;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'assign'),
      Shapes::idx($shape, 'add'),
    );
  }

  public function getName()[]: string {
    return 'BytePatch';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "patch.BytePatch",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_BYTE_TYPE,
                )
              ),
              "name" => "assign",
              "is_optional" => true,
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_BYTE_TYPE,
                )
              ),
              "name" => "add",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[]: \TStructAnnotations {
    return shape(
      'struct' => dict[
        'GenerateOptionalPatch' => GenerateOptionalPatch::fromShape(
          shape(
          )
        ),
        'facebook_thrift_annotation_thrift_Experimental' => facebook_thrift_annotation_thrift_Experimental::fromShape(
          shape(
          )
        ),
      ],
      'fields' => dict[
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'assign'),
      $shape['add'],
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
      'assign' => $this->assign,
      'add' => $this->add,
    );
  }
  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'assign') !== null) {
      $_tmp0 = (int)/* HH_FIXME[4110] */ $parsed['assign'];
      if ($_tmp0 > 0x7f) {
        throw new \TProtocolException("number exceeds limit in field");
      } else {
        $this->assign = (int)$_tmp0;
      }
    }    
    if (idx($parsed, 'add') !== null) {
      $_tmp1 = (int)/* HH_FIXME[4110] */ $parsed['add'];
      if ($_tmp1 > 0x7f) {
        throw new \TProtocolException("number exceeds limit in field");
      } else {
        $this->add = (int)$_tmp1;
      }
    }    
  }

}

/**
 * Original thrift struct:-
 * I16Patch
 */
class I16Patch implements \IThriftSyncStruct, \IThriftShapishSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    1 => shape(
      'var' => 'assign',
      'type' => \TType::I16,
    ),
    2 => shape(
      'var' => 'add',
      'type' => \TType::I16,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'assign' => 1,
    'add' => 2,
  ];

  const type TConstructorShape = shape(
    ?'assign' => ?int,
    ?'add' => ?int,
  );

  const type TShape = shape(
    ?'assign' => ?int,
    'add' => int,
    ...
  );
  const int STRUCTURAL_ID = 8154674017249397960;
  /**
   * Original thrift field:-
   * 1: i16 assign
   */
  public ?int $assign;
  /**
   * Original thrift field:-
   * 2: i16 add
   */
  public int $add;

  public function __construct(?int $assign = null, ?int $add = null  )[] {
    $this->assign = $assign;
    $this->add = $add ?? 0;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'assign'),
      Shapes::idx($shape, 'add'),
    );
  }

  public function getName()[]: string {
    return 'I16Patch';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "patch.I16Patch",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_I16_TYPE,
                )
              ),
              "name" => "assign",
              "is_optional" => true,
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_I16_TYPE,
                )
              ),
              "name" => "add",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[]: \TStructAnnotations {
    return shape(
      'struct' => dict[
        'GenerateOptionalPatch' => GenerateOptionalPatch::fromShape(
          shape(
          )
        ),
        'facebook_thrift_annotation_thrift_Experimental' => facebook_thrift_annotation_thrift_Experimental::fromShape(
          shape(
          )
        ),
      ],
      'fields' => dict[
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'assign'),
      $shape['add'],
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
      'assign' => $this->assign,
      'add' => $this->add,
    );
  }
  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'assign') !== null) {
      $_tmp0 = (int)/* HH_FIXME[4110] */ $parsed['assign'];
      if ($_tmp0 > 0x7fff) {
        throw new \TProtocolException("number exceeds limit in field");
      } else {
        $this->assign = (int)$_tmp0;
      }
    }    
    if (idx($parsed, 'add') !== null) {
      $_tmp1 = (int)/* HH_FIXME[4110] */ $parsed['add'];
      if ($_tmp1 > 0x7fff) {
        throw new \TProtocolException("number exceeds limit in field");
      } else {
        $this->add = (int)$_tmp1;
      }
    }    
  }

}

/**
 * Original thrift struct:-
 * I32Patch
 */
class I32Patch implements \IThriftSyncStruct, \IThriftShapishSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    1 => shape(
      'var' => 'assign',
      'type' => \TType::I32,
    ),
    2 => shape(
      'var' => 'add',
      'type' => \TType::I32,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'assign' => 1,
    'add' => 2,
  ];

  const type TConstructorShape = shape(
    ?'assign' => ?int,
    ?'add' => ?int,
  );

  const type TShape = shape(
    ?'assign' => ?int,
    'add' => int,
    ...
  );
  const int STRUCTURAL_ID = 3666727223051674106;
  /**
   * Original thrift field:-
   * 1: i32 assign
   */
  public ?int $assign;
  /**
   * Original thrift field:-
   * 2: i32 add
   */
  public int $add;

  public function __construct(?int $assign = null, ?int $add = null  )[] {
    $this->assign = $assign;
    $this->add = $add ?? 0;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'assign'),
      Shapes::idx($shape, 'add'),
    );
  }

  public function getName()[]: string {
    return 'I32Patch';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "patch.I32Patch",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_I32_TYPE,
                )
              ),
              "name" => "assign",
              "is_optional" => true,
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_I32_TYPE,
                )
              ),
              "name" => "add",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[]: \TStructAnnotations {
    return shape(
      'struct' => dict[
        'GenerateOptionalPatch' => GenerateOptionalPatch::fromShape(
          shape(
          )
        ),
        'facebook_thrift_annotation_thrift_Experimental' => facebook_thrift_annotation_thrift_Experimental::fromShape(
          shape(
          )
        ),
      ],
      'fields' => dict[
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'assign'),
      $shape['add'],
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
      'assign' => $this->assign,
      'add' => $this->add,
    );
  }
  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'assign') !== null) {
      $_tmp0 = (int)/* HH_FIXME[4110] */ $parsed['assign'];
      if ($_tmp0 > 0x7fffffff) {
        throw new \TProtocolException("number exceeds limit in field");
      } else {
        $this->assign = (int)$_tmp0;
      }
    }    
    if (idx($parsed, 'add') !== null) {
      $_tmp1 = (int)/* HH_FIXME[4110] */ $parsed['add'];
      if ($_tmp1 > 0x7fffffff) {
        throw new \TProtocolException("number exceeds limit in field");
      } else {
        $this->add = (int)$_tmp1;
      }
    }    
  }

}

/**
 * Original thrift struct:-
 * I64Patch
 */
class I64Patch implements \IThriftSyncStruct, \IThriftShapishSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    1 => shape(
      'var' => 'assign',
      'type' => \TType::I64,
    ),
    2 => shape(
      'var' => 'add',
      'type' => \TType::I64,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'assign' => 1,
    'add' => 2,
  ];

  const type TConstructorShape = shape(
    ?'assign' => ?int,
    ?'add' => ?int,
  );

  const type TShape = shape(
    ?'assign' => ?int,
    'add' => int,
    ...
  );
  const int STRUCTURAL_ID = 236777599420554215;
  /**
   * Original thrift field:-
   * 1: i64 assign
   */
  public ?int $assign;
  /**
   * Original thrift field:-
   * 2: i64 add
   */
  public int $add;

  public function __construct(?int $assign = null, ?int $add = null  )[] {
    $this->assign = $assign;
    $this->add = $add ?? 0;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'assign'),
      Shapes::idx($shape, 'add'),
    );
  }

  public function getName()[]: string {
    return 'I64Patch';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "patch.I64Patch",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_I64_TYPE,
                )
              ),
              "name" => "assign",
              "is_optional" => true,
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_I64_TYPE,
                )
              ),
              "name" => "add",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[]: \TStructAnnotations {
    return shape(
      'struct' => dict[
        'GenerateOptionalPatch' => GenerateOptionalPatch::fromShape(
          shape(
          )
        ),
        'facebook_thrift_annotation_thrift_Experimental' => facebook_thrift_annotation_thrift_Experimental::fromShape(
          shape(
          )
        ),
      ],
      'fields' => dict[
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'assign'),
      $shape['add'],
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
      'assign' => $this->assign,
      'add' => $this->add,
    );
  }
  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'assign') !== null) {
      $this->assign = /* HH_FIXME[4110] */ $parsed['assign'];
    }    
    if (idx($parsed, 'add') !== null) {
      $this->add = /* HH_FIXME[4110] */ $parsed['add'];
    }    
  }

}

/**
 * Original thrift struct:-
 * FloatPatch
 */
class FloatPatch implements \IThriftSyncStruct, \IThriftShapishSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    1 => shape(
      'var' => 'assign',
      'type' => \TType::FLOAT,
    ),
    2 => shape(
      'var' => 'add',
      'type' => \TType::FLOAT,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'assign' => 1,
    'add' => 2,
  ];

  const type TConstructorShape = shape(
    ?'assign' => ?float,
    ?'add' => ?float,
  );

  const type TShape = shape(
    ?'assign' => ?float,
    'add' => float,
    ...
  );
  const int STRUCTURAL_ID = 5324520522184470232;
  /**
   * Original thrift field:-
   * 1: float assign
   */
  public ?float $assign;
  /**
   * Original thrift field:-
   * 2: float add
   */
  public float $add;

  public function __construct(?float $assign = null, ?float $add = null  )[] {
    $this->assign = $assign;
    $this->add = $add ?? 0.0;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'assign'),
      Shapes::idx($shape, 'add'),
    );
  }

  public function getName()[]: string {
    return 'FloatPatch';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "patch.FloatPatch",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_FLOAT_TYPE,
                )
              ),
              "name" => "assign",
              "is_optional" => true,
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_FLOAT_TYPE,
                )
              ),
              "name" => "add",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[]: \TStructAnnotations {
    return shape(
      'struct' => dict[
        'GenerateOptionalPatch' => GenerateOptionalPatch::fromShape(
          shape(
          )
        ),
        'facebook_thrift_annotation_thrift_Experimental' => facebook_thrift_annotation_thrift_Experimental::fromShape(
          shape(
          )
        ),
      ],
      'fields' => dict[
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'assign'),
      $shape['add'],
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
      'assign' => $this->assign,
      'add' => $this->add,
    );
  }
  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'assign') !== null) {
      $this->assign = /* HH_FIXME[4110] */ $parsed['assign'];
    }    
    if (idx($parsed, 'add') !== null) {
      $this->add = /* HH_FIXME[4110] */ $parsed['add'];
    }    
  }

}

/**
 * Original thrift struct:-
 * DoublePatch
 */
class DoublePatch implements \IThriftSyncStruct, \IThriftShapishSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    1 => shape(
      'var' => 'assign',
      'type' => \TType::DOUBLE,
    ),
    2 => shape(
      'var' => 'add',
      'type' => \TType::DOUBLE,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'assign' => 1,
    'add' => 2,
  ];

  const type TConstructorShape = shape(
    ?'assign' => ?float,
    ?'add' => ?float,
  );

  const type TShape = shape(
    ?'assign' => ?float,
    'add' => float,
    ...
  );
  const int STRUCTURAL_ID = 145038779515762670;
  /**
   * Original thrift field:-
   * 1: double assign
   */
  public ?float $assign;
  /**
   * Original thrift field:-
   * 2: double add
   */
  public float $add;

  public function __construct(?float $assign = null, ?float $add = null  )[] {
    $this->assign = $assign;
    $this->add = $add ?? 0.0;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'assign'),
      Shapes::idx($shape, 'add'),
    );
  }

  public function getName()[]: string {
    return 'DoublePatch';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "patch.DoublePatch",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_DOUBLE_TYPE,
                )
              ),
              "name" => "assign",
              "is_optional" => true,
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_DOUBLE_TYPE,
                )
              ),
              "name" => "add",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[]: \TStructAnnotations {
    return shape(
      'struct' => dict[
        'GenerateOptionalPatch' => GenerateOptionalPatch::fromShape(
          shape(
          )
        ),
        'facebook_thrift_annotation_thrift_Experimental' => facebook_thrift_annotation_thrift_Experimental::fromShape(
          shape(
          )
        ),
      ],
      'fields' => dict[
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'assign'),
      $shape['add'],
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
      'assign' => $this->assign,
      'add' => $this->add,
    );
  }
  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'assign') !== null) {
      $this->assign = /* HH_FIXME[4110] */ $parsed['assign'];
    }    
    if (idx($parsed, 'add') !== null) {
      $this->add = /* HH_FIXME[4110] */ $parsed['add'];
    }    
  }

}

/**
 * Original thrift struct:-
 * StringPatch
 */
class StringPatch implements \IThriftSyncStruct, \IThriftShapishSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    1 => shape(
      'var' => 'assign',
      'type' => \TType::STRING,
    ),
    2 => shape(
      'var' => 'clear',
      'type' => \TType::BOOL,
    ),
    4 => shape(
      'var' => 'prepend',
      'type' => \TType::STRING,
    ),
    5 => shape(
      'var' => 'append',
      'type' => \TType::STRING,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'assign' => 1,
    'clear' => 2,
    'prepend' => 4,
    'append' => 5,
  ];

  const type TConstructorShape = shape(
    ?'assign' => ?string,
    ?'clear' => ?bool,
    ?'prepend' => ?string,
    ?'append' => ?string,
  );

  const type TShape = shape(
    ?'assign' => ?string,
    'clear' => bool,
    'prepend' => string,
    'append' => string,
    ...
  );
  const int STRUCTURAL_ID = 5445604532652463635;
  /**
   * Original thrift field:-
   * 1: string assign
   */
  public ?string $assign;
  /**
   * Original thrift field:-
   * 2: bool clear
   */
  public bool $clear;
  /**
   * Original thrift field:-
   * 4: string prepend
   */
  public string $prepend;
  /**
   * Original thrift field:-
   * 5: string append
   */
  public string $append;

  public function __construct(?string $assign = null, ?bool $clear = null, ?string $prepend = null, ?string $append = null  )[] {
    $this->assign = $assign;
    $this->clear = $clear ?? false;
    $this->prepend = $prepend ?? '';
    $this->append = $append ?? '';
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'assign'),
      Shapes::idx($shape, 'clear'),
      Shapes::idx($shape, 'prepend'),
      Shapes::idx($shape, 'append'),
    );
  }

  public function getName()[]: string {
    return 'StringPatch';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "patch.StringPatch",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_STRING_TYPE,
                )
              ),
              "name" => "assign",
              "is_optional" => true,
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_BOOL_TYPE,
                )
              ),
              "name" => "clear",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 4,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_STRING_TYPE,
                )
              ),
              "name" => "prepend",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 5,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_STRING_TYPE,
                )
              ),
              "name" => "append",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[]: \TStructAnnotations {
    return shape(
      'struct' => dict[
        'GenerateOptionalPatch' => GenerateOptionalPatch::fromShape(
          shape(
          )
        ),
        'facebook_thrift_annotation_thrift_Experimental' => facebook_thrift_annotation_thrift_Experimental::fromShape(
          shape(
          )
        ),
      ],
      'fields' => dict[
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'assign'),
      $shape['clear'],
      $shape['prepend'],
      $shape['append'],
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
      'assign' => $this->assign,
      'clear' => $this->clear,
      'prepend' => $this->prepend,
      'append' => $this->append,
    );
  }
  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'assign') !== null) {
      $this->assign = /* HH_FIXME[4110] */ $parsed['assign'];
    }    
    if (idx($parsed, 'clear') !== null) {
      $this->clear = /* HH_FIXME[4110] */ $parsed['clear'];
    }    
    if (idx($parsed, 'prepend') !== null) {
      $this->prepend = /* HH_FIXME[4110] */ $parsed['prepend'];
    }    
    if (idx($parsed, 'append') !== null) {
      $this->append = /* HH_FIXME[4110] */ $parsed['append'];
    }    
  }

}

/**
 * Original thrift struct:-
 * BinaryPatch
 */
class BinaryPatch implements \IThriftSyncStruct, \IThriftShapishSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    1 => shape(
      'var' => 'assign',
      'type' => \TType::STRING,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'assign' => 1,
  ];

  const type TConstructorShape = shape(
    ?'assign' => ?string,
  );

  const type TShape = shape(
    ?'assign' => ?string,
    ...
  );
  const int STRUCTURAL_ID = 6677740157096629654;
  /**
   * Original thrift field:-
   * 1: binary assign
   */
  public ?string $assign;

  public function __construct(?string $assign = null  )[] {
    $this->assign = $assign;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'assign'),
    );
  }

  public function getName()[]: string {
    return 'BinaryPatch';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "patch.BinaryPatch",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 1,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_BINARY_TYPE,
                )
              ),
              "name" => "assign",
              "is_optional" => true,
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[]: \TStructAnnotations {
    return shape(
      'struct' => dict[
        'GenerateOptionalPatch' => GenerateOptionalPatch::fromShape(
          shape(
          )
        ),
        'facebook_thrift_annotation_thrift_Experimental' => facebook_thrift_annotation_thrift_Experimental::fromShape(
          shape(
          )
        ),
      ],
      'fields' => dict[
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'assign'),
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
      'assign' => $this->assign,
    );
  }
  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'assign') !== null) {
      $this->assign = /* HH_FIXME[4110] */ $parsed['assign'];
    }    
  }

}

/**
 * Original thrift struct:-
 * OptionalBoolPatch
 */
class OptionalBoolPatch implements \IThriftSyncStruct, \IThriftShapishSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    2 => shape(
      'var' => 'clear',
      'type' => \TType::BOOL,
    ),
    3 => shape(
      'var' => 'patch',
      'type' => \TType::STRUCT,
      'class' => BoolPatch::class,
    ),
    4 => shape(
      'var' => 'ensure',
      'type' => \TType::BOOL,
    ),
    5 => shape(
      'var' => 'patchAfter',
      'type' => \TType::STRUCT,
      'class' => BoolPatch::class,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'clear' => 2,
    'patch' => 3,
    'ensure' => 4,
    'patchAfter' => 5,
  ];

  const type TConstructorShape = shape(
    ?'clear' => ?bool,
    ?'patch' => ?BoolPatch,
    ?'ensure' => ?bool,
    ?'patchAfter' => ?BoolPatch,
  );

  const type TShape = shape(
    'clear' => bool,
    ?'patch' => ?BoolPatch::TShape,
    ?'ensure' => ?bool,
    ?'patchAfter' => ?BoolPatch::TShape,
    ...
  );
  const int STRUCTURAL_ID = 3751779734282343356;
  /**
   * Clears any set value. Applies first.
   * 
   * Original thrift field:-
   * 2: bool clear
   */
  public bool $clear;
  /**
   * Patches any set value. Applies second.
   * 
   * Original thrift field:-
   * 3: struct patch.BoolPatch patch
   */
  public ?BoolPatch $patch;
  /**
   * Assigns the value, if not already set. Applies third.
   * 
   * Original thrift field:-
   * 4: bool ensure
   */
  public ?bool $ensure;
  /**
   * Patches any set value, including newly set values. Applies fourth.
   * 
   * Original thrift field:-
   * 5: struct patch.BoolPatch patchAfter
   */
  public ?BoolPatch $patchAfter;

  public function __construct(?bool $clear = null, ?BoolPatch $patch = null, ?bool $ensure = null, ?BoolPatch $patchAfter = null  )[] {
    $this->clear = $clear ?? false;
    $this->patch = $patch;
    $this->ensure = $ensure;
    $this->patchAfter = $patchAfter;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'clear'),
      Shapes::idx($shape, 'patch'),
      Shapes::idx($shape, 'ensure'),
      Shapes::idx($shape, 'patchAfter'),
    );
  }

  public function getName()[]: string {
    return 'OptionalBoolPatch';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "patch.OptionalBoolPatch",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_BOOL_TYPE,
                )
              ),
              "name" => "clear",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 3,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.BoolPatch",
                    )
                  ),
                )
              ),
              "name" => "patch",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 4,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_BOOL_TYPE,
                )
              ),
              "name" => "ensure",
              "is_optional" => true,
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 5,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.BoolPatch",
                    )
                  ),
                )
              ),
              "name" => "patchAfter",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
        'patch' => shape(
          'field' => dict[],
          'type' => dict[
            'GenerateOptionalPatch' => GenerateOptionalPatch::fromShape(
              shape(
              )
            ),
            'facebook_thrift_annotation_thrift_Experimental' => facebook_thrift_annotation_thrift_Experimental::fromShape(
              shape(
              )
            ),
          ],
        ),
        'patchAfter' => shape(
          'field' => dict[],
          'type' => dict[
            'GenerateOptionalPatch' => GenerateOptionalPatch::fromShape(
              shape(
              )
            ),
            'facebook_thrift_annotation_thrift_Experimental' => facebook_thrift_annotation_thrift_Experimental::fromShape(
              shape(
              )
            ),
          ],
        ),
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
      $shape['clear'],
      Shapes::idx($shape, 'patch') === null ? null : (BoolPatch::__fromShape($shape['patch'])),
      Shapes::idx($shape, 'ensure'),
      Shapes::idx($shape, 'patchAfter') === null ? null : (BoolPatch::__fromShape($shape['patchAfter'])),
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
      'clear' => $this->clear,
      'patch' => $this->patch?->__toShape(),
      'ensure' => $this->ensure,
      'patchAfter' => $this->patchAfter?->__toShape(),
    );
  }
  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'clear') !== null) {
      $this->clear = /* HH_FIXME[4110] */ $parsed['clear'];
    }    
    if (idx($parsed, 'patch') !== null) {
      $_tmp0 = json_encode(/* HH_FIXME[4110] */ $parsed['patch']);
      $_tmp1 = BoolPatch::withDefaultValues();
      $_tmp1->readFromJson($_tmp0);
      $this->patch = $_tmp1;
    }    
    if (idx($parsed, 'ensure') !== null) {
      $this->ensure = /* HH_FIXME[4110] */ $parsed['ensure'];
    }    
    if (idx($parsed, 'patchAfter') !== null) {
      $_tmp2 = json_encode(/* HH_FIXME[4110] */ $parsed['patchAfter']);
      $_tmp3 = BoolPatch::withDefaultValues();
      $_tmp3->readFromJson($_tmp2);
      $this->patchAfter = $_tmp3;
    }    
  }

}

/**
 * Original thrift struct:-
 * OptionalBytePatch
 */
class OptionalBytePatch implements \IThriftSyncStruct, \IThriftShapishSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    2 => shape(
      'var' => 'clear',
      'type' => \TType::BOOL,
    ),
    3 => shape(
      'var' => 'patch',
      'type' => \TType::STRUCT,
      'class' => BytePatch::class,
    ),
    4 => shape(
      'var' => 'ensure',
      'type' => \TType::BYTE,
    ),
    5 => shape(
      'var' => 'patchAfter',
      'type' => \TType::STRUCT,
      'class' => BytePatch::class,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'clear' => 2,
    'patch' => 3,
    'ensure' => 4,
    'patchAfter' => 5,
  ];

  const type TConstructorShape = shape(
    ?'clear' => ?bool,
    ?'patch' => ?BytePatch,
    ?'ensure' => ?int,
    ?'patchAfter' => ?BytePatch,
  );

  const type TShape = shape(
    'clear' => bool,
    ?'patch' => ?BytePatch::TShape,
    ?'ensure' => ?int,
    ?'patchAfter' => ?BytePatch::TShape,
    ...
  );
  const int STRUCTURAL_ID = 4314158567468765392;
  /**
   * Clears any set value. Applies first.
   * 
   * Original thrift field:-
   * 2: bool clear
   */
  public bool $clear;
  /**
   * Patches any set value. Applies second.
   * 
   * Original thrift field:-
   * 3: struct patch.BytePatch patch
   */
  public ?BytePatch $patch;
  /**
   * Assigns the value, if not already set. Applies third.
   * 
   * Original thrift field:-
   * 4: byte ensure
   */
  public ?int $ensure;
  /**
   * Patches any set value, including newly set values. Applies fourth.
   * 
   * Original thrift field:-
   * 5: struct patch.BytePatch patchAfter
   */
  public ?BytePatch $patchAfter;

  public function __construct(?bool $clear = null, ?BytePatch $patch = null, ?int $ensure = null, ?BytePatch $patchAfter = null  )[] {
    $this->clear = $clear ?? false;
    $this->patch = $patch;
    $this->ensure = $ensure;
    $this->patchAfter = $patchAfter;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'clear'),
      Shapes::idx($shape, 'patch'),
      Shapes::idx($shape, 'ensure'),
      Shapes::idx($shape, 'patchAfter'),
    );
  }

  public function getName()[]: string {
    return 'OptionalBytePatch';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "patch.OptionalBytePatch",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_BOOL_TYPE,
                )
              ),
              "name" => "clear",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 3,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.BytePatch",
                    )
                  ),
                )
              ),
              "name" => "patch",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 4,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_BYTE_TYPE,
                )
              ),
              "name" => "ensure",
              "is_optional" => true,
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 5,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.BytePatch",
                    )
                  ),
                )
              ),
              "name" => "patchAfter",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
        'patch' => shape(
          'field' => dict[],
          'type' => dict[
            'GenerateOptionalPatch' => GenerateOptionalPatch::fromShape(
              shape(
              )
            ),
            'facebook_thrift_annotation_thrift_Experimental' => facebook_thrift_annotation_thrift_Experimental::fromShape(
              shape(
              )
            ),
          ],
        ),
        'patchAfter' => shape(
          'field' => dict[],
          'type' => dict[
            'GenerateOptionalPatch' => GenerateOptionalPatch::fromShape(
              shape(
              )
            ),
            'facebook_thrift_annotation_thrift_Experimental' => facebook_thrift_annotation_thrift_Experimental::fromShape(
              shape(
              )
            ),
          ],
        ),
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
      $shape['clear'],
      Shapes::idx($shape, 'patch') === null ? null : (BytePatch::__fromShape($shape['patch'])),
      Shapes::idx($shape, 'ensure'),
      Shapes::idx($shape, 'patchAfter') === null ? null : (BytePatch::__fromShape($shape['patchAfter'])),
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
      'clear' => $this->clear,
      'patch' => $this->patch?->__toShape(),
      'ensure' => $this->ensure,
      'patchAfter' => $this->patchAfter?->__toShape(),
    );
  }
  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'clear') !== null) {
      $this->clear = /* HH_FIXME[4110] */ $parsed['clear'];
    }    
    if (idx($parsed, 'patch') !== null) {
      $_tmp0 = json_encode(/* HH_FIXME[4110] */ $parsed['patch']);
      $_tmp1 = BytePatch::withDefaultValues();
      $_tmp1->readFromJson($_tmp0);
      $this->patch = $_tmp1;
    }    
    if (idx($parsed, 'ensure') !== null) {
      $_tmp2 = (int)/* HH_FIXME[4110] */ $parsed['ensure'];
      if ($_tmp2 > 0x7f) {
        throw new \TProtocolException("number exceeds limit in field");
      } else {
        $this->ensure = (int)$_tmp2;
      }
    }    
    if (idx($parsed, 'patchAfter') !== null) {
      $_tmp3 = json_encode(/* HH_FIXME[4110] */ $parsed['patchAfter']);
      $_tmp4 = BytePatch::withDefaultValues();
      $_tmp4->readFromJson($_tmp3);
      $this->patchAfter = $_tmp4;
    }    
  }

}

/**
 * Original thrift struct:-
 * OptionalI16Patch
 */
class OptionalI16Patch implements \IThriftSyncStruct, \IThriftShapishSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    2 => shape(
      'var' => 'clear',
      'type' => \TType::BOOL,
    ),
    3 => shape(
      'var' => 'patch',
      'type' => \TType::STRUCT,
      'class' => I16Patch::class,
    ),
    4 => shape(
      'var' => 'ensure',
      'type' => \TType::I16,
    ),
    5 => shape(
      'var' => 'patchAfter',
      'type' => \TType::STRUCT,
      'class' => I16Patch::class,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'clear' => 2,
    'patch' => 3,
    'ensure' => 4,
    'patchAfter' => 5,
  ];

  const type TConstructorShape = shape(
    ?'clear' => ?bool,
    ?'patch' => ?I16Patch,
    ?'ensure' => ?int,
    ?'patchAfter' => ?I16Patch,
  );

  const type TShape = shape(
    'clear' => bool,
    ?'patch' => ?I16Patch::TShape,
    ?'ensure' => ?int,
    ?'patchAfter' => ?I16Patch::TShape,
    ...
  );
  const int STRUCTURAL_ID = 6915320046793404558;
  /**
   * Clears any set value. Applies first.
   * 
   * Original thrift field:-
   * 2: bool clear
   */
  public bool $clear;
  /**
   * Patches any set value. Applies second.
   * 
   * Original thrift field:-
   * 3: struct patch.I16Patch patch
   */
  public ?I16Patch $patch;
  /**
   * Assigns the value, if not already set. Applies third.
   * 
   * Original thrift field:-
   * 4: i16 ensure
   */
  public ?int $ensure;
  /**
   * Patches any set value, including newly set values. Applies fourth.
   * 
   * Original thrift field:-
   * 5: struct patch.I16Patch patchAfter
   */
  public ?I16Patch $patchAfter;

  public function __construct(?bool $clear = null, ?I16Patch $patch = null, ?int $ensure = null, ?I16Patch $patchAfter = null  )[] {
    $this->clear = $clear ?? false;
    $this->patch = $patch;
    $this->ensure = $ensure;
    $this->patchAfter = $patchAfter;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'clear'),
      Shapes::idx($shape, 'patch'),
      Shapes::idx($shape, 'ensure'),
      Shapes::idx($shape, 'patchAfter'),
    );
  }

  public function getName()[]: string {
    return 'OptionalI16Patch';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "patch.OptionalI16Patch",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_BOOL_TYPE,
                )
              ),
              "name" => "clear",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 3,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.I16Patch",
                    )
                  ),
                )
              ),
              "name" => "patch",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 4,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_I16_TYPE,
                )
              ),
              "name" => "ensure",
              "is_optional" => true,
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 5,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.I16Patch",
                    )
                  ),
                )
              ),
              "name" => "patchAfter",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
        'patch' => shape(
          'field' => dict[],
          'type' => dict[
            'GenerateOptionalPatch' => GenerateOptionalPatch::fromShape(
              shape(
              )
            ),
            'facebook_thrift_annotation_thrift_Experimental' => facebook_thrift_annotation_thrift_Experimental::fromShape(
              shape(
              )
            ),
          ],
        ),
        'patchAfter' => shape(
          'field' => dict[],
          'type' => dict[
            'GenerateOptionalPatch' => GenerateOptionalPatch::fromShape(
              shape(
              )
            ),
            'facebook_thrift_annotation_thrift_Experimental' => facebook_thrift_annotation_thrift_Experimental::fromShape(
              shape(
              )
            ),
          ],
        ),
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
      $shape['clear'],
      Shapes::idx($shape, 'patch') === null ? null : (I16Patch::__fromShape($shape['patch'])),
      Shapes::idx($shape, 'ensure'),
      Shapes::idx($shape, 'patchAfter') === null ? null : (I16Patch::__fromShape($shape['patchAfter'])),
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
      'clear' => $this->clear,
      'patch' => $this->patch?->__toShape(),
      'ensure' => $this->ensure,
      'patchAfter' => $this->patchAfter?->__toShape(),
    );
  }
  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'clear') !== null) {
      $this->clear = /* HH_FIXME[4110] */ $parsed['clear'];
    }    
    if (idx($parsed, 'patch') !== null) {
      $_tmp0 = json_encode(/* HH_FIXME[4110] */ $parsed['patch']);
      $_tmp1 = I16Patch::withDefaultValues();
      $_tmp1->readFromJson($_tmp0);
      $this->patch = $_tmp1;
    }    
    if (idx($parsed, 'ensure') !== null) {
      $_tmp2 = (int)/* HH_FIXME[4110] */ $parsed['ensure'];
      if ($_tmp2 > 0x7fff) {
        throw new \TProtocolException("number exceeds limit in field");
      } else {
        $this->ensure = (int)$_tmp2;
      }
    }    
    if (idx($parsed, 'patchAfter') !== null) {
      $_tmp3 = json_encode(/* HH_FIXME[4110] */ $parsed['patchAfter']);
      $_tmp4 = I16Patch::withDefaultValues();
      $_tmp4->readFromJson($_tmp3);
      $this->patchAfter = $_tmp4;
    }    
  }

}

/**
 * Original thrift struct:-
 * OptionalI32Patch
 */
class OptionalI32Patch implements \IThriftSyncStruct, \IThriftShapishSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    2 => shape(
      'var' => 'clear',
      'type' => \TType::BOOL,
    ),
    3 => shape(
      'var' => 'patch',
      'type' => \TType::STRUCT,
      'class' => I32Patch::class,
    ),
    4 => shape(
      'var' => 'ensure',
      'type' => \TType::I32,
    ),
    5 => shape(
      'var' => 'patchAfter',
      'type' => \TType::STRUCT,
      'class' => I32Patch::class,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'clear' => 2,
    'patch' => 3,
    'ensure' => 4,
    'patchAfter' => 5,
  ];

  const type TConstructorShape = shape(
    ?'clear' => ?bool,
    ?'patch' => ?I32Patch,
    ?'ensure' => ?int,
    ?'patchAfter' => ?I32Patch,
  );

  const type TShape = shape(
    'clear' => bool,
    ?'patch' => ?I32Patch::TShape,
    ?'ensure' => ?int,
    ?'patchAfter' => ?I32Patch::TShape,
    ...
  );
  const int STRUCTURAL_ID = 3728127711020667513;
  /**
   * Clears any set value. Applies first.
   * 
   * Original thrift field:-
   * 2: bool clear
   */
  public bool $clear;
  /**
   * Patches any set value. Applies second.
   * 
   * Original thrift field:-
   * 3: struct patch.I32Patch patch
   */
  public ?I32Patch $patch;
  /**
   * Assigns the value, if not already set. Applies third.
   * 
   * Original thrift field:-
   * 4: i32 ensure
   */
  public ?int $ensure;
  /**
   * Patches any set value, including newly set values. Applies fourth.
   * 
   * Original thrift field:-
   * 5: struct patch.I32Patch patchAfter
   */
  public ?I32Patch $patchAfter;

  public function __construct(?bool $clear = null, ?I32Patch $patch = null, ?int $ensure = null, ?I32Patch $patchAfter = null  )[] {
    $this->clear = $clear ?? false;
    $this->patch = $patch;
    $this->ensure = $ensure;
    $this->patchAfter = $patchAfter;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'clear'),
      Shapes::idx($shape, 'patch'),
      Shapes::idx($shape, 'ensure'),
      Shapes::idx($shape, 'patchAfter'),
    );
  }

  public function getName()[]: string {
    return 'OptionalI32Patch';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "patch.OptionalI32Patch",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_BOOL_TYPE,
                )
              ),
              "name" => "clear",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 3,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.I32Patch",
                    )
                  ),
                )
              ),
              "name" => "patch",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 4,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_I32_TYPE,
                )
              ),
              "name" => "ensure",
              "is_optional" => true,
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 5,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.I32Patch",
                    )
                  ),
                )
              ),
              "name" => "patchAfter",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
        'patch' => shape(
          'field' => dict[],
          'type' => dict[
            'GenerateOptionalPatch' => GenerateOptionalPatch::fromShape(
              shape(
              )
            ),
            'facebook_thrift_annotation_thrift_Experimental' => facebook_thrift_annotation_thrift_Experimental::fromShape(
              shape(
              )
            ),
          ],
        ),
        'patchAfter' => shape(
          'field' => dict[],
          'type' => dict[
            'GenerateOptionalPatch' => GenerateOptionalPatch::fromShape(
              shape(
              )
            ),
            'facebook_thrift_annotation_thrift_Experimental' => facebook_thrift_annotation_thrift_Experimental::fromShape(
              shape(
              )
            ),
          ],
        ),
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
      $shape['clear'],
      Shapes::idx($shape, 'patch') === null ? null : (I32Patch::__fromShape($shape['patch'])),
      Shapes::idx($shape, 'ensure'),
      Shapes::idx($shape, 'patchAfter') === null ? null : (I32Patch::__fromShape($shape['patchAfter'])),
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
      'clear' => $this->clear,
      'patch' => $this->patch?->__toShape(),
      'ensure' => $this->ensure,
      'patchAfter' => $this->patchAfter?->__toShape(),
    );
  }
  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'clear') !== null) {
      $this->clear = /* HH_FIXME[4110] */ $parsed['clear'];
    }    
    if (idx($parsed, 'patch') !== null) {
      $_tmp0 = json_encode(/* HH_FIXME[4110] */ $parsed['patch']);
      $_tmp1 = I32Patch::withDefaultValues();
      $_tmp1->readFromJson($_tmp0);
      $this->patch = $_tmp1;
    }    
    if (idx($parsed, 'ensure') !== null) {
      $_tmp2 = (int)/* HH_FIXME[4110] */ $parsed['ensure'];
      if ($_tmp2 > 0x7fffffff) {
        throw new \TProtocolException("number exceeds limit in field");
      } else {
        $this->ensure = (int)$_tmp2;
      }
    }    
    if (idx($parsed, 'patchAfter') !== null) {
      $_tmp3 = json_encode(/* HH_FIXME[4110] */ $parsed['patchAfter']);
      $_tmp4 = I32Patch::withDefaultValues();
      $_tmp4->readFromJson($_tmp3);
      $this->patchAfter = $_tmp4;
    }    
  }

}

/**
 * Original thrift struct:-
 * OptionalI64Patch
 */
class OptionalI64Patch implements \IThriftSyncStruct, \IThriftShapishSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    2 => shape(
      'var' => 'clear',
      'type' => \TType::BOOL,
    ),
    3 => shape(
      'var' => 'patch',
      'type' => \TType::STRUCT,
      'class' => I64Patch::class,
    ),
    4 => shape(
      'var' => 'ensure',
      'type' => \TType::I64,
    ),
    5 => shape(
      'var' => 'patchAfter',
      'type' => \TType::STRUCT,
      'class' => I64Patch::class,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'clear' => 2,
    'patch' => 3,
    'ensure' => 4,
    'patchAfter' => 5,
  ];

  const type TConstructorShape = shape(
    ?'clear' => ?bool,
    ?'patch' => ?I64Patch,
    ?'ensure' => ?int,
    ?'patchAfter' => ?I64Patch,
  );

  const type TShape = shape(
    'clear' => bool,
    ?'patch' => ?I64Patch::TShape,
    ?'ensure' => ?int,
    ?'patchAfter' => ?I64Patch::TShape,
    ...
  );
  const int STRUCTURAL_ID = 6609118293538896493;
  /**
   * Clears any set value. Applies first.
   * 
   * Original thrift field:-
   * 2: bool clear
   */
  public bool $clear;
  /**
   * Patches any set value. Applies second.
   * 
   * Original thrift field:-
   * 3: struct patch.I64Patch patch
   */
  public ?I64Patch $patch;
  /**
   * Assigns the value, if not already set. Applies third.
   * 
   * Original thrift field:-
   * 4: i64 ensure
   */
  public ?int $ensure;
  /**
   * Patches any set value, including newly set values. Applies fourth.
   * 
   * Original thrift field:-
   * 5: struct patch.I64Patch patchAfter
   */
  public ?I64Patch $patchAfter;

  public function __construct(?bool $clear = null, ?I64Patch $patch = null, ?int $ensure = null, ?I64Patch $patchAfter = null  )[] {
    $this->clear = $clear ?? false;
    $this->patch = $patch;
    $this->ensure = $ensure;
    $this->patchAfter = $patchAfter;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'clear'),
      Shapes::idx($shape, 'patch'),
      Shapes::idx($shape, 'ensure'),
      Shapes::idx($shape, 'patchAfter'),
    );
  }

  public function getName()[]: string {
    return 'OptionalI64Patch';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "patch.OptionalI64Patch",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_BOOL_TYPE,
                )
              ),
              "name" => "clear",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 3,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.I64Patch",
                    )
                  ),
                )
              ),
              "name" => "patch",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 4,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_I64_TYPE,
                )
              ),
              "name" => "ensure",
              "is_optional" => true,
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 5,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.I64Patch",
                    )
                  ),
                )
              ),
              "name" => "patchAfter",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
        'patch' => shape(
          'field' => dict[],
          'type' => dict[
            'GenerateOptionalPatch' => GenerateOptionalPatch::fromShape(
              shape(
              )
            ),
            'facebook_thrift_annotation_thrift_Experimental' => facebook_thrift_annotation_thrift_Experimental::fromShape(
              shape(
              )
            ),
          ],
        ),
        'patchAfter' => shape(
          'field' => dict[],
          'type' => dict[
            'GenerateOptionalPatch' => GenerateOptionalPatch::fromShape(
              shape(
              )
            ),
            'facebook_thrift_annotation_thrift_Experimental' => facebook_thrift_annotation_thrift_Experimental::fromShape(
              shape(
              )
            ),
          ],
        ),
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
      $shape['clear'],
      Shapes::idx($shape, 'patch') === null ? null : (I64Patch::__fromShape($shape['patch'])),
      Shapes::idx($shape, 'ensure'),
      Shapes::idx($shape, 'patchAfter') === null ? null : (I64Patch::__fromShape($shape['patchAfter'])),
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
      'clear' => $this->clear,
      'patch' => $this->patch?->__toShape(),
      'ensure' => $this->ensure,
      'patchAfter' => $this->patchAfter?->__toShape(),
    );
  }
  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'clear') !== null) {
      $this->clear = /* HH_FIXME[4110] */ $parsed['clear'];
    }    
    if (idx($parsed, 'patch') !== null) {
      $_tmp0 = json_encode(/* HH_FIXME[4110] */ $parsed['patch']);
      $_tmp1 = I64Patch::withDefaultValues();
      $_tmp1->readFromJson($_tmp0);
      $this->patch = $_tmp1;
    }    
    if (idx($parsed, 'ensure') !== null) {
      $this->ensure = /* HH_FIXME[4110] */ $parsed['ensure'];
    }    
    if (idx($parsed, 'patchAfter') !== null) {
      $_tmp2 = json_encode(/* HH_FIXME[4110] */ $parsed['patchAfter']);
      $_tmp3 = I64Patch::withDefaultValues();
      $_tmp3->readFromJson($_tmp2);
      $this->patchAfter = $_tmp3;
    }    
  }

}

/**
 * Original thrift struct:-
 * OptionalFloatPatch
 */
class OptionalFloatPatch implements \IThriftSyncStruct, \IThriftShapishSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    2 => shape(
      'var' => 'clear',
      'type' => \TType::BOOL,
    ),
    3 => shape(
      'var' => 'patch',
      'type' => \TType::STRUCT,
      'class' => FloatPatch::class,
    ),
    4 => shape(
      'var' => 'ensure',
      'type' => \TType::FLOAT,
    ),
    5 => shape(
      'var' => 'patchAfter',
      'type' => \TType::STRUCT,
      'class' => FloatPatch::class,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'clear' => 2,
    'patch' => 3,
    'ensure' => 4,
    'patchAfter' => 5,
  ];

  const type TConstructorShape = shape(
    ?'clear' => ?bool,
    ?'patch' => ?FloatPatch,
    ?'ensure' => ?float,
    ?'patchAfter' => ?FloatPatch,
  );

  const type TShape = shape(
    'clear' => bool,
    ?'patch' => ?FloatPatch::TShape,
    ?'ensure' => ?float,
    ?'patchAfter' => ?FloatPatch::TShape,
    ...
  );
  const int STRUCTURAL_ID = 8186456629717104138;
  /**
   * Clears any set value. Applies first.
   * 
   * Original thrift field:-
   * 2: bool clear
   */
  public bool $clear;
  /**
   * Patches any set value. Applies second.
   * 
   * Original thrift field:-
   * 3: struct patch.FloatPatch patch
   */
  public ?FloatPatch $patch;
  /**
   * Assigns the value, if not already set. Applies third.
   * 
   * Original thrift field:-
   * 4: float ensure
   */
  public ?float $ensure;
  /**
   * Patches any set value, including newly set values. Applies fourth.
   * 
   * Original thrift field:-
   * 5: struct patch.FloatPatch patchAfter
   */
  public ?FloatPatch $patchAfter;

  public function __construct(?bool $clear = null, ?FloatPatch $patch = null, ?float $ensure = null, ?FloatPatch $patchAfter = null  )[] {
    $this->clear = $clear ?? false;
    $this->patch = $patch;
    $this->ensure = $ensure;
    $this->patchAfter = $patchAfter;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'clear'),
      Shapes::idx($shape, 'patch'),
      Shapes::idx($shape, 'ensure'),
      Shapes::idx($shape, 'patchAfter'),
    );
  }

  public function getName()[]: string {
    return 'OptionalFloatPatch';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "patch.OptionalFloatPatch",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_BOOL_TYPE,
                )
              ),
              "name" => "clear",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 3,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.FloatPatch",
                    )
                  ),
                )
              ),
              "name" => "patch",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 4,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_FLOAT_TYPE,
                )
              ),
              "name" => "ensure",
              "is_optional" => true,
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 5,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.FloatPatch",
                    )
                  ),
                )
              ),
              "name" => "patchAfter",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
        'patch' => shape(
          'field' => dict[],
          'type' => dict[
            'GenerateOptionalPatch' => GenerateOptionalPatch::fromShape(
              shape(
              )
            ),
            'facebook_thrift_annotation_thrift_Experimental' => facebook_thrift_annotation_thrift_Experimental::fromShape(
              shape(
              )
            ),
          ],
        ),
        'patchAfter' => shape(
          'field' => dict[],
          'type' => dict[
            'GenerateOptionalPatch' => GenerateOptionalPatch::fromShape(
              shape(
              )
            ),
            'facebook_thrift_annotation_thrift_Experimental' => facebook_thrift_annotation_thrift_Experimental::fromShape(
              shape(
              )
            ),
          ],
        ),
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
      $shape['clear'],
      Shapes::idx($shape, 'patch') === null ? null : (FloatPatch::__fromShape($shape['patch'])),
      Shapes::idx($shape, 'ensure'),
      Shapes::idx($shape, 'patchAfter') === null ? null : (FloatPatch::__fromShape($shape['patchAfter'])),
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
      'clear' => $this->clear,
      'patch' => $this->patch?->__toShape(),
      'ensure' => $this->ensure,
      'patchAfter' => $this->patchAfter?->__toShape(),
    );
  }
  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'clear') !== null) {
      $this->clear = /* HH_FIXME[4110] */ $parsed['clear'];
    }    
    if (idx($parsed, 'patch') !== null) {
      $_tmp0 = json_encode(/* HH_FIXME[4110] */ $parsed['patch']);
      $_tmp1 = FloatPatch::withDefaultValues();
      $_tmp1->readFromJson($_tmp0);
      $this->patch = $_tmp1;
    }    
    if (idx($parsed, 'ensure') !== null) {
      $this->ensure = /* HH_FIXME[4110] */ $parsed['ensure'];
    }    
    if (idx($parsed, 'patchAfter') !== null) {
      $_tmp2 = json_encode(/* HH_FIXME[4110] */ $parsed['patchAfter']);
      $_tmp3 = FloatPatch::withDefaultValues();
      $_tmp3->readFromJson($_tmp2);
      $this->patchAfter = $_tmp3;
    }    
  }

}

/**
 * Original thrift struct:-
 * OptionalDoublePatch
 */
class OptionalDoublePatch implements \IThriftSyncStruct, \IThriftShapishSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    2 => shape(
      'var' => 'clear',
      'type' => \TType::BOOL,
    ),
    3 => shape(
      'var' => 'patch',
      'type' => \TType::STRUCT,
      'class' => DoublePatch::class,
    ),
    4 => shape(
      'var' => 'ensure',
      'type' => \TType::DOUBLE,
    ),
    5 => shape(
      'var' => 'patchAfter',
      'type' => \TType::STRUCT,
      'class' => DoublePatch::class,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'clear' => 2,
    'patch' => 3,
    'ensure' => 4,
    'patchAfter' => 5,
  ];

  const type TConstructorShape = shape(
    ?'clear' => ?bool,
    ?'patch' => ?DoublePatch,
    ?'ensure' => ?float,
    ?'patchAfter' => ?DoublePatch,
  );

  const type TShape = shape(
    'clear' => bool,
    ?'patch' => ?DoublePatch::TShape,
    ?'ensure' => ?float,
    ?'patchAfter' => ?DoublePatch::TShape,
    ...
  );
  const int STRUCTURAL_ID = 8246390203967350121;
  /**
   * Clears any set value. Applies first.
   * 
   * Original thrift field:-
   * 2: bool clear
   */
  public bool $clear;
  /**
   * Patches any set value. Applies second.
   * 
   * Original thrift field:-
   * 3: struct patch.DoublePatch patch
   */
  public ?DoublePatch $patch;
  /**
   * Assigns the value, if not already set. Applies third.
   * 
   * Original thrift field:-
   * 4: double ensure
   */
  public ?float $ensure;
  /**
   * Patches any set value, including newly set values. Applies fourth.
   * 
   * Original thrift field:-
   * 5: struct patch.DoublePatch patchAfter
   */
  public ?DoublePatch $patchAfter;

  public function __construct(?bool $clear = null, ?DoublePatch $patch = null, ?float $ensure = null, ?DoublePatch $patchAfter = null  )[] {
    $this->clear = $clear ?? false;
    $this->patch = $patch;
    $this->ensure = $ensure;
    $this->patchAfter = $patchAfter;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'clear'),
      Shapes::idx($shape, 'patch'),
      Shapes::idx($shape, 'ensure'),
      Shapes::idx($shape, 'patchAfter'),
    );
  }

  public function getName()[]: string {
    return 'OptionalDoublePatch';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "patch.OptionalDoublePatch",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_BOOL_TYPE,
                )
              ),
              "name" => "clear",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 3,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.DoublePatch",
                    )
                  ),
                )
              ),
              "name" => "patch",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 4,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_DOUBLE_TYPE,
                )
              ),
              "name" => "ensure",
              "is_optional" => true,
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 5,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.DoublePatch",
                    )
                  ),
                )
              ),
              "name" => "patchAfter",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
        'patch' => shape(
          'field' => dict[],
          'type' => dict[
            'GenerateOptionalPatch' => GenerateOptionalPatch::fromShape(
              shape(
              )
            ),
            'facebook_thrift_annotation_thrift_Experimental' => facebook_thrift_annotation_thrift_Experimental::fromShape(
              shape(
              )
            ),
          ],
        ),
        'patchAfter' => shape(
          'field' => dict[],
          'type' => dict[
            'GenerateOptionalPatch' => GenerateOptionalPatch::fromShape(
              shape(
              )
            ),
            'facebook_thrift_annotation_thrift_Experimental' => facebook_thrift_annotation_thrift_Experimental::fromShape(
              shape(
              )
            ),
          ],
        ),
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
      $shape['clear'],
      Shapes::idx($shape, 'patch') === null ? null : (DoublePatch::__fromShape($shape['patch'])),
      Shapes::idx($shape, 'ensure'),
      Shapes::idx($shape, 'patchAfter') === null ? null : (DoublePatch::__fromShape($shape['patchAfter'])),
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
      'clear' => $this->clear,
      'patch' => $this->patch?->__toShape(),
      'ensure' => $this->ensure,
      'patchAfter' => $this->patchAfter?->__toShape(),
    );
  }
  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'clear') !== null) {
      $this->clear = /* HH_FIXME[4110] */ $parsed['clear'];
    }    
    if (idx($parsed, 'patch') !== null) {
      $_tmp0 = json_encode(/* HH_FIXME[4110] */ $parsed['patch']);
      $_tmp1 = DoublePatch::withDefaultValues();
      $_tmp1->readFromJson($_tmp0);
      $this->patch = $_tmp1;
    }    
    if (idx($parsed, 'ensure') !== null) {
      $this->ensure = /* HH_FIXME[4110] */ $parsed['ensure'];
    }    
    if (idx($parsed, 'patchAfter') !== null) {
      $_tmp2 = json_encode(/* HH_FIXME[4110] */ $parsed['patchAfter']);
      $_tmp3 = DoublePatch::withDefaultValues();
      $_tmp3->readFromJson($_tmp2);
      $this->patchAfter = $_tmp3;
    }    
  }

}

/**
 * Original thrift struct:-
 * OptionalStringPatch
 */
class OptionalStringPatch implements \IThriftSyncStruct, \IThriftShapishSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    2 => shape(
      'var' => 'clear',
      'type' => \TType::BOOL,
    ),
    3 => shape(
      'var' => 'patch',
      'type' => \TType::STRUCT,
      'class' => StringPatch::class,
    ),
    4 => shape(
      'var' => 'ensure',
      'type' => \TType::STRING,
    ),
    5 => shape(
      'var' => 'patchAfter',
      'type' => \TType::STRUCT,
      'class' => StringPatch::class,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'clear' => 2,
    'patch' => 3,
    'ensure' => 4,
    'patchAfter' => 5,
  ];

  const type TConstructorShape = shape(
    ?'clear' => ?bool,
    ?'patch' => ?StringPatch,
    ?'ensure' => ?string,
    ?'patchAfter' => ?StringPatch,
  );

  const type TShape = shape(
    'clear' => bool,
    ?'patch' => ?StringPatch::TShape,
    ?'ensure' => ?string,
    ?'patchAfter' => ?StringPatch::TShape,
    ...
  );
  const int STRUCTURAL_ID = 4184291972930407740;
  /**
   * Clears any set value. Applies first.
   * 
   * Original thrift field:-
   * 2: bool clear
   */
  public bool $clear;
  /**
   * Patches any set value. Applies second.
   * 
   * Original thrift field:-
   * 3: struct patch.StringPatch patch
   */
  public ?StringPatch $patch;
  /**
   * Assigns the value, if not already set. Applies third.
   * 
   * Original thrift field:-
   * 4: string ensure
   */
  public ?string $ensure;
  /**
   * Patches any set value, including newly set values. Applies fourth.
   * 
   * Original thrift field:-
   * 5: struct patch.StringPatch patchAfter
   */
  public ?StringPatch $patchAfter;

  public function __construct(?bool $clear = null, ?StringPatch $patch = null, ?string $ensure = null, ?StringPatch $patchAfter = null  )[] {
    $this->clear = $clear ?? false;
    $this->patch = $patch;
    $this->ensure = $ensure;
    $this->patchAfter = $patchAfter;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'clear'),
      Shapes::idx($shape, 'patch'),
      Shapes::idx($shape, 'ensure'),
      Shapes::idx($shape, 'patchAfter'),
    );
  }

  public function getName()[]: string {
    return 'OptionalStringPatch';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "patch.OptionalStringPatch",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_BOOL_TYPE,
                )
              ),
              "name" => "clear",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 3,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.StringPatch",
                    )
                  ),
                )
              ),
              "name" => "patch",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 4,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_STRING_TYPE,
                )
              ),
              "name" => "ensure",
              "is_optional" => true,
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 5,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.StringPatch",
                    )
                  ),
                )
              ),
              "name" => "patchAfter",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
        'patch' => shape(
          'field' => dict[],
          'type' => dict[
            'GenerateOptionalPatch' => GenerateOptionalPatch::fromShape(
              shape(
              )
            ),
            'facebook_thrift_annotation_thrift_Experimental' => facebook_thrift_annotation_thrift_Experimental::fromShape(
              shape(
              )
            ),
          ],
        ),
        'patchAfter' => shape(
          'field' => dict[],
          'type' => dict[
            'GenerateOptionalPatch' => GenerateOptionalPatch::fromShape(
              shape(
              )
            ),
            'facebook_thrift_annotation_thrift_Experimental' => facebook_thrift_annotation_thrift_Experimental::fromShape(
              shape(
              )
            ),
          ],
        ),
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
      $shape['clear'],
      Shapes::idx($shape, 'patch') === null ? null : (StringPatch::__fromShape($shape['patch'])),
      Shapes::idx($shape, 'ensure'),
      Shapes::idx($shape, 'patchAfter') === null ? null : (StringPatch::__fromShape($shape['patchAfter'])),
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
      'clear' => $this->clear,
      'patch' => $this->patch?->__toShape(),
      'ensure' => $this->ensure,
      'patchAfter' => $this->patchAfter?->__toShape(),
    );
  }
  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'clear') !== null) {
      $this->clear = /* HH_FIXME[4110] */ $parsed['clear'];
    }    
    if (idx($parsed, 'patch') !== null) {
      $_tmp0 = json_encode(/* HH_FIXME[4110] */ $parsed['patch']);
      $_tmp1 = StringPatch::withDefaultValues();
      $_tmp1->readFromJson($_tmp0);
      $this->patch = $_tmp1;
    }    
    if (idx($parsed, 'ensure') !== null) {
      $this->ensure = /* HH_FIXME[4110] */ $parsed['ensure'];
    }    
    if (idx($parsed, 'patchAfter') !== null) {
      $_tmp2 = json_encode(/* HH_FIXME[4110] */ $parsed['patchAfter']);
      $_tmp3 = StringPatch::withDefaultValues();
      $_tmp3->readFromJson($_tmp2);
      $this->patchAfter = $_tmp3;
    }    
  }

}

/**
 * Original thrift struct:-
 * OptionalBinaryPatch
 */
class OptionalBinaryPatch implements \IThriftSyncStruct, \IThriftShapishSyncStruct {
  use \ThriftSerializationTrait;

  const dict<int, this::TFieldSpec> SPEC = dict[
    2 => shape(
      'var' => 'clear',
      'type' => \TType::BOOL,
    ),
    3 => shape(
      'var' => 'patch',
      'type' => \TType::STRUCT,
      'class' => BinaryPatch::class,
    ),
    4 => shape(
      'var' => 'ensure',
      'type' => \TType::STRING,
    ),
    5 => shape(
      'var' => 'patchAfter',
      'type' => \TType::STRUCT,
      'class' => BinaryPatch::class,
    ),
  ];
  const dict<string, int> FIELDMAP = dict[
    'clear' => 2,
    'patch' => 3,
    'ensure' => 4,
    'patchAfter' => 5,
  ];

  const type TConstructorShape = shape(
    ?'clear' => ?bool,
    ?'patch' => ?BinaryPatch,
    ?'ensure' => ?string,
    ?'patchAfter' => ?BinaryPatch,
  );

  const type TShape = shape(
    'clear' => bool,
    ?'patch' => ?BinaryPatch::TShape,
    ?'ensure' => ?string,
    ?'patchAfter' => ?BinaryPatch::TShape,
    ...
  );
  const int STRUCTURAL_ID = 4422024576090953307;
  /**
   * Clears any set value. Applies first.
   * 
   * Original thrift field:-
   * 2: bool clear
   */
  public bool $clear;
  /**
   * Patches any set value. Applies second.
   * 
   * Original thrift field:-
   * 3: struct patch.BinaryPatch patch
   */
  public ?BinaryPatch $patch;
  /**
   * Assigns the value, if not already set. Applies third.
   * 
   * Original thrift field:-
   * 4: binary ensure
   */
  public ?string $ensure;
  /**
   * Patches any set value, including newly set values. Applies fourth.
   * 
   * Original thrift field:-
   * 5: struct patch.BinaryPatch patchAfter
   */
  public ?BinaryPatch $patchAfter;

  public function __construct(?bool $clear = null, ?BinaryPatch $patch = null, ?string $ensure = null, ?BinaryPatch $patchAfter = null  )[] {
    $this->clear = $clear ?? false;
    $this->patch = $patch;
    $this->ensure = $ensure;
    $this->patchAfter = $patchAfter;
  }

  public static function withDefaultValues()[]: this {
    return new static();
  }

  public static function fromShape(self::TConstructorShape $shape)[]: this {
    return new static(
      Shapes::idx($shape, 'clear'),
      Shapes::idx($shape, 'patch'),
      Shapes::idx($shape, 'ensure'),
      Shapes::idx($shape, 'patchAfter'),
    );
  }

  public function getName()[]: string {
    return 'OptionalBinaryPatch';
  }

  public static function getStructMetadata()[]: \tmeta_ThriftStruct {
    return tmeta_ThriftStruct::fromShape(
      shape(
        "name" => "patch.OptionalBinaryPatch",
        "fields" => vec[
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 2,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_BOOL_TYPE,
                )
              ),
              "name" => "clear",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 3,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.BinaryPatch",
                    )
                  ),
                )
              ),
              "name" => "patch",
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 4,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_primitive" => tmeta_ThriftPrimitiveType::THRIFT_BINARY_TYPE,
                )
              ),
              "name" => "ensure",
              "is_optional" => true,
            )
          ),
          tmeta_ThriftField::fromShape(
            shape(
              "id" => 5,
              "type" => tmeta_ThriftType::fromShape(
                shape(
                  "t_struct" => tmeta_ThriftStructType::fromShape(
                    shape(
                      "name" => "patch.BinaryPatch",
                    )
                  ),
                )
              ),
              "name" => "patchAfter",
            )
          ),
        ],
        "is_union" => false,
      )
    );
  }

  public static function getAllStructuredAnnotations()[]: \TStructAnnotations {
    return shape(
      'struct' => dict[],
      'fields' => dict[
        'patch' => shape(
          'field' => dict[],
          'type' => dict[
            'GenerateOptionalPatch' => GenerateOptionalPatch::fromShape(
              shape(
              )
            ),
            'facebook_thrift_annotation_thrift_Experimental' => facebook_thrift_annotation_thrift_Experimental::fromShape(
              shape(
              )
            ),
          ],
        ),
        'patchAfter' => shape(
          'field' => dict[],
          'type' => dict[
            'GenerateOptionalPatch' => GenerateOptionalPatch::fromShape(
              shape(
              )
            ),
            'facebook_thrift_annotation_thrift_Experimental' => facebook_thrift_annotation_thrift_Experimental::fromShape(
              shape(
              )
            ),
          ],
        ),
      ],
    );
  }

  public static function __fromShape(self::TShape $shape)[]: this {
    return new static(
      $shape['clear'],
      Shapes::idx($shape, 'patch') === null ? null : (BinaryPatch::__fromShape($shape['patch'])),
      Shapes::idx($shape, 'ensure'),
      Shapes::idx($shape, 'patchAfter') === null ? null : (BinaryPatch::__fromShape($shape['patchAfter'])),
    );
  }

  public function __toShape()[]: self::TShape {
    return shape(
      'clear' => $this->clear,
      'patch' => $this->patch?->__toShape(),
      'ensure' => $this->ensure,
      'patchAfter' => $this->patchAfter?->__toShape(),
    );
  }
  public function getInstanceKey()[write_props]: string {
    return \TCompactSerializer::serialize($this);
  }

  public function readFromJson(string $jsonText): void {
    $parsed = json_decode($jsonText, true);

    if ($parsed === null || !($parsed is KeyedContainer<_, _>)) {
      throw new \TProtocolException("Cannot parse the given json string.");
    }

    if (idx($parsed, 'clear') !== null) {
      $this->clear = /* HH_FIXME[4110] */ $parsed['clear'];
    }    
    if (idx($parsed, 'patch') !== null) {
      $_tmp0 = json_encode(/* HH_FIXME[4110] */ $parsed['patch']);
      $_tmp1 = BinaryPatch::withDefaultValues();
      $_tmp1->readFromJson($_tmp0);
      $this->patch = $_tmp1;
    }    
    if (idx($parsed, 'ensure') !== null) {
      $this->ensure = /* HH_FIXME[4110] */ $parsed['ensure'];
    }    
    if (idx($parsed, 'patchAfter') !== null) {
      $_tmp2 = json_encode(/* HH_FIXME[4110] */ $parsed['patchAfter']);
      $_tmp3 = BinaryPatch::withDefaultValues();
      $_tmp3->readFromJson($_tmp2);
      $this->patchAfter = $_tmp3;
    }    
  }

}

