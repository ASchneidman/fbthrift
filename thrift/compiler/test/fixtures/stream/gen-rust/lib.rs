// @generated by Thrift for src/module.thrift
// This file is probably not the place you want to edit!

#![recursion_limit = "100000000"]
#![allow(non_camel_case_types, non_snake_case, non_upper_case_globals, unused_crate_dependencies, clippy::type_complexity)]

pub use self::errors::*;
pub use self::types::*;

pub mod types;

#[doc(hidden)]
pub mod dependencies {
}

pub mod services {
    pub mod pub_sub_streaming_service {
        #[derive(Clone, Debug)]
        pub enum ReturnstreamStreamExn {
            #[doc(hidden)]
            Success(::std::primitive::i32),
            ApplicationException(::fbthrift::ApplicationException),
        }

        impl ::std::convert::From<::fbthrift::ApplicationException> for ReturnstreamStreamExn {
            fn from(exn: ::fbthrift::ApplicationException) -> Self {
                ReturnstreamStreamExn::ApplicationException(exn)
            }
        }

        impl ::fbthrift::GetTType for ReturnstreamStreamExn {
            const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
        }

        impl<P> ::fbthrift::Serialize<P> for ReturnstreamStreamExn
        where
            P: ::fbthrift::ProtocolWriter,
        {
            fn write(&self, p: &mut P) {
                p.write_struct_begin("Returnstream");
                match self {
                    ReturnstreamStreamExn::Success(inner) => {
                        p.write_field_begin(
                            "Success",
                            ::fbthrift::TType::Stream,
                            0i16,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    ReturnstreamStreamExn::ApplicationException(_) => panic!(
                        "Bad union Alt field {} id {}",
                        "ApplicationException",
                        -2147483648i32,
                    ),
                }
                p.write_field_stop();
                p.write_struct_end();
            }
        }

        impl<P> ::fbthrift::Deserialize<P> for ReturnstreamStreamExn
        where
            P: ::fbthrift::ProtocolReader,
        {
            fn read(p: &mut P) -> ::anyhow::Result<Self> {
                static RETURNS: &[::fbthrift::Field] = &[
                    ::fbthrift::Field::new("Success", ::fbthrift::TType::Stream, 0),
                ];
                let _ = p.read_struct_begin(|_| ())?;
                let mut once = false;
                let mut alt = ::std::option::Option::None;
                loop {
                    let (_, fty, fid) = p.read_field_begin(|_| (), RETURNS)?;
                    match ((fty, fid as ::std::primitive::i32), once) {
                        ((::fbthrift::TType::Stop, _), _) => {
                            p.read_field_end()?;
                            break;
                        }
                        ((::fbthrift::TType::I32, 0i32), false) => {
                            once = true;
                            alt = ::std::option::Option::Some(ReturnstreamStreamExn::Success(::fbthrift::Deserialize::read(p)?));
                        }
                        ((ty, _id), false) => p.skip(ty)?,
                        ((badty, badid), true) => return ::std::result::Result::Err(::std::convert::From::from(
                            ::fbthrift::ApplicationException::new(
                                ::fbthrift::ApplicationExceptionErrorCode::ProtocolError,
                                format!(
                                    "unwanted extra union {} field ty {:?} id {}",
                                    "ReturnstreamStreamExn",
                                    badty,
                                    badid,
                                ),
                            )
                        )),
                    }
                    p.read_field_end()?;
                }
                p.read_struct_end()?;
                alt.ok_or_else(||
                    ::fbthrift::ApplicationException::new(
                        ::fbthrift::ApplicationExceptionErrorCode::MissingResult,
                        format!("Empty union {}", "ReturnstreamStreamExn"),
                    )
                    .into(),
                )
            }
        }

        #[derive(Clone, Debug)]
        pub enum StreamthrowsStreamExn {
            #[doc(hidden)]
            Success(::std::primitive::i32),
            e(crate::types::FooEx),
            ApplicationException(::fbthrift::ApplicationException),
        }

        impl ::fbthrift::ExceptionInfo for StreamthrowsStreamExn {
            fn exn_name(&self) -> &'static str {
                match self {
                    StreamthrowsStreamExn::Success(_) => panic!("ExceptionInfo::exn_name called on Success"),
                    StreamthrowsStreamExn::ApplicationException(aexn) => aexn.exn_name(),
                    StreamthrowsStreamExn::e(exn) => exn.exn_name(),
                }
            }

            fn exn_value(&self) -> String {
                match self {
                    StreamthrowsStreamExn::Success(_) => panic!("ExceptionInfo::exn_value called on Success"),
                    StreamthrowsStreamExn::ApplicationException(aexn) => aexn.exn_value(),
                    StreamthrowsStreamExn::e(exn) => exn.exn_value(),
                }
            }

            fn exn_is_declared(&self) -> bool {
                match self {
                    StreamthrowsStreamExn::Success(_) => panic!("ExceptionInfo::exn_is_declared called on Success"),
                    StreamthrowsStreamExn::ApplicationException(aexn) => aexn.exn_is_declared(),
                    StreamthrowsStreamExn::e(exn) => exn.exn_is_declared(),
                }
            }
        }

        impl ::fbthrift::ResultInfo for StreamthrowsStreamExn {
            fn result_type(&self) -> ::fbthrift::ResultType {
                match self {
                    StreamthrowsStreamExn::Success(_) => ::fbthrift::ResultType::Return,
                    StreamthrowsStreamExn::ApplicationException(_aexn) => ::fbthrift::ResultType::Exception,
                    StreamthrowsStreamExn::e(_exn) => fbthrift::ResultType::Error,
                }
            }
        }

        impl ::std::convert::From<crate::types::FooEx> for StreamthrowsStreamExn {
            fn from(exn: crate::types::FooEx) -> Self {
                StreamthrowsStreamExn::e(exn)
            }
        }

        impl ::std::convert::From<::fbthrift::ApplicationException> for StreamthrowsStreamExn {
            fn from(exn: ::fbthrift::ApplicationException) -> Self {
                StreamthrowsStreamExn::ApplicationException(exn)
            }
        }

        impl ::fbthrift::GetTType for StreamthrowsStreamExn {
            const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
        }

        impl<P> ::fbthrift::Serialize<P> for StreamthrowsStreamExn
        where
            P: ::fbthrift::ProtocolWriter,
        {
            fn write(&self, p: &mut P) {
                p.write_struct_begin("Streamthrows");
                match self {
                    StreamthrowsStreamExn::Success(inner) => {
                        p.write_field_begin(
                            "Success",
                            ::fbthrift::TType::Stream,
                            0i16,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    StreamthrowsStreamExn::e(inner) => {
                        p.write_field_begin(
                            "e",
                            ::fbthrift::TType::Struct,
                            1,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    StreamthrowsStreamExn::ApplicationException(_) => panic!(
                        "Bad union Alt field {} id {}",
                        "ApplicationException",
                        -2147483648i32,
                    ),
                }
                p.write_field_stop();
                p.write_struct_end();
            }
        }

        impl<P> ::fbthrift::Deserialize<P> for StreamthrowsStreamExn
        where
            P: ::fbthrift::ProtocolReader,
        {
            fn read(p: &mut P) -> ::anyhow::Result<Self> {
                static RETURNS: &[::fbthrift::Field] = &[
                    ::fbthrift::Field::new("Success", ::fbthrift::TType::Stream, 0),
                ];
                let _ = p.read_struct_begin(|_| ())?;
                let mut once = false;
                let mut alt = ::std::option::Option::None;
                loop {
                    let (_, fty, fid) = p.read_field_begin(|_| (), RETURNS)?;
                    match ((fty, fid as ::std::primitive::i32), once) {
                        ((::fbthrift::TType::Stop, _), _) => {
                            p.read_field_end()?;
                            break;
                        }
                        ((::fbthrift::TType::I32, 0i32), false) => {
                            once = true;
                            alt = ::std::option::Option::Some(StreamthrowsStreamExn::Success(::fbthrift::Deserialize::read(p)?));
                        }
                        ((::fbthrift::TType::Struct, 1), false) => {
                            once = true;
                            alt = ::std::option::Option::Some(StreamthrowsStreamExn::e(::fbthrift::Deserialize::read(p)?));
                        }
                        ((ty, _id), false) => p.skip(ty)?,
                        ((badty, badid), true) => return ::std::result::Result::Err(::std::convert::From::from(
                            ::fbthrift::ApplicationException::new(
                                ::fbthrift::ApplicationExceptionErrorCode::ProtocolError,
                                format!(
                                    "unwanted extra union {} field ty {:?} id {}",
                                    "StreamthrowsStreamExn",
                                    badty,
                                    badid,
                                ),
                            )
                        )),
                    }
                    p.read_field_end()?;
                }
                p.read_struct_end()?;
                alt.ok_or_else(||
                    ::fbthrift::ApplicationException::new(
                        ::fbthrift::ApplicationExceptionErrorCode::MissingResult,
                        format!("Empty union {}", "StreamthrowsStreamExn"),
                    )
                    .into(),
                )
            }
        }

        #[derive(Clone, Debug)]
        pub enum BoththrowsStreamExn {
            #[doc(hidden)]
            Success(::std::primitive::i32),
            e(crate::types::FooEx),
            ApplicationException(::fbthrift::ApplicationException),
        }

        impl ::fbthrift::ExceptionInfo for BoththrowsStreamExn {
            fn exn_name(&self) -> &'static str {
                match self {
                    BoththrowsStreamExn::Success(_) => panic!("ExceptionInfo::exn_name called on Success"),
                    BoththrowsStreamExn::ApplicationException(aexn) => aexn.exn_name(),
                    BoththrowsStreamExn::e(exn) => exn.exn_name(),
                }
            }

            fn exn_value(&self) -> String {
                match self {
                    BoththrowsStreamExn::Success(_) => panic!("ExceptionInfo::exn_value called on Success"),
                    BoththrowsStreamExn::ApplicationException(aexn) => aexn.exn_value(),
                    BoththrowsStreamExn::e(exn) => exn.exn_value(),
                }
            }

            fn exn_is_declared(&self) -> bool {
                match self {
                    BoththrowsStreamExn::Success(_) => panic!("ExceptionInfo::exn_is_declared called on Success"),
                    BoththrowsStreamExn::ApplicationException(aexn) => aexn.exn_is_declared(),
                    BoththrowsStreamExn::e(exn) => exn.exn_is_declared(),
                }
            }
        }

        impl ::fbthrift::ResultInfo for BoththrowsStreamExn {
            fn result_type(&self) -> ::fbthrift::ResultType {
                match self {
                    BoththrowsStreamExn::Success(_) => ::fbthrift::ResultType::Return,
                    BoththrowsStreamExn::ApplicationException(_aexn) => ::fbthrift::ResultType::Exception,
                    BoththrowsStreamExn::e(_exn) => fbthrift::ResultType::Error,
                }
            }
        }

        impl ::std::convert::From<crate::types::FooEx> for BoththrowsStreamExn {
            fn from(exn: crate::types::FooEx) -> Self {
                BoththrowsStreamExn::e(exn)
            }
        }

        impl ::std::convert::From<::fbthrift::ApplicationException> for BoththrowsStreamExn {
            fn from(exn: ::fbthrift::ApplicationException) -> Self {
                BoththrowsStreamExn::ApplicationException(exn)
            }
        }

        impl ::fbthrift::GetTType for BoththrowsStreamExn {
            const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
        }

        impl<P> ::fbthrift::Serialize<P> for BoththrowsStreamExn
        where
            P: ::fbthrift::ProtocolWriter,
        {
            fn write(&self, p: &mut P) {
                p.write_struct_begin("Boththrows");
                match self {
                    BoththrowsStreamExn::Success(inner) => {
                        p.write_field_begin(
                            "Success",
                            ::fbthrift::TType::Stream,
                            0i16,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    BoththrowsStreamExn::e(inner) => {
                        p.write_field_begin(
                            "e",
                            ::fbthrift::TType::Struct,
                            1,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    BoththrowsStreamExn::ApplicationException(_) => panic!(
                        "Bad union Alt field {} id {}",
                        "ApplicationException",
                        -2147483648i32,
                    ),
                }
                p.write_field_stop();
                p.write_struct_end();
            }
        }

        impl<P> ::fbthrift::Deserialize<P> for BoththrowsStreamExn
        where
            P: ::fbthrift::ProtocolReader,
        {
            fn read(p: &mut P) -> ::anyhow::Result<Self> {
                static RETURNS: &[::fbthrift::Field] = &[
                    ::fbthrift::Field::new("Success", ::fbthrift::TType::Stream, 0),
                    ::fbthrift::Field::new("e", ::fbthrift::TType::Struct, 1),
                ];
                let _ = p.read_struct_begin(|_| ())?;
                let mut once = false;
                let mut alt = ::std::option::Option::None;
                loop {
                    let (_, fty, fid) = p.read_field_begin(|_| (), RETURNS)?;
                    match ((fty, fid as ::std::primitive::i32), once) {
                        ((::fbthrift::TType::Stop, _), _) => {
                            p.read_field_end()?;
                            break;
                        }
                        ((::fbthrift::TType::I32, 0i32), false) => {
                            once = true;
                            alt = ::std::option::Option::Some(BoththrowsStreamExn::Success(::fbthrift::Deserialize::read(p)?));
                        }
                        ((::fbthrift::TType::Struct, 1), false) => {
                            once = true;
                            alt = ::std::option::Option::Some(BoththrowsStreamExn::e(::fbthrift::Deserialize::read(p)?));
                        }
                        ((ty, _id), false) => p.skip(ty)?,
                        ((badty, badid), true) => return ::std::result::Result::Err(::std::convert::From::from(
                            ::fbthrift::ApplicationException::new(
                                ::fbthrift::ApplicationExceptionErrorCode::ProtocolError,
                                format!(
                                    "unwanted extra union {} field ty {:?} id {}",
                                    "BoththrowsStreamExn",
                                    badty,
                                    badid,
                                ),
                            )
                        )),
                    }
                    p.read_field_end()?;
                }
                p.read_struct_end()?;
                alt.ok_or_else(||
                    ::fbthrift::ApplicationException::new(
                        ::fbthrift::ApplicationExceptionErrorCode::MissingResult,
                        format!("Empty union {}", "BoththrowsStreamExn"),
                    )
                    .into(),
                )
            }
        }

        #[derive(Clone, Debug)]
        pub enum ResponseandstreamthrowsStreamExn {
            #[doc(hidden)]
            Success(::std::primitive::i32),
            e(crate::types::FooEx),
            ApplicationException(::fbthrift::ApplicationException),
        }

        impl ::fbthrift::ExceptionInfo for ResponseandstreamthrowsStreamExn {
            fn exn_name(&self) -> &'static str {
                match self {
                    ResponseandstreamthrowsStreamExn::Success(_) => panic!("ExceptionInfo::exn_name called on Success"),
                    ResponseandstreamthrowsStreamExn::ApplicationException(aexn) => aexn.exn_name(),
                    ResponseandstreamthrowsStreamExn::e(exn) => exn.exn_name(),
                }
            }

            fn exn_value(&self) -> String {
                match self {
                    ResponseandstreamthrowsStreamExn::Success(_) => panic!("ExceptionInfo::exn_value called on Success"),
                    ResponseandstreamthrowsStreamExn::ApplicationException(aexn) => aexn.exn_value(),
                    ResponseandstreamthrowsStreamExn::e(exn) => exn.exn_value(),
                }
            }

            fn exn_is_declared(&self) -> bool {
                match self {
                    ResponseandstreamthrowsStreamExn::Success(_) => panic!("ExceptionInfo::exn_is_declared called on Success"),
                    ResponseandstreamthrowsStreamExn::ApplicationException(aexn) => aexn.exn_is_declared(),
                    ResponseandstreamthrowsStreamExn::e(exn) => exn.exn_is_declared(),
                }
            }
        }

        impl ::fbthrift::ResultInfo for ResponseandstreamthrowsStreamExn {
            fn result_type(&self) -> ::fbthrift::ResultType {
                match self {
                    ResponseandstreamthrowsStreamExn::Success(_) => ::fbthrift::ResultType::Return,
                    ResponseandstreamthrowsStreamExn::ApplicationException(_aexn) => ::fbthrift::ResultType::Exception,
                    ResponseandstreamthrowsStreamExn::e(_exn) => fbthrift::ResultType::Error,
                }
            }
        }

        impl ::std::convert::From<crate::types::FooEx> for ResponseandstreamthrowsStreamExn {
            fn from(exn: crate::types::FooEx) -> Self {
                ResponseandstreamthrowsStreamExn::e(exn)
            }
        }

        impl ::std::convert::From<::fbthrift::ApplicationException> for ResponseandstreamthrowsStreamExn {
            fn from(exn: ::fbthrift::ApplicationException) -> Self {
                ResponseandstreamthrowsStreamExn::ApplicationException(exn)
            }
        }

        impl ::fbthrift::GetTType for ResponseandstreamthrowsStreamExn {
            const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
        }

        impl<P> ::fbthrift::Serialize<P> for ResponseandstreamthrowsStreamExn
        where
            P: ::fbthrift::ProtocolWriter,
        {
            fn write(&self, p: &mut P) {
                p.write_struct_begin("Responseandstreamthrows");
                match self {
                    ResponseandstreamthrowsStreamExn::Success(inner) => {
                        p.write_field_begin(
                            "Success",
                            ::fbthrift::TType::Stream,
                            0i16,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    ResponseandstreamthrowsStreamExn::e(inner) => {
                        p.write_field_begin(
                            "e",
                            ::fbthrift::TType::Struct,
                            1,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    ResponseandstreamthrowsStreamExn::ApplicationException(_) => panic!(
                        "Bad union Alt field {} id {}",
                        "ApplicationException",
                        -2147483648i32,
                    ),
                }
                p.write_field_stop();
                p.write_struct_end();
            }
        }

        impl<P> ::fbthrift::Deserialize<P> for ResponseandstreamthrowsStreamExn
        where
            P: ::fbthrift::ProtocolReader,
        {
            fn read(p: &mut P) -> ::anyhow::Result<Self> {
                static RETURNS: &[::fbthrift::Field] = &[
                    ::fbthrift::Field::new("Success", ::fbthrift::TType::Stream, 0),
                    ::fbthrift::Field::new("e", ::fbthrift::TType::Struct, 1),
                ];
                let _ = p.read_struct_begin(|_| ())?;
                let mut once = false;
                let mut alt = ::std::option::Option::None;
                loop {
                    let (_, fty, fid) = p.read_field_begin(|_| (), RETURNS)?;
                    match ((fty, fid as ::std::primitive::i32), once) {
                        ((::fbthrift::TType::Stop, _), _) => {
                            p.read_field_end()?;
                            break;
                        }
                        ((::fbthrift::TType::I32, 0i32), false) => {
                            once = true;
                            alt = ::std::option::Option::Some(ResponseandstreamthrowsStreamExn::Success(::fbthrift::Deserialize::read(p)?));
                        }
                        ((::fbthrift::TType::Struct, 1), false) => {
                            once = true;
                            alt = ::std::option::Option::Some(ResponseandstreamthrowsStreamExn::e(::fbthrift::Deserialize::read(p)?));
                        }
                        ((ty, _id), false) => p.skip(ty)?,
                        ((badty, badid), true) => return ::std::result::Result::Err(::std::convert::From::from(
                            ::fbthrift::ApplicationException::new(
                                ::fbthrift::ApplicationExceptionErrorCode::ProtocolError,
                                format!(
                                    "unwanted extra union {} field ty {:?} id {}",
                                    "ResponseandstreamthrowsStreamExn",
                                    badty,
                                    badid,
                                ),
                            )
                        )),
                    }
                    p.read_field_end()?;
                }
                p.read_struct_end()?;
                alt.ok_or_else(||
                    ::fbthrift::ApplicationException::new(
                        ::fbthrift::ApplicationExceptionErrorCode::MissingResult,
                        format!("Empty union {}", "ResponseandstreamthrowsStreamExn"),
                    )
                    .into(),
                )
            }
        }
        #[derive(Clone, Debug)]
        pub enum ResponseandstreamthrowsExn {
            #[doc(hidden)]
            Success(::std::primitive::i32),
            e(crate::types::FooEx),
            ApplicationException(::fbthrift::ApplicationException),
        }


        impl ::fbthrift::ExceptionInfo for ResponseandstreamthrowsExn {
            fn exn_name(&self) -> &'static str {
                match self {
                    ResponseandstreamthrowsExn::Success(_) => panic!("ExceptionInfo::exn_name called on Success"),
                    ResponseandstreamthrowsExn::ApplicationException(aexn) => aexn.exn_name(),
                    ResponseandstreamthrowsExn::e(exn) => exn.exn_name(),
                }
            }

            fn exn_value(&self) -> String {
                match self {
                    ResponseandstreamthrowsExn::Success(_) => panic!("ExceptionInfo::exn_value called on Success"),
                    ResponseandstreamthrowsExn::ApplicationException(aexn) => aexn.exn_value(),
                    ResponseandstreamthrowsExn::e(exn) => exn.exn_value(),
                }
            }

            fn exn_is_declared(&self) -> bool {
                match self {
                    ResponseandstreamthrowsExn::Success(_) => panic!("ExceptionInfo::exn_is_declared called on Success"),
                    ResponseandstreamthrowsExn::ApplicationException(aexn) => aexn.exn_is_declared(),
                    ResponseandstreamthrowsExn::e(exn) => exn.exn_is_declared(),
                }
            }
        }

        impl ::fbthrift::ResultInfo for ResponseandstreamthrowsExn {
            fn result_type(&self) -> ::fbthrift::ResultType {
                match self {
                    ResponseandstreamthrowsExn::Success(_) => ::fbthrift::ResultType::Return,
                    ResponseandstreamthrowsExn::ApplicationException(_aexn) => ::fbthrift::ResultType::Exception,
                    ResponseandstreamthrowsExn::e(_exn) => fbthrift::ResultType::Error,
                }
            }
        }

        impl ::std::convert::From<crate::types::FooEx> for ResponseandstreamthrowsExn {
            fn from(exn: crate::types::FooEx) -> Self {
                ResponseandstreamthrowsExn::e(exn)
            }
        }

        impl ::std::convert::From<::fbthrift::ApplicationException> for ResponseandstreamthrowsExn {
            fn from(exn: ::fbthrift::ApplicationException) -> Self {
                ResponseandstreamthrowsExn::ApplicationException(exn)
            }
        }

        impl ::fbthrift::GetTType for ResponseandstreamthrowsExn {
            const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
        }

        impl<P> ::fbthrift::Serialize<P> for ResponseandstreamthrowsExn
        where
            P: ::fbthrift::ProtocolWriter,
        {
            fn write(&self, p: &mut P) {
                p.write_struct_begin("Responseandstreamthrows");
                match self {
                    ResponseandstreamthrowsExn::Success(inner) => {
                        p.write_field_begin(
                            "Success",
                            ::fbthrift::TType::I32,
                            0i16,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    ResponseandstreamthrowsExn::e(inner) => {
                        p.write_field_begin(
                            "e",
                            ::fbthrift::TType::Struct,
                            1,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    ResponseandstreamthrowsExn::ApplicationException(_) => panic!(
                        "Bad union Alt field {} id {}",
                        "ApplicationException",
                        -2147483648i32,
                    ),
                }
                p.write_field_stop();
                p.write_struct_end();
            }
        }

        impl<P> ::fbthrift::Deserialize<P> for ResponseandstreamthrowsExn
        where
            P: ::fbthrift::ProtocolReader,
        {
            fn read(p: &mut P) -> ::anyhow::Result<Self> {
                static RETURNS: &[::fbthrift::Field] = &[
                    ::fbthrift::Field::new("Success", ::fbthrift::TType::Stream, 0),
                    ::fbthrift::Field::new("e", ::fbthrift::TType::Struct, 1),
                ];
                let _ = p.read_struct_begin(|_| ())?;
                let mut once = false;
                let mut alt = ::std::option::Option::None;
                loop {
                    let (_, fty, fid) = p.read_field_begin(|_| (), RETURNS)?;
                    match ((fty, fid as ::std::primitive::i32), once) {
                        ((::fbthrift::TType::Stop, _), _) => {
                            p.read_field_end()?;
                            break;
                        }
                        ((::fbthrift::TType::I32, 0i32), false) => {
                            once = true;
                            alt = ::std::option::Option::Some(ResponseandstreamthrowsExn::Success(::fbthrift::Deserialize::read(p)?));
                        }
                        ((::fbthrift::TType::Struct, 1), false) => {
                            once = true;
                            alt = ::std::option::Option::Some(ResponseandstreamthrowsExn::e(::fbthrift::Deserialize::read(p)?));
                        }
                        ((ty, _id), false) => p.skip(ty)?,
                        ((badty, badid), true) => return ::std::result::Result::Err(::std::convert::From::from(
                            ::fbthrift::ApplicationException::new(
                                ::fbthrift::ApplicationExceptionErrorCode::ProtocolError,
                                format!(
                                    "unwanted extra union {} field ty {:?} id {}",
                                    "ResponseandstreamthrowsExn",
                                    badty,
                                    badid,
                                ),
                            )
                        )),
                    }
                    p.read_field_end()?;
                }
                p.read_struct_end()?;
                alt.ok_or_else(||
                    ::fbthrift::ApplicationException::new(
                        ::fbthrift::ApplicationExceptionErrorCode::MissingResult,
                        format!("Empty union {}", "ResponseandstreamthrowsExn"),
                    )
                    .into(),
                )
            }
        }

        #[derive(Clone, Debug)]
        pub enum ReturnstreamFastStreamExn {
            #[doc(hidden)]
            Success(::std::primitive::i32),
            ApplicationException(::fbthrift::ApplicationException),
        }

        impl ::std::convert::From<::fbthrift::ApplicationException> for ReturnstreamFastStreamExn {
            fn from(exn: ::fbthrift::ApplicationException) -> Self {
                ReturnstreamFastStreamExn::ApplicationException(exn)
            }
        }

        impl ::fbthrift::GetTType for ReturnstreamFastStreamExn {
            const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
        }

        impl<P> ::fbthrift::Serialize<P> for ReturnstreamFastStreamExn
        where
            P: ::fbthrift::ProtocolWriter,
        {
            fn write(&self, p: &mut P) {
                p.write_struct_begin("ReturnstreamFast");
                match self {
                    ReturnstreamFastStreamExn::Success(inner) => {
                        p.write_field_begin(
                            "Success",
                            ::fbthrift::TType::Stream,
                            0i16,
                        );
                        inner.write(p);
                        p.write_field_end();
                    }
                    ReturnstreamFastStreamExn::ApplicationException(_) => panic!(
                        "Bad union Alt field {} id {}",
                        "ApplicationException",
                        -2147483648i32,
                    ),
                }
                p.write_field_stop();
                p.write_struct_end();
            }
        }

        impl<P> ::fbthrift::Deserialize<P> for ReturnstreamFastStreamExn
        where
            P: ::fbthrift::ProtocolReader,
        {
            fn read(p: &mut P) -> ::anyhow::Result<Self> {
                static RETURNS: &[::fbthrift::Field] = &[
                    ::fbthrift::Field::new("Success", ::fbthrift::TType::Stream, 0),
                ];
                let _ = p.read_struct_begin(|_| ())?;
                let mut once = false;
                let mut alt = ::std::option::Option::None;
                loop {
                    let (_, fty, fid) = p.read_field_begin(|_| (), RETURNS)?;
                    match ((fty, fid as ::std::primitive::i32), once) {
                        ((::fbthrift::TType::Stop, _), _) => {
                            p.read_field_end()?;
                            break;
                        }
                        ((::fbthrift::TType::I32, 0i32), false) => {
                            once = true;
                            alt = ::std::option::Option::Some(ReturnstreamFastStreamExn::Success(::fbthrift::Deserialize::read(p)?));
                        }
                        ((ty, _id), false) => p.skip(ty)?,
                        ((badty, badid), true) => return ::std::result::Result::Err(::std::convert::From::from(
                            ::fbthrift::ApplicationException::new(
                                ::fbthrift::ApplicationExceptionErrorCode::ProtocolError,
                                format!(
                                    "unwanted extra union {} field ty {:?} id {}",
                                    "ReturnstreamFastStreamExn",
                                    badty,
                                    badid,
                                ),
                            )
                        )),
                    }
                    p.read_field_end()?;
                }
                p.read_struct_end()?;
                alt.ok_or_else(||
                    ::fbthrift::ApplicationException::new(
                        ::fbthrift::ApplicationExceptionErrorCode::MissingResult,
                        format!("Empty union {}", "ReturnstreamFastStreamExn"),
                    )
                    .into(),
                )
            }
        }

    }
}

/// Client implementation for each service in `module`.
pub mod client {

    pub struct PubSubStreamingServiceImpl<P, T, S = ::fbthrift::NoopSpawner> {
        transport: T,
        _phantom: ::std::marker::PhantomData<fn() -> (P, S)>,
    }

    impl<P, T, S> PubSubStreamingServiceImpl<P, T, S>
    where
        P: ::fbthrift::Protocol,
        T: ::fbthrift::Transport,
        P::Frame: ::fbthrift::Framing<DecBuf = ::fbthrift::FramingDecoded<T>>,
        ::fbthrift::ProtocolEncoded<P>: ::fbthrift::BufMutExt<Final = ::fbthrift::FramingEncodedFinal<T>>,
        P::Deserializer: ::std::marker::Send,
        S: ::fbthrift::help::Spawner,
    {
        pub fn new(
            transport: T,
        ) -> Self {
            Self {
                transport,
                _phantom: ::std::marker::PhantomData,
            }
        }

        pub fn transport(&self) -> &T {
            &self.transport
        }


        fn _returnstream_impl(
            &self,
            arg_i32_from: ::std::primitive::i32,
            arg_i32_to: ::std::primitive::i32,
            rpc_options: T::RpcOptions,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::ReturnstreamStreamError>> + ::std::marker::Send + 'static >>, crate::errors::pub_sub_streaming_service::ReturnstreamError>> + ::std::marker::Send + 'static>> {
            use ::const_cstr::const_cstr;
            use ::futures::future::FutureExt as _;
            use ::tracing::Instrument as _;
            use ::futures::StreamExt as _;
            use ::fbthrift::Deserialize as _;

            const_cstr! {
                SERVICE_NAME = "PubSubStreamingService";
                METHOD_NAME = "PubSubStreamingService.returnstream";
            }
            let args = self::Args_PubSubStreamingService_returnstream {
                i32_from: arg_i32_from,
                i32_to: arg_i32_to,
                _phantom: ::std::marker::PhantomData,
            };

            let request_env = match ::fbthrift::help::serialize_request_envelope::<P, _>("returnstream", &args) {
                ::std::result::Result::Ok(res) => res,
                ::std::result::Result::Err(err) => return ::futures::future::err(err.into()).boxed(),
            };

            let call_stream = self.transport()
                .call_stream(SERVICE_NAME.as_cstr(), METHOD_NAME.as_cstr(), request_env, rpc_options)
                .instrument(::tracing::trace_span!("call_stream", method = "PubSubStreamingService.returnstream"));

            async move {
                let (_initial, stream) = call_stream.await?;

                let new_stream = stream.then(|item_res| {
                    async move {
                        match item_res {
                            ::std::result::Result::Err(err) =>
                                ::std::result::Result::Err(crate::errors::pub_sub_streaming_service::ReturnstreamStreamError::from(err)),
                            ::std::result::Result::Ok(item_enc) => {
                                let res = S::spawn(move || {
                                    let mut de = P::deserializer(item_enc);
                                    crate::services::pub_sub_streaming_service::ReturnstreamStreamExn::read(&mut de)
                                }).await?;

                                let item: ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::ReturnstreamStreamError> =
                                    ::std::convert::From::from(res);
                                item
                            }
                        }
                    }
                })
                .boxed();

                ::std::result::Result::Ok(new_stream)
            }
            .instrument(::tracing::info_span!("PubSubStreamingService.returnstream"))
            .boxed()
        }

        fn _streamthrows_impl(
            &self,
            arg_foo: ::std::primitive::i32,
            rpc_options: T::RpcOptions,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::StreamthrowsStreamError>> + ::std::marker::Send + 'static >>, crate::errors::pub_sub_streaming_service::StreamthrowsError>> + ::std::marker::Send + 'static>> {
            use ::const_cstr::const_cstr;
            use ::futures::future::FutureExt as _;
            use ::tracing::Instrument as _;
            use ::futures::StreamExt as _;
            use ::fbthrift::Deserialize as _;

            const_cstr! {
                SERVICE_NAME = "PubSubStreamingService";
                METHOD_NAME = "PubSubStreamingService.streamthrows";
            }
            let args = self::Args_PubSubStreamingService_streamthrows {
                foo: arg_foo,
                _phantom: ::std::marker::PhantomData,
            };

            let request_env = match ::fbthrift::help::serialize_request_envelope::<P, _>("streamthrows", &args) {
                ::std::result::Result::Ok(res) => res,
                ::std::result::Result::Err(err) => return ::futures::future::err(err.into()).boxed(),
            };

            let call_stream = self.transport()
                .call_stream(SERVICE_NAME.as_cstr(), METHOD_NAME.as_cstr(), request_env, rpc_options)
                .instrument(::tracing::trace_span!("call_stream", method = "PubSubStreamingService.streamthrows"));

            async move {
                let (_initial, stream) = call_stream.await?;

                let new_stream = stream.then(|item_res| {
                    async move {
                        match item_res {
                            ::std::result::Result::Err(err) =>
                                ::std::result::Result::Err(crate::errors::pub_sub_streaming_service::StreamthrowsStreamError::from(err)),
                            ::std::result::Result::Ok(item_enc) => {
                                let res = S::spawn(move || {
                                    let mut de = P::deserializer(item_enc);
                                    crate::services::pub_sub_streaming_service::StreamthrowsStreamExn::read(&mut de)
                                }).await?;

                                let item: ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::StreamthrowsStreamError> =
                                    ::std::convert::From::from(res);
                                item
                            }
                        }
                    }
                })
                .boxed();

                ::std::result::Result::Ok(new_stream)
            }
            .instrument(::tracing::info_span!("PubSubStreamingService.streamthrows"))
            .boxed()
        }

        fn _boththrows_impl(
            &self,
            arg_foo: ::std::primitive::i32,
            rpc_options: T::RpcOptions,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::BoththrowsStreamError>> + ::std::marker::Send + 'static >>, crate::errors::pub_sub_streaming_service::BoththrowsError>> + ::std::marker::Send + 'static>> {
            use ::const_cstr::const_cstr;
            use ::futures::future::FutureExt as _;
            use ::tracing::Instrument as _;
            use ::futures::StreamExt as _;
            use ::fbthrift::Deserialize as _;

            const_cstr! {
                SERVICE_NAME = "PubSubStreamingService";
                METHOD_NAME = "PubSubStreamingService.boththrows";
            }
            let args = self::Args_PubSubStreamingService_boththrows {
                foo: arg_foo,
                _phantom: ::std::marker::PhantomData,
            };

            let request_env = match ::fbthrift::help::serialize_request_envelope::<P, _>("boththrows", &args) {
                ::std::result::Result::Ok(res) => res,
                ::std::result::Result::Err(err) => return ::futures::future::err(err.into()).boxed(),
            };

            let call_stream = self.transport()
                .call_stream(SERVICE_NAME.as_cstr(), METHOD_NAME.as_cstr(), request_env, rpc_options)
                .instrument(::tracing::trace_span!("call_stream", method = "PubSubStreamingService.boththrows"));

            async move {
                let (_initial, stream) = call_stream.await?;

                let new_stream = stream.then(|item_res| {
                    async move {
                        match item_res {
                            ::std::result::Result::Err(err) =>
                                ::std::result::Result::Err(crate::errors::pub_sub_streaming_service::BoththrowsStreamError::from(err)),
                            ::std::result::Result::Ok(item_enc) => {
                                let res = S::spawn(move || {
                                    let mut de = P::deserializer(item_enc);
                                    crate::services::pub_sub_streaming_service::BoththrowsStreamExn::read(&mut de)
                                }).await?;

                                let item: ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::BoththrowsStreamError> =
                                    ::std::convert::From::from(res);
                                item
                            }
                        }
                    }
                })
                .boxed();

                ::std::result::Result::Ok(new_stream)
            }
            .instrument(::tracing::info_span!("PubSubStreamingService.boththrows"))
            .boxed()
        }

        fn _responseandstreamthrows_impl(
            &self,
            arg_foo: ::std::primitive::i32,
            rpc_options: T::RpcOptions,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<(::std::primitive::i32, ::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::ResponseandstreamthrowsStreamError>> + ::std::marker::Send + 'static >>), crate::errors::pub_sub_streaming_service::ResponseandstreamthrowsError>> + ::std::marker::Send + 'static>> {
            use ::const_cstr::const_cstr;
            use ::futures::future::FutureExt as _;
            use ::tracing::Instrument as _;
            use ::futures::StreamExt as _;
            use ::fbthrift::Deserialize as _;

            const_cstr! {
                SERVICE_NAME = "PubSubStreamingService";
                METHOD_NAME = "PubSubStreamingService.responseandstreamthrows";
            }
            let args = self::Args_PubSubStreamingService_responseandstreamthrows {
                foo: arg_foo,
                _phantom: ::std::marker::PhantomData,
            };

            let request_env = match ::fbthrift::help::serialize_request_envelope::<P, _>("responseandstreamthrows", &args) {
                ::std::result::Result::Ok(res) => res,
                ::std::result::Result::Err(err) => return ::futures::future::err(err.into()).boxed(),
            };

            let call_stream = self.transport()
                .call_stream(SERVICE_NAME.as_cstr(), METHOD_NAME.as_cstr(), request_env, rpc_options)
                .instrument(::tracing::trace_span!("call_stream", method = "PubSubStreamingService.responseandstreamthrows"));

            async move {
                let (_initial, stream) = call_stream.await?;

                let new_stream = stream.then(|item_res| {
                    async move {
                        match item_res {
                            ::std::result::Result::Err(err) =>
                                ::std::result::Result::Err(crate::errors::pub_sub_streaming_service::ResponseandstreamthrowsStreamError::from(err)),
                            ::std::result::Result::Ok(item_enc) => {
                                let res = S::spawn(move || {
                                    let mut de = P::deserializer(item_enc);
                                    crate::services::pub_sub_streaming_service::ResponseandstreamthrowsStreamExn::read(&mut de)
                                }).await?;

                                let item: ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::ResponseandstreamthrowsStreamError> =
                                    ::std::convert::From::from(res);
                                item
                            }
                        }
                    }
                })
                .boxed();

                let de = P::deserializer(_initial);
                let res: crate::services::pub_sub_streaming_service::ResponseandstreamthrowsExn =
                    ::fbthrift::help::async_deserialize_response_envelope::<P, _, S>(de).await?.0?;

                let initial: ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::ResponseandstreamthrowsError> =
                    ::std::convert::From::from(res);
                initial.map(move |initial| (initial, new_stream))
            }
            .instrument(::tracing::info_span!("PubSubStreamingService.responseandstreamthrows"))
            .boxed()
        }

        fn _returnstreamFast_impl(
            &self,
            arg_i32_from: ::std::primitive::i32,
            arg_i32_to: ::std::primitive::i32,
            rpc_options: T::RpcOptions,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::ReturnstreamFastStreamError>> + ::std::marker::Send + 'static >>, crate::errors::pub_sub_streaming_service::ReturnstreamFastError>> + ::std::marker::Send + 'static>> {
            use ::const_cstr::const_cstr;
            use ::futures::future::FutureExt as _;
            use ::tracing::Instrument as _;
            use ::futures::StreamExt as _;
            use ::fbthrift::Deserialize as _;

            const_cstr! {
                SERVICE_NAME = "PubSubStreamingService";
                METHOD_NAME = "PubSubStreamingService.returnstreamFast";
            }
            let args = self::Args_PubSubStreamingService_returnstreamFast {
                i32_from: arg_i32_from,
                i32_to: arg_i32_to,
                _phantom: ::std::marker::PhantomData,
            };

            let request_env = match ::fbthrift::help::serialize_request_envelope::<P, _>("returnstreamFast", &args) {
                ::std::result::Result::Ok(res) => res,
                ::std::result::Result::Err(err) => return ::futures::future::err(err.into()).boxed(),
            };

            let call_stream = self.transport()
                .call_stream(SERVICE_NAME.as_cstr(), METHOD_NAME.as_cstr(), request_env, rpc_options)
                .instrument(::tracing::trace_span!("call_stream", method = "PubSubStreamingService.returnstreamFast"));

            async move {
                let (_initial, stream) = call_stream.await?;

                let new_stream = stream.then(|item_res| {
                    async move {
                        match item_res {
                            ::std::result::Result::Err(err) =>
                                ::std::result::Result::Err(crate::errors::pub_sub_streaming_service::ReturnstreamFastStreamError::from(err)),
                            ::std::result::Result::Ok(item_enc) => {
                                let res = S::spawn(move || {
                                    let mut de = P::deserializer(item_enc);
                                    crate::services::pub_sub_streaming_service::ReturnstreamFastStreamExn::read(&mut de)
                                }).await?;

                                let item: ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::ReturnstreamFastStreamError> =
                                    ::std::convert::From::from(res);
                                item
                            }
                        }
                    }
                })
                .boxed();

                ::std::result::Result::Ok(new_stream)
            }
            .instrument(::tracing::info_span!("PubSubStreamingService.returnstreamFast"))
            .boxed()
        }
    }

    pub trait PubSubStreamingService: ::std::marker::Send {
        fn returnstream(
            &self,
            arg_i32_from: ::std::primitive::i32,
            arg_i32_to: ::std::primitive::i32,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::ReturnstreamStreamError>> + ::std::marker::Send + 'static >>, crate::errors::pub_sub_streaming_service::ReturnstreamError>> + ::std::marker::Send + 'static>>;

        fn streamthrows(
            &self,
            arg_foo: ::std::primitive::i32,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::StreamthrowsStreamError>> + ::std::marker::Send + 'static >>, crate::errors::pub_sub_streaming_service::StreamthrowsError>> + ::std::marker::Send + 'static>>;

        fn boththrows(
            &self,
            arg_foo: ::std::primitive::i32,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::BoththrowsStreamError>> + ::std::marker::Send + 'static >>, crate::errors::pub_sub_streaming_service::BoththrowsError>> + ::std::marker::Send + 'static>>;

        fn responseandstreamthrows(
            &self,
            arg_foo: ::std::primitive::i32,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<(::std::primitive::i32, ::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::ResponseandstreamthrowsStreamError>> + ::std::marker::Send + 'static >>), crate::errors::pub_sub_streaming_service::ResponseandstreamthrowsError>> + ::std::marker::Send + 'static>>;

        fn returnstreamFast(
            &self,
            arg_i32_from: ::std::primitive::i32,
            arg_i32_to: ::std::primitive::i32,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::ReturnstreamFastStreamError>> + ::std::marker::Send + 'static >>, crate::errors::pub_sub_streaming_service::ReturnstreamFastError>> + ::std::marker::Send + 'static>>;
    }

    pub trait PubSubStreamingServiceExt<T>: PubSubStreamingService
    where
        T: ::fbthrift::Transport,
    {
        fn returnstream_with_rpc_opts(
            &self,
            arg_i32_from: ::std::primitive::i32,
            arg_i32_to: ::std::primitive::i32,
            rpc_options: T::RpcOptions,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::ReturnstreamStreamError>> + ::std::marker::Send + 'static >>, crate::errors::pub_sub_streaming_service::ReturnstreamError>> + ::std::marker::Send + 'static>>;
        fn streamthrows_with_rpc_opts(
            &self,
            arg_foo: ::std::primitive::i32,
            rpc_options: T::RpcOptions,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::StreamthrowsStreamError>> + ::std::marker::Send + 'static >>, crate::errors::pub_sub_streaming_service::StreamthrowsError>> + ::std::marker::Send + 'static>>;
        fn boththrows_with_rpc_opts(
            &self,
            arg_foo: ::std::primitive::i32,
            rpc_options: T::RpcOptions,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::BoththrowsStreamError>> + ::std::marker::Send + 'static >>, crate::errors::pub_sub_streaming_service::BoththrowsError>> + ::std::marker::Send + 'static>>;
        fn responseandstreamthrows_with_rpc_opts(
            &self,
            arg_foo: ::std::primitive::i32,
            rpc_options: T::RpcOptions,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<(::std::primitive::i32, ::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::ResponseandstreamthrowsStreamError>> + ::std::marker::Send + 'static >>), crate::errors::pub_sub_streaming_service::ResponseandstreamthrowsError>> + ::std::marker::Send + 'static>>;
        fn returnstreamFast_with_rpc_opts(
            &self,
            arg_i32_from: ::std::primitive::i32,
            arg_i32_to: ::std::primitive::i32,
            rpc_options: T::RpcOptions,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::ReturnstreamFastStreamError>> + ::std::marker::Send + 'static >>, crate::errors::pub_sub_streaming_service::ReturnstreamFastError>> + ::std::marker::Send + 'static>>;
    }

    struct Args_PubSubStreamingService_returnstream<'a> {
        i32_from: ::std::primitive::i32,
        i32_to: ::std::primitive::i32,
        _phantom: ::std::marker::PhantomData<&'a ()>,
    }

    impl<'a, P: ::fbthrift::ProtocolWriter> ::fbthrift::Serialize<P> for self::Args_PubSubStreamingService_returnstream<'a> {
        #[inline]
        #[::tracing::instrument(skip_all, level = "trace", name = "serialize_args", fields(method = "PubSubStreamingService.returnstream"))]
        fn write(&self, p: &mut P) {
            p.write_struct_begin("args");
            p.write_field_begin("i32_from", ::fbthrift::TType::I32, 1i16);
            ::fbthrift::Serialize::write(&self.i32_from, p);
            p.write_field_end();
            p.write_field_begin("i32_to", ::fbthrift::TType::I32, 2i16);
            ::fbthrift::Serialize::write(&self.i32_to, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    struct Args_PubSubStreamingService_streamthrows<'a> {
        foo: ::std::primitive::i32,
        _phantom: ::std::marker::PhantomData<&'a ()>,
    }

    impl<'a, P: ::fbthrift::ProtocolWriter> ::fbthrift::Serialize<P> for self::Args_PubSubStreamingService_streamthrows<'a> {
        #[inline]
        #[::tracing::instrument(skip_all, level = "trace", name = "serialize_args", fields(method = "PubSubStreamingService.streamthrows"))]
        fn write(&self, p: &mut P) {
            p.write_struct_begin("args");
            p.write_field_begin("foo", ::fbthrift::TType::I32, 1i16);
            ::fbthrift::Serialize::write(&self.foo, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    struct Args_PubSubStreamingService_boththrows<'a> {
        foo: ::std::primitive::i32,
        _phantom: ::std::marker::PhantomData<&'a ()>,
    }

    impl<'a, P: ::fbthrift::ProtocolWriter> ::fbthrift::Serialize<P> for self::Args_PubSubStreamingService_boththrows<'a> {
        #[inline]
        #[::tracing::instrument(skip_all, level = "trace", name = "serialize_args", fields(method = "PubSubStreamingService.boththrows"))]
        fn write(&self, p: &mut P) {
            p.write_struct_begin("args");
            p.write_field_begin("foo", ::fbthrift::TType::I32, 1i16);
            ::fbthrift::Serialize::write(&self.foo, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    struct Args_PubSubStreamingService_responseandstreamthrows<'a> {
        foo: ::std::primitive::i32,
        _phantom: ::std::marker::PhantomData<&'a ()>,
    }

    impl<'a, P: ::fbthrift::ProtocolWriter> ::fbthrift::Serialize<P> for self::Args_PubSubStreamingService_responseandstreamthrows<'a> {
        #[inline]
        #[::tracing::instrument(skip_all, level = "trace", name = "serialize_args", fields(method = "PubSubStreamingService.responseandstreamthrows"))]
        fn write(&self, p: &mut P) {
            p.write_struct_begin("args");
            p.write_field_begin("foo", ::fbthrift::TType::I32, 1i16);
            ::fbthrift::Serialize::write(&self.foo, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    struct Args_PubSubStreamingService_returnstreamFast<'a> {
        i32_from: ::std::primitive::i32,
        i32_to: ::std::primitive::i32,
        _phantom: ::std::marker::PhantomData<&'a ()>,
    }

    impl<'a, P: ::fbthrift::ProtocolWriter> ::fbthrift::Serialize<P> for self::Args_PubSubStreamingService_returnstreamFast<'a> {
        #[inline]
        #[::tracing::instrument(skip_all, level = "trace", name = "serialize_args", fields(method = "PubSubStreamingService.returnstreamFast"))]
        fn write(&self, p: &mut P) {
            p.write_struct_begin("args");
            p.write_field_begin("i32_from", ::fbthrift::TType::I32, 1i16);
            ::fbthrift::Serialize::write(&self.i32_from, p);
            p.write_field_end();
            p.write_field_begin("i32_to", ::fbthrift::TType::I32, 2i16);
            ::fbthrift::Serialize::write(&self.i32_to, p);
            p.write_field_end();
            p.write_field_stop();
            p.write_struct_end();
        }
    }

    impl<P, T, S> PubSubStreamingService for PubSubStreamingServiceImpl<P, T, S>
    where
        P: ::fbthrift::Protocol,
        T: ::fbthrift::Transport,
        P::Frame: ::fbthrift::Framing<DecBuf = ::fbthrift::FramingDecoded<T>>,
        ::fbthrift::ProtocolEncoded<P>: ::fbthrift::BufMutExt<Final = ::fbthrift::FramingEncodedFinal<T>>,
        P::Deserializer: ::std::marker::Send,
        S: ::fbthrift::help::Spawner,
    {
        fn returnstream(
            &self,
            arg_i32_from: ::std::primitive::i32,
            arg_i32_to: ::std::primitive::i32,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::ReturnstreamStreamError>> + ::std::marker::Send + 'static >>, crate::errors::pub_sub_streaming_service::ReturnstreamError>> + ::std::marker::Send + 'static>> {
            let rpc_options = T::RpcOptions::default();
            self._returnstream_impl(
                arg_i32_from,
                arg_i32_to,
                rpc_options,
            )
        }
        fn streamthrows(
            &self,
            arg_foo: ::std::primitive::i32,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::StreamthrowsStreamError>> + ::std::marker::Send + 'static >>, crate::errors::pub_sub_streaming_service::StreamthrowsError>> + ::std::marker::Send + 'static>> {
            let rpc_options = T::RpcOptions::default();
            self._streamthrows_impl(
                arg_foo,
                rpc_options,
            )
        }
        fn boththrows(
            &self,
            arg_foo: ::std::primitive::i32,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::BoththrowsStreamError>> + ::std::marker::Send + 'static >>, crate::errors::pub_sub_streaming_service::BoththrowsError>> + ::std::marker::Send + 'static>> {
            let rpc_options = T::RpcOptions::default();
            self._boththrows_impl(
                arg_foo,
                rpc_options,
            )
        }
        fn responseandstreamthrows(
            &self,
            arg_foo: ::std::primitive::i32,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<(::std::primitive::i32, ::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::ResponseandstreamthrowsStreamError>> + ::std::marker::Send + 'static >>), crate::errors::pub_sub_streaming_service::ResponseandstreamthrowsError>> + ::std::marker::Send + 'static>> {
            let rpc_options = T::RpcOptions::default();
            self._responseandstreamthrows_impl(
                arg_foo,
                rpc_options,
            )
        }
        fn returnstreamFast(
            &self,
            arg_i32_from: ::std::primitive::i32,
            arg_i32_to: ::std::primitive::i32,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::ReturnstreamFastStreamError>> + ::std::marker::Send + 'static >>, crate::errors::pub_sub_streaming_service::ReturnstreamFastError>> + ::std::marker::Send + 'static>> {
            let rpc_options = T::RpcOptions::default();
            self._returnstreamFast_impl(
                arg_i32_from,
                arg_i32_to,
                rpc_options,
            )
        }
    }

    impl<P, T, S> PubSubStreamingServiceExt<T> for PubSubStreamingServiceImpl<P, T, S>
    where
        P: ::fbthrift::Protocol,
        T: ::fbthrift::Transport,
        P::Frame: ::fbthrift::Framing<DecBuf = ::fbthrift::FramingDecoded<T>>,
        ::fbthrift::ProtocolEncoded<P>: ::fbthrift::BufMutExt<Final = ::fbthrift::FramingEncodedFinal<T>>,
        P::Deserializer: ::std::marker::Send,
        S: ::fbthrift::help::Spawner,
    {
        fn returnstream_with_rpc_opts(
            &self,
            arg_i32_from: ::std::primitive::i32,
            arg_i32_to: ::std::primitive::i32,
            rpc_options: T::RpcOptions,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::ReturnstreamStreamError>> + ::std::marker::Send + 'static >>, crate::errors::pub_sub_streaming_service::ReturnstreamError>> + ::std::marker::Send + 'static>> {
            self._returnstream_impl(
                arg_i32_from,
                arg_i32_to,
                rpc_options,
            )
        }
        fn streamthrows_with_rpc_opts(
            &self,
            arg_foo: ::std::primitive::i32,
            rpc_options: T::RpcOptions,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::StreamthrowsStreamError>> + ::std::marker::Send + 'static >>, crate::errors::pub_sub_streaming_service::StreamthrowsError>> + ::std::marker::Send + 'static>> {
            self._streamthrows_impl(
                arg_foo,
                rpc_options,
            )
        }
        fn boththrows_with_rpc_opts(
            &self,
            arg_foo: ::std::primitive::i32,
            rpc_options: T::RpcOptions,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::BoththrowsStreamError>> + ::std::marker::Send + 'static >>, crate::errors::pub_sub_streaming_service::BoththrowsError>> + ::std::marker::Send + 'static>> {
            self._boththrows_impl(
                arg_foo,
                rpc_options,
            )
        }
        fn responseandstreamthrows_with_rpc_opts(
            &self,
            arg_foo: ::std::primitive::i32,
            rpc_options: T::RpcOptions,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<(::std::primitive::i32, ::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::ResponseandstreamthrowsStreamError>> + ::std::marker::Send + 'static >>), crate::errors::pub_sub_streaming_service::ResponseandstreamthrowsError>> + ::std::marker::Send + 'static>> {
            self._responseandstreamthrows_impl(
                arg_foo,
                rpc_options,
            )
        }
        fn returnstreamFast_with_rpc_opts(
            &self,
            arg_i32_from: ::std::primitive::i32,
            arg_i32_to: ::std::primitive::i32,
            rpc_options: T::RpcOptions,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::ReturnstreamFastStreamError>> + ::std::marker::Send + 'static >>, crate::errors::pub_sub_streaming_service::ReturnstreamFastError>> + ::std::marker::Send + 'static>> {
            self._returnstreamFast_impl(
                arg_i32_from,
                arg_i32_to,
                rpc_options,
            )
        }
    }

    impl<'a, S> PubSubStreamingService for S
    where
        S: ::std::convert::AsRef<dyn PubSubStreamingService + 'a>,
        S: ::std::marker::Send,
    {
        fn returnstream(
            &self,
            arg_i32_from: ::std::primitive::i32,
            arg_i32_to: ::std::primitive::i32,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::ReturnstreamStreamError>> + ::std::marker::Send + 'static >>, crate::errors::pub_sub_streaming_service::ReturnstreamError>> + ::std::marker::Send + 'static>> {
            self.as_ref().returnstream(
                arg_i32_from,
                arg_i32_to,
            )
        }
        fn streamthrows(
            &self,
            arg_foo: ::std::primitive::i32,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::StreamthrowsStreamError>> + ::std::marker::Send + 'static >>, crate::errors::pub_sub_streaming_service::StreamthrowsError>> + ::std::marker::Send + 'static>> {
            self.as_ref().streamthrows(
                arg_foo,
            )
        }
        fn boththrows(
            &self,
            arg_foo: ::std::primitive::i32,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::BoththrowsStreamError>> + ::std::marker::Send + 'static >>, crate::errors::pub_sub_streaming_service::BoththrowsError>> + ::std::marker::Send + 'static>> {
            self.as_ref().boththrows(
                arg_foo,
            )
        }
        fn responseandstreamthrows(
            &self,
            arg_foo: ::std::primitive::i32,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<(::std::primitive::i32, ::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::ResponseandstreamthrowsStreamError>> + ::std::marker::Send + 'static >>), crate::errors::pub_sub_streaming_service::ResponseandstreamthrowsError>> + ::std::marker::Send + 'static>> {
            self.as_ref().responseandstreamthrows(
                arg_foo,
            )
        }
        fn returnstreamFast(
            &self,
            arg_i32_from: ::std::primitive::i32,
            arg_i32_to: ::std::primitive::i32,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::ReturnstreamFastStreamError>> + ::std::marker::Send + 'static >>, crate::errors::pub_sub_streaming_service::ReturnstreamFastError>> + ::std::marker::Send + 'static>> {
            self.as_ref().returnstreamFast(
                arg_i32_from,
                arg_i32_to,
            )
        }
    }

    impl<'a, S, T> PubSubStreamingServiceExt<T> for S
    where
        S: ::std::convert::AsRef<dyn PubSubStreamingService + 'a>,
        S: ::std::convert::AsRef<dyn PubSubStreamingServiceExt<T> + 'a>,
        S: ::std::marker::Send,
        T: ::fbthrift::Transport,
    {
        fn returnstream_with_rpc_opts(
            &self,
            arg_i32_from: ::std::primitive::i32,
            arg_i32_to: ::std::primitive::i32,
            rpc_options: T::RpcOptions,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::ReturnstreamStreamError>> + ::std::marker::Send + 'static >>, crate::errors::pub_sub_streaming_service::ReturnstreamError>> + ::std::marker::Send + 'static>> {
            <Self as ::std::convert::AsRef<dyn PubSubStreamingServiceExt<T>>>::as_ref(self).returnstream_with_rpc_opts(
                arg_i32_from,
                arg_i32_to,
                rpc_options,
            )
        }
        fn streamthrows_with_rpc_opts(
            &self,
            arg_foo: ::std::primitive::i32,
            rpc_options: T::RpcOptions,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::StreamthrowsStreamError>> + ::std::marker::Send + 'static >>, crate::errors::pub_sub_streaming_service::StreamthrowsError>> + ::std::marker::Send + 'static>> {
            <Self as ::std::convert::AsRef<dyn PubSubStreamingServiceExt<T>>>::as_ref(self).streamthrows_with_rpc_opts(
                arg_foo,
                rpc_options,
            )
        }
        fn boththrows_with_rpc_opts(
            &self,
            arg_foo: ::std::primitive::i32,
            rpc_options: T::RpcOptions,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::BoththrowsStreamError>> + ::std::marker::Send + 'static >>, crate::errors::pub_sub_streaming_service::BoththrowsError>> + ::std::marker::Send + 'static>> {
            <Self as ::std::convert::AsRef<dyn PubSubStreamingServiceExt<T>>>::as_ref(self).boththrows_with_rpc_opts(
                arg_foo,
                rpc_options,
            )
        }
        fn responseandstreamthrows_with_rpc_opts(
            &self,
            arg_foo: ::std::primitive::i32,
            rpc_options: T::RpcOptions,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<(::std::primitive::i32, ::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::ResponseandstreamthrowsStreamError>> + ::std::marker::Send + 'static >>), crate::errors::pub_sub_streaming_service::ResponseandstreamthrowsError>> + ::std::marker::Send + 'static>> {
            <Self as ::std::convert::AsRef<dyn PubSubStreamingServiceExt<T>>>::as_ref(self).responseandstreamthrows_with_rpc_opts(
                arg_foo,
                rpc_options,
            )
        }
        fn returnstreamFast_with_rpc_opts(
            &self,
            arg_i32_from: ::std::primitive::i32,
            arg_i32_to: ::std::primitive::i32,
            rpc_options: T::RpcOptions,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::ReturnstreamFastStreamError>> + ::std::marker::Send + 'static >>, crate::errors::pub_sub_streaming_service::ReturnstreamFastError>> + ::std::marker::Send + 'static>> {
            <Self as ::std::convert::AsRef<dyn PubSubStreamingServiceExt<T>>>::as_ref(self).returnstreamFast_with_rpc_opts(
                arg_i32_from,
                arg_i32_to,
                rpc_options,
            )
        }
    }

    #[derive(Clone)]
    pub struct make_PubSubStreamingService;

    /// To be called by user directly setting up a client. Avoids
    /// needing ClientFactory trait in scope, avoids unidiomatic
    /// make_Trait name.
    ///
    /// ```
    /// # const _: &str = stringify! {
    /// use bgs::client::BuckGraphService;
    ///
    /// let protocol = BinaryProtocol::new();
    /// let transport = HttpClient::new();
    /// let client = <dyn BuckGraphService>::new(protocol, transport);
    /// # };
    /// ```
    impl dyn PubSubStreamingService {
        pub fn new<P, T>(
            protocol: P,
            transport: T,
        ) -> ::std::sync::Arc<impl PubSubStreamingService + ::std::marker::Send + 'static>
        where
            P: ::fbthrift::Protocol<Frame = T>,
            T: ::fbthrift::Transport,
            P::Deserializer: ::std::marker::Send,
        {
            let spawner = ::fbthrift::help::NoopSpawner;
            Self::with_spawner(protocol, transport, spawner)
        }

        pub fn with_spawner<P, T, S>(
            protocol: P,
            transport: T,
            spawner: S,
        ) -> ::std::sync::Arc<impl PubSubStreamingService + ::std::marker::Send + 'static>
        where
            P: ::fbthrift::Protocol<Frame = T>,
            T: ::fbthrift::Transport,
            P::Deserializer: ::std::marker::Send,
            S: ::fbthrift::help::Spawner,
        {
            let _ = protocol;
            let _ = spawner;
            ::std::sync::Arc::new(PubSubStreamingServiceImpl::<P, T, S>::new(transport))
        }
    }

    impl<T> dyn PubSubStreamingServiceExt<T>
    where
        T: ::fbthrift::Transport,
    {
        pub fn new<P>(
            protocol: P,
            transport: T,
        ) -> ::std::sync::Arc<impl PubSubStreamingServiceExt<T> + ::std::marker::Send + 'static>
        where
            P: ::fbthrift::Protocol<Frame = T>,
            P::Deserializer: ::std::marker::Send,
        {
            let spawner = ::fbthrift::help::NoopSpawner;
            Self::with_spawner(protocol, transport, spawner)
        }

        pub fn with_spawner<P, S>(
            protocol: P,
            transport: T,
            spawner: S,
        ) -> ::std::sync::Arc<impl PubSubStreamingServiceExt<T> + ::std::marker::Send + 'static>
        where
            P: ::fbthrift::Protocol<Frame = T>,
            P::Deserializer: ::std::marker::Send,
            S: ::fbthrift::help::Spawner,
        {
            let _ = protocol;
            let _ = spawner;
            ::std::sync::Arc::new(PubSubStreamingServiceImpl::<P, T, S>::new(transport))
        }
    }

    pub type PubSubStreamingServiceDynClient = <make_PubSubStreamingService as ::fbthrift::ClientFactory>::Api;
    pub type PubSubStreamingServiceClient = ::std::sync::Arc<PubSubStreamingServiceDynClient>;

    /// The same thing, but to be called from generic contexts where we are
    /// working with a type parameter `C: ClientFactory` to produce clients.
    impl ::fbthrift::ClientFactory for make_PubSubStreamingService {
        type Api = dyn PubSubStreamingService + ::std::marker::Send + ::std::marker::Sync + 'static;

        fn with_spawner<P, T, S>(protocol: P, transport: T, spawner: S) -> ::std::sync::Arc<Self::Api>
        where
            P: ::fbthrift::Protocol<Frame = T>,
            T: ::fbthrift::Transport + ::std::marker::Sync,
            P::Deserializer: ::std::marker::Send,
            S: ::fbthrift::help::Spawner,
        {
            <dyn PubSubStreamingService>::with_spawner(protocol, transport, spawner)
        }
    }

}

/// Server definitions for `module`.
pub mod server {
    #[::async_trait::async_trait]
    pub trait PubSubStreamingService: ::std::marker::Send + ::std::marker::Sync + 'static {
        // returnstream: server-side streaming not yet implemented
        // streamthrows: server-side streaming not yet implemented
        // boththrows: server-side streaming not yet implemented
        // responseandstreamthrows: server-side streaming not yet implemented
        // returnstreamFast: server-side streaming not yet implemented
    }

    #[::async_trait::async_trait]
    impl<T> PubSubStreamingService for ::std::boxed::Box<T>
    where
        T: PubSubStreamingService + Send + Sync + ?Sized,
    {
        // returnstream: server-side streaming not yet implemented
        // streamthrows: server-side streaming not yet implemented
        // boththrows: server-side streaming not yet implemented
        // responseandstreamthrows: server-side streaming not yet implemented
        // returnstreamFast: server-side streaming not yet implemented
    }

    /// Processor for PubSubStreamingService's methods.
    #[derive(Clone, Debug)]
    pub struct PubSubStreamingServiceProcessor<P, H, R> {
        service: H,
        supa: ::fbthrift::NullServiceProcessor<P, R>,
        _phantom: ::std::marker::PhantomData<(P, H, R)>,
    }


    impl<P, H, R> PubSubStreamingServiceProcessor<P, H, R>
    where
        P: ::fbthrift::Protocol + ::std::marker::Send + ::std::marker::Sync + 'static,
        P::Deserializer: ::std::marker::Send,
        H: PubSubStreamingService,
        R: ::fbthrift::RequestContext<Name = ::std::ffi::CStr> + ::std::marker::Sync,
        <R as ::fbthrift::RequestContext>::ContextStack: ::fbthrift::ContextStack<Name = R::Name, Buffer = ::fbthrift::ProtocolDecoded<P>>
            + ::std::marker::Send + ::std::marker::Sync,
    {
        pub fn new(service: H) -> Self {
            Self {
                service,
                supa: ::fbthrift::NullServiceProcessor::new(),
                _phantom: ::std::marker::PhantomData,
            }
        }

        pub fn into_inner(self) -> H {
            self.service
        }
    }

    #[::async_trait::async_trait]
    impl<P, H, R> ::fbthrift::ServiceProcessor<P> for PubSubStreamingServiceProcessor<P, H, R>
    where
        P: ::fbthrift::Protocol + ::std::marker::Send + ::std::marker::Sync + 'static,
        P::Deserializer: ::std::marker::Send,
        H: PubSubStreamingService,
        P::Frame: ::std::marker::Send + 'static,
        R: ::fbthrift::RequestContext<Name = ::std::ffi::CStr> + ::std::marker::Send + ::std::marker::Sync + 'static,
        <R as ::fbthrift::RequestContext>::ContextStack: ::fbthrift::ContextStack<Name = R::Name, Buffer = ::fbthrift::ProtocolDecoded<P>>
            + ::std::marker::Send + ::std::marker::Sync + 'static
    {
        type RequestContext = R;

        #[inline]
        fn method_idx(&self, name: &[::std::primitive::u8]) -> ::std::result::Result<::std::primitive::usize, ::fbthrift::ApplicationException> {
            match name {
                _ => ::std::result::Result::Err(::fbthrift::ApplicationException::unknown_method()),
            }
        }

        #[allow(clippy::match_single_binding)]
        async fn handle_method(
            &self,
            idx: ::std::primitive::usize,
            _p: &mut P::Deserializer,
            _r: &R,
            _seqid: ::std::primitive::u32,
        ) -> ::anyhow::Result<::fbthrift::ProtocolEncodedFinal<P>> {
            match idx {
                bad => panic!(
                    "{}: unexpected method idx {}",
                    "PubSubStreamingServiceProcessor",
                    bad
                ),
            }
        }

        #[allow(clippy::match_single_binding)]
        #[inline]
        fn create_interaction_idx(&self, name: &str) -> ::anyhow::Result<::std::primitive::usize> {
            match name {
                _ => ::anyhow::bail!("Unknown interaction"),
            }
        }

        #[allow(clippy::match_single_binding)]
        fn handle_create_interaction(
            &self,
            idx: ::std::primitive::usize,
        ) -> ::anyhow::Result<
            ::std::sync::Arc<dyn ::fbthrift::ThriftService<P::Frame, Handler = (), RequestContext = Self::RequestContext> + ::std::marker::Send + 'static>
        > {
            match idx {
                bad => panic!(
                    "{}: unexpected method idx {}",
                    "PubSubStreamingServiceProcessor",
                    bad
                ),
            }
        }
    }

    #[::async_trait::async_trait]
    impl<P, H, R> ::fbthrift::ThriftService<P::Frame> for PubSubStreamingServiceProcessor<P, H, R>
    where
        P: ::fbthrift::Protocol + ::std::marker::Send + ::std::marker::Sync + 'static,
        P::Deserializer: ::std::marker::Send,
        P::Frame: ::std::marker::Send + 'static,
        H: PubSubStreamingService,
        R: ::fbthrift::RequestContext<Name = ::std::ffi::CStr> + ::std::marker::Send + ::std::marker::Sync + 'static,
        <R as ::fbthrift::RequestContext>::ContextStack: ::fbthrift::ContextStack<Name = R::Name, Buffer = ::fbthrift::ProtocolDecoded<P>>
            + ::std::marker::Send + ::std::marker::Sync + 'static
    {
        type Handler = H;
        type RequestContext = R;

        #[tracing::instrument(level="trace", skip_all, fields(service = "PubSubStreamingService"))]
        async fn call(
            &self,
            req: ::fbthrift::ProtocolDecoded<P>,
            req_ctxt: &R,
        ) -> ::anyhow::Result<::fbthrift::ProtocolEncodedFinal<P>> {
            use ::fbthrift::{BufExt as _, ProtocolReader as _, ServiceProcessor as _};
            let mut p = P::deserializer(req);
            let (idx, mty, seqid) = p.read_message_begin(|name| self.method_idx(name))?;
            if mty != ::fbthrift::MessageType::Call {
                return ::std::result::Result::Err(::std::convert::From::from(::fbthrift::ApplicationException::new(
                    ::fbthrift::ApplicationExceptionErrorCode::InvalidMessageType,
                    format!("message type {:?} not handled", mty)
                )));
            }
            let idx = match idx {
                ::std::result::Result::Ok(idx) => idx,
                ::std::result::Result::Err(_) => {
                    let cur = P::into_buffer(p).reset();
                    return self.supa.call(cur, req_ctxt).await;
                }
            };
            let res = self.handle_method(idx, &mut p, req_ctxt, seqid).await?;
            p.read_message_end()?;

            Ok(res)
        }

        fn create_interaction(
            &self,
            name: &str,
        ) -> ::anyhow::Result<
            ::std::sync::Arc<dyn ::fbthrift::ThriftService<P::Frame, Handler = (), RequestContext = R> + ::std::marker::Send + 'static>
        > {
            use ::fbthrift::{ServiceProcessor as _};
            let idx = self.create_interaction_idx(name);
            let idx = match idx {
                ::anyhow::Result::Ok(idx) => idx,
                ::anyhow::Result::Err(_) => {
                    return self.supa.create_interaction(name);
                }
            };
            self.handle_create_interaction(idx)
        }
    }

    /// Construct a new instance of a PubSubStreamingService service.
    ///
    /// This is called when a new instance of a Thrift service Processor
    /// is needed for a particular Thrift protocol.
    #[::tracing::instrument(level="debug", skip_all, fields(proto = ?proto))]
    pub fn make_PubSubStreamingService_server<F, H, R>(
        proto: ::fbthrift::ProtocolID,
        handler: H,
    ) -> ::std::result::Result<::std::boxed::Box<dyn ::fbthrift::ThriftService<F, Handler = H, RequestContext = R> + ::std::marker::Send + 'static>, ::fbthrift::ApplicationException>
    where
        F: ::fbthrift::Framing + ::std::marker::Send + ::std::marker::Sync + 'static,
        H: PubSubStreamingService,
        R: ::fbthrift::RequestContext<Name = ::std::ffi::CStr> + ::std::marker::Send + ::std::marker::Sync + 'static,
        <R as ::fbthrift::RequestContext>::ContextStack: ::fbthrift::ContextStack<Name = R::Name, Buffer = F::DecBuf> + ::std::marker::Send + ::std::marker::Sync + 'static
    {
        match proto {
            ::fbthrift::ProtocolID::BinaryProtocol => {
                ::std::result::Result::Ok(::std::boxed::Box::new(PubSubStreamingServiceProcessor::<::fbthrift::BinaryProtocol<F>, H, R>::new(handler)))
            }
            ::fbthrift::ProtocolID::CompactProtocol => {
                ::std::result::Result::Ok(::std::boxed::Box::new(PubSubStreamingServiceProcessor::<::fbthrift::CompactProtocol<F>, H, R>::new(handler)))
            }
            bad => {
                ::tracing::error!(method = "PubSubStreamingService.", invalid_protocol = ?bad);
                ::std::result::Result::Err(::fbthrift::ApplicationException::invalid_protocol(bad))
            }
        }
    }
}

/// Client mocks. For every service, a struct mock::TheService that implements
/// client::TheService.
///
/// As an example of the generated API, for the following thrift service:
///
/// ```thrift
/// service MyService {
///     FunctionResponse myFunction(
///         1: FunctionRequest request,
///     ) throws {
///         1: StorageException s,
///         2: NotFoundException n,
///     ),
///
///     // other functions
/// }
/// ```
///
/// we would end up with this mock object under crate::mock::MyService:
///
/// ```
/// # const _: &str = stringify! {
/// impl crate::client::MyService for MyService<'mock> {...}
///
/// pub struct MyService<'mock> {
///     pub myFunction: myFunction<'mock>,
///     // ...
/// }
///
/// impl dyn crate::client::MyService {
///     pub fn mock<'mock>() -> MyService<'mock>;
/// }
///
/// impl myFunction<'mock> {
///     // directly return the given success response
///     pub fn ret(&self, value: FunctionResponse);
///
///     // invoke closure to compute success response
///     pub fn mock(
///         &self,
///         mock: impl FnMut(FunctionRequest) -> FunctionResponse + Send + Sync + 'mock,
///     );
///
///     // invoke closure to compute response
///     pub fn mock_result(
///         &self,
///         mock: impl FnMut(FunctionRequest) -> Result<FunctionResponse, crate::services::MyService::MyFunctionExn> + Send + Sync + 'mock,
///     );
///
///     // return one of the function's declared exceptions
///     pub fn throw<E>(&self, exception: E)
///     where
///         E: Clone + Into<crate::services::MyService::MyFunctionExn> + Send + Sync + 'mock;
/// }
///
/// impl From<StorageException> for MyFunctionExn {...}
/// impl From<NotFoundException> for MyFunctionExn {...}
/// # };
/// ```
///
/// The intended usage from a test would be:
///
/// ```
/// # const _: &str = stringify! {
/// use std::sync::Arc;
/// use thrift_if::client::MyService;
///
/// #[test]
/// fn test_my_client() {
///     let mock = Arc::new(<dyn MyService>::mock());
///
///     // directly return a success response
///     let resp = FunctionResponse {...};
///     mock.myFunction.ret(resp);
///
///     // or give a closure to compute the success response
///     mock.myFunction.mock(|request| FunctionResponse {...});
///
///     // or throw one of the function's exceptions
///     mock.myFunction.throw(StorageException::ItFailed);
///
///     // or compute a Result (useful if your exceptions aren't Clone)
///     mock.myFunction.mock_result(|request| Err(...));
///
///     let out = do_the_thing(mock).wait().unwrap();
///     assert!(out.what_i_expected());
/// }
///
/// fn do_the_thing(
///     client: Arc<dyn MyService + Send + Sync + 'static>,
/// ) -> impl Future<Item = Out> {...}
/// # };
/// ```
pub mod mock {
    pub struct PubSubStreamingService<'mock> {
        pub returnstream: r#impl::pub_sub_streaming_service::returnstream<'mock>,
        pub streamthrows: r#impl::pub_sub_streaming_service::streamthrows<'mock>,
        pub boththrows: r#impl::pub_sub_streaming_service::boththrows<'mock>,
        pub responseandstreamthrows: r#impl::pub_sub_streaming_service::responseandstreamthrows<'mock>,
        pub returnstreamFast: r#impl::pub_sub_streaming_service::returnstreamFast<'mock>,
        _marker: ::std::marker::PhantomData<&'mock ()>,
    }

    impl dyn super::client::PubSubStreamingService {
        pub fn mock<'mock>() -> PubSubStreamingService<'mock> {
            PubSubStreamingService {
                returnstream: r#impl::pub_sub_streaming_service::returnstream::unimplemented(),
                streamthrows: r#impl::pub_sub_streaming_service::streamthrows::unimplemented(),
                boththrows: r#impl::pub_sub_streaming_service::boththrows::unimplemented(),
                responseandstreamthrows: r#impl::pub_sub_streaming_service::responseandstreamthrows::unimplemented(),
                returnstreamFast: r#impl::pub_sub_streaming_service::returnstreamFast::unimplemented(),
                _marker: ::std::marker::PhantomData,
            }
        }
    }

    impl<'mock> super::client::PubSubStreamingService for PubSubStreamingService<'mock> {
        fn returnstream(
            &self,
            arg_i32_from: ::std::primitive::i32,
            arg_i32_to: ::std::primitive::i32,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::ReturnstreamStreamError>> + ::std::marker::Send + 'static >>, crate::errors::pub_sub_streaming_service::ReturnstreamError>> + ::std::marker::Send + 'static>> {
            let mut closure = self.returnstream.closure.lock().unwrap();
            let closure: &mut dyn ::std::ops::FnMut(::std::primitive::i32, ::std::primitive::i32) -> _ = &mut **closure;
            ::std::boxed::Box::pin(::futures::future::ready(closure(arg_i32_from.clone(), arg_i32_to.clone())))
        }
        fn streamthrows(
            &self,
            arg_foo: ::std::primitive::i32,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::StreamthrowsStreamError>> + ::std::marker::Send + 'static >>, crate::errors::pub_sub_streaming_service::StreamthrowsError>> + ::std::marker::Send + 'static>> {
            let mut closure = self.streamthrows.closure.lock().unwrap();
            let closure: &mut dyn ::std::ops::FnMut(::std::primitive::i32) -> _ = &mut **closure;
            ::std::boxed::Box::pin(::futures::future::ready(closure(arg_foo.clone())))
        }
        fn boththrows(
            &self,
            arg_foo: ::std::primitive::i32,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::BoththrowsStreamError>> + ::std::marker::Send + 'static >>, crate::errors::pub_sub_streaming_service::BoththrowsError>> + ::std::marker::Send + 'static>> {
            let mut closure = self.boththrows.closure.lock().unwrap();
            let closure: &mut dyn ::std::ops::FnMut(::std::primitive::i32) -> _ = &mut **closure;
            ::std::boxed::Box::pin(::futures::future::ready(closure(arg_foo.clone())))
        }
        fn responseandstreamthrows(
            &self,
            arg_foo: ::std::primitive::i32,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<(::std::primitive::i32, ::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::ResponseandstreamthrowsStreamError>> + ::std::marker::Send + 'static >>), crate::errors::pub_sub_streaming_service::ResponseandstreamthrowsError>> + ::std::marker::Send + 'static>> {
            let mut closure = self.responseandstreamthrows.closure.lock().unwrap();
            let closure: &mut dyn ::std::ops::FnMut(::std::primitive::i32) -> _ = &mut **closure;
            ::std::boxed::Box::pin(::futures::future::ready(closure(arg_foo.clone())))
        }
        fn returnstreamFast(
            &self,
            arg_i32_from: ::std::primitive::i32,
            arg_i32_to: ::std::primitive::i32,
        ) -> ::std::pin::Pin<::std::boxed::Box<dyn ::std::future::Future<Output = ::std::result::Result<::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::ReturnstreamFastStreamError>> + ::std::marker::Send + 'static >>, crate::errors::pub_sub_streaming_service::ReturnstreamFastError>> + ::std::marker::Send + 'static>> {
            let mut closure = self.returnstreamFast.closure.lock().unwrap();
            let closure: &mut dyn ::std::ops::FnMut(::std::primitive::i32, ::std::primitive::i32) -> _ = &mut **closure;
            ::std::boxed::Box::pin(::futures::future::ready(closure(arg_i32_from.clone(), arg_i32_to.clone())))
        }
    }

    mod r#impl {
        pub mod pub_sub_streaming_service {

            pub struct returnstream<'mock> {
                pub(crate) closure: ::std::sync::Mutex<::std::boxed::Box<
                    dyn ::std::ops::FnMut(::std::primitive::i32, ::std::primitive::i32) -> ::std::result::Result<
                        ::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::ReturnstreamStreamError>> + ::std::marker::Send + 'static >>,
                        crate::errors::pub_sub_streaming_service::ReturnstreamError,
                    > + ::std::marker::Send + ::std::marker::Sync + 'mock,
                >>,
            }

            #[allow(clippy::redundant_closure)]
            impl<'mock> returnstream<'mock> {
                pub fn unimplemented() -> Self {
                    returnstream {
                        closure: ::std::sync::Mutex::new(::std::boxed::Box::new(|_: ::std::primitive::i32, _: ::std::primitive::i32| panic!(
                            "{}::{} is not mocked",
                            "PubSubStreamingService",
                            "returnstream",
                        ))),
                    }
                }

                pub fn ret(&self, _value: ::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::ReturnstreamStreamError>> + ::std::marker::Send + 'static >>) {
                    unimplemented!("Mocking streams is not yet implemented, as value isn't cloneable")
                }

                pub fn mock(&self, mut mock: impl ::std::ops::FnMut(::std::primitive::i32, ::std::primitive::i32) -> ::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::ReturnstreamStreamError>> + ::std::marker::Send + 'static >> + ::std::marker::Send + ::std::marker::Sync + 'mock) {
                    let mut closure = self.closure.lock().unwrap();
                    *closure = ::std::boxed::Box::new(move |i32_from, i32_to| ::std::result::Result::Ok(mock(i32_from, i32_to)));
                }

                pub fn mock_result(&self, mut mock: impl ::std::ops::FnMut(::std::primitive::i32, ::std::primitive::i32) -> ::std::result::Result<::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::ReturnstreamStreamError>> + ::std::marker::Send + 'static >>, crate::errors::pub_sub_streaming_service::ReturnstreamError> + ::std::marker::Send + ::std::marker::Sync + 'mock) {
                    let mut closure = self.closure.lock().unwrap();
                    *closure = ::std::boxed::Box::new(move |i32_from, i32_to| mock(i32_from, i32_to));
                }

                pub fn throw<E>(&self, exception: E)
                where
                    E: ::std::convert::Into<crate::errors::pub_sub_streaming_service::ReturnstreamError>,
                    E: ::std::clone::Clone + ::std::marker::Send + ::std::marker::Sync + 'mock,
                {
                    let mut closure = self.closure.lock().unwrap();
                    *closure = ::std::boxed::Box::new(move |_: ::std::primitive::i32, _: ::std::primitive::i32| ::std::result::Result::Err(exception.clone().into()));
                }
            }

            pub struct streamthrows<'mock> {
                pub(crate) closure: ::std::sync::Mutex<::std::boxed::Box<
                    dyn ::std::ops::FnMut(::std::primitive::i32) -> ::std::result::Result<
                        ::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::StreamthrowsStreamError>> + ::std::marker::Send + 'static >>,
                        crate::errors::pub_sub_streaming_service::StreamthrowsError,
                    > + ::std::marker::Send + ::std::marker::Sync + 'mock,
                >>,
            }

            #[allow(clippy::redundant_closure)]
            impl<'mock> streamthrows<'mock> {
                pub fn unimplemented() -> Self {
                    streamthrows {
                        closure: ::std::sync::Mutex::new(::std::boxed::Box::new(|_: ::std::primitive::i32| panic!(
                            "{}::{} is not mocked",
                            "PubSubStreamingService",
                            "streamthrows",
                        ))),
                    }
                }

                pub fn ret(&self, _value: ::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::StreamthrowsStreamError>> + ::std::marker::Send + 'static >>) {
                    unimplemented!("Mocking streams is not yet implemented, as value isn't cloneable")
                }

                pub fn mock(&self, mut mock: impl ::std::ops::FnMut(::std::primitive::i32) -> ::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::StreamthrowsStreamError>> + ::std::marker::Send + 'static >> + ::std::marker::Send + ::std::marker::Sync + 'mock) {
                    let mut closure = self.closure.lock().unwrap();
                    *closure = ::std::boxed::Box::new(move |foo| ::std::result::Result::Ok(mock(foo)));
                }

                pub fn mock_result(&self, mut mock: impl ::std::ops::FnMut(::std::primitive::i32) -> ::std::result::Result<::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::StreamthrowsStreamError>> + ::std::marker::Send + 'static >>, crate::errors::pub_sub_streaming_service::StreamthrowsError> + ::std::marker::Send + ::std::marker::Sync + 'mock) {
                    let mut closure = self.closure.lock().unwrap();
                    *closure = ::std::boxed::Box::new(move |foo| mock(foo));
                }

                pub fn throw<E>(&self, exception: E)
                where
                    E: ::std::convert::Into<crate::errors::pub_sub_streaming_service::StreamthrowsError>,
                    E: ::std::clone::Clone + ::std::marker::Send + ::std::marker::Sync + 'mock,
                {
                    let mut closure = self.closure.lock().unwrap();
                    *closure = ::std::boxed::Box::new(move |_: ::std::primitive::i32| ::std::result::Result::Err(exception.clone().into()));
                }
            }

            pub struct boththrows<'mock> {
                pub(crate) closure: ::std::sync::Mutex<::std::boxed::Box<
                    dyn ::std::ops::FnMut(::std::primitive::i32) -> ::std::result::Result<
                        ::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::BoththrowsStreamError>> + ::std::marker::Send + 'static >>,
                        crate::errors::pub_sub_streaming_service::BoththrowsError,
                    > + ::std::marker::Send + ::std::marker::Sync + 'mock,
                >>,
            }

            #[allow(clippy::redundant_closure)]
            impl<'mock> boththrows<'mock> {
                pub fn unimplemented() -> Self {
                    boththrows {
                        closure: ::std::sync::Mutex::new(::std::boxed::Box::new(|_: ::std::primitive::i32| panic!(
                            "{}::{} is not mocked",
                            "PubSubStreamingService",
                            "boththrows",
                        ))),
                    }
                }

                pub fn ret(&self, _value: ::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::BoththrowsStreamError>> + ::std::marker::Send + 'static >>) {
                    unimplemented!("Mocking streams is not yet implemented, as value isn't cloneable")
                }

                pub fn mock(&self, mut mock: impl ::std::ops::FnMut(::std::primitive::i32) -> ::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::BoththrowsStreamError>> + ::std::marker::Send + 'static >> + ::std::marker::Send + ::std::marker::Sync + 'mock) {
                    let mut closure = self.closure.lock().unwrap();
                    *closure = ::std::boxed::Box::new(move |foo| ::std::result::Result::Ok(mock(foo)));
                }

                pub fn mock_result(&self, mut mock: impl ::std::ops::FnMut(::std::primitive::i32) -> ::std::result::Result<::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::BoththrowsStreamError>> + ::std::marker::Send + 'static >>, crate::errors::pub_sub_streaming_service::BoththrowsError> + ::std::marker::Send + ::std::marker::Sync + 'mock) {
                    let mut closure = self.closure.lock().unwrap();
                    *closure = ::std::boxed::Box::new(move |foo| mock(foo));
                }

                pub fn throw<E>(&self, exception: E)
                where
                    E: ::std::convert::Into<crate::errors::pub_sub_streaming_service::BoththrowsError>,
                    E: ::std::clone::Clone + ::std::marker::Send + ::std::marker::Sync + 'mock,
                {
                    let mut closure = self.closure.lock().unwrap();
                    *closure = ::std::boxed::Box::new(move |_: ::std::primitive::i32| ::std::result::Result::Err(exception.clone().into()));
                }
            }

            pub struct responseandstreamthrows<'mock> {
                pub(crate) closure: ::std::sync::Mutex<::std::boxed::Box<
                    dyn ::std::ops::FnMut(::std::primitive::i32) -> ::std::result::Result<
                        (::std::primitive::i32, ::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::ResponseandstreamthrowsStreamError>> + ::std::marker::Send + 'static >>),
                        crate::errors::pub_sub_streaming_service::ResponseandstreamthrowsError,
                    > + ::std::marker::Send + ::std::marker::Sync + 'mock,
                >>,
            }

            #[allow(clippy::redundant_closure)]
            impl<'mock> responseandstreamthrows<'mock> {
                pub fn unimplemented() -> Self {
                    responseandstreamthrows {
                        closure: ::std::sync::Mutex::new(::std::boxed::Box::new(|_: ::std::primitive::i32| panic!(
                            "{}::{} is not mocked",
                            "PubSubStreamingService",
                            "responseandstreamthrows",
                        ))),
                    }
                }

                pub fn ret(&self, _value: (::std::primitive::i32, ::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::ResponseandstreamthrowsStreamError>> + ::std::marker::Send + 'static >>)) {
                    unimplemented!("Mocking streams is not yet implemented, as value isn't cloneable")
                }

                pub fn mock(&self, mut mock: impl ::std::ops::FnMut(::std::primitive::i32) -> (::std::primitive::i32, ::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::ResponseandstreamthrowsStreamError>> + ::std::marker::Send + 'static >>) + ::std::marker::Send + ::std::marker::Sync + 'mock) {
                    let mut closure = self.closure.lock().unwrap();
                    *closure = ::std::boxed::Box::new(move |foo| ::std::result::Result::Ok(mock(foo)));
                }

                pub fn mock_result(&self, mut mock: impl ::std::ops::FnMut(::std::primitive::i32) -> ::std::result::Result<(::std::primitive::i32, ::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::ResponseandstreamthrowsStreamError>> + ::std::marker::Send + 'static >>), crate::errors::pub_sub_streaming_service::ResponseandstreamthrowsError> + ::std::marker::Send + ::std::marker::Sync + 'mock) {
                    let mut closure = self.closure.lock().unwrap();
                    *closure = ::std::boxed::Box::new(move |foo| mock(foo));
                }

                pub fn throw<E>(&self, exception: E)
                where
                    E: ::std::convert::Into<crate::errors::pub_sub_streaming_service::ResponseandstreamthrowsError>,
                    E: ::std::clone::Clone + ::std::marker::Send + ::std::marker::Sync + 'mock,
                {
                    let mut closure = self.closure.lock().unwrap();
                    *closure = ::std::boxed::Box::new(move |_: ::std::primitive::i32| ::std::result::Result::Err(exception.clone().into()));
                }
            }

            pub struct returnstreamFast<'mock> {
                pub(crate) closure: ::std::sync::Mutex<::std::boxed::Box<
                    dyn ::std::ops::FnMut(::std::primitive::i32, ::std::primitive::i32) -> ::std::result::Result<
                        ::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::ReturnstreamFastStreamError>> + ::std::marker::Send + 'static >>,
                        crate::errors::pub_sub_streaming_service::ReturnstreamFastError,
                    > + ::std::marker::Send + ::std::marker::Sync + 'mock,
                >>,
            }

            #[allow(clippy::redundant_closure)]
            impl<'mock> returnstreamFast<'mock> {
                pub fn unimplemented() -> Self {
                    returnstreamFast {
                        closure: ::std::sync::Mutex::new(::std::boxed::Box::new(|_: ::std::primitive::i32, _: ::std::primitive::i32| panic!(
                            "{}::{} is not mocked",
                            "PubSubStreamingService",
                            "returnstreamFast",
                        ))),
                    }
                }

                pub fn ret(&self, _value: ::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::ReturnstreamFastStreamError>> + ::std::marker::Send + 'static >>) {
                    unimplemented!("Mocking streams is not yet implemented, as value isn't cloneable")
                }

                pub fn mock(&self, mut mock: impl ::std::ops::FnMut(::std::primitive::i32, ::std::primitive::i32) -> ::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::ReturnstreamFastStreamError>> + ::std::marker::Send + 'static >> + ::std::marker::Send + ::std::marker::Sync + 'mock) {
                    let mut closure = self.closure.lock().unwrap();
                    *closure = ::std::boxed::Box::new(move |i32_from, i32_to| ::std::result::Result::Ok(mock(i32_from, i32_to)));
                }

                pub fn mock_result(&self, mut mock: impl ::std::ops::FnMut(::std::primitive::i32, ::std::primitive::i32) -> ::std::result::Result<::std::pin::Pin<::std::boxed::Box<dyn ::futures::stream::Stream< Item = ::std::result::Result<::std::primitive::i32, crate::errors::pub_sub_streaming_service::ReturnstreamFastStreamError>> + ::std::marker::Send + 'static >>, crate::errors::pub_sub_streaming_service::ReturnstreamFastError> + ::std::marker::Send + ::std::marker::Sync + 'mock) {
                    let mut closure = self.closure.lock().unwrap();
                    *closure = ::std::boxed::Box::new(move |i32_from, i32_to| mock(i32_from, i32_to));
                }

                pub fn throw<E>(&self, exception: E)
                where
                    E: ::std::convert::Into<crate::errors::pub_sub_streaming_service::ReturnstreamFastError>,
                    E: ::std::clone::Clone + ::std::marker::Send + ::std::marker::Sync + 'mock,
                {
                    let mut closure = self.closure.lock().unwrap();
                    *closure = ::std::boxed::Box::new(move |_: ::std::primitive::i32, _: ::std::primitive::i32| ::std::result::Result::Err(exception.clone().into()));
                }
            }
        }
    }
}

/// Error return types.
pub mod errors {
    /// Errors for PubSubStreamingService functions.
    pub mod pub_sub_streaming_service {

        pub trait AsFooEx {
            fn as_foo_ex(&self) -> Option<&crate::types::FooEx>;
        }

        impl AsFooEx for ::anyhow::Error {
            fn as_foo_ex(&self) -> Option<&crate::types::FooEx> {
                for cause in self.chain() {
                    if let Some(BoththrowsError::e(e)) = cause.downcast_ref::<BoththrowsError>() {
                        return Some(e);
                    }
                    if let Some(ResponseandstreamthrowsError::e(e)) = cause.downcast_ref::<ResponseandstreamthrowsError>() {
                        return Some(e);
                    }
                }
                None
            }
        }

        pub type ReturnstreamError = ::fbthrift::NonthrowingFunctionError;

        pub type ReturnstreamStreamError = ::fbthrift::NonthrowingFunctionError;

        impl ::std::convert::From<crate::services::pub_sub_streaming_service::ReturnstreamStreamExn> for
            ::std::result::Result<::std::primitive::i32, ReturnstreamStreamError>
        {
            fn from(e: crate::services::pub_sub_streaming_service::ReturnstreamStreamExn) -> Self {
                match e {
                    crate::services::pub_sub_streaming_service::ReturnstreamStreamExn::Success(res) =>
                        ::std::result::Result::Ok(res),
                    crate::services::pub_sub_streaming_service::ReturnstreamStreamExn::ApplicationException(aexn) =>
                        ::std::result::Result::Err(ReturnstreamStreamError::ApplicationException(aexn)),
                }
            }
        }

        pub type StreamthrowsError = ::fbthrift::NonthrowingFunctionError;

        #[derive(Debug, ::thiserror::Error)]
        pub enum StreamthrowsStreamError {
            #[error("PubSubStreamingService::streamthrows stream failed with {0:?}")]
            e(crate::types::FooEx),
            #[error("Application exception: {0:?}")]
            ApplicationException(::fbthrift::types::ApplicationException),
            #[error("{0}")]
            ThriftError(::anyhow::Error),
        }

        impl ::std::convert::From<crate::types::FooEx> for StreamthrowsStreamError {
            fn from(e: crate::types::FooEx) -> Self {
                StreamthrowsStreamError::e(e)
            }
        }

        impl ::std::convert::From<::anyhow::Error> for StreamthrowsStreamError {
            fn from(err: ::anyhow::Error) -> Self {
                StreamthrowsStreamError::ThriftError(err)
            }
        }

        impl ::std::convert::From<::fbthrift::ApplicationException> for StreamthrowsStreamError {
            fn from(ae: ::fbthrift::ApplicationException) -> Self {
                StreamthrowsStreamError::ApplicationException(ae)
            }
        }

        impl ::std::convert::From<crate::services::pub_sub_streaming_service::StreamthrowsStreamExn> for
            ::std::result::Result<::std::primitive::i32, StreamthrowsStreamError>
        {
            fn from(e: crate::services::pub_sub_streaming_service::StreamthrowsStreamExn) -> Self {
                match e {
                    crate::services::pub_sub_streaming_service::StreamthrowsStreamExn::Success(res) =>
                        ::std::result::Result::Ok(res),
                    crate::services::pub_sub_streaming_service::StreamthrowsStreamExn::ApplicationException(aexn) =>
                        ::std::result::Result::Err(StreamthrowsStreamError::ApplicationException(aexn)),
                    crate::services::pub_sub_streaming_service::StreamthrowsStreamExn::e(exn) =>
                        ::std::result::Result::Err(StreamthrowsStreamError::e(exn)),
                }
            }
        }

        /// Errors for boththrows (client side).
        #[derive(Debug, ::thiserror::Error)]
        pub enum BoththrowsError {
            #[error("PubSubStreamingService::boththrows failed with {0:?}")]
            e(crate::types::FooEx),
            #[error("Application exception: {0:?}")]
            ApplicationException(::fbthrift::types::ApplicationException),
            #[error("{0}")]
            ThriftError(::anyhow::Error),
        }

        impl ::std::convert::From<crate::types::FooEx> for BoththrowsError {
            fn from(e: crate::types::FooEx) -> Self {
                BoththrowsError::e(e)
            }
        }

        impl AsFooEx for BoththrowsError {
            fn as_foo_ex(&self) -> Option<&crate::types::FooEx> {
                match self {
                    BoththrowsError::e(inner) => Some(inner),
                    _ => None,
                }
            }
        }

        impl ::std::convert::From<::anyhow::Error> for BoththrowsError {
            fn from(err: ::anyhow::Error) -> Self {
                BoththrowsError::ThriftError(err)
            }
        }

        impl ::std::convert::From<::fbthrift::ApplicationException> for BoththrowsError {
            fn from(ae: ::fbthrift::ApplicationException) -> Self {
                BoththrowsError::ApplicationException(ae)
            }
        }
        #[derive(Debug, ::thiserror::Error)]
        pub enum BoththrowsStreamError {
            #[error("PubSubStreamingService::boththrows stream failed with {0:?}")]
            e(crate::types::FooEx),
            #[error("Application exception: {0:?}")]
            ApplicationException(::fbthrift::types::ApplicationException),
            #[error("{0}")]
            ThriftError(::anyhow::Error),
        }

        impl ::std::convert::From<crate::types::FooEx> for BoththrowsStreamError {
            fn from(e: crate::types::FooEx) -> Self {
                BoththrowsStreamError::e(e)
            }
        }

        impl ::std::convert::From<::anyhow::Error> for BoththrowsStreamError {
            fn from(err: ::anyhow::Error) -> Self {
                BoththrowsStreamError::ThriftError(err)
            }
        }

        impl ::std::convert::From<::fbthrift::ApplicationException> for BoththrowsStreamError {
            fn from(ae: ::fbthrift::ApplicationException) -> Self {
                BoththrowsStreamError::ApplicationException(ae)
            }
        }

        impl ::std::convert::From<crate::services::pub_sub_streaming_service::BoththrowsStreamExn> for
            ::std::result::Result<::std::primitive::i32, BoththrowsStreamError>
        {
            fn from(e: crate::services::pub_sub_streaming_service::BoththrowsStreamExn) -> Self {
                match e {
                    crate::services::pub_sub_streaming_service::BoththrowsStreamExn::Success(res) =>
                        ::std::result::Result::Ok(res),
                    crate::services::pub_sub_streaming_service::BoththrowsStreamExn::ApplicationException(aexn) =>
                        ::std::result::Result::Err(BoththrowsStreamError::ApplicationException(aexn)),
                    crate::services::pub_sub_streaming_service::BoththrowsStreamExn::e(exn) =>
                        ::std::result::Result::Err(BoththrowsStreamError::e(exn)),
                }
            }
        }

        /// Errors for responseandstreamthrows (client side).
        #[derive(Debug, ::thiserror::Error)]
        pub enum ResponseandstreamthrowsError {
            #[error("PubSubStreamingService::responseandstreamthrows failed with {0:?}")]
            e(crate::types::FooEx),
            #[error("Application exception: {0:?}")]
            ApplicationException(::fbthrift::types::ApplicationException),
            #[error("{0}")]
            ThriftError(::anyhow::Error),
        }

        impl ::std::convert::From<crate::types::FooEx> for ResponseandstreamthrowsError {
            fn from(e: crate::types::FooEx) -> Self {
                ResponseandstreamthrowsError::e(e)
            }
        }

        impl AsFooEx for ResponseandstreamthrowsError {
            fn as_foo_ex(&self) -> Option<&crate::types::FooEx> {
                match self {
                    ResponseandstreamthrowsError::e(inner) => Some(inner),
                    _ => None,
                }
            }
        }

        impl ::std::convert::From<::anyhow::Error> for ResponseandstreamthrowsError {
            fn from(err: ::anyhow::Error) -> Self {
                ResponseandstreamthrowsError::ThriftError(err)
            }
        }

        impl ::std::convert::From<::fbthrift::ApplicationException> for ResponseandstreamthrowsError {
            fn from(ae: ::fbthrift::ApplicationException) -> Self {
                ResponseandstreamthrowsError::ApplicationException(ae)
            }
        }
        impl ::std::convert::From<crate::services::pub_sub_streaming_service::ResponseandstreamthrowsExn> for
            ::std::result::Result<::std::primitive::i32, ResponseandstreamthrowsError>
        {
            fn from(e: crate::services::pub_sub_streaming_service::ResponseandstreamthrowsExn) -> Self {
                match e {
                    crate::services::pub_sub_streaming_service::ResponseandstreamthrowsExn::Success(res) =>
                        ::std::result::Result::Ok(res),
                    crate::services::pub_sub_streaming_service::ResponseandstreamthrowsExn::ApplicationException(aexn) =>
                        ::std::result::Result::Err(ResponseandstreamthrowsError::ApplicationException(aexn)),
                    crate::services::pub_sub_streaming_service::ResponseandstreamthrowsExn::e(exn) =>
                        ::std::result::Result::Err(ResponseandstreamthrowsError::e(exn)),
                }
            }
        }

        #[derive(Debug, ::thiserror::Error)]
        pub enum ResponseandstreamthrowsStreamError {
            #[error("PubSubStreamingService::responseandstreamthrows stream failed with {0:?}")]
            e(crate::types::FooEx),
            #[error("Application exception: {0:?}")]
            ApplicationException(::fbthrift::types::ApplicationException),
            #[error("{0}")]
            ThriftError(::anyhow::Error),
        }

        impl ::std::convert::From<crate::types::FooEx> for ResponseandstreamthrowsStreamError {
            fn from(e: crate::types::FooEx) -> Self {
                ResponseandstreamthrowsStreamError::e(e)
            }
        }

        impl ::std::convert::From<::anyhow::Error> for ResponseandstreamthrowsStreamError {
            fn from(err: ::anyhow::Error) -> Self {
                ResponseandstreamthrowsStreamError::ThriftError(err)
            }
        }

        impl ::std::convert::From<::fbthrift::ApplicationException> for ResponseandstreamthrowsStreamError {
            fn from(ae: ::fbthrift::ApplicationException) -> Self {
                ResponseandstreamthrowsStreamError::ApplicationException(ae)
            }
        }

        impl ::std::convert::From<crate::services::pub_sub_streaming_service::ResponseandstreamthrowsStreamExn> for
            ::std::result::Result<::std::primitive::i32, ResponseandstreamthrowsStreamError>
        {
            fn from(e: crate::services::pub_sub_streaming_service::ResponseandstreamthrowsStreamExn) -> Self {
                match e {
                    crate::services::pub_sub_streaming_service::ResponseandstreamthrowsStreamExn::Success(res) =>
                        ::std::result::Result::Ok(res),
                    crate::services::pub_sub_streaming_service::ResponseandstreamthrowsStreamExn::ApplicationException(aexn) =>
                        ::std::result::Result::Err(ResponseandstreamthrowsStreamError::ApplicationException(aexn)),
                    crate::services::pub_sub_streaming_service::ResponseandstreamthrowsStreamExn::e(exn) =>
                        ::std::result::Result::Err(ResponseandstreamthrowsStreamError::e(exn)),
                }
            }
        }

        pub type ReturnstreamFastError = ::fbthrift::NonthrowingFunctionError;

        pub type ReturnstreamFastStreamError = ::fbthrift::NonthrowingFunctionError;

        impl ::std::convert::From<crate::services::pub_sub_streaming_service::ReturnstreamFastStreamExn> for
            ::std::result::Result<::std::primitive::i32, ReturnstreamFastStreamError>
        {
            fn from(e: crate::services::pub_sub_streaming_service::ReturnstreamFastStreamExn) -> Self {
                match e {
                    crate::services::pub_sub_streaming_service::ReturnstreamFastStreamExn::Success(res) =>
                        ::std::result::Result::Ok(res),
                    crate::services::pub_sub_streaming_service::ReturnstreamFastStreamExn::ApplicationException(aexn) =>
                        ::std::result::Result::Err(ReturnstreamFastStreamError::ApplicationException(aexn)),
                }
            }
        }

    }

}
