/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#include <src/gen-py3/module/clients_wrapper.h>

namespace cpp2 {


folly::SemiFuture<apache::thrift::ClientBufferedStream<int32_t>>
PubSubStreamingServiceClientWrapper::returnstream(
    apache::thrift::RpcOptions& rpcOptions,
    int32_t arg_i32_from,
    int32_t arg_i32_to) {
  auto* client = static_cast<::cpp2::PubSubStreamingServiceAsyncClient*>(async_client_.get());
  return client->header_semifuture_returnstream(
    rpcOptions,
    arg_i32_from,
    arg_i32_to
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

folly::SemiFuture<apache::thrift::ClientBufferedStream<int32_t>>
PubSubStreamingServiceClientWrapper::streamthrows(
    apache::thrift::RpcOptions& rpcOptions,
    int32_t arg_foo) {
  auto* client = static_cast<::cpp2::PubSubStreamingServiceAsyncClient*>(async_client_.get());
  return client->header_semifuture_streamthrows(
    rpcOptions,
    arg_foo
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

folly::SemiFuture<apache::thrift::ClientBufferedStream<int32_t>>
PubSubStreamingServiceClientWrapper::boththrows(
    apache::thrift::RpcOptions& rpcOptions,
    int32_t arg_foo) {
  auto* client = static_cast<::cpp2::PubSubStreamingServiceAsyncClient*>(async_client_.get());
  return client->header_semifuture_boththrows(
    rpcOptions,
    arg_foo
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

folly::SemiFuture<apache::thrift::ResponseAndClientBufferedStream<int32_t,int32_t>>
PubSubStreamingServiceClientWrapper::responseandstreamthrows(
    apache::thrift::RpcOptions& rpcOptions,
    int32_t arg_foo) {
  auto* client = static_cast<::cpp2::PubSubStreamingServiceAsyncClient*>(async_client_.get());
  return client->header_semifuture_responseandstreamthrows(
    rpcOptions,
    arg_foo
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

folly::SemiFuture<apache::thrift::ClientBufferedStream<int32_t>>
PubSubStreamingServiceClientWrapper::returnstreamFast(
    apache::thrift::RpcOptions& rpcOptions,
    int32_t arg_i32_from,
    int32_t arg_i32_to) {
  auto* client = static_cast<::cpp2::PubSubStreamingServiceAsyncClient*>(async_client_.get());
  return client->header_semifuture_returnstreamFast(
    rpcOptions,
    arg_i32_from,
    arg_i32_to
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

} // namespace cpp2
