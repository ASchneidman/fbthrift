
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT
 *  @generated
 *
 */

#include <folly/python/import.h>
#include <thrift/lib/python/capi/iobuf.h>
#include <thrift/lib/python/types.h>

#include <thrift/compiler/test/fixtures/basic-python-capi/src/gen-python/module/thrift_types_api.h>
#include <thrift/compiler/test/fixtures/basic-python-capi/src/gen-python/module/thrift_types_capi.h>

namespace apache {
namespace thrift {
namespace python {
namespace capi {
namespace {
bool ensure_module_imported() {
  static ::folly::python::import_cache_nocapture import((
      ::import_test__fixtures__basic_python_capi__module__thrift_types_capi));
  return import();
}
} // namespace

ExtractorResult<::test::fixtures::basic-python-capi::MyStruct>
Extractor<::test::fixtures::basic-python-capi::MyStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::basic-python-capi::MyStruct>(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__basic_python_capi__module__MyStruct(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::basic-python-capi::MyStruct>(
        "Thrift serialize error: MyStruct");
  }
  return detail::deserialize_iobuf<::test::fixtures::basic-python-capi::MyStruct>(std::move(val));
}

int Extractor<::test::fixtures::basic-python-capi::MyStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  int result =
      can_extract__test__fixtures__basic_python_capi__module__MyStruct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyStruct");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::basic-python-capi::MyStruct>::operator()(
    ::test::fixtures::basic-python-capi::MyStruct&& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__basic_python_capi__module__MyStruct(
      detail::serialize_to_iobuf(std::move(val)));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}

ExtractorResult<::test::fixtures::basic-python-capi::MyDataItem>
Extractor<::test::fixtures::basic-python-capi::MyDataItem>::operator()(PyObject* obj) {
  ::test::fixtures::basic-python-capi::MyDataItem cpp;
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a MyDataItem");
      }
      return extractorError<::test::fixtures::basic-python-capi::MyDataItem>(
          "Marshal error: MyDataItem");
  }
  return cpp;
}

int Extractor<::test::fixtures::basic-python-capi::MyDataItem>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  int result =
      can_extract__test__fixtures__basic_python_capi__module__MyDataItem(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyDataItem");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::basic-python-capi::MyDataItem>::operator()(
    ::test::fixtures::basic-python-capi::MyDataItem&& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__basic_python_capi__module__MyDataItem(
      detail::serialize_to_iobuf(std::move(val)));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}

ExtractorResult<::test::fixtures::basic-python-capi::TransitiveDoubler>
Extractor<::test::fixtures::basic-python-capi::TransitiveDoubler>::operator()(PyObject* obj) {
  ::test::fixtures::basic-python-capi::TransitiveDoubler cpp;
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a TransitiveDoubler");
      }
      return extractorError<::test::fixtures::basic-python-capi::TransitiveDoubler>(
          "Marshal error: TransitiveDoubler");
  }
  return cpp;
}

int Extractor<::test::fixtures::basic-python-capi::TransitiveDoubler>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  int result =
      can_extract__test__fixtures__basic_python_capi__module__TransitiveDoubler(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: TransitiveDoubler");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::basic-python-capi::TransitiveDoubler>::operator()(
    ::test::fixtures::basic-python-capi::TransitiveDoubler&& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__basic_python_capi__module__TransitiveDoubler(
      detail::serialize_adapted_to_iobuf<::thrift::test::lib::StructDoubler>(std::move(val)));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}

ExtractorResult<::test::fixtures::basic-python-capi::DoubledPair>
Extractor<::test::fixtures::basic-python-capi::DoubledPair>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::basic-python-capi::DoubledPair>(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__basic_python_capi__module__DoubledPair(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::basic-python-capi::DoubledPair>(
        "Thrift serialize error: DoubledPair");
  }
  return detail::deserialize_iobuf_to_adapted<
      ::test::fixtures::basic-python-capi::DoubledPair, ::thrift::test::lib::StructDoubler
    >(std::move(val));
}

int Extractor<::test::fixtures::basic-python-capi::DoubledPair>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  int result =
      can_extract__test__fixtures__basic_python_capi__module__DoubledPair(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: DoubledPair");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::basic-python-capi::DoubledPair>::operator()(
    ::test::fixtures::basic-python-capi::DoubledPair&& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__basic_python_capi__module__DoubledPair(
      detail::serialize_adapted_to_iobuf<::thrift::test::lib::StructDoubler>(std::move(val)));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}

ExtractorResult<::test::fixtures::basic-python-capi::StringPair>
Extractor<::test::fixtures::basic-python-capi::StringPair>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::basic-python-capi::StringPair>(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__basic_python_capi__module__StringPair(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::basic-python-capi::StringPair>(
        "Thrift serialize error: StringPair");
  }
  return detail::deserialize_iobuf<::test::fixtures::basic-python-capi::StringPair>(std::move(val));
}

int Extractor<::test::fixtures::basic-python-capi::StringPair>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  int result =
      can_extract__test__fixtures__basic_python_capi__module__StringPair(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: StringPair");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::basic-python-capi::StringPair>::operator()(
    ::test::fixtures::basic-python-capi::StringPair&& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__basic_python_capi__module__StringPair(
      detail::serialize_to_iobuf(std::move(val)));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}

ExtractorResult<::test::fixtures::basic-python-capi::EmptyStruct>
Extractor<::test::fixtures::basic-python-capi::EmptyStruct>::operator()(PyObject* obj) {
  ::test::fixtures::basic-python-capi::EmptyStruct cpp;
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a EmptyStruct");
      }
      return extractorError<::test::fixtures::basic-python-capi::EmptyStruct>(
          "Marshal error: EmptyStruct");
  }
  return cpp;
}

int Extractor<::test::fixtures::basic-python-capi::EmptyStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  int result =
      can_extract__test__fixtures__basic_python_capi__module__EmptyStruct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: EmptyStruct");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::basic-python-capi::EmptyStruct>::operator()(
    ::test::fixtures::basic-python-capi::EmptyStruct&& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__basic_python_capi__module__EmptyStruct(
      detail::serialize_to_iobuf(std::move(val)));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}

ExtractorResult<::test::fixtures::basic-python-capi::PrimitiveStruct>
Extractor<::test::fixtures::basic-python-capi::PrimitiveStruct>::operator()(PyObject* obj) {
  ::test::fixtures::basic-python-capi::PrimitiveStruct cpp;
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a PrimitiveStruct");
      }
      return extractorError<::test::fixtures::basic-python-capi::PrimitiveStruct>(
          "Marshal error: PrimitiveStruct");
  }
  PyObject* fbThriftData = getThriftData(obj);
  std::optional<std::string_view> error;
  Extractor<bool>{}.extractInto(
      cpp.booly(),
      PyTuple_GET_ITEM(fbThriftData, 0 + 1),
      error);
  Extractor<int8_t>{}.extractInto(
      cpp.charry(),
      PyTuple_GET_ITEM(fbThriftData, 1 + 1),
      error);
  Extractor<int16_t>{}.extractInto(
      cpp.shortay(),
      PyTuple_GET_ITEM(fbThriftData, 2 + 1),
      error);
  Extractor<int32_t>{}.extractInto(
      cpp.inty(),
      PyTuple_GET_ITEM(fbThriftData, 3 + 1),
      error);
  Extractor<int64_t>{}.extractInto(
      cpp.longy(),
      PyTuple_GET_ITEM(fbThriftData, 4 + 1),
      error);
  Extractor<float>{}.extractInto(
      cpp.floaty(),
      PyTuple_GET_ITEM(fbThriftData, 5 + 1),
      error);
  Extractor<double>{}.extractInto(
      cpp.dubby(),
      PyTuple_GET_ITEM(fbThriftData, 6 + 1),
      error);
  Extractor<Bytes>{}.extractInto(
      cpp.stringy(),
      PyTuple_GET_ITEM(fbThriftData, 7 + 1),
      error);
  Extractor<Bytes>{}.extractInto(
      cpp.bytey(),
      PyTuple_GET_ITEM(fbThriftData, 8 + 1),
      error);
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}

int Extractor<::test::fixtures::basic-python-capi::PrimitiveStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  int result =
      can_extract__test__fixtures__basic_python_capi__module__PrimitiveStruct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: PrimitiveStruct");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::basic-python-capi::PrimitiveStruct>::operator()(
    ::test::fixtures::basic-python-capi::PrimitiveStruct&& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__basic_python_capi__module__PrimitiveStruct(
      detail::serialize_to_iobuf(std::move(val)));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}

ExtractorResult<::test::fixtures::basic-python-capi::ListStruct>
Extractor<::test::fixtures::basic-python-capi::ListStruct>::operator()(PyObject* obj) {
  ::test::fixtures::basic-python-capi::ListStruct cpp;
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a ListStruct");
      }
      return extractorError<::test::fixtures::basic-python-capi::ListStruct>(
          "Marshal error: ListStruct");
  }
  PyObject* fbThriftData = getThriftData(obj);
  std::optional<std::string_view> error;
  Extractor<list<bool>>{}.extractInto(
      cpp.boolz(),
      PyTuple_GET_ITEM(fbThriftData, 0 + 1),
      error);
  Extractor<list<int64_t>>{}.extractInto(
      cpp.intz(),
      PyTuple_GET_ITEM(fbThriftData, 1 + 1),
      error);
  Extractor<list<Bytes>>{}.extractInto(
      cpp.stringz(),
      PyTuple_GET_ITEM(fbThriftData, 2 + 1),
      error);
  Extractor<list<Bytes, std::deque<native_t<Bytes>>>>{}.extractInto(
      cpp.encoded(),
      PyTuple_GET_ITEM(fbThriftData, 3 + 1),
      error);
  Extractor<list<int64_t, std::deque<uint64_t>>>{}.extractInto(
      cpp.uidz(),
      PyTuple_GET_ITEM(fbThriftData, 4 + 1),
      error);
  Extractor<list<list<double>>>{}.extractInto(
      cpp.matrix(),
      PyTuple_GET_ITEM(fbThriftData, 5 + 1),
      error);
  Extractor<list<list<int8_t, folly::small_vector<folly::small_vector<uint8_t>>::value_type>, folly::small_vector<folly::small_vector<uint8_t>>>>{}.extractInto(
      cpp.ucharz(),
      PyTuple_GET_ITEM(fbThriftData, 6 + 1),
      error);
  Extractor<list<list<list<int8_t, folly::fbvector<folly::fbvector<folly::fbvector<uint8_t>>>::value_type::value_type>, folly::fbvector<folly::fbvector<folly::fbvector<uint8_t>>>::value_type>, folly::fbvector<folly::fbvector<folly::fbvector<uint8_t>>>>>{}.extractInto(
      cpp.voxels(),
      PyTuple_GET_ITEM(fbThriftData, 7 + 1),
      error);
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}

int Extractor<::test::fixtures::basic-python-capi::ListStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  int result =
      can_extract__test__fixtures__basic_python_capi__module__ListStruct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: ListStruct");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::basic-python-capi::ListStruct>::operator()(
    ::test::fixtures::basic-python-capi::ListStruct&& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__basic_python_capi__module__ListStruct(
      detail::serialize_to_iobuf(std::move(val)));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}

ExtractorResult<::test::fixtures::basic-python-capi::MyUnion>
Extractor<::test::fixtures::basic-python-capi::MyUnion>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::basic-python-capi::MyUnion>(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__basic_python_capi__module__MyUnion(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::basic-python-capi::MyUnion>(
        "Thrift serialize error: MyUnion");
  }
  return detail::deserialize_iobuf<::test::fixtures::basic-python-capi::MyUnion>(std::move(val));
}

int Extractor<::test::fixtures::basic-python-capi::MyUnion>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  int result =
      can_extract__test__fixtures__basic_python_capi__module__MyUnion(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyUnion");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::basic-python-capi::MyUnion>::operator()(
    ::test::fixtures::basic-python-capi::MyUnion&& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__basic_python_capi__module__MyUnion(
      detail::serialize_to_iobuf(std::move(val)));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}

ExtractorResult<::test::fixtures::basic-python-capi::MyEnum>
Extractor<::test::fixtures::basic-python-capi::MyEnum>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::basic-python-capi::MyEnum>(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  int64_t val = extract__test__fixtures__basic_python_capi__module__MyEnum(obj);
  if (val == -1 && PyErr_Occurred()) {
    return extractorError<::test::fixtures::basic-python-capi::MyEnum>(
        "Error getting python int value: MyEnum");
  }
  return static_cast<::test::fixtures::basic-python-capi::MyEnum>(val);
}

int Extractor<::test::fixtures::basic-python-capi::MyEnum>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  int result =
      can_extract__test__fixtures__basic_python_capi__module__MyEnum(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyEnum");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::basic-python-capi::MyEnum>::operator()(
    ::test::fixtures::basic-python-capi::MyEnum&& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__basic_python_capi__module__MyEnum(
      static_cast<int64_t>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}

} // namespace capi
} // namespace python
} // namespace thrift
} // namespace apache
