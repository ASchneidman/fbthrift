
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT
 *  @generated
 *
 */

#include <folly/python/import.h>
#include <thrift/lib/python/capi/iobuf.h>
#include <thrift/lib/python/types.h>

#include <thrift/compiler/test/fixtures/basic-python-capi/src/gen-python/module/thrift_types_api.h>
#include <thrift/compiler/test/fixtures/basic-python-capi/src/gen-python/module/thrift_types_capi.h>

#include "thrift/compiler/test/fixtures/basic-python-capi/src/gen-python/serialized_dep/thrift_types_capi.h"
#include "thrift/compiler/test/fixtures/basic-python-capi/src/gen-python/thrift_dep/thrift_types_capi.h"
#include "thrift/lib/thrift/gen-python/patch/thrift_types_capi.h"

namespace apache {
namespace thrift {
namespace python {
namespace capi {
namespace {
bool ensure_module_imported() {
  static ::folly::python::import_cache_nocapture import((
      ::import_test__fixtures__basic_python_capi__module__thrift_types_capi));
  return import();
}
} // namespace

ExtractorResult<::test::fixtures::basic-python-capi::MyStruct>
Extractor<::test::fixtures::basic-python-capi::MyStruct>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a MyStruct");
      }
      return extractorError<::test::fixtures::basic-python-capi::MyStruct>(
          "Marshal error: MyStruct");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::test::fixtures::basic-python-capi::MyStruct>>{}(*fbThriftData);
}

ExtractorResult<::test::fixtures::basic-python-capi::MyStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::basic-python-capi::MyStruct>>::operator()(PyObject* fbThriftData) {
  ::test::fixtures::basic-python-capi::MyStruct cpp;
  std::optional<std::string_view> error;
  Extractor<int64_t>{}.extractInto(
      cpp.inty(),
      PyTuple_GET_ITEM(fbThriftData, 0 + 1),
      error);
  Extractor<Bytes>{}.extractInto(
      cpp.stringy(),
      PyTuple_GET_ITEM(fbThriftData, 1 + 1),
      error);
  Extractor<apache::thrift::python::capi::ComposedStruct<::test::fixtures::basic-python-capi::MyDataItem>>{}.extractInto(
      cpp.myItemy(),
      PyTuple_GET_ITEM(fbThriftData, 2 + 1),
      error);
  Extractor<apache::thrift::python::capi::ComposedEnum<::test::fixtures::basic-python-capi::MyEnum>>{}.extractInto(
      cpp.myEnumy(),
      PyTuple_GET_ITEM(fbThriftData, 3 + 1),
      error);
  Extractor<bool>{}.extractInto(
      cpp.boulet(),
      PyTuple_GET_ITEM(fbThriftData, 4 + 1),
      error);
  Extractor<list<float>>{}.extractInto(
      cpp.floatListy(),
      PyTuple_GET_ITEM(fbThriftData, 5 + 1),
      error);
  Extractor<map<Bytes, Bytes>>{}.extractInto(
      cpp.strMappy(),
      PyTuple_GET_ITEM(fbThriftData, 6 + 1),
      error);
  Extractor<set<int32_t>>{}.extractInto(
      cpp.intSetty(),
      PyTuple_GET_ITEM(fbThriftData, 7 + 1),
      error);
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::test::fixtures::basic-python-capi::MyStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  int result =
      can_extract__test__fixtures__basic_python_capi__module__MyStruct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyStruct");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::basic-python-capi::MyStruct>::operator()(
    const ::test::fixtures::basic-python-capi::MyStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::MyStruct>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__test__fixtures__basic_python_capi__module__MyStruct(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::MyStruct>>::operator()(
    FOLLY_MAYBE_UNUSED const ::test::fixtures::basic-python-capi::MyStruct& val) {
  StrongRef fbthrift_data(createStructTuple(8));
  StrongRef _fbthrift__inty(Constructor<int64_t>{}.constructFrom(val.inty()));
  if (!_fbthrift__inty || setStructField(*fbthrift_data, 0, *_fbthrift__inty) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__stringy(Constructor<Bytes>{}.constructFrom(val.stringy()));
  if (!_fbthrift__stringy || setStructField(*fbthrift_data, 1, *_fbthrift__stringy) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__myItemy(Constructor<apache::thrift::python::capi::ComposedStruct<::test::fixtures::basic-python-capi::MyDataItem>>{}.constructFrom(val.myItemy()));
  if (!_fbthrift__myItemy || setStructField(*fbthrift_data, 2, *_fbthrift__myItemy) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__myEnumy(Constructor<apache::thrift::python::capi::ComposedEnum<::test::fixtures::basic-python-capi::MyEnum>>{}.constructFrom(val.myEnumy()));
  if (!_fbthrift__myEnumy || setStructField(*fbthrift_data, 3, *_fbthrift__myEnumy) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__booly(Constructor<bool>{}.constructFrom(val.boulet()));
  if (!_fbthrift__booly || setStructField(*fbthrift_data, 4, *_fbthrift__booly) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__floatListy(Constructor<list<float>>{}.constructFrom(val.floatListy()));
  if (!_fbthrift__floatListy || setStructField(*fbthrift_data, 5, *_fbthrift__floatListy) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__strMappy(Constructor<map<Bytes, Bytes>>{}.constructFrom(val.strMappy()));
  if (!_fbthrift__strMappy || setStructField(*fbthrift_data, 6, *_fbthrift__strMappy) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__intSetty(Constructor<set<int32_t>>{}.constructFrom(val.intSetty()));
  if (!_fbthrift__intSetty || setStructField(*fbthrift_data, 7, *_fbthrift__intSetty) == -1) {
    return nullptr;
  }
  return std::move(fbthrift_data).release();
}


ExtractorResult<::test::fixtures::basic-python-capi::MyDataItem>
Extractor<::test::fixtures::basic-python-capi::MyDataItem>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a MyDataItem");
      }
      return extractorError<::test::fixtures::basic-python-capi::MyDataItem>(
          "Marshal error: MyDataItem");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::test::fixtures::basic-python-capi::MyDataItem>>{}(*fbThriftData);
}

ExtractorResult<::test::fixtures::basic-python-capi::MyDataItem>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::basic-python-capi::MyDataItem>>::operator()(PyObject* fbThriftData) {
  ::test::fixtures::basic-python-capi::MyDataItem cpp;
  std::optional<std::string_view> error;
  Extractor<Bytes>{}.extractInto(
      cpp.s(),
      PyTuple_GET_ITEM(fbThriftData, 0 + 1),
      error);
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::test::fixtures::basic-python-capi::MyDataItem>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  int result =
      can_extract__test__fixtures__basic_python_capi__module__MyDataItem(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyDataItem");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::basic-python-capi::MyDataItem>::operator()(
    const ::test::fixtures::basic-python-capi::MyDataItem& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::MyDataItem>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__test__fixtures__basic_python_capi__module__MyDataItem(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::MyDataItem>>::operator()(
    FOLLY_MAYBE_UNUSED const ::test::fixtures::basic-python-capi::MyDataItem& val) {
  StrongRef fbthrift_data(createStructTuple(1));
  StrongRef _fbthrift__s(Constructor<Bytes>{}.constructFrom(val.s()));
  if (!_fbthrift__s || setStructField(*fbthrift_data, 0, *_fbthrift__s) == -1) {
    return nullptr;
  }
  return std::move(fbthrift_data).release();
}


ExtractorResult<::test::fixtures::basic-python-capi::TransitiveDoubler>
Extractor<::test::fixtures::basic-python-capi::TransitiveDoubler>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a TransitiveDoubler");
      }
      return extractorError<::test::fixtures::basic-python-capi::TransitiveDoubler>(
          "Marshal error: TransitiveDoubler");
  }
  return ::test::fixtures::basic-python-capi::TransitiveDoubler{};
}

ExtractorResult<::test::fixtures::basic-python-capi::TransitiveDoubler>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::basic-python-capi::TransitiveDoubler>>::operator()(PyObject* fbThriftData) {
  ::test::fixtures::basic-python-capi::TransitiveDoubler cpp;
  (void)fbThriftData;
  return cpp;
}


int Extractor<::test::fixtures::basic-python-capi::TransitiveDoubler>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  int result =
      can_extract__test__fixtures__basic_python_capi__module__TransitiveDoubler(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: TransitiveDoubler");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::basic-python-capi::TransitiveDoubler>::operator()(
    const ::test::fixtures::basic-python-capi::TransitiveDoubler& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::TransitiveDoubler>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__test__fixtures__basic_python_capi__module__TransitiveDoubler(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::TransitiveDoubler>>::operator()(
    FOLLY_MAYBE_UNUSED const ::test::fixtures::basic-python-capi::TransitiveDoubler& val) {
  StrongRef fbthrift_data(createStructTuple(0));
  return std::move(fbthrift_data).release();
}


ExtractorResult<::test::fixtures::basic-python-capi::DoubledPair>
Extractor<::test::fixtures::basic-python-capi::DoubledPair>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a DoubledPair");
      }
      return extractorError<::test::fixtures::basic-python-capi::DoubledPair>(
          "Marshal error: DoubledPair");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::test::fixtures::basic-python-capi::DoubledPair>>{}(*fbThriftData);
}

ExtractorResult<::test::fixtures::basic-python-capi::DoubledPair>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::basic-python-capi::DoubledPair>>::operator()(PyObject* fbThriftData) {
  ::test::fixtures::basic-python-capi::DoubledPair cpp;
  std::optional<std::string_view> error;
  Extractor<Bytes>{}.extractInto(
      cpp.s(),
      PyTuple_GET_ITEM(fbThriftData, 0 + 1),
      error);
  Extractor<int32_t>{}.extractInto(
      cpp.x(),
      PyTuple_GET_ITEM(fbThriftData, 1 + 1),
      error);
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::test::fixtures::basic-python-capi::DoubledPair>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  int result =
      can_extract__test__fixtures__basic_python_capi__module__DoubledPair(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: DoubledPair");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::basic-python-capi::DoubledPair>::operator()(
    const ::test::fixtures::basic-python-capi::DoubledPair& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::DoubledPair>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__test__fixtures__basic_python_capi__module__DoubledPair(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::DoubledPair>>::operator()(
    FOLLY_MAYBE_UNUSED const ::test::fixtures::basic-python-capi::DoubledPair& val) {
  StrongRef fbthrift_data(createStructTuple(2));
  StrongRef _fbthrift__s(Constructor<Bytes>{}.constructFrom(val.s()));
  if (!_fbthrift__s || setStructField(*fbthrift_data, 0, *_fbthrift__s) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__x(Constructor<int32_t>{}.constructFrom(val.x()));
  if (!_fbthrift__x || setStructField(*fbthrift_data, 1, *_fbthrift__x) == -1) {
    return nullptr;
  }
  return std::move(fbthrift_data).release();
}


ExtractorResult<::test::fixtures::basic-python-capi::StringPair>
Extractor<::test::fixtures::basic-python-capi::StringPair>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a StringPair");
      }
      return extractorError<::test::fixtures::basic-python-capi::StringPair>(
          "Marshal error: StringPair");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::test::fixtures::basic-python-capi::StringPair>>{}(*fbThriftData);
}

ExtractorResult<::test::fixtures::basic-python-capi::StringPair>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::basic-python-capi::StringPair>>::operator()(PyObject* fbThriftData) {
  ::test::fixtures::basic-python-capi::StringPair cpp;
  std::optional<std::string_view> error;
  Extractor<Bytes>{}.extractInto(
      cpp.normal(),
      PyTuple_GET_ITEM(fbThriftData, 0 + 1),
      error);
  Extractor<Bytes>{}.extractInto(
      cpp.doubled(),
      PyTuple_GET_ITEM(fbThriftData, 1 + 1),
      error);
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::test::fixtures::basic-python-capi::StringPair>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  int result =
      can_extract__test__fixtures__basic_python_capi__module__StringPair(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: StringPair");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::basic-python-capi::StringPair>::operator()(
    const ::test::fixtures::basic-python-capi::StringPair& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::StringPair>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__test__fixtures__basic_python_capi__module__StringPair(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::StringPair>>::operator()(
    FOLLY_MAYBE_UNUSED const ::test::fixtures::basic-python-capi::StringPair& val) {
  StrongRef fbthrift_data(createStructTuple(2));
  StrongRef _fbthrift__normal(Constructor<Bytes>{}.constructFrom(val.normal()));
  if (!_fbthrift__normal || setStructField(*fbthrift_data, 0, *_fbthrift__normal) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__doubled(Constructor<Bytes>{}.constructFrom(val.doubled()));
  if (!_fbthrift__doubled || setStructField(*fbthrift_data, 1, *_fbthrift__doubled) == -1) {
    return nullptr;
  }
  return std::move(fbthrift_data).release();
}


ExtractorResult<::test::fixtures::basic-python-capi::VapidStruct>
Extractor<::test::fixtures::basic-python-capi::VapidStruct>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a EmptyStruct");
      }
      return extractorError<::test::fixtures::basic-python-capi::VapidStruct>(
          "Marshal error: EmptyStruct");
  }
  return ::test::fixtures::basic-python-capi::VapidStruct{};
}

ExtractorResult<::test::fixtures::basic-python-capi::VapidStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::basic-python-capi::VapidStruct>>::operator()(PyObject* fbThriftData) {
  ::test::fixtures::basic-python-capi::VapidStruct cpp;
  (void)fbThriftData;
  return cpp;
}


int Extractor<::test::fixtures::basic-python-capi::VapidStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  int result =
      can_extract__test__fixtures__basic_python_capi__module__EmptyStruct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: EmptyStruct");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::basic-python-capi::VapidStruct>::operator()(
    const ::test::fixtures::basic-python-capi::VapidStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::VapidStruct>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__test__fixtures__basic_python_capi__module__EmptyStruct(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::VapidStruct>>::operator()(
    FOLLY_MAYBE_UNUSED const ::test::fixtures::basic-python-capi::VapidStruct& val) {
  StrongRef fbthrift_data(createStructTuple(0));
  return std::move(fbthrift_data).release();
}


ExtractorResult<::test::fixtures::basic-python-capi::PrimitiveStruct>
Extractor<::test::fixtures::basic-python-capi::PrimitiveStruct>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a PrimitiveStruct");
      }
      return extractorError<::test::fixtures::basic-python-capi::PrimitiveStruct>(
          "Marshal error: PrimitiveStruct");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::test::fixtures::basic-python-capi::PrimitiveStruct>>{}(*fbThriftData);
}

ExtractorResult<::test::fixtures::basic-python-capi::PrimitiveStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::basic-python-capi::PrimitiveStruct>>::operator()(PyObject* fbThriftData) {
  ::test::fixtures::basic-python-capi::PrimitiveStruct cpp;
  std::optional<std::string_view> error;
  Extractor<bool>{}.extractInto(
      cpp.booly(),
      PyTuple_GET_ITEM(fbThriftData, 0 + 1),
      error);
  Extractor<int8_t>{}.extractInto(
      cpp.charry(),
      PyTuple_GET_ITEM(fbThriftData, 1 + 1),
      error);
  Extractor<int16_t>{}.extractInto(
      cpp.shortay(),
      PyTuple_GET_ITEM(fbThriftData, 2 + 1),
      error);
  Extractor<int32_t>{}.extractInto(
      cpp.inty(),
      PyTuple_GET_ITEM(fbThriftData, 3 + 1),
      error);
  Extractor<int64_t>{}.extractInto(
      cpp.longy(),
      PyTuple_GET_ITEM(fbThriftData, 4 + 1),
      error);
  Extractor<float>{}.extractInto(
      cpp.floaty(),
      PyTuple_GET_ITEM(fbThriftData, 5 + 1),
      error);
  Extractor<double>{}.extractInto(
      cpp.dubby(),
      PyTuple_GET_ITEM(fbThriftData, 6 + 1),
      error);
  Extractor<Bytes>{}.extractInto(
      cpp.stringy(),
      PyTuple_GET_ITEM(fbThriftData, 7 + 1),
      error);
  Extractor<Bytes>{}.extractInto(
      cpp.bytey(),
      PyTuple_GET_ITEM(fbThriftData, 8 + 1),
      error);
  Extractor<folly::IOBuf>{}.extractInto(
      cpp.buffy(),
      PyTuple_GET_ITEM(fbThriftData, 9 + 1),
      error);
  Extractor<std::unique_ptr<folly::IOBuf>>{}.extractInto(
      cpp.pointbuffy(),
      PyTuple_GET_ITEM(fbThriftData, 10 + 1),
      error);
  Extractor<apache::thrift::python::capi::ComposedStruct<::test::fixtures::basic-python-capi::MyStruct>>{}.extractInto(
      cpp.patched_struct(),
      PyTuple_GET_ITEM(fbThriftData, 11 + 1),
      error);
  Extractor<apache::thrift::python::capi::ComposedStruct<::test::fixtures::basic-python-capi::VapidStruct>>{}.extractInto(
      cpp.empty_struct(),
      PyTuple_GET_ITEM(fbThriftData, 12 + 1),
      error);
  Extractor<Bytes>{}.extractInto(
      cpp.fbstring(),
      PyTuple_GET_ITEM(fbThriftData, 13 + 1),
      error);
  Extractor<Bytes>{}.extractInto(
      cpp.managed_string_view(),
      PyTuple_GET_ITEM(fbThriftData, 14 + 1),
      error);
  Extractor<apache::thrift::python::capi::ComposedStruct<::test::fixtures::basic-python-capi::SomeError>>{}.extractInto(
      cpp.some_error(),
      PyTuple_GET_ITEM(fbThriftData, 15 + 1),
      error);
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::test::fixtures::basic-python-capi::PrimitiveStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  int result =
      can_extract__test__fixtures__basic_python_capi__module__PrimitiveStruct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: PrimitiveStruct");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::basic-python-capi::PrimitiveStruct>::operator()(
    const ::test::fixtures::basic-python-capi::PrimitiveStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::PrimitiveStruct>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__test__fixtures__basic_python_capi__module__PrimitiveStruct(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::PrimitiveStruct>>::operator()(
    FOLLY_MAYBE_UNUSED const ::test::fixtures::basic-python-capi::PrimitiveStruct& val) {
  StrongRef fbthrift_data(createStructTuple(16));
  StrongRef _fbthrift__booly(Constructor<bool>{}.constructFrom(val.booly()));
  if (!_fbthrift__booly || setStructField(*fbthrift_data, 0, *_fbthrift__booly) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__charry(Constructor<int8_t>{}.constructFrom(val.charry()));
  if (!_fbthrift__charry || setStructField(*fbthrift_data, 1, *_fbthrift__charry) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__shorty(Constructor<int16_t>{}.constructFrom(val.shortay()));
  if (!_fbthrift__shorty || setStructField(*fbthrift_data, 2, *_fbthrift__shorty) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__inty(Constructor<int32_t>{}.constructFrom(val.inty()));
  if (!_fbthrift__inty || setStructField(*fbthrift_data, 3, *_fbthrift__inty) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__longy(Constructor<int64_t>{}.constructFrom(val.longy()));
  if (!_fbthrift__longy || setStructField(*fbthrift_data, 4, *_fbthrift__longy) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__floaty(Constructor<float>{}.constructFrom(val.floaty()));
  if (!_fbthrift__floaty || setStructField(*fbthrift_data, 5, *_fbthrift__floaty) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__dubby(Constructor<double>{}.constructFrom(val.dubby()));
  if (!_fbthrift__dubby || setStructField(*fbthrift_data, 6, *_fbthrift__dubby) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__stringy(Constructor<Bytes>{}.constructFrom(val.stringy()));
  if (!_fbthrift__stringy || setStructField(*fbthrift_data, 7, *_fbthrift__stringy) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__bytey(Constructor<Bytes>{}.constructFrom(val.bytey()));
  if (!_fbthrift__bytey || setStructField(*fbthrift_data, 8, *_fbthrift__bytey) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__buffy(Constructor<folly::IOBuf>{}.constructFrom(val.buffy()));
  if (!_fbthrift__buffy || setStructField(*fbthrift_data, 9, *_fbthrift__buffy) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__pointbuffy(Constructor<std::unique_ptr<folly::IOBuf>>{}.constructFrom(val.pointbuffy()));
  if (!_fbthrift__pointbuffy || setStructField(*fbthrift_data, 10, *_fbthrift__pointbuffy) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__patched_struct(Constructor<apache::thrift::python::capi::ComposedStruct<::test::fixtures::basic-python-capi::MyStruct>>{}.constructFrom(val.patched_struct()));
  if (!_fbthrift__patched_struct || setStructField(*fbthrift_data, 11, *_fbthrift__patched_struct) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__empty_struct(Constructor<apache::thrift::python::capi::ComposedStruct<::test::fixtures::basic-python-capi::VapidStruct>>{}.constructFrom(val.empty_struct()));
  if (!_fbthrift__empty_struct || setStructField(*fbthrift_data, 12, *_fbthrift__empty_struct) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__fbstring(Constructor<Bytes>{}.constructFrom(val.fbstring()));
  if (!_fbthrift__fbstring || setStructField(*fbthrift_data, 13, *_fbthrift__fbstring) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__managed_string_view(Constructor<Bytes>{}.constructFrom(val.managed_string_view()));
  if (!_fbthrift__managed_string_view || setStructField(*fbthrift_data, 14, *_fbthrift__managed_string_view) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__some_error(Constructor<apache::thrift::python::capi::ComposedStruct<::test::fixtures::basic-python-capi::SomeError>>{}.constructFrom(val.some_error()));
  if (!_fbthrift__some_error || setStructField(*fbthrift_data, 15, *_fbthrift__some_error) == -1) {
    return nullptr;
  }
  return std::move(fbthrift_data).release();
}


ExtractorResult<::test::fixtures::basic-python-capi::ListStruct>
Extractor<::test::fixtures::basic-python-capi::ListStruct>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a ListStruct");
      }
      return extractorError<::test::fixtures::basic-python-capi::ListStruct>(
          "Marshal error: ListStruct");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::test::fixtures::basic-python-capi::ListStruct>>{}(*fbThriftData);
}

ExtractorResult<::test::fixtures::basic-python-capi::ListStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::basic-python-capi::ListStruct>>::operator()(PyObject* fbThriftData) {
  ::test::fixtures::basic-python-capi::ListStruct cpp;
  std::optional<std::string_view> error;
  Extractor<list<bool>>{}.extractInto(
      cpp.boolz(),
      PyTuple_GET_ITEM(fbThriftData, 0 + 1),
      error);
  Extractor<list<int64_t>>{}.extractInto(
      cpp.intz(),
      PyTuple_GET_ITEM(fbThriftData, 1 + 1),
      error);
  Extractor<list<Bytes>>{}.extractInto(
      cpp.stringz(),
      PyTuple_GET_ITEM(fbThriftData, 2 + 1),
      error);
  Extractor<list<Bytes, std::deque<native_t<Bytes>>>>{}.extractInto(
      cpp.encoded(),
      PyTuple_GET_ITEM(fbThriftData, 3 + 1),
      error);
  Extractor<list<int64_t, std::deque<uint64_t>>>{}.extractInto(
      cpp.uidz(),
      PyTuple_GET_ITEM(fbThriftData, 4 + 1),
      error);
  Extractor<list<list<double>>>{}.extractInto(
      cpp.matrix(),
      PyTuple_GET_ITEM(fbThriftData, 5 + 1),
      error);
  Extractor<list<list<int8_t, folly::small_vector<folly::small_vector<uint8_t>>::value_type>, folly::small_vector<folly::small_vector<uint8_t>>>>{}.extractInto(
      cpp.ucharz(),
      PyTuple_GET_ITEM(fbThriftData, 6 + 1),
      error);
  Extractor<list<list<list<int8_t, folly::fbvector<folly::fbvector<folly::fbvector<uint8_t>>>::value_type::value_type>, folly::fbvector<folly::fbvector<folly::fbvector<uint8_t>>>::value_type>, folly::fbvector<folly::fbvector<folly::fbvector<uint8_t>>>>>{}.extractInto(
      cpp.voxels(),
      PyTuple_GET_ITEM(fbThriftData, 7 + 1),
      error);
  Extractor<list<std::unique_ptr<folly::IOBuf>>>{}.extractInto(
      cpp.buf_ptrs(),
      PyTuple_GET_ITEM(fbThriftData, 8 + 1),
      error);
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::test::fixtures::basic-python-capi::ListStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  int result =
      can_extract__test__fixtures__basic_python_capi__module__ListStruct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: ListStruct");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::basic-python-capi::ListStruct>::operator()(
    const ::test::fixtures::basic-python-capi::ListStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::ListStruct>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__test__fixtures__basic_python_capi__module__ListStruct(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::ListStruct>>::operator()(
    FOLLY_MAYBE_UNUSED const ::test::fixtures::basic-python-capi::ListStruct& val) {
  StrongRef fbthrift_data(createStructTuple(9));
  StrongRef _fbthrift__boolz(Constructor<list<bool>>{}.constructFrom(val.boolz()));
  if (!_fbthrift__boolz || setStructField(*fbthrift_data, 0, *_fbthrift__boolz) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__intz(Constructor<list<int64_t>>{}.constructFrom(val.intz()));
  if (!_fbthrift__intz || setStructField(*fbthrift_data, 1, *_fbthrift__intz) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__stringz(Constructor<list<Bytes>>{}.constructFrom(val.stringz()));
  if (!_fbthrift__stringz || setStructField(*fbthrift_data, 2, *_fbthrift__stringz) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__encoded(Constructor<list<Bytes, std::deque<native_t<Bytes>>>>{}.constructFrom(val.encoded()));
  if (!_fbthrift__encoded || setStructField(*fbthrift_data, 3, *_fbthrift__encoded) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__uidz(Constructor<list<int64_t, std::deque<uint64_t>>>{}.constructFrom(val.uidz()));
  if (!_fbthrift__uidz || setStructField(*fbthrift_data, 4, *_fbthrift__uidz) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__matrix(Constructor<list<list<double>>>{}.constructFrom(val.matrix()));
  if (!_fbthrift__matrix || setStructField(*fbthrift_data, 5, *_fbthrift__matrix) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__ucharz(Constructor<list<list<int8_t, folly::small_vector<folly::small_vector<uint8_t>>::value_type>, folly::small_vector<folly::small_vector<uint8_t>>>>{}.constructFrom(val.ucharz()));
  if (!_fbthrift__ucharz || setStructField(*fbthrift_data, 6, *_fbthrift__ucharz) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__voxels(Constructor<list<list<list<int8_t, folly::fbvector<folly::fbvector<folly::fbvector<uint8_t>>>::value_type::value_type>, folly::fbvector<folly::fbvector<folly::fbvector<uint8_t>>>::value_type>, folly::fbvector<folly::fbvector<folly::fbvector<uint8_t>>>>>{}.constructFrom(val.voxels()));
  if (!_fbthrift__voxels || setStructField(*fbthrift_data, 7, *_fbthrift__voxels) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__buf_ptrs(Constructor<list<std::unique_ptr<folly::IOBuf>>>{}.constructFrom(val.buf_ptrs()));
  if (!_fbthrift__buf_ptrs || setStructField(*fbthrift_data, 8, *_fbthrift__buf_ptrs) == -1) {
    return nullptr;
  }
  return std::move(fbthrift_data).release();
}


ExtractorResult<::test::fixtures::basic-python-capi::SetStruct>
Extractor<::test::fixtures::basic-python-capi::SetStruct>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a SetStruct");
      }
      return extractorError<::test::fixtures::basic-python-capi::SetStruct>(
          "Marshal error: SetStruct");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::test::fixtures::basic-python-capi::SetStruct>>{}(*fbThriftData);
}

ExtractorResult<::test::fixtures::basic-python-capi::SetStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::basic-python-capi::SetStruct>>::operator()(PyObject* fbThriftData) {
  ::test::fixtures::basic-python-capi::SetStruct cpp;
  std::optional<std::string_view> error;
  Extractor<set<apache::thrift::python::capi::ComposedEnum<::test::fixtures::basic-python-capi::MyEnum>>>{}.extractInto(
      cpp.enumz(),
      PyTuple_GET_ITEM(fbThriftData, 0 + 1),
      error);
  Extractor<set<int32_t>>{}.extractInto(
      cpp.intz(),
      PyTuple_GET_ITEM(fbThriftData, 1 + 1),
      error);
  Extractor<set<Bytes>>{}.extractInto(
      cpp.binnaz(),
      PyTuple_GET_ITEM(fbThriftData, 2 + 1),
      error);
  Extractor<set<Bytes, std::unordered_set<native_t<Bytes>>>>{}.extractInto(
      cpp.encoded(),
      PyTuple_GET_ITEM(fbThriftData, 3 + 1),
      error);
  Extractor<set<int64_t, std::unordered_set<uint64_t>>>{}.extractInto(
      cpp.uidz(),
      PyTuple_GET_ITEM(fbThriftData, 4 + 1),
      error);
  Extractor<set<int8_t, folly::F14FastSet<uint8_t>>>{}.extractInto(
      cpp.charz(),
      PyTuple_GET_ITEM(fbThriftData, 5 + 1),
      error);
  Extractor<list<set<int64_t>>>{}.extractInto(
      cpp.setz(),
      PyTuple_GET_ITEM(fbThriftData, 6 + 1),
      error);
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::test::fixtures::basic-python-capi::SetStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  int result =
      can_extract__test__fixtures__basic_python_capi__module__SetStruct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: SetStruct");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::basic-python-capi::SetStruct>::operator()(
    const ::test::fixtures::basic-python-capi::SetStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::SetStruct>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__test__fixtures__basic_python_capi__module__SetStruct(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::SetStruct>>::operator()(
    FOLLY_MAYBE_UNUSED const ::test::fixtures::basic-python-capi::SetStruct& val) {
  StrongRef fbthrift_data(createStructTuple(7));
  StrongRef _fbthrift__enumz(Constructor<set<apache::thrift::python::capi::ComposedEnum<::test::fixtures::basic-python-capi::MyEnum>>>{}.constructFrom(val.enumz()));
  if (!_fbthrift__enumz || setStructField(*fbthrift_data, 0, *_fbthrift__enumz) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__intz(Constructor<set<int32_t>>{}.constructFrom(val.intz()));
  if (!_fbthrift__intz || setStructField(*fbthrift_data, 1, *_fbthrift__intz) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__binnaz(Constructor<set<Bytes>>{}.constructFrom(val.binnaz()));
  if (!_fbthrift__binnaz || setStructField(*fbthrift_data, 2, *_fbthrift__binnaz) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__encoded(Constructor<set<Bytes, std::unordered_set<native_t<Bytes>>>>{}.constructFrom(val.encoded()));
  if (!_fbthrift__encoded || setStructField(*fbthrift_data, 3, *_fbthrift__encoded) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__uidz(Constructor<set<int64_t, std::unordered_set<uint64_t>>>{}.constructFrom(val.uidz()));
  if (!_fbthrift__uidz || setStructField(*fbthrift_data, 4, *_fbthrift__uidz) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__charz(Constructor<set<int8_t, folly::F14FastSet<uint8_t>>>{}.constructFrom(val.charz()));
  if (!_fbthrift__charz || setStructField(*fbthrift_data, 5, *_fbthrift__charz) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__setz(Constructor<list<set<int64_t>>>{}.constructFrom(val.setz()));
  if (!_fbthrift__setz || setStructField(*fbthrift_data, 6, *_fbthrift__setz) == -1) {
    return nullptr;
  }
  return std::move(fbthrift_data).release();
}


ExtractorResult<::test::fixtures::basic-python-capi::MapStruct>
Extractor<::test::fixtures::basic-python-capi::MapStruct>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a MapStruct");
      }
      return extractorError<::test::fixtures::basic-python-capi::MapStruct>(
          "Marshal error: MapStruct");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::test::fixtures::basic-python-capi::MapStruct>>{}(*fbThriftData);
}

ExtractorResult<::test::fixtures::basic-python-capi::MapStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::basic-python-capi::MapStruct>>::operator()(PyObject* fbThriftData) {
  ::test::fixtures::basic-python-capi::MapStruct cpp;
  std::optional<std::string_view> error;
  Extractor<map<apache::thrift::python::capi::ComposedEnum<::test::fixtures::basic-python-capi::MyEnum>, Bytes>>{}.extractInto(
      cpp.enumz(),
      PyTuple_GET_ITEM(fbThriftData, 0 + 1),
      error);
  Extractor<map<int32_t, Bytes>>{}.extractInto(
      cpp.intz(),
      PyTuple_GET_ITEM(fbThriftData, 1 + 1),
      error);
  Extractor<map<Bytes, apache::thrift::python::capi::ComposedStruct<::test::fixtures::basic-python-capi::PrimitiveStruct>>>{}.extractInto(
      cpp.binnaz(),
      PyTuple_GET_ITEM(fbThriftData, 2 + 1),
      error);
  Extractor<map<Bytes, double, std::unordered_map<native_t<Bytes>, native_t<double>>>>{}.extractInto(
      cpp.encoded(),
      PyTuple_GET_ITEM(fbThriftData, 3 + 1),
      error);
  Extractor<map<int64_t, float, std::unordered_map<uint64_t, float>>>{}.extractInto(
      cpp.flotz(),
      PyTuple_GET_ITEM(fbThriftData, 4 + 1),
      error);
  Extractor<list<map<int32_t, int64_t>>>{}.extractInto(
      cpp.map_list(),
      PyTuple_GET_ITEM(fbThriftData, 5 + 1),
      error);
  Extractor<map<int32_t, list<int64_t>>>{}.extractInto(
      cpp.list_map(),
      PyTuple_GET_ITEM(fbThriftData, 6 + 1),
      error);
  Extractor<map<int32_t, list<double, folly::F14FastMap<int, folly::fbvector<double>>::mapped_type>, folly::F14FastMap<int, folly::fbvector<double>>>>{}.extractInto(
      cpp.fast_list_map(),
      PyTuple_GET_ITEM(fbThriftData, 7 + 1),
      error);
  Extractor<map<Bytes, std::unique_ptr<folly::IOBuf>>>{}.extractInto(
      cpp.buf_map(),
      PyTuple_GET_ITEM(fbThriftData, 8 + 1),
      error);
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::test::fixtures::basic-python-capi::MapStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  int result =
      can_extract__test__fixtures__basic_python_capi__module__MapStruct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MapStruct");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::basic-python-capi::MapStruct>::operator()(
    const ::test::fixtures::basic-python-capi::MapStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::MapStruct>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__test__fixtures__basic_python_capi__module__MapStruct(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::MapStruct>>::operator()(
    FOLLY_MAYBE_UNUSED const ::test::fixtures::basic-python-capi::MapStruct& val) {
  StrongRef fbthrift_data(createStructTuple(9));
  StrongRef _fbthrift__enumz(Constructor<map<apache::thrift::python::capi::ComposedEnum<::test::fixtures::basic-python-capi::MyEnum>, Bytes>>{}.constructFrom(val.enumz()));
  if (!_fbthrift__enumz || setStructField(*fbthrift_data, 0, *_fbthrift__enumz) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__intz(Constructor<map<int32_t, Bytes>>{}.constructFrom(val.intz()));
  if (!_fbthrift__intz || setStructField(*fbthrift_data, 1, *_fbthrift__intz) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__binnaz(Constructor<map<Bytes, apache::thrift::python::capi::ComposedStruct<::test::fixtures::basic-python-capi::PrimitiveStruct>>>{}.constructFrom(val.binnaz()));
  if (!_fbthrift__binnaz || setStructField(*fbthrift_data, 2, *_fbthrift__binnaz) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__encoded(Constructor<map<Bytes, double, std::unordered_map<native_t<Bytes>, native_t<double>>>>{}.constructFrom(val.encoded()));
  if (!_fbthrift__encoded || setStructField(*fbthrift_data, 3, *_fbthrift__encoded) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__flotz(Constructor<map<int64_t, float, std::unordered_map<uint64_t, float>>>{}.constructFrom(val.flotz()));
  if (!_fbthrift__flotz || setStructField(*fbthrift_data, 4, *_fbthrift__flotz) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__map_list(Constructor<list<map<int32_t, int64_t>>>{}.constructFrom(val.map_list()));
  if (!_fbthrift__map_list || setStructField(*fbthrift_data, 5, *_fbthrift__map_list) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__list_map(Constructor<map<int32_t, list<int64_t>>>{}.constructFrom(val.list_map()));
  if (!_fbthrift__list_map || setStructField(*fbthrift_data, 6, *_fbthrift__list_map) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__fast_list_map(Constructor<map<int32_t, list<double, folly::F14FastMap<int, folly::fbvector<double>>::mapped_type>, folly::F14FastMap<int, folly::fbvector<double>>>>{}.constructFrom(val.fast_list_map()));
  if (!_fbthrift__fast_list_map || setStructField(*fbthrift_data, 7, *_fbthrift__fast_list_map) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__buf_map(Constructor<map<Bytes, std::unique_ptr<folly::IOBuf>>>{}.constructFrom(val.buf_map()));
  if (!_fbthrift__buf_map || setStructField(*fbthrift_data, 8, *_fbthrift__buf_map) == -1) {
    return nullptr;
  }
  return std::move(fbthrift_data).release();
}


ExtractorResult<::test::fixtures::basic-python-capi::ComposeStruct>
Extractor<::test::fixtures::basic-python-capi::ComposeStruct>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a ComposeStruct");
      }
      return extractorError<::test::fixtures::basic-python-capi::ComposeStruct>(
          "Marshal error: ComposeStruct");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::test::fixtures::basic-python-capi::ComposeStruct>>{}(*fbThriftData);
}

ExtractorResult<::test::fixtures::basic-python-capi::ComposeStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::basic-python-capi::ComposeStruct>>::operator()(PyObject* fbThriftData) {
  ::test::fixtures::basic-python-capi::ComposeStruct cpp;
  std::optional<std::string_view> error;
  Extractor<apache::thrift::python::capi::ComposedEnum<::test::fixtures::basic-python-capi::MyEnum>>{}.extractInto(
      cpp.enum_(),
      PyTuple_GET_ITEM(fbThriftData, 0 + 1),
      error);
  Extractor<apache::thrift::python::capi::ComposedEnum<::test::fixtures::basic-python-capi::NormalDecentEnum>>{}.extractInto(
      cpp.renamed_(),
      PyTuple_GET_ITEM(fbThriftData, 1 + 1),
      error);
  Extractor<apache::thrift::python::capi::ComposedStruct<::test::fixtures::basic-python-capi::PrimitiveStruct>>{}.extractInto(
      cpp.primitive(),
      PyTuple_GET_ITEM(fbThriftData, 2 + 1),
      error);
  Extractor<apache::thrift::python::capi::ComposedStruct<::test::fixtures::basic-python-capi::ListStruct>>{}.extractInto(
      cpp.aliased(),
      PyTuple_GET_ITEM(fbThriftData, 3 + 1),
      error);
  Extractor<apache::thrift::python::capi::ComposedEnum<::test::fixtures::basic-python-capi::DepEnum>>{}.extractInto(
      cpp.xenum(),
      PyTuple_GET_ITEM(fbThriftData, 4 + 1),
      error);
  Extractor<apache::thrift::python::capi::ComposedStruct<::test::fixtures::basic-python-capi::DepStruct>>{}.extractInto(
      cpp.xstruct(),
      PyTuple_GET_ITEM(fbThriftData, 5 + 1),
      error);
  Extractor<list<apache::thrift::python::capi::ComposedStruct<::test::fixtures::basic-python-capi::DepStruct>>>{}.extractInto(
      cpp.friends(),
      PyTuple_GET_ITEM(fbThriftData, 6 + 1),
      error);
  Extractor<apache::thrift::python::capi::ComposedStruct<::test::fixtures::basic-python-capi::SerializedStruct>>{}.extractInto(
      cpp.serial_struct(),
      PyTuple_GET_ITEM(fbThriftData, 7 + 1),
      error);
  Extractor<apache::thrift::python::capi::ComposedStruct<::test::fixtures::basic-python-capi::SerializedUnion>>{}.extractInto(
      cpp.serial_union(),
      PyTuple_GET_ITEM(fbThriftData, 8 + 1),
      error);
  Extractor<apache::thrift::python::capi::ComposedStruct<::test::fixtures::basic-python-capi::SerializedError>>{}.extractInto(
      cpp.serial_error(),
      PyTuple_GET_ITEM(fbThriftData, 9 + 1),
      error);
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::test::fixtures::basic-python-capi::ComposeStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  int result =
      can_extract__test__fixtures__basic_python_capi__module__ComposeStruct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: ComposeStruct");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::basic-python-capi::ComposeStruct>::operator()(
    const ::test::fixtures::basic-python-capi::ComposeStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::ComposeStruct>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__test__fixtures__basic_python_capi__module__ComposeStruct(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::ComposeStruct>>::operator()(
    FOLLY_MAYBE_UNUSED const ::test::fixtures::basic-python-capi::ComposeStruct& val) {
  StrongRef fbthrift_data(createStructTuple(10));
  StrongRef _fbthrift__enum_(Constructor<apache::thrift::python::capi::ComposedEnum<::test::fixtures::basic-python-capi::MyEnum>>{}.constructFrom(val.enum_()));
  if (!_fbthrift__enum_ || setStructField(*fbthrift_data, 0, *_fbthrift__enum_) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__renamed_(Constructor<apache::thrift::python::capi::ComposedEnum<::test::fixtures::basic-python-capi::NormalDecentEnum>>{}.constructFrom(val.renamed_()));
  if (!_fbthrift__renamed_ || setStructField(*fbthrift_data, 1, *_fbthrift__renamed_) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__primitive(Constructor<apache::thrift::python::capi::ComposedStruct<::test::fixtures::basic-python-capi::PrimitiveStruct>>{}.constructFrom(val.primitive()));
  if (!_fbthrift__primitive || setStructField(*fbthrift_data, 2, *_fbthrift__primitive) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__aliased(Constructor<apache::thrift::python::capi::ComposedStruct<::test::fixtures::basic-python-capi::ListStruct>>{}.constructFrom(val.aliased()));
  if (!_fbthrift__aliased || setStructField(*fbthrift_data, 3, *_fbthrift__aliased) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__xenum(Constructor<apache::thrift::python::capi::ComposedEnum<::test::fixtures::basic-python-capi::DepEnum>>{}.constructFrom(val.xenum()));
  if (!_fbthrift__xenum || setStructField(*fbthrift_data, 4, *_fbthrift__xenum) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__xstruct(Constructor<apache::thrift::python::capi::ComposedStruct<::test::fixtures::basic-python-capi::DepStruct>>{}.constructFrom(val.xstruct()));
  if (!_fbthrift__xstruct || setStructField(*fbthrift_data, 5, *_fbthrift__xstruct) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__friends(Constructor<list<apache::thrift::python::capi::ComposedStruct<::test::fixtures::basic-python-capi::DepStruct>>>{}.constructFrom(val.friends()));
  if (!_fbthrift__friends || setStructField(*fbthrift_data, 6, *_fbthrift__friends) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__serial_struct(Constructor<apache::thrift::python::capi::ComposedStruct<::test::fixtures::basic-python-capi::SerializedStruct>>{}.constructFrom(val.serial_struct()));
  if (!_fbthrift__serial_struct || setStructField(*fbthrift_data, 7, *_fbthrift__serial_struct) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__serial_union(Constructor<apache::thrift::python::capi::ComposedStruct<::test::fixtures::basic-python-capi::SerializedUnion>>{}.constructFrom(val.serial_union()));
  if (!_fbthrift__serial_union || setStructField(*fbthrift_data, 8, *_fbthrift__serial_union) == -1) {
    return nullptr;
  }
  StrongRef _fbthrift__serial_error(Constructor<apache::thrift::python::capi::ComposedStruct<::test::fixtures::basic-python-capi::SerializedError>>{}.constructFrom(val.serial_error()));
  if (!_fbthrift__serial_error || setStructField(*fbthrift_data, 9, *_fbthrift__serial_error) == -1) {
    return nullptr;
  }
  return std::move(fbthrift_data).release();
}


ExtractorResult<::test::fixtures::basic-python-capi::Shallot>
Extractor<::test::fixtures::basic-python-capi::Shallot>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a Onion");
      }
      return extractorError<::test::fixtures::basic-python-capi::Shallot>(
          "Marshal error: Onion");
  }
  StrongRef fbThriftData(getThriftData(obj));
  return Extractor<::apache::thrift::python::capi::ComposedStruct<
      ::test::fixtures::basic-python-capi::Shallot>>{}(*fbThriftData);
}

ExtractorResult<::test::fixtures::basic-python-capi::Shallot>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::basic-python-capi::Shallot>>::operator()(PyObject* fbThriftData) {
  ::test::fixtures::basic-python-capi::Shallot cpp;
  std::optional<std::string_view> error;
  auto type_tag = Extractor<int64_t>{}(PyTuple_GET_ITEM(fbThriftData, 0));
  if (type_tag.hasError()) {
    return folly::makeUnexpected(type_tag.error());
  }
  switch (*type_tag) {
    case 0:
      break; // union is unset
    case 1:
      Extractor<apache::thrift::python::capi::ComposedEnum<::test::fixtures::basic-python-capi::MyEnum>>{}.extractInto(
          cpp.myEnum_ref(), PyTuple_GET_ITEM(fbThriftData, 1), error);
      break;
    case 2:
      Extractor<apache::thrift::python::capi::ComposedStruct<::test::fixtures::basic-python-capi::PrimitiveStruct>>{}.extractInto(
          cpp.myStruct_ref(), PyTuple_GET_ITEM(fbThriftData, 1), error);
      break;
    case 4:
      Extractor<Bytes>{}.extractInto(
          cpp.myString_ref(), PyTuple_GET_ITEM(fbThriftData, 1), error);
      break;
    case 6:
      Extractor<set<int64_t>>{}.extractInto(
          cpp.intSet_ref(), PyTuple_GET_ITEM(fbThriftData, 1), error);
      break;
    case 8:
      Extractor<list<double>>{}.extractInto(
          cpp.doubleList_ref(), PyTuple_GET_ITEM(fbThriftData, 1), error);
      break;
    case 9:
      Extractor<map<Bytes, Bytes>>{}.extractInto(
          cpp.strMap_ref(), PyTuple_GET_ITEM(fbThriftData, 1), error);
      break;
  }
  if (error) {
    return folly::makeUnexpected(*error);
  }
  return cpp;
}


int Extractor<::test::fixtures::basic-python-capi::Shallot>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  int result =
      can_extract__test__fixtures__basic_python_capi__module__Onion(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: Onion");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::basic-python-capi::Shallot>::operator()(
    const ::test::fixtures::basic-python-capi::Shallot& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::Shallot>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__test__fixtures__basic_python_capi__module__Onion(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::Shallot>>::operator()(
    FOLLY_MAYBE_UNUSED const ::test::fixtures::basic-python-capi::Shallot& val) {
  int64_t type_key = static_cast<int64_t>(val.getType());
  StrongRef py_val;
  switch (type_key) {
    case 0:
      Py_INCREF(Py_None);
      py_val = StrongRef(Py_None);
      break;
    case 1:
      py_val = StrongRef(Constructor<apache::thrift::python::capi::ComposedEnum<::test::fixtures::basic-python-capi::MyEnum>>{}.constructFrom(val.myEnum_ref()));
      break;
    case 2:
      py_val = StrongRef(Constructor<apache::thrift::python::capi::ComposedStruct<::test::fixtures::basic-python-capi::PrimitiveStruct>>{}.constructFrom(val.myStruct_ref()));
      break;
    case 4:
      py_val = StrongRef(Constructor<Bytes>{}.constructFrom(val.myString_ref()));
      break;
    case 6:
      py_val = StrongRef(Constructor<set<int64_t>>{}.constructFrom(val.intSet_ref()));
      break;
    case 8:
      py_val = StrongRef(Constructor<list<double>>{}.constructFrom(val.doubleList_ref()));
      break;
    case 9:
      py_val = StrongRef(Constructor<map<Bytes, Bytes>>{}.constructFrom(val.strMap_ref()));
      break;
  }
  if (!py_val) {
    return nullptr;
  }
  return unionTupleFromValue(type_key, *py_val);
}


ExtractorResult<::test::fixtures::basic-python-capi::MyStructPatch>
Extractor<::test::fixtures::basic-python-capi::MyStructPatch>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::basic-python-capi::MyStructPatch>(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__basic_python_capi__module__MyStructPatch(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::basic-python-capi::MyStructPatch>(
        "Thrift serialize error: MyStructPatch");
  }
  return detail::deserialize_iobuf_to_adapted<
      ::test::fixtures::basic-python-capi::MyStructPatch, ::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::basic-python-capi::MyStructPatchStruct>
    >(std::move(val));
}


ExtractorResult<::test::fixtures::basic-python-capi::MyStructPatch>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::basic-python-capi::MyStructPatch>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::basic-python-capi::MyStructPatch>(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  auto obj = StrongRef(init__test__fixtures__basic_python_capi__module__MyStructPatch(fbthrift_data));
  if (!obj) {
      return extractorError<::test::fixtures::basic-python-capi::MyStructPatch>(
          "Init from fbthrift error: MyStructPatch");
  }
  return Extractor<::test::fixtures::basic-python-capi::MyStructPatch>{}(*obj);
}

int Extractor<::test::fixtures::basic-python-capi::MyStructPatch>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  int result =
      can_extract__test__fixtures__basic_python_capi__module__MyStructPatch(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyStructPatch");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::basic-python-capi::MyStructPatch>::operator()(
    const ::test::fixtures::basic-python-capi::MyStructPatch& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__basic_python_capi__module__MyStructPatch(
      detail::serialize_adapted_to_iobuf<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::basic-python-capi::MyStructPatchStruct>>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::MyStructPatch>>::operator()(
    const ::test::fixtures::basic-python-capi::MyStructPatch& val) {
  auto obj = StrongRef(Constructor<::test::fixtures::basic-python-capi::MyStructPatch>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::test::fixtures::basic-python-capi::MyStructField4Patch>
Extractor<::test::fixtures::basic-python-capi::MyStructField4Patch>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::basic-python-capi::MyStructField4Patch>(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__basic_python_capi__module__MyStructField4Patch(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::basic-python-capi::MyStructField4Patch>(
        "Thrift serialize error: MyStructField4Patch");
  }
  return detail::deserialize_iobuf_to_adapted<
      ::test::fixtures::basic-python-capi::MyStructField4Patch, ::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::basic-python-capi::MyStructField4PatchStruct>
    >(std::move(val));
}


ExtractorResult<::test::fixtures::basic-python-capi::MyStructField4Patch>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::basic-python-capi::MyStructField4Patch>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::basic-python-capi::MyStructField4Patch>(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  auto obj = StrongRef(init__test__fixtures__basic_python_capi__module__MyStructField4Patch(fbthrift_data));
  if (!obj) {
      return extractorError<::test::fixtures::basic-python-capi::MyStructField4Patch>(
          "Init from fbthrift error: MyStructField4Patch");
  }
  return Extractor<::test::fixtures::basic-python-capi::MyStructField4Patch>{}(*obj);
}

int Extractor<::test::fixtures::basic-python-capi::MyStructField4Patch>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  int result =
      can_extract__test__fixtures__basic_python_capi__module__MyStructField4Patch(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyStructField4Patch");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::basic-python-capi::MyStructField4Patch>::operator()(
    const ::test::fixtures::basic-python-capi::MyStructField4Patch& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__basic_python_capi__module__MyStructField4Patch(
      detail::serialize_adapted_to_iobuf<::apache::thrift::op::detail::AssignPatchAdapter<::test::fixtures::basic-python-capi::MyStructField4PatchStruct>>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::MyStructField4Patch>>::operator()(
    const ::test::fixtures::basic-python-capi::MyStructField4Patch& val) {
  auto obj = StrongRef(Constructor<::test::fixtures::basic-python-capi::MyStructField4Patch>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::test::fixtures::basic-python-capi::MyStructField6Patch>
Extractor<::test::fixtures::basic-python-capi::MyStructField6Patch>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::basic-python-capi::MyStructField6Patch>(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__basic_python_capi__module__MyStructField6Patch(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::basic-python-capi::MyStructField6Patch>(
        "Thrift serialize error: MyStructField6Patch");
  }
  return detail::deserialize_iobuf_to_adapted<
      ::test::fixtures::basic-python-capi::MyStructField6Patch, ::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::basic-python-capi::MyStructField6PatchStruct>
    >(std::move(val));
}


ExtractorResult<::test::fixtures::basic-python-capi::MyStructField6Patch>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::basic-python-capi::MyStructField6Patch>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::basic-python-capi::MyStructField6Patch>(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  auto obj = StrongRef(init__test__fixtures__basic_python_capi__module__MyStructField6Patch(fbthrift_data));
  if (!obj) {
      return extractorError<::test::fixtures::basic-python-capi::MyStructField6Patch>(
          "Init from fbthrift error: MyStructField6Patch");
  }
  return Extractor<::test::fixtures::basic-python-capi::MyStructField6Patch>{}(*obj);
}

int Extractor<::test::fixtures::basic-python-capi::MyStructField6Patch>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  int result =
      can_extract__test__fixtures__basic_python_capi__module__MyStructField6Patch(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyStructField6Patch");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::basic-python-capi::MyStructField6Patch>::operator()(
    const ::test::fixtures::basic-python-capi::MyStructField6Patch& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__basic_python_capi__module__MyStructField6Patch(
      detail::serialize_adapted_to_iobuf<::apache::thrift::op::detail::ListPatchAdapter<::test::fixtures::basic-python-capi::MyStructField6PatchStruct>>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::MyStructField6Patch>>::operator()(
    const ::test::fixtures::basic-python-capi::MyStructField6Patch& val) {
  auto obj = StrongRef(Constructor<::test::fixtures::basic-python-capi::MyStructField6Patch>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::test::fixtures::basic-python-capi::MyStructField7Patch>
Extractor<::test::fixtures::basic-python-capi::MyStructField7Patch>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::basic-python-capi::MyStructField7Patch>(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__basic_python_capi__module__MyStructField7Patch(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::basic-python-capi::MyStructField7Patch>(
        "Thrift serialize error: MyStructField7Patch");
  }
  return detail::deserialize_iobuf_to_adapted<
      ::test::fixtures::basic-python-capi::MyStructField7Patch, ::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::basic-python-capi::MyStructField7PatchStruct>
    >(std::move(val));
}


ExtractorResult<::test::fixtures::basic-python-capi::MyStructField7Patch>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::basic-python-capi::MyStructField7Patch>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::basic-python-capi::MyStructField7Patch>(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  auto obj = StrongRef(init__test__fixtures__basic_python_capi__module__MyStructField7Patch(fbthrift_data));
  if (!obj) {
      return extractorError<::test::fixtures::basic-python-capi::MyStructField7Patch>(
          "Init from fbthrift error: MyStructField7Patch");
  }
  return Extractor<::test::fixtures::basic-python-capi::MyStructField7Patch>{}(*obj);
}

int Extractor<::test::fixtures::basic-python-capi::MyStructField7Patch>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  int result =
      can_extract__test__fixtures__basic_python_capi__module__MyStructField7Patch(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyStructField7Patch");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::basic-python-capi::MyStructField7Patch>::operator()(
    const ::test::fixtures::basic-python-capi::MyStructField7Patch& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__basic_python_capi__module__MyStructField7Patch(
      detail::serialize_adapted_to_iobuf<::apache::thrift::op::detail::MapPatchAdapter<::test::fixtures::basic-python-capi::MyStructField7PatchStruct>>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::MyStructField7Patch>>::operator()(
    const ::test::fixtures::basic-python-capi::MyStructField7Patch& val) {
  auto obj = StrongRef(Constructor<::test::fixtures::basic-python-capi::MyStructField7Patch>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::test::fixtures::basic-python-capi::MyStructField8Patch>
Extractor<::test::fixtures::basic-python-capi::MyStructField8Patch>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::basic-python-capi::MyStructField8Patch>(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__basic_python_capi__module__MyStructField8Patch(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::basic-python-capi::MyStructField8Patch>(
        "Thrift serialize error: MyStructField8Patch");
  }
  return detail::deserialize_iobuf_to_adapted<
      ::test::fixtures::basic-python-capi::MyStructField8Patch, ::apache::thrift::op::detail::SetPatchAdapter<::test::fixtures::basic-python-capi::MyStructField8PatchStruct>
    >(std::move(val));
}


ExtractorResult<::test::fixtures::basic-python-capi::MyStructField8Patch>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::basic-python-capi::MyStructField8Patch>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::basic-python-capi::MyStructField8Patch>(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  auto obj = StrongRef(init__test__fixtures__basic_python_capi__module__MyStructField8Patch(fbthrift_data));
  if (!obj) {
      return extractorError<::test::fixtures::basic-python-capi::MyStructField8Patch>(
          "Init from fbthrift error: MyStructField8Patch");
  }
  return Extractor<::test::fixtures::basic-python-capi::MyStructField8Patch>{}(*obj);
}

int Extractor<::test::fixtures::basic-python-capi::MyStructField8Patch>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  int result =
      can_extract__test__fixtures__basic_python_capi__module__MyStructField8Patch(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyStructField8Patch");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::basic-python-capi::MyStructField8Patch>::operator()(
    const ::test::fixtures::basic-python-capi::MyStructField8Patch& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__basic_python_capi__module__MyStructField8Patch(
      detail::serialize_adapted_to_iobuf<::apache::thrift::op::detail::SetPatchAdapter<::test::fixtures::basic-python-capi::MyStructField8PatchStruct>>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::MyStructField8Patch>>::operator()(
    const ::test::fixtures::basic-python-capi::MyStructField8Patch& val) {
  auto obj = StrongRef(Constructor<::test::fixtures::basic-python-capi::MyStructField8Patch>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::test::fixtures::basic-python-capi::MyStructFieldPatch>
Extractor<::test::fixtures::basic-python-capi::MyStructFieldPatch>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::basic-python-capi::MyStructFieldPatch>(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__basic_python_capi__module__MyStructFieldPatch(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::basic-python-capi::MyStructFieldPatch>(
        "Thrift serialize error: MyStructFieldPatch");
  }
  return detail::deserialize_iobuf_to_adapted<
      ::test::fixtures::basic-python-capi::MyStructFieldPatch, ::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::basic-python-capi::MyStructFieldPatchStruct>
    >(std::move(val));
}


ExtractorResult<::test::fixtures::basic-python-capi::MyStructFieldPatch>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::basic-python-capi::MyStructFieldPatch>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::basic-python-capi::MyStructFieldPatch>(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  auto obj = StrongRef(init__test__fixtures__basic_python_capi__module__MyStructFieldPatch(fbthrift_data));
  if (!obj) {
      return extractorError<::test::fixtures::basic-python-capi::MyStructFieldPatch>(
          "Init from fbthrift error: MyStructFieldPatch");
  }
  return Extractor<::test::fixtures::basic-python-capi::MyStructFieldPatch>{}(*obj);
}

int Extractor<::test::fixtures::basic-python-capi::MyStructFieldPatch>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  int result =
      can_extract__test__fixtures__basic_python_capi__module__MyStructFieldPatch(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyStructFieldPatch");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::basic-python-capi::MyStructFieldPatch>::operator()(
    const ::test::fixtures::basic-python-capi::MyStructFieldPatch& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__basic_python_capi__module__MyStructFieldPatch(
      detail::serialize_adapted_to_iobuf<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::basic-python-capi::MyStructFieldPatchStruct>>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::MyStructFieldPatch>>::operator()(
    const ::test::fixtures::basic-python-capi::MyStructFieldPatch& val) {
  auto obj = StrongRef(Constructor<::test::fixtures::basic-python-capi::MyStructFieldPatch>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::test::fixtures::basic-python-capi::MyStructEnsureStruct>
Extractor<::test::fixtures::basic-python-capi::MyStructEnsureStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::basic-python-capi::MyStructEnsureStruct>(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__basic_python_capi__module__MyStructEnsureStruct(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::basic-python-capi::MyStructEnsureStruct>(
        "Thrift serialize error: MyStructEnsureStruct");
  }
  return detail::deserialize_iobuf<::test::fixtures::basic-python-capi::MyStructEnsureStruct>(std::move(val));
}


ExtractorResult<::test::fixtures::basic-python-capi::MyStructEnsureStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::basic-python-capi::MyStructEnsureStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::basic-python-capi::MyStructEnsureStruct>(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  auto obj = StrongRef(init__test__fixtures__basic_python_capi__module__MyStructEnsureStruct(fbthrift_data));
  if (!obj) {
      return extractorError<::test::fixtures::basic-python-capi::MyStructEnsureStruct>(
          "Init from fbthrift error: MyStructEnsureStruct");
  }
  return Extractor<::test::fixtures::basic-python-capi::MyStructEnsureStruct>{}(*obj);
}

int Extractor<::test::fixtures::basic-python-capi::MyStructEnsureStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  int result =
      can_extract__test__fixtures__basic_python_capi__module__MyStructEnsureStruct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyStructEnsureStruct");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::basic-python-capi::MyStructEnsureStruct>::operator()(
    const ::test::fixtures::basic-python-capi::MyStructEnsureStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__basic_python_capi__module__MyStructEnsureStruct(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::MyStructEnsureStruct>>::operator()(
    const ::test::fixtures::basic-python-capi::MyStructEnsureStruct& val) {
  auto obj = StrongRef(Constructor<::test::fixtures::basic-python-capi::MyStructEnsureStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::test::fixtures::basic-python-capi::MyDataItemPatch>
Extractor<::test::fixtures::basic-python-capi::MyDataItemPatch>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::basic-python-capi::MyDataItemPatch>(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__basic_python_capi__module__MyDataItemPatch(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::basic-python-capi::MyDataItemPatch>(
        "Thrift serialize error: MyDataItemPatch");
  }
  return detail::deserialize_iobuf_to_adapted<
      ::test::fixtures::basic-python-capi::MyDataItemPatch, ::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::basic-python-capi::MyDataItemPatchStruct>
    >(std::move(val));
}


ExtractorResult<::test::fixtures::basic-python-capi::MyDataItemPatch>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::basic-python-capi::MyDataItemPatch>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::basic-python-capi::MyDataItemPatch>(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  auto obj = StrongRef(init__test__fixtures__basic_python_capi__module__MyDataItemPatch(fbthrift_data));
  if (!obj) {
      return extractorError<::test::fixtures::basic-python-capi::MyDataItemPatch>(
          "Init from fbthrift error: MyDataItemPatch");
  }
  return Extractor<::test::fixtures::basic-python-capi::MyDataItemPatch>{}(*obj);
}

int Extractor<::test::fixtures::basic-python-capi::MyDataItemPatch>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  int result =
      can_extract__test__fixtures__basic_python_capi__module__MyDataItemPatch(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyDataItemPatch");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::basic-python-capi::MyDataItemPatch>::operator()(
    const ::test::fixtures::basic-python-capi::MyDataItemPatch& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__basic_python_capi__module__MyDataItemPatch(
      detail::serialize_adapted_to_iobuf<::apache::thrift::op::detail::StructPatchAdapter<::test::fixtures::basic-python-capi::MyDataItemPatchStruct>>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::MyDataItemPatch>>::operator()(
    const ::test::fixtures::basic-python-capi::MyDataItemPatch& val) {
  auto obj = StrongRef(Constructor<::test::fixtures::basic-python-capi::MyDataItemPatch>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::test::fixtures::basic-python-capi::MyDataItemFieldPatch>
Extractor<::test::fixtures::basic-python-capi::MyDataItemFieldPatch>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::basic-python-capi::MyDataItemFieldPatch>(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__basic_python_capi__module__MyDataItemFieldPatch(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::basic-python-capi::MyDataItemFieldPatch>(
        "Thrift serialize error: MyDataItemFieldPatch");
  }
  return detail::deserialize_iobuf_to_adapted<
      ::test::fixtures::basic-python-capi::MyDataItemFieldPatch, ::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::basic-python-capi::MyDataItemFieldPatchStruct>
    >(std::move(val));
}


ExtractorResult<::test::fixtures::basic-python-capi::MyDataItemFieldPatch>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::basic-python-capi::MyDataItemFieldPatch>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::basic-python-capi::MyDataItemFieldPatch>(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  auto obj = StrongRef(init__test__fixtures__basic_python_capi__module__MyDataItemFieldPatch(fbthrift_data));
  if (!obj) {
      return extractorError<::test::fixtures::basic-python-capi::MyDataItemFieldPatch>(
          "Init from fbthrift error: MyDataItemFieldPatch");
  }
  return Extractor<::test::fixtures::basic-python-capi::MyDataItemFieldPatch>{}(*obj);
}

int Extractor<::test::fixtures::basic-python-capi::MyDataItemFieldPatch>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  int result =
      can_extract__test__fixtures__basic_python_capi__module__MyDataItemFieldPatch(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyDataItemFieldPatch");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::basic-python-capi::MyDataItemFieldPatch>::operator()(
    const ::test::fixtures::basic-python-capi::MyDataItemFieldPatch& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__basic_python_capi__module__MyDataItemFieldPatch(
      detail::serialize_adapted_to_iobuf<::apache::thrift::op::detail::FieldPatchAdapter<::test::fixtures::basic-python-capi::MyDataItemFieldPatchStruct>>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::MyDataItemFieldPatch>>::operator()(
    const ::test::fixtures::basic-python-capi::MyDataItemFieldPatch& val) {
  auto obj = StrongRef(Constructor<::test::fixtures::basic-python-capi::MyDataItemFieldPatch>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::test::fixtures::basic-python-capi::MyDataItemEnsureStruct>
Extractor<::test::fixtures::basic-python-capi::MyDataItemEnsureStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::basic-python-capi::MyDataItemEnsureStruct>(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__basic_python_capi__module__MyDataItemEnsureStruct(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::basic-python-capi::MyDataItemEnsureStruct>(
        "Thrift serialize error: MyDataItemEnsureStruct");
  }
  return detail::deserialize_iobuf<::test::fixtures::basic-python-capi::MyDataItemEnsureStruct>(std::move(val));
}


ExtractorResult<::test::fixtures::basic-python-capi::MyDataItemEnsureStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::basic-python-capi::MyDataItemEnsureStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::basic-python-capi::MyDataItemEnsureStruct>(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  auto obj = StrongRef(init__test__fixtures__basic_python_capi__module__MyDataItemEnsureStruct(fbthrift_data));
  if (!obj) {
      return extractorError<::test::fixtures::basic-python-capi::MyDataItemEnsureStruct>(
          "Init from fbthrift error: MyDataItemEnsureStruct");
  }
  return Extractor<::test::fixtures::basic-python-capi::MyDataItemEnsureStruct>{}(*obj);
}

int Extractor<::test::fixtures::basic-python-capi::MyDataItemEnsureStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  int result =
      can_extract__test__fixtures__basic_python_capi__module__MyDataItemEnsureStruct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyDataItemEnsureStruct");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::basic-python-capi::MyDataItemEnsureStruct>::operator()(
    const ::test::fixtures::basic-python-capi::MyDataItemEnsureStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__basic_python_capi__module__MyDataItemEnsureStruct(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic-python-capi::MyDataItemEnsureStruct>>::operator()(
    const ::test::fixtures::basic-python-capi::MyDataItemEnsureStruct& val) {
  auto obj = StrongRef(Constructor<::test::fixtures::basic-python-capi::MyDataItemEnsureStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::test::fixtures::basic-python-capi::MyEnum>
Extractor<::test::fixtures::basic-python-capi::MyEnum>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::basic-python-capi::MyEnum>(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  int64_t val = extract__test__fixtures__basic_python_capi__module__MyEnum(obj);
  if (val == -1 && PyErr_Occurred()) {
    return extractorError<::test::fixtures::basic-python-capi::MyEnum>(
        "Error getting python int value: MyEnum");
  }
  return static_cast<::test::fixtures::basic-python-capi::MyEnum>(val);
}

int Extractor<::test::fixtures::basic-python-capi::MyEnum>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  int result =
      can_extract__test__fixtures__basic_python_capi__module__MyEnum(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyEnum");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::basic-python-capi::MyEnum>::operator()(
    ::test::fixtures::basic-python-capi::MyEnum val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__basic_python_capi__module__MyEnum(
      static_cast<int64_t>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}

ExtractorResult<::test::fixtures::basic-python-capi::NormalDecentEnum>
Extractor<::test::fixtures::basic-python-capi::NormalDecentEnum>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::basic-python-capi::NormalDecentEnum>(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  int64_t val = extract__test__fixtures__basic_python_capi__module__AnnoyingEnum(obj);
  if (val == -1 && PyErr_Occurred()) {
    return extractorError<::test::fixtures::basic-python-capi::NormalDecentEnum>(
        "Error getting python int value: AnnoyingEnum");
  }
  return static_cast<::test::fixtures::basic-python-capi::NormalDecentEnum>(val);
}

int Extractor<::test::fixtures::basic-python-capi::NormalDecentEnum>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.basic-python-capi.module import error");
  }
  int result =
      can_extract__test__fixtures__basic_python_capi__module__AnnoyingEnum(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: AnnoyingEnum");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::basic-python-capi::NormalDecentEnum>::operator()(
    ::test::fixtures::basic-python-capi::NormalDecentEnum val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__basic_python_capi__module__AnnoyingEnum(
      static_cast<int64_t>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}

} // namespace capi
} // namespace python
} // namespace thrift
} // namespace apache
