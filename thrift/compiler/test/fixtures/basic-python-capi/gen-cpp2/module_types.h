/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/basic-python-capi/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#pragma once

#include <thrift/lib/cpp2/gen/module_types_h.h>



namespace apache {
namespace thrift {
namespace ident {
struct MyIntField;
struct MyStringField;
struct MyDataField;
struct myEnum;
struct oneway;
struct floatList;
struct strMap;
struct floatSet;
struct s;
struct x;
struct normal;
struct doubled;
struct myEnum;
struct myStruct;
struct myDataItem;
struct doubleSet;
struct doubleList;
struct strMap;
} // namespace ident
namespace detail {
#ifndef APACHE_THRIFT_ACCESSOR_MyIntField
#define APACHE_THRIFT_ACCESSOR_MyIntField
APACHE_THRIFT_DEFINE_ACCESSOR(MyIntField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_MyStringField
#define APACHE_THRIFT_ACCESSOR_MyStringField
APACHE_THRIFT_DEFINE_ACCESSOR(MyStringField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_MyDataField
#define APACHE_THRIFT_ACCESSOR_MyDataField
APACHE_THRIFT_DEFINE_ACCESSOR(MyDataField);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myEnum
#define APACHE_THRIFT_ACCESSOR_myEnum
APACHE_THRIFT_DEFINE_ACCESSOR(myEnum);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_oneway
#define APACHE_THRIFT_ACCESSOR_oneway
APACHE_THRIFT_DEFINE_ACCESSOR(oneway);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_floatList
#define APACHE_THRIFT_ACCESSOR_floatList
APACHE_THRIFT_DEFINE_ACCESSOR(floatList);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_strMap
#define APACHE_THRIFT_ACCESSOR_strMap
APACHE_THRIFT_DEFINE_ACCESSOR(strMap);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_floatSet
#define APACHE_THRIFT_ACCESSOR_floatSet
APACHE_THRIFT_DEFINE_ACCESSOR(floatSet);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_s
#define APACHE_THRIFT_ACCESSOR_s
APACHE_THRIFT_DEFINE_ACCESSOR(s);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_x
#define APACHE_THRIFT_ACCESSOR_x
APACHE_THRIFT_DEFINE_ACCESSOR(x);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_normal
#define APACHE_THRIFT_ACCESSOR_normal
APACHE_THRIFT_DEFINE_ACCESSOR(normal);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_doubled
#define APACHE_THRIFT_ACCESSOR_doubled
APACHE_THRIFT_DEFINE_ACCESSOR(doubled);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myEnum
#define APACHE_THRIFT_ACCESSOR_myEnum
APACHE_THRIFT_DEFINE_ACCESSOR(myEnum);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myStruct
#define APACHE_THRIFT_ACCESSOR_myStruct
APACHE_THRIFT_DEFINE_ACCESSOR(myStruct);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_myDataItem
#define APACHE_THRIFT_ACCESSOR_myDataItem
APACHE_THRIFT_DEFINE_ACCESSOR(myDataItem);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_doubleSet
#define APACHE_THRIFT_ACCESSOR_doubleSet
APACHE_THRIFT_DEFINE_ACCESSOR(doubleSet);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_doubleList
#define APACHE_THRIFT_ACCESSOR_doubleList
APACHE_THRIFT_DEFINE_ACCESSOR(doubleList);
#endif
#ifndef APACHE_THRIFT_ACCESSOR_strMap
#define APACHE_THRIFT_ACCESSOR_strMap
APACHE_THRIFT_DEFINE_ACCESSOR(strMap);
#endif
} // namespace detail
} // namespace thrift
} // namespace apache

// BEGIN declare_enums
namespace test { namespace fixtures { namespace basic-python-capi {

enum class MyEnum {
  MyValue1 = 0,
  MyValue2 = 1,
};



}}} // test::fixtures::basic-python-capi

namespace std {
template<> struct hash<::test::fixtures::basic-python-capi::MyEnum> :
  ::apache::thrift::detail::enum_hash<::test::fixtures::basic-python-capi::MyEnum> {};
} // std

namespace apache { namespace thrift {


template <> struct TEnumDataStorage<::test::fixtures::basic-python-capi::MyEnum>;

template <> struct TEnumTraits<::test::fixtures::basic-python-capi::MyEnum> {
  using type = ::test::fixtures::basic-python-capi::MyEnum;

  static constexpr std::size_t const size = 2;
  static folly::Range<type const*> const values;
  static folly::Range<folly::StringPiece const*> const names;

  static bool findName(type value, folly::StringPiece* out) noexcept;
  static bool findValue(folly::StringPiece name, type* out) noexcept;

#if FOLLY_HAS_STRING_VIEW
  static bool findName(type value, std::string_view* out) noexcept {
    folly::StringPiece outp;
    return findName(value, &outp) && ((*out = outp), true);
  }
#endif
  static char const* findName(type value) noexcept {
    folly::StringPiece ret;
    (void)findName(value, &ret);
    return ret.data();
  }
  static constexpr type min() { return type::MyValue1; }
  static constexpr type max() { return type::MyValue2; }
};


}} // apache::thrift

namespace test { namespace fixtures { namespace basic-python-capi {

using _MyEnum_EnumMapFactory = apache::thrift::detail::TEnumMapFactory<MyEnum>;
#ifndef ANDROID
[[deprecated("use apache::thrift::util::enumNameSafe, apache::thrift::util::enumName, or apache::thrift::TEnumTraits")]]
extern const _MyEnum_EnumMapFactory::ValuesToNamesMapType _MyEnum_VALUES_TO_NAMES;
#endif
}}} // test::fixtures::basic-python-capi

// END declare_enums
// BEGIN forward_declare
namespace test { namespace fixtures { namespace basic-python-capi {
class MyStruct;
class MyDataItem;
class TransitiveDoubler;
namespace detail {
class DoubledPair;
} // namespace detail
class StringPair;
class MyUnion;
}}} // test::fixtures::basic-python-capi
// END forward_declare
// BEGIN hash_and_equal_to
// END hash_and_equal_to
namespace test { namespace fixtures { namespace basic-python-capi {
using ::apache::thrift::detail::operator!=;
using ::apache::thrift::detail::operator>;
using ::apache::thrift::detail::operator<=;
using ::apache::thrift::detail::operator>=;


class MyDataItem final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0};
  using __fbthrift_reflection_type_tags = folly::tag_t<
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 0;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyDataItem;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyDataItem() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyDataItem(apache::thrift::FragileConstructor);

  MyDataItem(MyDataItem&&) = default;

  MyDataItem(const MyDataItem&) = default;


  MyDataItem& operator=(MyDataItem&&) = default;

  MyDataItem& operator=(const MyDataItem&) = default;

 public:

  bool operator==(const MyDataItem&) const;
  bool operator<(const MyDataItem&) const;

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyDataItem>;
  friend void swap(MyDataItem& a, MyDataItem& b);
};

template <class Protocol_>
unsigned long MyDataItem::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class MyStruct final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::MyIntField,
    ::apache::thrift::ident::MyStringField,
    ::apache::thrift::ident::MyDataField,
    ::apache::thrift::ident::myEnum,
    ::apache::thrift::ident::oneway,
    ::apache::thrift::ident::floatList,
    ::apache::thrift::ident::strMap,
    ::apache::thrift::ident::floatSet
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,3,4,5,6,7,8};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::i64_t,
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::struct_t<::test::fixtures::basic-python-capi::MyDataItem>,
    ::apache::thrift::type::enum_t<::test::fixtures::basic-python-capi::MyEnum>,
    ::apache::thrift::type::bool_t,
    ::apache::thrift::type::list<::apache::thrift::type::float_t>,
    ::apache::thrift::type::map<::apache::thrift::type::binary_t, ::apache::thrift::type::string_t>,
    ::apache::thrift::type::set<::apache::thrift::type::i32_t>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 8;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyStruct;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  MyStruct();

  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  MyStruct(apache::thrift::FragileConstructor, ::std::int64_t MyIntField__arg, ::std::string MyStringField__arg, ::test::fixtures::basic-python-capi::MyDataItem MyDataField__arg, ::test::fixtures::basic-python-capi::MyEnum myEnum__arg, bool oneway__arg, ::std::vector<float> floatList__arg, ::std::map<::std::string, ::std::string> strMap__arg, ::std::set<::std::int32_t> floatSet__arg);

  MyStruct(MyStruct&&) noexcept;

  MyStruct(const MyStruct& src);


  MyStruct& operator=(MyStruct&&) noexcept;
  MyStruct& operator=(const MyStruct& src);

  ~MyStruct();

 private:
  ::std::int64_t __fbthrift_field_MyIntField;
 private:
  ::std::string __fbthrift_field_MyStringField;
 private:
  ::test::fixtures::basic-python-capi::MyDataItem __fbthrift_field_MyDataField;
 private:
  ::test::fixtures::basic-python-capi::MyEnum __fbthrift_field_myEnum;
 private:
  bool __fbthrift_field_oneway;
 private:
  ::std::vector<float> __fbthrift_field_floatList;
 private:
  ::std::map<::std::string, ::std::string> __fbthrift_field_strMap;
 private:
  ::std::set<::std::int32_t> __fbthrift_field_floatSet;
 private:
  apache::thrift::detail::isset_bitset<8, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const MyStruct&) const;
  bool operator<(const MyStruct&) const;

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> MyIntField_ref() const& {
    return {this->__fbthrift_field_MyIntField, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> MyIntField_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_MyIntField), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> MyIntField_ref() & {
    return {this->__fbthrift_field_MyIntField, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> MyIntField_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_MyIntField), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> MyIntField() const& {
    return {this->__fbthrift_field_MyIntField, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> MyIntField() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_MyIntField), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> MyIntField() & {
    return {this->__fbthrift_field_MyIntField, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int64_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> MyIntField() && {
    return {static_cast<T&&>(this->__fbthrift_field_MyIntField), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> MyStringField_ref() const& {
    return {this->__fbthrift_field_MyStringField, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> MyStringField_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_MyStringField), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> MyStringField_ref() & {
    return {this->__fbthrift_field_MyStringField, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> MyStringField_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_MyStringField), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> MyStringField() const& {
    return {this->__fbthrift_field_MyStringField, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> MyStringField() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_MyStringField), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> MyStringField() & {
    return {this->__fbthrift_field_MyStringField, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> MyStringField() && {
    return {static_cast<T&&>(this->__fbthrift_field_MyStringField), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::test::fixtures::basic-python-capi::MyDataItem>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> MyDataField_ref() const& {
    return {this->__fbthrift_field_MyDataField, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::basic-python-capi::MyDataItem>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> MyDataField_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_MyDataField), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::basic-python-capi::MyDataItem>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> MyDataField_ref() & {
    return {this->__fbthrift_field_MyDataField, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::basic-python-capi::MyDataItem>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> MyDataField_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_MyDataField), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::basic-python-capi::MyDataItem>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> MyDataField() const& {
    return {this->__fbthrift_field_MyDataField, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::basic-python-capi::MyDataItem>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> MyDataField() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_MyDataField), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::basic-python-capi::MyDataItem>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> MyDataField() & {
    return {this->__fbthrift_field_MyDataField, __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::basic-python-capi::MyDataItem>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> MyDataField() && {
    return {static_cast<T&&>(this->__fbthrift_field_MyDataField), __isset.at(2), __isset.bit(2)};
  }

  template <typename..., typename T = ::test::fixtures::basic-python-capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> myEnum_ref() const& {
    return {this->__fbthrift_field_myEnum, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::basic-python-capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> myEnum_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_myEnum), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::basic-python-capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> myEnum_ref() & {
    return {this->__fbthrift_field_myEnum, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::basic-python-capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> myEnum_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_myEnum), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::basic-python-capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> myEnum() const& {
    return {this->__fbthrift_field_myEnum, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::basic-python-capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> myEnum() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_myEnum), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::basic-python-capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> myEnum() & {
    return {this->__fbthrift_field_myEnum, __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = ::test::fixtures::basic-python-capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> myEnum() && {
    return {static_cast<T&&>(this->__fbthrift_field_myEnum), __isset.at(3), __isset.bit(3)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> oneway_ref() const& {
    return {this->__fbthrift_field_oneway, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> oneway_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_oneway), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> oneway_ref() & {
    return {this->__fbthrift_field_oneway, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> oneway_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_oneway), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> oneway() const& {
    return {this->__fbthrift_field_oneway, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> oneway() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_oneway), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> oneway() & {
    return {this->__fbthrift_field_oneway, __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = bool>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> oneway() && {
    return {static_cast<T&&>(this->__fbthrift_field_oneway), __isset.at(4), __isset.bit(4)};
  }

  template <typename..., typename T = ::std::vector<float>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> floatList_ref() const& {
    return {this->__fbthrift_field_floatList, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::vector<float>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> floatList_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_floatList), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::vector<float>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> floatList_ref() & {
    return {this->__fbthrift_field_floatList, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::vector<float>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> floatList_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_floatList), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::vector<float>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> floatList() const& {
    return {this->__fbthrift_field_floatList, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::vector<float>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> floatList() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_floatList), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::vector<float>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> floatList() & {
    return {this->__fbthrift_field_floatList, __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::vector<float>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> floatList() && {
    return {static_cast<T&&>(this->__fbthrift_field_floatList), __isset.at(5), __isset.bit(5)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> strMap_ref() const& {
    return {this->__fbthrift_field_strMap, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> strMap_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_strMap), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> strMap_ref() & {
    return {this->__fbthrift_field_strMap, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> strMap_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_strMap), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> strMap() const& {
    return {this->__fbthrift_field_strMap, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> strMap() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_strMap), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> strMap() & {
    return {this->__fbthrift_field_strMap, __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> strMap() && {
    return {static_cast<T&&>(this->__fbthrift_field_strMap), __isset.at(6), __isset.bit(6)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> floatSet_ref() const& {
    return {this->__fbthrift_field_floatSet, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> floatSet_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_floatSet), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> floatSet_ref() & {
    return {this->__fbthrift_field_floatSet, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> floatSet_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_floatSet), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> floatSet() const& {
    return {this->__fbthrift_field_floatSet, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> floatSet() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_floatSet), __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> floatSet() & {
    return {this->__fbthrift_field_floatSet, __isset.at(7), __isset.bit(7)};
  }

  template <typename..., typename T = ::std::set<::std::int32_t>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> floatSet() && {
    return {static_cast<T&&>(this->__fbthrift_field_floatSet), __isset.at(7), __isset.bit(7)};
  }

  ::std::int64_t get_MyIntField() const {
    return __fbthrift_field_MyIntField;
  }

  [[deprecated("Use `FOO.MyIntField_ref() = BAR;` instead of `FOO.set_MyIntField(BAR);`")]]
  ::std::int64_t& set_MyIntField(::std::int64_t MyIntField_) {
    MyIntField_ref() = MyIntField_;
    return __fbthrift_field_MyIntField;
  }

  const ::std::string& get_MyStringField() const& {
    return __fbthrift_field_MyStringField;
  }

  ::std::string get_MyStringField() && {
    return std::move(__fbthrift_field_MyStringField);
  }

  template <typename T_MyStruct_MyStringField_struct_setter = ::std::string>
  [[deprecated("Use `FOO.MyStringField_ref() = BAR;` instead of `FOO.set_MyStringField(BAR);`")]]
  ::std::string& set_MyStringField(T_MyStruct_MyStringField_struct_setter&& MyStringField_) {
    MyStringField_ref() = std::forward<T_MyStruct_MyStringField_struct_setter>(MyStringField_);
    return __fbthrift_field_MyStringField;
  }
  const ::test::fixtures::basic-python-capi::MyDataItem& get_MyDataField() const&;
  ::test::fixtures::basic-python-capi::MyDataItem get_MyDataField() &&;

  template <typename T_MyStruct_MyDataField_struct_setter = ::test::fixtures::basic-python-capi::MyDataItem>
  [[deprecated("Use `FOO.MyDataField_ref() = BAR;` instead of `FOO.set_MyDataField(BAR);`")]]
  ::test::fixtures::basic-python-capi::MyDataItem& set_MyDataField(T_MyStruct_MyDataField_struct_setter&& MyDataField_) {
    MyDataField_ref() = std::forward<T_MyStruct_MyDataField_struct_setter>(MyDataField_);
    return __fbthrift_field_MyDataField;
  }

  ::test::fixtures::basic-python-capi::MyEnum get_myEnum() const {
    return __fbthrift_field_myEnum;
  }

  [[deprecated("Use `FOO.myEnum_ref() = BAR;` instead of `FOO.set_myEnum(BAR);`")]]
  ::test::fixtures::basic-python-capi::MyEnum& set_myEnum(::test::fixtures::basic-python-capi::MyEnum myEnum_) {
    myEnum_ref() = myEnum_;
    return __fbthrift_field_myEnum;
  }

  bool get_oneway() const {
    return __fbthrift_field_oneway;
  }

  [[deprecated("Use `FOO.oneway_ref() = BAR;` instead of `FOO.set_oneway(BAR);`")]]
  bool& set_oneway(bool oneway_) {
    oneway_ref() = oneway_;
    return __fbthrift_field_oneway;
  }
  const ::std::vector<float>& get_floatList() const&;
  ::std::vector<float> get_floatList() &&;

  template <typename T_MyStruct_floatList_struct_setter = ::std::vector<float>>
  [[deprecated("Use `FOO.floatList_ref() = BAR;` instead of `FOO.set_floatList(BAR);`")]]
  ::std::vector<float>& set_floatList(T_MyStruct_floatList_struct_setter&& floatList_) {
    floatList_ref() = std::forward<T_MyStruct_floatList_struct_setter>(floatList_);
    return __fbthrift_field_floatList;
  }
  const ::std::map<::std::string, ::std::string>& get_strMap() const&;
  ::std::map<::std::string, ::std::string> get_strMap() &&;

  template <typename T_MyStruct_strMap_struct_setter = ::std::map<::std::string, ::std::string>>
  [[deprecated("Use `FOO.strMap_ref() = BAR;` instead of `FOO.set_strMap(BAR);`")]]
  ::std::map<::std::string, ::std::string>& set_strMap(T_MyStruct_strMap_struct_setter&& strMap_) {
    strMap_ref() = std::forward<T_MyStruct_strMap_struct_setter>(strMap_);
    return __fbthrift_field_strMap;
  }
  const ::std::set<::std::int32_t>& get_floatSet() const&;
  ::std::set<::std::int32_t> get_floatSet() &&;

  template <typename T_MyStruct_floatSet_struct_setter = ::std::set<::std::int32_t>>
  [[deprecated("Use `FOO.floatSet_ref() = BAR;` instead of `FOO.set_floatSet(BAR);`")]]
  ::std::set<::std::int32_t>& set_floatSet(T_MyStruct_floatSet_struct_setter&& floatSet_) {
    floatSet_ref() = std::forward<T_MyStruct_floatSet_struct_setter>(floatSet_);
    return __fbthrift_field_floatSet;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyStruct>;
  friend void swap(MyStruct& a, MyStruct& b);
};

template <class Protocol_>
unsigned long MyStruct::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class TransitiveDoubler final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0};
  using __fbthrift_reflection_type_tags = folly::tag_t<
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 0;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = TransitiveDoubler;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  TransitiveDoubler() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  TransitiveDoubler(apache::thrift::FragileConstructor);

  TransitiveDoubler(TransitiveDoubler&&) = default;

  TransitiveDoubler(const TransitiveDoubler&) = default;


  TransitiveDoubler& operator=(TransitiveDoubler&&) = default;

  TransitiveDoubler& operator=(const TransitiveDoubler&) = default;

 public:

  bool operator==(const TransitiveDoubler&) const;
  bool operator<(const TransitiveDoubler&) const;

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<TransitiveDoubler>;
  friend void swap(TransitiveDoubler& a, TransitiveDoubler& b);
};

template <class Protocol_>
unsigned long TransitiveDoubler::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


namespace detail {
class DoubledPair final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::s,
    ::apache::thrift::ident::x
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::i32_t
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 2;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = DoubledPair;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  DoubledPair() :
      __fbthrift_field_x() {
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  DoubledPair(apache::thrift::FragileConstructor, ::std::string s__arg, ::std::int32_t x__arg);

  DoubledPair(DoubledPair&&) noexcept;

  DoubledPair(const DoubledPair& src);


  DoubledPair& operator=(DoubledPair&&) noexcept;
  DoubledPair& operator=(const DoubledPair& src);
 private:
  ::std::string __fbthrift_field_s;
 private:
  ::std::int32_t __fbthrift_field_x;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const DoubledPair&) const;
  bool operator<(const DoubledPair&) const;

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> s_ref() const& {
    return {this->__fbthrift_field_s, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> s_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_s), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> s_ref() & {
    return {this->__fbthrift_field_s, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> s_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_s), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> s() const& {
    return {this->__fbthrift_field_s, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> s() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_s), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> s() & {
    return {this->__fbthrift_field_s, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> s() && {
    return {static_cast<T&&>(this->__fbthrift_field_s), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> x_ref() const& {
    return {this->__fbthrift_field_x, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> x_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_x), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> x_ref() & {
    return {this->__fbthrift_field_x, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> x_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_x), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> x() const& {
    return {this->__fbthrift_field_x, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> x() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_x), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> x() & {
    return {this->__fbthrift_field_x, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::std::int32_t>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> x() && {
    return {static_cast<T&&>(this->__fbthrift_field_x), __isset.at(1), __isset.bit(1)};
  }

  const ::std::string& get_s() const& {
    return __fbthrift_field_s;
  }

  ::std::string get_s() && {
    return std::move(__fbthrift_field_s);
  }

  template <typename T_DoubledPair_s_struct_setter = ::std::string>
  [[deprecated("Use `FOO.s_ref() = BAR;` instead of `FOO.set_s(BAR);`")]]
  ::std::string& set_s(T_DoubledPair_s_struct_setter&& s_) {
    s_ref() = std::forward<T_DoubledPair_s_struct_setter>(s_);
    return __fbthrift_field_s;
  }

  ::std::int32_t get_x() const {
    return __fbthrift_field_x;
  }

  [[deprecated("Use `FOO.x_ref() = BAR;` instead of `FOO.set_x(BAR);`")]]
  ::std::int32_t& set_x(::std::int32_t x_) {
    x_ref() = x_;
    return __fbthrift_field_x;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<DoubledPair>;
  friend void swap(DoubledPair& a, DoubledPair& b);
};

template <class Protocol_>
unsigned long DoubledPair::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}
} // namespace detail

using DoubledPair = ::apache::thrift::adapt_detail::adapted_t<::thrift::test::lib::StructDoubler, ::test::fixtures::basic-python-capi::detail::DoubledPair>;


class StringPair final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::normal,
    ::apache::thrift::ident::doubled
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::string_t,
    ::apache::thrift::type::adapted<::thrift::test::lib::StringDoubler, ::apache::thrift::type::string_t>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 2;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  void __fbthrift_clear_terse_fields();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = StringPair;
  static constexpr bool __fbthrift_cpp2_is_union =
    false;


 public:

  StringPair() {
    ::apache::thrift::adapt_detail::construct<::thrift::test::lib::StringDoubler, 2>(__fbthrift_field_doubled, *this);
  }
  // FragileConstructor for use in initialization lists only.
  [[deprecated("This constructor is deprecated")]]
  StringPair(apache::thrift::FragileConstructor, ::std::string normal__arg, ::apache::thrift::adapt_detail::adapted_field_t<::thrift::test::lib::StringDoubler, 2, ::std::string, StringPair> doubled__arg);

  StringPair(StringPair&&) noexcept;
  StringPair(const StringPair& src);


  StringPair& operator=(StringPair&&) noexcept;
  StringPair& operator=(const StringPair& src);
 private:
  ::std::string __fbthrift_field_normal;
 private:
  ::apache::thrift::adapt_detail::adapted_field_t<::thrift::test::lib::StringDoubler, 2, ::std::string, StringPair> __fbthrift_field_doubled;
 private:
  apache::thrift::detail::isset_bitset<2, apache::thrift::detail::IssetBitsetOption::Unpacked> __isset;

 public:

  bool operator==(const StringPair&) const;
  bool operator<(const StringPair&) const;

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> normal_ref() const& {
    return {this->__fbthrift_field_normal, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> normal_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_normal), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> normal_ref() & {
    return {this->__fbthrift_field_normal, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> normal_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_normal), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> normal() const& {
    return {this->__fbthrift_field_normal, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> normal() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_normal), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> normal() & {
    return {this->__fbthrift_field_normal, __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::std::string>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> normal() && {
    return {static_cast<T&&>(this->__fbthrift_field_normal), __isset.at(0), __isset.bit(0)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::thrift::test::lib::StringDoubler, 2, ::std::string, StringPair>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> doubled_ref() const& {
    return {this->__fbthrift_field_doubled, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::thrift::test::lib::StringDoubler, 2, ::std::string, StringPair>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> doubled_ref() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_doubled), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::thrift::test::lib::StringDoubler, 2, ::std::string, StringPair>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> doubled_ref() & {
    return {this->__fbthrift_field_doubled, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::thrift::test::lib::StringDoubler, 2, ::std::string, StringPair>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> doubled_ref() && {
    return {static_cast<T&&>(this->__fbthrift_field_doubled), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::thrift::test::lib::StringDoubler, 2, ::std::string, StringPair>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&> doubled() const& {
    return {this->__fbthrift_field_doubled, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::thrift::test::lib::StringDoubler, 2, ::std::string, StringPair>>
  FOLLY_ERASE ::apache::thrift::field_ref<const T&&> doubled() const&& {
    return {static_cast<const T&&>(this->__fbthrift_field_doubled), __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::thrift::test::lib::StringDoubler, 2, ::std::string, StringPair>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&> doubled() & {
    return {this->__fbthrift_field_doubled, __isset.at(1), __isset.bit(1)};
  }

  template <typename..., typename T = ::apache::thrift::adapt_detail::adapted_field_t<::thrift::test::lib::StringDoubler, 2, ::std::string, StringPair>>
  FOLLY_ERASE ::apache::thrift::field_ref<T&&> doubled() && {
    return {static_cast<T&&>(this->__fbthrift_field_doubled), __isset.at(1), __isset.bit(1)};
  }

  const ::std::string& get_normal() const& {
    return __fbthrift_field_normal;
  }

  ::std::string get_normal() && {
    return std::move(__fbthrift_field_normal);
  }

  template <typename T_StringPair_normal_struct_setter = ::std::string>
  [[deprecated("Use `FOO.normal_ref() = BAR;` instead of `FOO.set_normal(BAR);`")]]
  ::std::string& set_normal(T_StringPair_normal_struct_setter&& normal_) {
    normal_ref() = std::forward<T_StringPair_normal_struct_setter>(normal_);
    return __fbthrift_field_normal;
  }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<StringPair>;
  friend void swap(StringPair& a, StringPair& b);
};

template <class Protocol_>
unsigned long StringPair::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


class MyUnion final  {
 private:
  friend struct ::apache::thrift::detail::st::struct_private_access;
  template<class> friend struct ::apache::thrift::detail::invoke_reffer;

  //  used by a static_assert in the corresponding source
  static constexpr bool __fbthrift_cpp2_gen_json = false;
  static const char* __fbthrift_thrift_uri();
  static const folly::StringPiece __fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord);
  static const folly::StringPiece __fbthrift_get_class_name();
  using __fbthrift_reflection_ident_list = folly::tag_t<
    ::apache::thrift::ident::myEnum,
    ::apache::thrift::ident::myStruct,
    ::apache::thrift::ident::myDataItem,
    ::apache::thrift::ident::doubleSet,
    ::apache::thrift::ident::doubleList,
    ::apache::thrift::ident::strMap
  >;

  static constexpr std::int16_t __fbthrift_reflection_field_id_list[] = {0,1,2,3,4,5,6};
  using __fbthrift_reflection_type_tags = folly::tag_t<
    ::apache::thrift::type::enum_t<::test::fixtures::basic-python-capi::MyEnum>,
    ::apache::thrift::type::struct_t<::test::fixtures::basic-python-capi::MyStruct>,
    ::apache::thrift::type::struct_t<::test::fixtures::basic-python-capi::MyDataItem>,
    ::apache::thrift::type::set<::apache::thrift::type::i64_t>,
    ::apache::thrift::type::list<::apache::thrift::type::double_t>,
    ::apache::thrift::type::map<::apache::thrift::type::binary_t, ::apache::thrift::type::string_t>
  >;

  static constexpr std::size_t __fbthrift_field_size_v = 6;

  template<class T>
  using __fbthrift_id = ::apache::thrift::type::field_id<__fbthrift_reflection_field_id_list[folly::to_underlying(T::value)]>;

  template<class T>
  using __fbthrift_type_tag = ::apache::thrift::detail::at<__fbthrift_reflection_type_tags, T::value>;

  template<class T>
  using __fbthrift_ident = ::apache::thrift::detail::at<__fbthrift_reflection_ident_list, T::value>;

  template<class T> using __fbthrift_ordinal = ::apache::thrift::type::ordinal_tag<
    ::apache::thrift::detail::getFieldOrdinal<T,
                                              __fbthrift_reflection_ident_list,
                                              __fbthrift_reflection_type_tags>(
      __fbthrift_reflection_field_id_list
    )
  >;
  void __fbthrift_clear();
  bool __fbthrift_is_empty() const;

 public:
  using __fbthrift_cpp2_type = MyUnion;
  static constexpr bool __fbthrift_cpp2_is_union =
    true;


 public:
  enum Type : int {
    __EMPTY__ = 0,
    myEnum = 1,
    myStruct = 2,
    myDataItem = 3,
    doubleSet = 4,
    doubleList = 5,
    strMap = 6,
  } ;

  MyUnion()
      : type_(folly::to_underlying(Type::__EMPTY__)) {}

  MyUnion(MyUnion&& rhs) noexcept
      : type_(folly::to_underlying(Type::__EMPTY__)) {
    if (this == &rhs) { return; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        return;
      }
      case Type::myEnum:
      {
        set_myEnum(std::move(rhs.value_.myEnum));
        break;
      }
      case Type::myStruct:
      {
        set_myStruct(std::move(rhs.value_.myStruct));
        break;
      }
      case Type::myDataItem:
      {
        set_myDataItem(std::move(rhs.value_.myDataItem));
        break;
      }
      case Type::doubleSet:
      {
        set_doubleSet(std::move(rhs.value_.doubleSet));
        break;
      }
      case Type::doubleList:
      {
        set_doubleList(std::move(rhs.value_.doubleList));
        break;
      }
      case Type::strMap:
      {
        set_strMap(std::move(rhs.value_.strMap));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    apache::thrift::clear(rhs);
  }

  MyUnion(const MyUnion& rhs)
      : type_(folly::to_underlying(Type::__EMPTY__)) {
    if (this == &rhs) { return; }
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        return;
      }
      case Type::myEnum:
      {
        set_myEnum(rhs.value_.myEnum);
        break;
      }
      case Type::myStruct:
      {
        set_myStruct(rhs.value_.myStruct);
        break;
      }
      case Type::myDataItem:
      {
        set_myDataItem(rhs.value_.myDataItem);
        break;
      }
      case Type::doubleSet:
      {
        set_doubleSet(rhs.value_.doubleSet);
        break;
      }
      case Type::doubleList:
      {
        set_doubleList(rhs.value_.doubleList);
        break;
      }
      case Type::strMap:
      {
        set_strMap(rhs.value_.strMap);
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
  }

  MyUnion& operator=(MyUnion&& rhs) noexcept {
    if (this == &rhs) { return *this; }
    __fbthrift_clear();
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        return *this;
      }
      case Type::myEnum:
      {
        set_myEnum(std::move(rhs.value_.myEnum));
        break;
      }
      case Type::myStruct:
      {
        set_myStruct(std::move(rhs.value_.myStruct));
        break;
      }
      case Type::myDataItem:
      {
        set_myDataItem(std::move(rhs.value_.myDataItem));
        break;
      }
      case Type::doubleSet:
      {
        set_doubleSet(std::move(rhs.value_.doubleSet));
        break;
      }
      case Type::doubleList:
      {
        set_doubleList(std::move(rhs.value_.doubleList));
        break;
      }
      case Type::strMap:
      {
        set_strMap(std::move(rhs.value_.strMap));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    apache::thrift::clear(rhs);
    return *this;
  }

  MyUnion& operator=(const MyUnion& rhs) {
    if (this == &rhs) { return *this; }
    __fbthrift_clear();
    switch (rhs.getType()) {
      case Type::__EMPTY__:
      {
        return *this;
      }
      case Type::myEnum:
      {
        set_myEnum(rhs.value_.myEnum);
        break;
      }
      case Type::myStruct:
      {
        set_myStruct(rhs.value_.myStruct);
        break;
      }
      case Type::myDataItem:
      {
        set_myDataItem(rhs.value_.myDataItem);
        break;
      }
      case Type::doubleSet:
      {
        set_doubleSet(rhs.value_.doubleSet);
        break;
      }
      case Type::doubleList:
      {
        set_doubleList(rhs.value_.doubleList);
        break;
      }
      case Type::strMap:
      {
        set_strMap(rhs.value_.strMap);
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    return *this;
  }

  ~MyUnion() {
    apache::thrift::clear(*this);
  }

  union storage_type {
    ::test::fixtures::basic-python-capi::MyEnum myEnum;
    ::test::fixtures::basic-python-capi::MyStruct myStruct;
    ::test::fixtures::basic-python-capi::MyDataItem myDataItem;
    ::std::set<::std::int64_t> doubleSet;
    ::std::vector<double> doubleList;
    ::std::map<::std::string, ::std::string> strMap;

    storage_type() {}
    ~storage_type() {}
  } ;

  bool operator==(const MyUnion&) const;
  bool operator<(const MyUnion&) const;

  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::test::fixtures::basic-python-capi::MyEnum& set_myEnum(::test::fixtures::basic-python-capi::MyEnum t = ::test::fixtures::basic-python-capi::MyEnum()) {
    using T0 = ::test::fixtures::basic-python-capi::MyEnum;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::myEnum);
    ::new (std::addressof(value_.myEnum)) T(t);
    return value_.myEnum;
  }

  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::test::fixtures::basic-python-capi::MyStruct& set_myStruct(::test::fixtures::basic-python-capi::MyStruct const &t) {
    using T0 = ::test::fixtures::basic-python-capi::MyStruct;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::myStruct);
    ::new (std::addressof(value_.myStruct)) T(t);
    return value_.myStruct;
  }

  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::test::fixtures::basic-python-capi::MyStruct& set_myStruct(::test::fixtures::basic-python-capi::MyStruct&& t) {
    using T0 = ::test::fixtures::basic-python-capi::MyStruct;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::myStruct);
    ::new (std::addressof(value_.myStruct)) T(std::move(t));
    return value_.myStruct;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<::test::fixtures::basic-python-capi::MyStruct, T...>> ::test::fixtures::basic-python-capi::MyStruct& set_myStruct(T&&... t) {
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::myStruct);
    ::new (std::addressof(value_.myStruct)) ::test::fixtures::basic-python-capi::MyStruct(std::forward<T>(t)...);
    return value_.myStruct;
  }

  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::test::fixtures::basic-python-capi::MyDataItem& set_myDataItem(::test::fixtures::basic-python-capi::MyDataItem const &t) {
    using T0 = ::test::fixtures::basic-python-capi::MyDataItem;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::myDataItem);
    ::new (std::addressof(value_.myDataItem)) T(t);
    return value_.myDataItem;
  }

  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::test::fixtures::basic-python-capi::MyDataItem& set_myDataItem(::test::fixtures::basic-python-capi::MyDataItem&& t) {
    using T0 = ::test::fixtures::basic-python-capi::MyDataItem;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::myDataItem);
    ::new (std::addressof(value_.myDataItem)) T(std::move(t));
    return value_.myDataItem;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<::test::fixtures::basic-python-capi::MyDataItem, T...>> ::test::fixtures::basic-python-capi::MyDataItem& set_myDataItem(T&&... t) {
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::myDataItem);
    ::new (std::addressof(value_.myDataItem)) ::test::fixtures::basic-python-capi::MyDataItem(std::forward<T>(t)...);
    return value_.myDataItem;
  }

  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::std::set<::std::int64_t>& set_doubleSet(::std::set<::std::int64_t> const &t) {
    using T0 = ::std::set<::std::int64_t>;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::doubleSet);
    ::new (std::addressof(value_.doubleSet)) T(t);
    return value_.doubleSet;
  }

  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::std::set<::std::int64_t>& set_doubleSet(::std::set<::std::int64_t>&& t) {
    using T0 = ::std::set<::std::int64_t>;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::doubleSet);
    ::new (std::addressof(value_.doubleSet)) T(std::move(t));
    return value_.doubleSet;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<::std::set<::std::int64_t>, T...>> ::std::set<::std::int64_t>& set_doubleSet(T&&... t) {
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::doubleSet);
    ::new (std::addressof(value_.doubleSet)) ::std::set<::std::int64_t>(std::forward<T>(t)...);
    return value_.doubleSet;
  }

  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::std::vector<double>& set_doubleList(::std::vector<double> const &t) {
    using T0 = ::std::vector<double>;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::doubleList);
    ::new (std::addressof(value_.doubleList)) T(t);
    return value_.doubleList;
  }

  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::std::vector<double>& set_doubleList(::std::vector<double>&& t) {
    using T0 = ::std::vector<double>;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::doubleList);
    ::new (std::addressof(value_.doubleList)) T(std::move(t));
    return value_.doubleList;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<::std::vector<double>, T...>> ::std::vector<double>& set_doubleList(T&&... t) {
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::doubleList);
    ::new (std::addressof(value_.doubleList)) ::std::vector<double>(std::forward<T>(t)...);
    return value_.doubleList;
  }

  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::std::map<::std::string, ::std::string>& set_strMap(::std::map<::std::string, ::std::string> const &t) {
    using T0 = ::std::map<::std::string, ::std::string>;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::strMap);
    ::new (std::addressof(value_.strMap)) T(t);
    return value_.strMap;
  }

  template <typename... A, std::enable_if_t<!sizeof...(A), int> = 0>
  ::std::map<::std::string, ::std::string>& set_strMap(::std::map<::std::string, ::std::string>&& t) {
    using T0 = ::std::map<::std::string, ::std::string>;
    using T = folly::type_t<T0, A...>;
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::strMap);
    ::new (std::addressof(value_.strMap)) T(std::move(t));
    return value_.strMap;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<::std::map<::std::string, ::std::string>, T...>> ::std::map<::std::string, ::std::string>& set_strMap(T&&... t) {
    __fbthrift_clear();
    type_ = folly::to_underlying(Type::strMap);
    ::new (std::addressof(value_.strMap)) ::std::map<::std::string, ::std::string>(std::forward<T>(t)...);
    return value_.strMap;
  }

  ::test::fixtures::basic-python-capi::MyEnum const& get_myEnum() const {
    if (getType() != Type::myEnum) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.myEnum;
  }

  ::test::fixtures::basic-python-capi::MyStruct const& get_myStruct() const {
    if (getType() != Type::myStruct) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.myStruct;
  }

  ::test::fixtures::basic-python-capi::MyDataItem const& get_myDataItem() const {
    if (getType() != Type::myDataItem) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.myDataItem;
  }

  ::std::set<::std::int64_t> const& get_doubleSet() const {
    if (getType() != Type::doubleSet) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.doubleSet;
  }

  ::std::vector<double> const& get_doubleList() const {
    if (getType() != Type::doubleList) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.doubleList;
  }

  ::std::map<::std::string, ::std::string> const& get_strMap() const {
    if (getType() != Type::strMap) {
      ::apache::thrift::detail::throw_on_bad_union_field_access();
    }
    return value_.strMap;
  }

  ::test::fixtures::basic-python-capi::MyEnum& mutable_myEnum() {
    assert(getType() == Type::myEnum);
    return value_.myEnum;
  }

  ::test::fixtures::basic-python-capi::MyStruct& mutable_myStruct() {
    assert(getType() == Type::myStruct);
    return value_.myStruct;
  }

  ::test::fixtures::basic-python-capi::MyDataItem& mutable_myDataItem() {
    assert(getType() == Type::myDataItem);
    return value_.myDataItem;
  }

  ::std::set<::std::int64_t>& mutable_doubleSet() {
    assert(getType() == Type::doubleSet);
    return value_.doubleSet;
  }

  ::std::vector<double>& mutable_doubleList() {
    assert(getType() == Type::doubleList);
    return value_.doubleList;
  }

  ::std::map<::std::string, ::std::string>& mutable_strMap() {
    assert(getType() == Type::strMap);
    return value_.strMap;
  }

  ::test::fixtures::basic-python-capi::MyEnum move_myEnum() {
    assert(getType() == Type::myEnum);
    return std::move(value_.myEnum);
  }

  ::test::fixtures::basic-python-capi::MyStruct move_myStruct() {
    assert(getType() == Type::myStruct);
    return std::move(value_.myStruct);
  }

  ::test::fixtures::basic-python-capi::MyDataItem move_myDataItem() {
    assert(getType() == Type::myDataItem);
    return std::move(value_.myDataItem);
  }

  ::std::set<::std::int64_t> move_doubleSet() {
    assert(getType() == Type::doubleSet);
    return std::move(value_.doubleSet);
  }

  ::std::vector<double> move_doubleList() {
    assert(getType() == Type::doubleList);
    return std::move(value_.doubleList);
  }

  ::std::map<::std::string, ::std::string> move_strMap() {
    assert(getType() == Type::strMap);
    return std::move(value_.strMap);
  }

  template <typename..., typename T = ::test::fixtures::basic-python-capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> myEnum_ref() const& {
    return {value_.myEnum, type_, folly::to_underlying(Type::myEnum), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::test::fixtures::basic-python-capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> myEnum_ref() const&& {
    return {std::move(value_.myEnum), type_, folly::to_underlying(Type::myEnum), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::test::fixtures::basic-python-capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> myEnum_ref() & {
    return {value_.myEnum, type_, folly::to_underlying(Type::myEnum), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::test::fixtures::basic-python-capi::MyEnum>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> myEnum_ref() && {
    return {std::move(value_.myEnum), type_, folly::to_underlying(Type::myEnum), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  template <typename..., typename T = ::test::fixtures::basic-python-capi::MyStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> myStruct_ref() const& {
    return {value_.myStruct, type_, folly::to_underlying(Type::myStruct), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::test::fixtures::basic-python-capi::MyStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> myStruct_ref() const&& {
    return {std::move(value_.myStruct), type_, folly::to_underlying(Type::myStruct), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::test::fixtures::basic-python-capi::MyStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> myStruct_ref() & {
    return {value_.myStruct, type_, folly::to_underlying(Type::myStruct), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::test::fixtures::basic-python-capi::MyStruct>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> myStruct_ref() && {
    return {std::move(value_.myStruct), type_, folly::to_underlying(Type::myStruct), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  template <typename..., typename T = ::test::fixtures::basic-python-capi::MyDataItem>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> myDataItem_ref() const& {
    return {value_.myDataItem, type_, folly::to_underlying(Type::myDataItem), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::test::fixtures::basic-python-capi::MyDataItem>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> myDataItem_ref() const&& {
    return {std::move(value_.myDataItem), type_, folly::to_underlying(Type::myDataItem), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::test::fixtures::basic-python-capi::MyDataItem>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> myDataItem_ref() & {
    return {value_.myDataItem, type_, folly::to_underlying(Type::myDataItem), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::test::fixtures::basic-python-capi::MyDataItem>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> myDataItem_ref() && {
    return {std::move(value_.myDataItem), type_, folly::to_underlying(Type::myDataItem), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  template <typename..., typename T = ::std::set<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> doubleSet_ref() const& {
    return {value_.doubleSet, type_, folly::to_underlying(Type::doubleSet), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::set<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> doubleSet_ref() const&& {
    return {std::move(value_.doubleSet), type_, folly::to_underlying(Type::doubleSet), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::set<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> doubleSet_ref() & {
    return {value_.doubleSet, type_, folly::to_underlying(Type::doubleSet), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::set<::std::int64_t>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> doubleSet_ref() && {
    return {std::move(value_.doubleSet), type_, folly::to_underlying(Type::doubleSet), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> doubleList_ref() const& {
    return {value_.doubleList, type_, folly::to_underlying(Type::doubleList), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> doubleList_ref() const&& {
    return {std::move(value_.doubleList), type_, folly::to_underlying(Type::doubleList), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> doubleList_ref() & {
    return {value_.doubleList, type_, folly::to_underlying(Type::doubleList), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::vector<double>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> doubleList_ref() && {
    return {std::move(value_.doubleList), type_, folly::to_underlying(Type::doubleList), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&> strMap_ref() const& {
    return {value_.strMap, type_, folly::to_underlying(Type::strMap), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<const T&&> strMap_ref() const&& {
    return {std::move(value_.strMap), type_, folly::to_underlying(Type::strMap), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&> strMap_ref() & {
    return {value_.strMap, type_, folly::to_underlying(Type::strMap), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }

  template <typename..., typename T = ::std::map<::std::string, ::std::string>>
  FOLLY_ERASE ::apache::thrift::union_field_ref<T&&> strMap_ref() && {
    return {std::move(value_.strMap), type_, folly::to_underlying(Type::strMap), this, ::apache::thrift::detail::union_field_ref_owner_vtable_for<decltype(*this)>};
  }
  Type getType() const { return static_cast<Type>(type_); }

  template <class Protocol_>
  unsigned long read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
 protected:
  template <class T>
  void destruct(T &val) {
    (&val)->~T();
  }

  storage_type value_;
  std::underlying_type_t<Type> type_;

 private:
  template <class Protocol_>
  void readNoXfer(Protocol_* iprot);

  friend class ::apache::thrift::Cpp2Ops<MyUnion>;
  friend void swap(MyUnion& a, MyUnion& b);
};

template <class Protocol_>
unsigned long MyUnion::read(Protocol_* iprot) {
  auto _xferStart = iprot->getCursorPosition();
  readNoXfer(iprot);
  return iprot->getCursorPosition() - _xferStart;
}


}}} // test::fixtures::basic-python-capi

namespace apache { namespace thrift {

template <> struct TEnumDataStorage<::test::fixtures::basic-python-capi::MyUnion::Type>;

template <> struct TEnumTraits<::test::fixtures::basic-python-capi::MyUnion::Type> {
  using type = ::test::fixtures::basic-python-capi::MyUnion::Type;

  static constexpr std::size_t const size = 6;
  static folly::Range<type const*> const values;
  static folly::Range<folly::StringPiece const*> const names;

  static bool findName(type value, folly::StringPiece* out) noexcept;
  static bool findValue(folly::StringPiece name, type* out) noexcept;

#if FOLLY_HAS_STRING_VIEW
  static bool findName(type value, std::string_view* out) noexcept {
    folly::StringPiece outp;
    return findName(value, &outp) && ((*out = outp), true);
  }
#endif
  static char const* findName(type value) noexcept {
    folly::StringPiece ret;
    (void)findName(value, &ret);
    return ret.data();
  }
};
}} // apache::thrift
