/**
 * Autogenerated by Thrift for thrift/compiler/test/fixtures/basic-python-capi/src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#include "thrift/compiler/test/fixtures/basic-python-capi/gen-cpp2/module_types.h"
#include "thrift/compiler/test/fixtures/basic-python-capi/gen-cpp2/module_types.tcc"

#include <thrift/lib/cpp2/gen/module_types_cpp.h>

#include "thrift/compiler/test/fixtures/basic-python-capi/gen-cpp2/module_data.h"


namespace apache { namespace thrift {

constexpr std::size_t const TEnumTraits<::test::fixtures::basic-python-capi::MyEnum>::size;
folly::Range<::test::fixtures::basic-python-capi::MyEnum const*> const TEnumTraits<::test::fixtures::basic-python-capi::MyEnum>::values = folly::range(TEnumDataStorage<::test::fixtures::basic-python-capi::MyEnum>::values);
folly::Range<folly::StringPiece const*> const TEnumTraits<::test::fixtures::basic-python-capi::MyEnum>::names = folly::range(TEnumDataStorage<::test::fixtures::basic-python-capi::MyEnum>::names);

bool TEnumTraits<::test::fixtures::basic-python-capi::MyEnum>::findName(type value, folly::StringPiece* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::test::fixtures::basic-python-capi::MyEnum>::findValue(folly::StringPiece name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}

}} // apache::thrift

namespace test { namespace fixtures { namespace basic-python-capi {
#ifndef ANDROID
FOLLY_PUSH_WARNING
FOLLY_GNU_DISABLE_WARNING("-Wdeprecated-declarations")
const _MyEnum_EnumMapFactory::ValuesToNamesMapType _MyEnum_VALUES_TO_NAMES = _MyEnum_EnumMapFactory::makeValuesToNamesMap();
FOLLY_POP_WARNING
#endif
}}} // test::fixtures::basic-python-capi

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::basic-python-capi::MyStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::basic-python-capi::MyStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace basic-python-capi {

const char* MyStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/basic-python-capi/MyStruct";
}

const folly::StringPiece MyStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece MyStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyStruct>::name;
}

MyStruct::MyStruct(const MyStruct&) = default;
MyStruct& MyStruct::operator=(const MyStruct&) = default;
MyStruct::MyStruct() :
      __fbthrift_field_MyIntField(),
      __fbthrift_field_myEnum(),
      __fbthrift_field_oneway() {
}


MyStruct::~MyStruct() {}

MyStruct::MyStruct(FOLLY_MAYBE_UNUSED MyStruct&& other) noexcept :
    __fbthrift_field_MyIntField(std::move(other.__fbthrift_field_MyIntField)),
    __fbthrift_field_MyStringField(std::move(other.__fbthrift_field_MyStringField)),
    __fbthrift_field_MyDataField(std::move(other.__fbthrift_field_MyDataField)),
    __fbthrift_field_myEnum(std::move(other.__fbthrift_field_myEnum)),
    __fbthrift_field_oneway(std::move(other.__fbthrift_field_oneway)),
    __fbthrift_field_floatList(std::move(other.__fbthrift_field_floatList)),
    __fbthrift_field_strMap(std::move(other.__fbthrift_field_strMap)),
    __fbthrift_field_floatSet(std::move(other.__fbthrift_field_floatSet)),
    __isset(other.__isset) {
}

MyStruct& MyStruct::operator=(FOLLY_MAYBE_UNUSED MyStruct&& other) noexcept {
    this->__fbthrift_field_MyIntField = std::move(other.__fbthrift_field_MyIntField);
    this->__fbthrift_field_MyStringField = std::move(other.__fbthrift_field_MyStringField);
    this->__fbthrift_field_MyDataField = std::move(other.__fbthrift_field_MyDataField);
    this->__fbthrift_field_myEnum = std::move(other.__fbthrift_field_myEnum);
    this->__fbthrift_field_oneway = std::move(other.__fbthrift_field_oneway);
    this->__fbthrift_field_floatList = std::move(other.__fbthrift_field_floatList);
    this->__fbthrift_field_strMap = std::move(other.__fbthrift_field_strMap);
    this->__fbthrift_field_floatSet = std::move(other.__fbthrift_field_floatSet);
    __isset = other.__isset;
    return *this;
}


MyStruct::MyStruct(apache::thrift::FragileConstructor, ::std::int64_t MyIntField__arg, ::std::string MyStringField__arg, ::test::fixtures::basic-python-capi::MyDataItem MyDataField__arg, ::test::fixtures::basic-python-capi::MyEnum myEnum__arg, bool oneway__arg, ::std::vector<float> floatList__arg, ::std::map<::std::string, ::std::string> strMap__arg, ::std::set<::std::int32_t> floatSet__arg) :
    __fbthrift_field_MyIntField(std::move(MyIntField__arg)),
    __fbthrift_field_MyStringField(std::move(MyStringField__arg)),
    __fbthrift_field_MyDataField(std::move(MyDataField__arg)),
    __fbthrift_field_myEnum(std::move(myEnum__arg)),
    __fbthrift_field_oneway(std::move(oneway__arg)),
    __fbthrift_field_floatList(std::move(floatList__arg)),
    __fbthrift_field_strMap(std::move(strMap__arg)),
    __fbthrift_field_floatSet(std::move(floatSet__arg)) {
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
  __isset.set(folly::index_constant<7>(), true);
}


void MyStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_MyIntField = ::std::int64_t();
  this->__fbthrift_field_MyStringField = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->__fbthrift_field_myEnum = ::test::fixtures::basic-python-capi::MyEnum();
  this->__fbthrift_field_oneway = bool();
  this->__fbthrift_field_floatList.clear();
  this->__fbthrift_field_strMap.clear();
  this->__fbthrift_field_floatSet.clear();
  __isset = {};
}

void MyStruct::__fbthrift_clear_terse_fields() {
}

bool MyStruct::__fbthrift_is_empty() const {
  return false;
}

bool MyStruct::operator==(FOLLY_MAYBE_UNUSED const MyStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.MyIntField_ref() == rhs.MyIntField_ref())) {
    return false;
  }
  if (!(lhs.MyStringField_ref() == rhs.MyStringField_ref())) {
    return false;
  }
  if (!(lhs.MyDataField_ref() == rhs.MyDataField_ref())) {
    return false;
  }
  if (!(lhs.myEnum_ref() == rhs.myEnum_ref())) {
    return false;
  }
  if (!(lhs.oneway_ref() == rhs.oneway_ref())) {
    return false;
  }
  if (!(lhs.floatList_ref() == rhs.floatList_ref())) {
    return false;
  }
  if (!(lhs.strMap_ref() == rhs.strMap_ref())) {
    return false;
  }
  if (!(lhs.floatSet_ref() == rhs.floatSet_ref())) {
    return false;
  }
  return true;
}

bool MyStruct::operator<(FOLLY_MAYBE_UNUSED const MyStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}

const ::test::fixtures::basic-python-capi::MyDataItem& MyStruct::get_MyDataField() const& {
  return __fbthrift_field_MyDataField;
}

::test::fixtures::basic-python-capi::MyDataItem MyStruct::get_MyDataField() && {
  return std::move(__fbthrift_field_MyDataField);
}

const ::std::vector<float>& MyStruct::get_floatList() const& {
  return __fbthrift_field_floatList;
}

::std::vector<float> MyStruct::get_floatList() && {
  return std::move(__fbthrift_field_floatList);
}

const ::std::map<::std::string, ::std::string>& MyStruct::get_strMap() const& {
  return __fbthrift_field_strMap;
}

::std::map<::std::string, ::std::string> MyStruct::get_strMap() && {
  return std::move(__fbthrift_field_strMap);
}

const ::std::set<::std::int32_t>& MyStruct::get_floatSet() const& {
  return __fbthrift_field_floatSet;
}

::std::set<::std::int32_t> MyStruct::get_floatSet() && {
  return std::move(__fbthrift_field_floatSet);
}


void swap(FOLLY_MAYBE_UNUSED MyStruct& a, FOLLY_MAYBE_UNUSED MyStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_MyIntField, b.__fbthrift_field_MyIntField);
  swap(a.__fbthrift_field_MyStringField, b.__fbthrift_field_MyStringField);
  swap(a.__fbthrift_field_MyDataField, b.__fbthrift_field_MyDataField);
  swap(a.__fbthrift_field_myEnum, b.__fbthrift_field_myEnum);
  swap(a.__fbthrift_field_oneway, b.__fbthrift_field_oneway);
  swap(a.__fbthrift_field_floatList, b.__fbthrift_field_floatList);
  swap(a.__fbthrift_field_strMap, b.__fbthrift_field_strMap);
  swap(a.__fbthrift_field_floatSet, b.__fbthrift_field_floatSet);
  swap(a.__isset, b.__isset);
}

template void MyStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyStruct,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::basic-python-capi::MyDataItem>,
    "inconsistent use of json option");

}}} // test::fixtures::basic-python-capi

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::basic-python-capi::MyDataItem>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::basic-python-capi::MyDataItem>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace basic-python-capi {

const char* MyDataItem::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/basic-python-capi/MyDataItem";
}

const folly::StringPiece MyDataItem::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyDataItem>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece MyDataItem::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyDataItem>::name;
}


MyDataItem::MyDataItem(apache::thrift::FragileConstructor) {}


void MyDataItem::__fbthrift_clear() {
  // clear all fields
}

void MyDataItem::__fbthrift_clear_terse_fields() {
}

bool MyDataItem::__fbthrift_is_empty() const {
  return true;
}

bool MyDataItem::operator==(FOLLY_MAYBE_UNUSED const MyDataItem& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  return true;
}

bool MyDataItem::operator<(FOLLY_MAYBE_UNUSED const MyDataItem& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap(FOLLY_MAYBE_UNUSED MyDataItem& a, FOLLY_MAYBE_UNUSED MyDataItem& b) {
  using ::std::swap;
}

template void MyDataItem::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyDataItem::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyDataItem::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyDataItem::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyDataItem::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyDataItem::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyDataItem::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyDataItem::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // test::fixtures::basic-python-capi

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::basic-python-capi::TransitiveDoubler>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::basic-python-capi::TransitiveDoubler>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace basic-python-capi {

const char* TransitiveDoubler::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/basic-python-capi/TransitiveDoubler";
}

const folly::StringPiece TransitiveDoubler::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<TransitiveDoubler>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece TransitiveDoubler::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<TransitiveDoubler>::name;
}


TransitiveDoubler::TransitiveDoubler(apache::thrift::FragileConstructor) {}


void TransitiveDoubler::__fbthrift_clear() {
  // clear all fields
}

void TransitiveDoubler::__fbthrift_clear_terse_fields() {
}

bool TransitiveDoubler::__fbthrift_is_empty() const {
  return true;
}

bool TransitiveDoubler::operator==(FOLLY_MAYBE_UNUSED const TransitiveDoubler& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  return true;
}

bool TransitiveDoubler::operator<(FOLLY_MAYBE_UNUSED const TransitiveDoubler& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap(FOLLY_MAYBE_UNUSED TransitiveDoubler& a, FOLLY_MAYBE_UNUSED TransitiveDoubler& b) {
  using ::std::swap;
}

template void TransitiveDoubler::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t TransitiveDoubler::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t TransitiveDoubler::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t TransitiveDoubler::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void TransitiveDoubler::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t TransitiveDoubler::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t TransitiveDoubler::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t TransitiveDoubler::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // test::fixtures::basic-python-capi

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::basic-python-capi::detail::DoubledPair>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::basic-python-capi::detail::DoubledPair>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace basic-python-capi {namespace detail {


const char* DoubledPair::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/basic-python-capi/DoubledPair";
}

const folly::StringPiece DoubledPair::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<DoubledPair>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece DoubledPair::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<DoubledPair>::name;
}

DoubledPair::DoubledPair(const DoubledPair&) = default;
DoubledPair& DoubledPair::operator=(const DoubledPair&) = default;
DoubledPair::DoubledPair(FOLLY_MAYBE_UNUSED DoubledPair&& other) noexcept :
    __fbthrift_field_s(std::move(other.__fbthrift_field_s)),
    __fbthrift_field_x(std::move(other.__fbthrift_field_x)),
    __isset(other.__isset) {
}

DoubledPair& DoubledPair::operator=(FOLLY_MAYBE_UNUSED DoubledPair&& other) noexcept {
    this->__fbthrift_field_s = std::move(other.__fbthrift_field_s);
    this->__fbthrift_field_x = std::move(other.__fbthrift_field_x);
    __isset = other.__isset;
    return *this;
}


DoubledPair::DoubledPair(apache::thrift::FragileConstructor, ::std::string s__arg, ::std::int32_t x__arg) :
    __fbthrift_field_s(std::move(s__arg)),
    __fbthrift_field_x(std::move(x__arg)) {
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
}


void DoubledPair::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_s = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  this->__fbthrift_field_x = ::std::int32_t();
  __isset = {};
}

void DoubledPair::__fbthrift_clear_terse_fields() {
}

bool DoubledPair::__fbthrift_is_empty() const {
  return false;
}

bool DoubledPair::operator==(FOLLY_MAYBE_UNUSED const DoubledPair& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.s_ref() == rhs.s_ref())) {
    return false;
  }
  if (!(lhs.x_ref() == rhs.x_ref())) {
    return false;
  }
  return true;
}

bool DoubledPair::operator<(FOLLY_MAYBE_UNUSED const DoubledPair& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap(FOLLY_MAYBE_UNUSED DoubledPair& a, FOLLY_MAYBE_UNUSED DoubledPair& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_s, b.__fbthrift_field_s);
  swap(a.__fbthrift_field_x, b.__fbthrift_field_x);
  swap(a.__isset, b.__isset);
}

template void DoubledPair::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t DoubledPair::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t DoubledPair::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t DoubledPair::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void DoubledPair::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t DoubledPair::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t DoubledPair::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t DoubledPair::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


} // namespace detail
}}} // test::fixtures::basic-python-capi

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::basic-python-capi::StringPair>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::basic-python-capi::StringPair>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace basic-python-capi {

const char* StringPair::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/basic-python-capi/StringPair";
}

const folly::StringPiece StringPair::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<StringPair>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece StringPair::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<StringPair>::name;
}

StringPair::StringPair(const StringPair& srcObj) :
    __fbthrift_field_normal(srcObj.__fbthrift_field_normal),
    __fbthrift_field_doubled(srcObj.__fbthrift_field_doubled),
    __isset(srcObj.__isset) {
  ::apache::thrift::adapt_detail::construct<::thrift::test::lib::StringDoubler, 2>(__fbthrift_field_doubled, *this);
}

StringPair& StringPair::operator=(const StringPair& other) {
  StringPair tmp(other);
  swap(*this, tmp);
  return *this;
}

StringPair::StringPair(FOLLY_MAYBE_UNUSED StringPair&& other) noexcept :
    __fbthrift_field_normal(std::move(other.__fbthrift_field_normal)),
    __fbthrift_field_doubled(std::move(other.__fbthrift_field_doubled)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<::thrift::test::lib::StringDoubler, 2>(__fbthrift_field_doubled, *this);
}

StringPair& StringPair::operator=(FOLLY_MAYBE_UNUSED StringPair&& other) noexcept {
    this->__fbthrift_field_normal = std::move(other.__fbthrift_field_normal);
    this->__fbthrift_field_doubled = std::move(other.__fbthrift_field_doubled);
    __isset = other.__isset;
    return *this;
}


StringPair::StringPair(apache::thrift::FragileConstructor, ::std::string normal__arg, ::apache::thrift::adapt_detail::adapted_field_t<::thrift::test::lib::StringDoubler, 2, ::std::string, StringPair> doubled__arg) :
    __fbthrift_field_normal(std::move(normal__arg)),
    __fbthrift_field_doubled(std::move(doubled__arg)) {
  ::apache::thrift::adapt_detail::construct<::thrift::test::lib::StringDoubler, 2>(__fbthrift_field_doubled, *this);
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
}


void StringPair::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_normal = apache::thrift::StringTraits<std::string>::fromStringLiteral("");
  ::apache::thrift::adapt_detail::clear<::thrift::test::lib::StringDoubler, 2>(__fbthrift_field_doubled, *this);
  __isset = {};
}

void StringPair::__fbthrift_clear_terse_fields() {
}

bool StringPair::__fbthrift_is_empty() const {
  return false;
}

bool StringPair::operator==(FOLLY_MAYBE_UNUSED const StringPair& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.normal_ref() == rhs.normal_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<::thrift::test::lib::StringDoubler>(lhs.__fbthrift_field_doubled, rhs.__fbthrift_field_doubled)) {
    return false;
  }
  return true;
}

bool StringPair::operator<(FOLLY_MAYBE_UNUSED const StringPair& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap(FOLLY_MAYBE_UNUSED StringPair& a, FOLLY_MAYBE_UNUSED StringPair& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_normal, b.__fbthrift_field_normal);
  swap(a.__fbthrift_field_doubled, b.__fbthrift_field_doubled);
  swap(a.__isset, b.__isset);
}

template void StringPair::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t StringPair::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t StringPair::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t StringPair::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void StringPair::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t StringPair::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t StringPair::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t StringPair::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // test::fixtures::basic-python-capi

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::basic-python-capi::EmptyStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::basic-python-capi::EmptyStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace basic-python-capi {

const char* EmptyStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/basic-python-capi/EmptyStruct";
}

const folly::StringPiece EmptyStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<EmptyStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece EmptyStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<EmptyStruct>::name;
}


EmptyStruct::EmptyStruct(apache::thrift::FragileConstructor) {}


void EmptyStruct::__fbthrift_clear() {
  // clear all fields
}

void EmptyStruct::__fbthrift_clear_terse_fields() {
}

bool EmptyStruct::__fbthrift_is_empty() const {
  return true;
}

bool EmptyStruct::operator==(FOLLY_MAYBE_UNUSED const EmptyStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  return true;
}

bool EmptyStruct::operator<(FOLLY_MAYBE_UNUSED const EmptyStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap(FOLLY_MAYBE_UNUSED EmptyStruct& a, FOLLY_MAYBE_UNUSED EmptyStruct& b) {
  using ::std::swap;
}

template void EmptyStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t EmptyStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t EmptyStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t EmptyStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void EmptyStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t EmptyStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t EmptyStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t EmptyStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // test::fixtures::basic-python-capi

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::basic-python-capi::PrimitiveStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::basic-python-capi::PrimitiveStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace basic-python-capi {

const char* PrimitiveStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/basic-python-capi/PrimitiveStruct";
}

const folly::StringPiece PrimitiveStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<PrimitiveStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece PrimitiveStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<PrimitiveStruct>::name;
}

PrimitiveStruct::PrimitiveStruct(const PrimitiveStruct& srcObj) :
    __fbthrift_field_booly(srcObj.__fbthrift_field_booly),
    __fbthrift_field_charry(srcObj.__fbthrift_field_charry),
    __fbthrift_field_shortay(srcObj.__fbthrift_field_shortay),
    __fbthrift_field_inty(srcObj.__fbthrift_field_inty),
    __fbthrift_field_longy(srcObj.__fbthrift_field_longy),
    __fbthrift_field_floaty(srcObj.__fbthrift_field_floaty),
    __fbthrift_field_dubby(srcObj.__fbthrift_field_dubby),
    __fbthrift_field_stringy(::apache::thrift::detail::st::copy_field<
          ::apache::thrift::type_class::string>(srcObj.__fbthrift_field_stringy)),
    __fbthrift_field_bytey(srcObj.__fbthrift_field_bytey),
    __isset(srcObj.__isset) {
}

PrimitiveStruct& PrimitiveStruct::operator=(const PrimitiveStruct& other) {
  PrimitiveStruct tmp(other);
  swap(*this, tmp);
  return *this;
}

PrimitiveStruct::PrimitiveStruct() :
      __fbthrift_field_booly(),
      __fbthrift_field_charry(),
      __fbthrift_field_shortay(),
      __fbthrift_field_inty(),
      __fbthrift_field_longy(),
      __fbthrift_field_floaty() {
}


PrimitiveStruct::~PrimitiveStruct() {}

PrimitiveStruct::PrimitiveStruct(FOLLY_MAYBE_UNUSED PrimitiveStruct&& other) noexcept :
    __fbthrift_field_booly(std::move(other.__fbthrift_field_booly)),
    __fbthrift_field_charry(std::move(other.__fbthrift_field_charry)),
    __fbthrift_field_shortay(std::move(other.__fbthrift_field_shortay)),
    __fbthrift_field_inty(std::move(other.__fbthrift_field_inty)),
    __fbthrift_field_longy(std::move(other.__fbthrift_field_longy)),
    __fbthrift_field_floaty(std::move(other.__fbthrift_field_floaty)),
    __fbthrift_field_dubby(std::move(other.__fbthrift_field_dubby)),
    __fbthrift_field_stringy(std::move(other.__fbthrift_field_stringy)),
    __fbthrift_field_bytey(std::move(other.__fbthrift_field_bytey)),
    __isset(other.__isset) {
}

PrimitiveStruct& PrimitiveStruct::operator=(FOLLY_MAYBE_UNUSED PrimitiveStruct&& other) noexcept {
    this->__fbthrift_field_booly = std::move(other.__fbthrift_field_booly);
    this->__fbthrift_field_charry = std::move(other.__fbthrift_field_charry);
    this->__fbthrift_field_shortay = std::move(other.__fbthrift_field_shortay);
    this->__fbthrift_field_inty = std::move(other.__fbthrift_field_inty);
    this->__fbthrift_field_longy = std::move(other.__fbthrift_field_longy);
    this->__fbthrift_field_floaty = std::move(other.__fbthrift_field_floaty);
    this->__fbthrift_field_dubby = std::move(other.__fbthrift_field_dubby);
    this->__fbthrift_field_stringy = std::move(other.__fbthrift_field_stringy);
    this->__fbthrift_field_bytey = std::move(other.__fbthrift_field_bytey);
    __isset = other.__isset;
    return *this;
}


PrimitiveStruct::PrimitiveStruct(apache::thrift::FragileConstructor, bool booly__arg, ::test::fixtures::basic-python-capi::signed_byte charry__arg, uint16_t shortay__arg, ::std::int32_t inty__arg, uint64_t longy__arg, float floaty__arg, ::apache::thrift::detail::boxed_value_ptr<double> dubby__arg, ::std::unique_ptr<::std::string> stringy__arg, ::std::shared_ptr<const ::std::string> bytey__arg) :
    __fbthrift_field_booly(std::move(booly__arg)),
    __fbthrift_field_charry(std::move(charry__arg)),
    __fbthrift_field_shortay(std::move(shortay__arg)),
    __fbthrift_field_inty(std::move(inty__arg)),
    __fbthrift_field_longy(std::move(longy__arg)),
    __fbthrift_field_floaty(std::move(floaty__arg)),
    __fbthrift_field_dubby(std::move(dubby__arg)),
    __fbthrift_field_stringy(std::move(stringy__arg)),
    __fbthrift_field_bytey(std::move(bytey__arg)) {
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
}


void PrimitiveStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_booly = bool();
  this->__fbthrift_field_charry = ::test::fixtures::basic-python-capi::signed_byte();
  this->__fbthrift_field_shortay = uint16_t();
  this->__fbthrift_field_inty = ::std::int32_t();
  this->__fbthrift_field_longy = uint64_t();
  this->__fbthrift_field_floaty = float();
  this->__fbthrift_field_dubby.reset();
  this->__fbthrift_field_stringy.reset();
  this->__fbthrift_field_bytey.reset();
  __isset = {};
}

void PrimitiveStruct::__fbthrift_clear_terse_fields() {
}

bool PrimitiveStruct::__fbthrift_is_empty() const {
  return false;
}

bool PrimitiveStruct::operator==(FOLLY_MAYBE_UNUSED const PrimitiveStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.booly_ref() == rhs.booly_ref())) {
    return false;
  }
  if (!(lhs.charry_ref() == rhs.charry_ref())) {
    return false;
  }
  if (!(lhs.shortay_ref() == rhs.shortay_ref())) {
    return false;
  }
  if (!(lhs.inty_ref() == rhs.inty_ref())) {
    return false;
  }
  if (!(lhs.longy_ref() == rhs.longy_ref())) {
    return false;
  }
  if (!(lhs.floaty_ref() == rhs.floaty_ref())) {
    return false;
  }
  if ((!::apache::thrift::detail::pointer_equal(lhs.dubby_ref(), rhs.dubby_ref()))) {
    return false;
  }
  if ((!::apache::thrift::detail::pointer_equal(lhs.stringy_ref(), rhs.stringy_ref()))) {
    return false;
  }
  if ((!::apache::thrift::detail::pointer_equal(lhs.bytey_ref(), rhs.bytey_ref()))) {
    return false;
  }
  return true;
}

bool PrimitiveStruct::operator<(FOLLY_MAYBE_UNUSED const PrimitiveStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}


void swap(FOLLY_MAYBE_UNUSED PrimitiveStruct& a, FOLLY_MAYBE_UNUSED PrimitiveStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_booly, b.__fbthrift_field_booly);
  swap(a.__fbthrift_field_charry, b.__fbthrift_field_charry);
  swap(a.__fbthrift_field_shortay, b.__fbthrift_field_shortay);
  swap(a.__fbthrift_field_inty, b.__fbthrift_field_inty);
  swap(a.__fbthrift_field_longy, b.__fbthrift_field_longy);
  swap(a.__fbthrift_field_floaty, b.__fbthrift_field_floaty);
  swap(a.__fbthrift_field_dubby, b.__fbthrift_field_dubby);
  swap(a.__fbthrift_field_stringy, b.__fbthrift_field_stringy);
  swap(a.__fbthrift_field_bytey, b.__fbthrift_field_bytey);
  swap(a.__isset, b.__isset);
}

template void PrimitiveStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t PrimitiveStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t PrimitiveStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t PrimitiveStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void PrimitiveStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t PrimitiveStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t PrimitiveStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t PrimitiveStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // test::fixtures::basic-python-capi

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::basic-python-capi::ListStruct>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::basic-python-capi::ListStruct>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace test { namespace fixtures { namespace basic-python-capi {

const char* ListStruct::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/basic-python-capi/ListStruct";
}

const folly::StringPiece ListStruct::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<ListStruct>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece ListStruct::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<ListStruct>::name;
}

ListStruct::ListStruct(const ListStruct&) = default;
ListStruct& ListStruct::operator=(const ListStruct&) = default;
ListStruct::ListStruct() {
}


ListStruct::~ListStruct() {}

ListStruct::ListStruct(FOLLY_MAYBE_UNUSED ListStruct&& other) noexcept :
    __fbthrift_field_boolz(std::move(other.__fbthrift_field_boolz)),
    __fbthrift_field_intz(std::move(other.__fbthrift_field_intz)),
    __fbthrift_field_stringz(std::move(other.__fbthrift_field_stringz)),
    __fbthrift_field_encoded(std::move(other.__fbthrift_field_encoded)),
    __fbthrift_field_uidz(std::move(other.__fbthrift_field_uidz)),
    __fbthrift_field_matrix(std::move(other.__fbthrift_field_matrix)),
    __fbthrift_field_ucharz(std::move(other.__fbthrift_field_ucharz)),
    __fbthrift_field_voxels(std::move(other.__fbthrift_field_voxels)),
    __isset(other.__isset) {
}

ListStruct& ListStruct::operator=(FOLLY_MAYBE_UNUSED ListStruct&& other) noexcept {
    this->__fbthrift_field_boolz = std::move(other.__fbthrift_field_boolz);
    this->__fbthrift_field_intz = std::move(other.__fbthrift_field_intz);
    this->__fbthrift_field_stringz = std::move(other.__fbthrift_field_stringz);
    this->__fbthrift_field_encoded = std::move(other.__fbthrift_field_encoded);
    this->__fbthrift_field_uidz = std::move(other.__fbthrift_field_uidz);
    this->__fbthrift_field_matrix = std::move(other.__fbthrift_field_matrix);
    this->__fbthrift_field_ucharz = std::move(other.__fbthrift_field_ucharz);
    this->__fbthrift_field_voxels = std::move(other.__fbthrift_field_voxels);
    __isset = other.__isset;
    return *this;
}


ListStruct::ListStruct(apache::thrift::FragileConstructor, ::std::vector<bool> boolz__arg, ::std::vector<::std::int64_t> intz__arg, ::apache::thrift::detail::boxed_value_ptr<::std::vector<::std::string>> stringz__arg, std::deque<::std::string> encoded__arg, std::deque<uint64_t> uidz__arg, ::std::vector<::std::vector<double>> matrix__arg, folly::small_vector<folly::small_vector<uint8_t>> ucharz__arg, folly::fbvector<folly::fbvector<folly::fbvector<uint8_t>>> voxels__arg) :
    __fbthrift_field_boolz(std::move(boolz__arg)),
    __fbthrift_field_intz(std::move(intz__arg)),
    __fbthrift_field_stringz(std::move(stringz__arg)),
    __fbthrift_field_encoded(std::move(encoded__arg)),
    __fbthrift_field_uidz(std::move(uidz__arg)),
    __fbthrift_field_matrix(std::move(matrix__arg)),
    __fbthrift_field_ucharz(std::move(ucharz__arg)),
    __fbthrift_field_voxels(std::move(voxels__arg)) {
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
}


void ListStruct::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_boolz.clear();
  this->__fbthrift_field_intz.clear();
  this->__fbthrift_field_stringz.reset();
  this->__fbthrift_field_encoded.clear();
  this->__fbthrift_field_uidz.clear();
  this->__fbthrift_field_matrix.clear();
  this->__fbthrift_field_ucharz.clear();
  this->__fbthrift_field_voxels.clear();
  __isset = {};
}

void ListStruct::__fbthrift_clear_terse_fields() {
}

bool ListStruct::__fbthrift_is_empty() const {
  return false;
}

bool ListStruct::operator==(FOLLY_MAYBE_UNUSED const ListStruct& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.boolz_ref() == rhs.boolz_ref())) {
    return false;
  }
  if (!(lhs.intz_ref() == rhs.intz_ref())) {
    return false;
  }
  if ((!::apache::thrift::detail::pointer_equal(lhs.stringz_ref(), rhs.stringz_ref()))) {
    return false;
  }
  if (!(lhs.encoded_ref() == rhs.encoded_ref())) {
    return false;
  }
  if (!(lhs.uidz_ref() == rhs.uidz_ref())) {
    return false;
  }
  if (!(lhs.matrix_ref() == rhs.matrix_ref())) {
    return false;
  }
  if (!(lhs.ucharz_ref() == rhs.ucharz_ref())) {
    return false;
  }
  if (!(lhs.voxels_ref() == rhs.voxels_ref())) {
    return false;
  }
  return true;
}

bool ListStruct::operator<(FOLLY_MAYBE_UNUSED const ListStruct& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}

const ::std::vector<bool>& ListStruct::get_boolz() const& {
  return __fbthrift_field_boolz;
}

::std::vector<bool> ListStruct::get_boolz() && {
  return std::move(__fbthrift_field_boolz);
}

const ::std::vector<::std::int64_t>* ListStruct::get_intz() const& {
  return intz_ref().has_value() ? std::addressof(__fbthrift_field_intz) : nullptr;
}

::std::vector<::std::int64_t>* ListStruct::get_intz() & {
  return intz_ref().has_value() ? std::addressof(__fbthrift_field_intz) : nullptr;
}

const std::deque<::std::string>& ListStruct::get_encoded() const& {
  return __fbthrift_field_encoded;
}

std::deque<::std::string> ListStruct::get_encoded() && {
  return std::move(__fbthrift_field_encoded);
}

const std::deque<uint64_t>& ListStruct::get_uidz() const& {
  return __fbthrift_field_uidz;
}

std::deque<uint64_t> ListStruct::get_uidz() && {
  return std::move(__fbthrift_field_uidz);
}

const ::std::vector<::std::vector<double>>& ListStruct::get_matrix() const& {
  return __fbthrift_field_matrix;
}

::std::vector<::std::vector<double>> ListStruct::get_matrix() && {
  return std::move(__fbthrift_field_matrix);
}

const folly::small_vector<folly::small_vector<uint8_t>>& ListStruct::get_ucharz() const& {
  return __fbthrift_field_ucharz;
}

folly::small_vector<folly::small_vector<uint8_t>> ListStruct::get_ucharz() && {
  return std::move(__fbthrift_field_ucharz);
}

const folly::fbvector<folly::fbvector<folly::fbvector<uint8_t>>>& ListStruct::get_voxels() const& {
  return __fbthrift_field_voxels;
}

folly::fbvector<folly::fbvector<folly::fbvector<uint8_t>>> ListStruct::get_voxels() && {
  return std::move(__fbthrift_field_voxels);
}


void swap(FOLLY_MAYBE_UNUSED ListStruct& a, FOLLY_MAYBE_UNUSED ListStruct& b) {
  using ::std::swap;
  swap(a.__fbthrift_field_boolz, b.__fbthrift_field_boolz);
  swap(a.__fbthrift_field_intz, b.__fbthrift_field_intz);
  swap(a.__fbthrift_field_stringz, b.__fbthrift_field_stringz);
  swap(a.__fbthrift_field_encoded, b.__fbthrift_field_encoded);
  swap(a.__fbthrift_field_uidz, b.__fbthrift_field_uidz);
  swap(a.__fbthrift_field_matrix, b.__fbthrift_field_matrix);
  swap(a.__fbthrift_field_ucharz, b.__fbthrift_field_ucharz);
  swap(a.__fbthrift_field_voxels, b.__fbthrift_field_voxels);
  swap(a.__isset, b.__isset);
}

template void ListStruct::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t ListStruct::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t ListStruct::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t ListStruct::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void ListStruct::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t ListStruct::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t ListStruct::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t ListStruct::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


}}} // test::fixtures::basic-python-capi

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::test::fixtures::basic-python-capi::MyUnion>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::test::fixtures::basic-python-capi::MyUnion>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache { namespace thrift {

constexpr std::size_t const TEnumTraits<::test::fixtures::basic-python-capi::MyUnion::Type>::size;
folly::Range<::test::fixtures::basic-python-capi::MyUnion::Type const*> const TEnumTraits<::test::fixtures::basic-python-capi::MyUnion::Type>::values = folly::range(TEnumDataStorage<::test::fixtures::basic-python-capi::MyUnion::Type>::values);
folly::Range<folly::StringPiece const*> const TEnumTraits<::test::fixtures::basic-python-capi::MyUnion::Type>::names = folly::range(TEnumDataStorage<::test::fixtures::basic-python-capi::MyUnion::Type>::names);

bool TEnumTraits<::test::fixtures::basic-python-capi::MyUnion::Type>::findName(type value, folly::StringPiece* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::test::fixtures::basic-python-capi::MyUnion::Type>::findValue(folly::StringPiece name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}
}} // apache::thrift
namespace test { namespace fixtures { namespace basic-python-capi {

const char* MyUnion::__fbthrift_thrift_uri() {
  return "test.dev/fixtures/basic-python-capi/MyUnion";
}

const folly::StringPiece MyUnion::__fbthrift_get_field_name(::apache::thrift::FieldOrdinal ord) {
  if (ord == ::apache::thrift::FieldOrdinal{0}) { return {}; }
  return apache::thrift::TStructDataStorage<MyUnion>::fields_names[folly::to_underlying(ord) - 1];
}
const folly::StringPiece MyUnion::__fbthrift_get_class_name() {
  return apache::thrift::TStructDataStorage<MyUnion>::name;
}

void MyUnion::__fbthrift_clear() {
  // clear all fields
  if (getType() == Type::__EMPTY__) { return; }
  switch(getType()) {
    case Type::myEnum:
      destruct(value_.myEnum);
      break;
    case Type::myStruct:
      destruct(value_.myStruct);
      break;
    case Type::myDataItem:
      destruct(value_.myDataItem);
      break;
    case Type::doubleSet:
      destruct(value_.doubleSet);
      break;
    case Type::doubleList:
      destruct(value_.doubleList);
      break;
    case Type::strMap:
      destruct(value_.strMap);
      break;
    default:
      assert(false);
      break;
  }
  type_ = folly::to_underlying(Type::__EMPTY__);
}

bool MyUnion::__fbthrift_is_empty() const {
  return getType() == Type::__EMPTY__;
}

bool MyUnion::operator==(const MyUnion& rhs) const {
  if (getType() != rhs.getType()) { return false; }
  switch(getType()) {
    case Type::myEnum:
      return value_.myEnum == rhs.value_.myEnum;
    case Type::myStruct:
      return value_.myStruct == rhs.value_.myStruct;
    case Type::myDataItem:
      return value_.myDataItem == rhs.value_.myDataItem;
    case Type::doubleSet:
      return value_.doubleSet == rhs.value_.doubleSet;
    case Type::doubleList:
      return value_.doubleList == rhs.value_.doubleList;
    case Type::strMap:
      return value_.strMap == rhs.value_.strMap;
    default:
      return true;
  }
}

bool MyUnion::operator<(FOLLY_MAYBE_UNUSED const MyUnion& rhs) const {
  return ::apache::thrift::op::detail::StructLessThan{}(*this, rhs);
}

void swap(MyUnion& a, MyUnion& b) {
  MyUnion temp(std::move(a));
  a = std::move(b);
  b = std::move(temp);
}

template void MyUnion::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t MyUnion::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t MyUnion::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t MyUnion::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void MyUnion::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t MyUnion::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t MyUnion::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t MyUnion::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyUnion,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::basic-python-capi::MyStruct>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        MyUnion,
        ::apache::thrift::type_class::structure,
        ::test::fixtures::basic-python-capi::MyDataItem>,
    "inconsistent use of json option");

}}} // test::fixtures::basic-python-capi

namespace test { namespace fixtures { namespace basic-python-capi { namespace {
FOLLY_MAYBE_UNUSED FOLLY_ERASE void validateAdapters() {
  ::apache::thrift::adapt_detail::validateFieldAdapter<::thrift::test::lib::StringDoubler, 2, ::std::string, ::test::fixtures::basic-python-capi::StringPair>();
}
}}}} // test::fixtures::basic-python-capi
