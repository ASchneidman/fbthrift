#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

from __future__ import absolute_import
import sys
from thrift.util.Recursive import fix_spec
from thrift.Thrift import TType, TMessageType, TPriority, TRequestContext, TProcessorEventHandler, TServerInterface, TProcessor, TException, TApplicationException, UnimplementedTypedef
from thrift.protocol.TProtocol import TProtocolException

from json import loads
import sys
if sys.version_info[0] >= 3:
  long = int

import thrift.annotation.thrift.ttypes


import pprint
import warnings
from thrift import Thrift
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
from thrift.protocol import TCompactProtocol
from thrift.protocol import THeaderProtocol
fastproto = None
try:
  from thrift.protocol import fastproto
except ImportError:
  pass
all_structs = []
UTF8STRINGS = bool(0) or sys.version_info.major >= 3

__all__ = ['UTF8STRINGS', 'Metasyntactic', 'SomeStruct']

class Metasyntactic:
  FOO = 1
  BAR = 2
  BAZ = 3
  BAX = 4
  Unspecified = 0

  _VALUES_TO_NAMES = {
    1: "FOO",
    2: "BAR",
    3: "BAZ",
    4: "BAX",
    0: "Unspecified",
  }

  _NAMES_TO_VALUES = {
    "FOO": 1,
    "BAR": 2,
    "BAZ": 3,
    "BAX": 4,
    "Unspecified": 0,
  }

class SomeStruct:
  """
  Attributes:
   - reasonable
   - fine
   - questionable
   - tags
  """

  thrift_spec = None
  thrift_field_annotations = None
  thrift_struct_annotations = None
  __init__ = None
  @staticmethod
  def isUnion():
    return False

  def read(self, iprot):
    if (isinstance(iprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0)
      return
    if (isinstance(iprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(iprot, THeaderProtocol.THeaderProtocolAccelerate) and iprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastproto is not None:
      fastproto.decode(self, iprot.trans, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2)
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.reasonable = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.fine = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.questionable = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.SET:
          self.tags = set()
          (_etype3, _size0) = iprot.readSetBegin()
          if _size0 >= 0:
            for _i4 in range(_size0):
              _elem5 = iprot.readI32()
              self.tags.add(_elem5)
          else: 
            while iprot.peekSet():
              _elem6 = iprot.readI32()
              self.tags.add(_elem6)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if (isinstance(oprot, TBinaryProtocol.TBinaryProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_BINARY_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=0))
      return
    if (isinstance(oprot, TCompactProtocol.TCompactProtocolAccelerated) or (isinstance(oprot, THeaderProtocol.THeaderProtocolAccelerate) and oprot.get_protocol_id() == THeaderProtocol.THeaderProtocol.T_COMPACT_PROTOCOL)) and self.thrift_spec is not None and fastproto is not None:
      oprot.trans.write(fastproto.encode(self, [self.__class__, self.thrift_spec, False], utf8strings=UTF8STRINGS, protoid=2))
      return
    oprot.writeStructBegin('SomeStruct')
    if self.reasonable != None:
      oprot.writeFieldBegin('reasonable', TType.I32, 1)
      oprot.writeI32(self.reasonable)
      oprot.writeFieldEnd()
    if self.fine != None:
      oprot.writeFieldBegin('fine', TType.I32, 2)
      oprot.writeI32(self.fine)
      oprot.writeFieldEnd()
    if self.questionable != None:
      oprot.writeFieldBegin('questionable', TType.I32, 3)
      oprot.writeI32(self.questionable)
      oprot.writeFieldEnd()
    if self.tags != None:
      oprot.writeFieldBegin('tags', TType.SET, 4)
      oprot.writeSetBegin(TType.I32, len(self.tags))
      for iter7 in self.tags:
        oprot.writeI32(iter7)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def readFromJson(self, json, is_text=True, **kwargs):
    relax_enum_validation = bool(kwargs.pop('relax_enum_validation', False))
    set_cls = kwargs.pop('custom_set_cls', set)
    dict_cls = kwargs.pop('custom_dict_cls', dict)
    if kwargs:
        extra_kwargs = ', '.join(kwargs.keys())
        raise ValueError(
            'Unexpected keyword arguments: ' + extra_kwargs
        )
    json_obj = json
    if is_text:
      json_obj = loads(json)
    if 'reasonable' in json_obj and json_obj['reasonable'] is not None:
      self.reasonable = json_obj['reasonable']
      if not self.reasonable in Metasyntactic._VALUES_TO_NAMES:
        msg = 'Integer value ''%s'' is not a recognized value of enum type Metasyntactic' % self.reasonable
        if relax_enum_validation:
            warnings.warn(msg)
        else:
            raise TProtocolException(TProtocolException.INVALID_DATA, msg)
    if 'fine' in json_obj and json_obj['fine'] is not None:
      self.fine = json_obj['fine']
      if not self.fine in Metasyntactic._VALUES_TO_NAMES:
        msg = 'Integer value ''%s'' is not a recognized value of enum type Metasyntactic' % self.fine
        if relax_enum_validation:
            warnings.warn(msg)
        else:
            raise TProtocolException(TProtocolException.INVALID_DATA, msg)
    if 'questionable' in json_obj and json_obj['questionable'] is not None:
      self.questionable = json_obj['questionable']
      if not self.questionable in Metasyntactic._VALUES_TO_NAMES:
        msg = 'Integer value ''%s'' is not a recognized value of enum type Metasyntactic' % self.questionable
        if relax_enum_validation:
            warnings.warn(msg)
        else:
            raise TProtocolException(TProtocolException.INVALID_DATA, msg)
    if 'tags' in json_obj and json_obj['tags'] is not None:
      self.tags = set_cls()
      for _tmp_e8 in json_obj['tags']:
        if _tmp_e8 > 0x7fffffff or _tmp_e8 < -0x80000000:
          raise TProtocolException(TProtocolException.INVALID_DATA, 'number exceeds limit in field')
        self.tags.add(_tmp_e8)

  def __repr__(self):
    L = []
    padding = ' ' * 4
    if self.reasonable is not None:
      value = pprint.pformat(self.reasonable, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    reasonable=%s' % (value))
    if self.fine is not None:
      value = pprint.pformat(self.fine, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    fine=%s' % (value))
    if self.questionable is not None:
      value = pprint.pformat(self.questionable, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    questionable=%s' % (value))
    if self.tags is not None:
      value = pprint.pformat(self.tags, indent=0)
      value = padding.join(value.splitlines(True))
      L.append('    tags=%s' % (value))
    return "%s(%s)" % (self.__class__.__name__, "\n" + ",\n".join(L) if L else '')

  def __eq__(self, other):
    if not isinstance(other, self.__class__):
      return False

    return self.__dict__ == other.__dict__ 

  def __ne__(self, other):
    return not (self == other)

  def __dir__(self):
    return (
      'reasonable',
      'fine',
      'questionable',
      'tags',
    )

  # Override the __hash__ function for Python3 - t10434117
  __hash__ = object.__hash__

all_structs.append(SomeStruct)
SomeStruct.thrift_spec = (
  None, # 0
  (1, TType.I32, 'reasonable', Metasyntactic,   1, 2, ), # 1
  (2, TType.I32, 'fine', Metasyntactic,   2, 2, ), # 2
  (3, TType.I32, 'questionable', Metasyntactic,   -1, 2, ), # 3
  (4, TType.SET, 'tags', (TType.I32,None), set([
  ]), 2, ), # 4
)

SomeStruct.thrift_struct_annotations = {
}
SomeStruct.thrift_field_annotations = {
}

def SomeStruct__init__(self, reasonable=SomeStruct.thrift_spec[1][4], fine=SomeStruct.thrift_spec[2][4], questionable=SomeStruct.thrift_spec[3][4], tags=SomeStruct.thrift_spec[4][4],):
  self.reasonable = reasonable
  self.fine = fine
  self.questionable = questionable
  if tags is self.thrift_spec[4][4]:
    tags = set([
  ])
  self.tags = tags

SomeStruct.__init__ = SomeStruct__init__

def SomeStruct__setstate__(self, state):
  state.setdefault('reasonable',   1)
  state.setdefault('fine',   2)
  state.setdefault('questionable',   -1)
  state.setdefault('tags', set([
  ]))
  self.__dict__ = state

SomeStruct.__getstate__ = lambda self: self.__dict__.copy()
SomeStruct.__setstate__ = SomeStruct__setstate__

fix_spec(all_structs)
del all_structs
