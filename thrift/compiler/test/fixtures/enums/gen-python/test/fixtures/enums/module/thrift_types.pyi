#
# Autogenerated by Thrift
#
# DO NOT EDIT
#  @generated
#

from __future__ import annotations


import typing as _typing

import enum

import folly.iobuf as _fbthrift_iobuf
import thrift.python.types as _fbthrift_python_types
import thrift.python.exceptions as _fbthrift_python_exceptions

import facebook.thrift.annotation.thrift.thrift_types


class Metasyntactic(_fbthrift_python_types.Enum, enum.Enum):
    FOO: Metasyntactic = ...
    BAR: Metasyntactic = ...
    BAZ: Metasyntactic = ...
    BAX: Metasyntactic = ...
    Unspecified: Metasyntactic = ...


class SomeStruct(_fbthrift_python_types.Struct):
    reasonable: _typing.Final[Metasyntactic] = ...
    fine: _typing.Final[Metasyntactic] = ...
    questionable: _typing.Final[Metasyntactic] = ...
    tags: _typing.Final[_typing.AbstractSet[int]] = ...
    def __init__(
        self, *,
        reasonable: _typing.Optional[Metasyntactic]=...,
        fine: _typing.Optional[Metasyntactic]=...,
        questionable: _typing.Optional[Metasyntactic]=...,
        tags: _typing.Optional[_typing.AbstractSet[int]]=...
    ) -> None: ...

    def __call__(
        self, *,
        reasonable: _typing.Optional[Metasyntactic]=...,
        fine: _typing.Optional[Metasyntactic]=...,
        questionable: _typing.Optional[Metasyntactic]=...,
        tags: _typing.Optional[_typing.AbstractSet[int]]=...
    ) -> SomeStruct: ...
    def __iter__(self) -> _typing.Iterator[_typing.Tuple[str, _typing.Union[Metasyntactic, Metasyntactic, Metasyntactic, _typing.AbstractSet[int]]]]: ...
    def to_py3_struct(self) -> "test.fixtures.enums.module.types.SomeStruct": ...   # type: ignore
    def to_py_legacy_struct(self) -> "module.ttypes.SomeStruct": ...   # type: ignore
