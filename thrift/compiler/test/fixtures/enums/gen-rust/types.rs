// @generated by Thrift for src/module.thrift
// This file is probably not the place you want to edit!

//! Thrift type definitions for `module`.

#![allow(clippy::redundant_closure)]


#[derive(Clone, PartialEq)]
pub struct SomeStruct {
    pub reasonable: crate::types::Metasyntactic,
    pub fine: crate::types::Metasyntactic,
    pub questionable: crate::types::Metasyntactic,
    pub tags: ::std::collections::BTreeSet<::std::primitive::i32>,
    // This field forces `..Default::default()` when instantiating this
    // struct, to make code future-proof against new fields added later to
    // the definition in Thrift. If you don't want this, add the annotation
    // `(rust.exhaustive)` to the Thrift struct to eliminate this field.
    #[doc(hidden)]
    pub _dot_dot_Default_default: self::dot_dot::OtherFields,
}

#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct Metasyntactic(pub ::std::primitive::i32);

impl Metasyntactic {
    pub const FOO: Self = Metasyntactic(1i32);
    pub const BAR: Self = Metasyntactic(2i32);
    pub const BAZ: Self = Metasyntactic(3i32);
    pub const BAX: Self = Metasyntactic(4i32);
    pub const Unspecified: Self = Metasyntactic(0i32);
}

impl ::fbthrift::ThriftEnum for Metasyntactic {
    fn enumerate() -> &'static [(Metasyntactic, &'static str)] {
        &[
            (Metasyntactic::FOO, "FOO"),
            (Metasyntactic::BAR, "BAR"),
            (Metasyntactic::BAZ, "BAZ"),
            (Metasyntactic::BAX, "BAX"),
            (Metasyntactic::Unspecified, "Unspecified"),
        ]
    }

    fn variants() -> &'static [&'static str] {
        &[
            "FOO",
            "BAR",
            "BAZ",
            "BAX",
            "Unspecified",
        ]
    }

    fn variant_values() -> &'static [Metasyntactic] {
        &[
            Metasyntactic::FOO,
            Metasyntactic::BAR,
            Metasyntactic::BAZ,
            Metasyntactic::BAX,
            Metasyntactic::Unspecified,
        ]
    }
}

impl ::std::default::Default for Metasyntactic {
    fn default() -> Self {
        Metasyntactic(::fbthrift::__UNKNOWN_ID)
    }
}

impl<'a> ::std::convert::From<&'a Metasyntactic> for ::std::primitive::i32 {
    #[inline]
    fn from(x: &'a Metasyntactic) -> Self {
        x.0
    }
}

impl ::std::convert::From<Metasyntactic> for ::std::primitive::i32 {
    #[inline]
    fn from(x: Metasyntactic) -> Self {
        x.0
    }
}

impl ::std::convert::From<::std::primitive::i32> for Metasyntactic {
    #[inline]
    fn from(x: ::std::primitive::i32) -> Self {
        Self(x)
    }
}

impl ::std::fmt::Display for Metasyntactic {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        static VARIANTS_BY_NUMBER: &[(&::std::primitive::str, ::std::primitive::i32)] = &[
            ("Unspecified", 0),
            ("FOO", 1),
            ("BAR", 2),
            ("BAZ", 3),
            ("BAX", 4),
        ];
        ::fbthrift::help::enum_display(VARIANTS_BY_NUMBER, fmt, self.0)
    }
}

impl ::std::fmt::Debug for Metasyntactic {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(fmt, "Metasyntactic::{}", self)
    }
}

impl ::std::str::FromStr for Metasyntactic {
    type Err = ::anyhow::Error;

    fn from_str(string: &::std::primitive::str) -> ::std::result::Result<Self, Self::Err> {
        static VARIANTS_BY_NAME: &[(&::std::primitive::str, ::std::primitive::i32)] = &[
            ("BAR", 2),
            ("BAX", 4),
            ("BAZ", 3),
            ("FOO", 1),
            ("Unspecified", 0),
        ];
        ::fbthrift::help::enum_from_str(VARIANTS_BY_NAME, string, "Metasyntactic").map(Metasyntactic)
    }
}

impl ::fbthrift::GetTType for Metasyntactic {
    const TTYPE: ::fbthrift::TType = ::fbthrift::TType::I32;
}

impl<P> ::fbthrift::Serialize<P> for Metasyntactic
where
    P: ::fbthrift::ProtocolWriter,
{
    #[inline]
    fn write(&self, p: &mut P) {
        p.write_i32(self.into())
    }
}

impl<P> ::fbthrift::Deserialize<P> for Metasyntactic
where
    P: ::fbthrift::ProtocolReader,
{
    #[inline]
    fn read(p: &mut P) -> ::anyhow::Result<Self> {
        ::std::result::Result::Ok(Metasyntactic::from(p.read_i32()?))
    }
}

#[allow(clippy::derivable_impls)]
impl ::std::default::Default for self::SomeStruct {
    fn default() -> Self {
        Self {
            reasonable: crate::types::Metasyntactic::FOO,
            fine: crate::types::Metasyntactic::BAR,
            questionable: crate::types::Metasyntactic(-1),
            tags: ::std::collections::BTreeSet::new(),
            _dot_dot_Default_default: self::dot_dot::OtherFields(()),
        }
    }
}

impl ::std::fmt::Debug for self::SomeStruct {
    fn fmt(&self, formatter: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        formatter
            .debug_struct("SomeStruct")
            .field("reasonable", &self.reasonable)
            .field("fine", &self.fine)
            .field("questionable", &self.questionable)
            .field("tags", &self.tags)
            .finish()
    }
}

unsafe impl ::std::marker::Send for self::SomeStruct {}
unsafe impl ::std::marker::Sync for self::SomeStruct {}

impl ::fbthrift::GetTType for self::SomeStruct {
    const TTYPE: ::fbthrift::TType = ::fbthrift::TType::Struct;
}

impl<P> ::fbthrift::Serialize<P> for self::SomeStruct
where
    P: ::fbthrift::ProtocolWriter,
{
    fn write(&self, p: &mut P) {
        p.write_struct_begin("SomeStruct");
        p.write_field_begin("reasonable", ::fbthrift::TType::I32, 1);
        ::fbthrift::Serialize::write(&self.reasonable, p);
        p.write_field_end();
        p.write_field_begin("fine", ::fbthrift::TType::I32, 2);
        ::fbthrift::Serialize::write(&self.fine, p);
        p.write_field_end();
        p.write_field_begin("questionable", ::fbthrift::TType::I32, 3);
        ::fbthrift::Serialize::write(&self.questionable, p);
        p.write_field_end();
        p.write_field_begin("tags", ::fbthrift::TType::Set, 4);
        ::fbthrift::Serialize::write(&self.tags, p);
        p.write_field_end();
        p.write_field_stop();
        p.write_struct_end();
    }
}

impl<P> ::fbthrift::Deserialize<P> for self::SomeStruct
where
    P: ::fbthrift::ProtocolReader,
{
    fn read(p: &mut P) -> ::anyhow::Result<Self> {
        static FIELDS: &[::fbthrift::Field] = &[
            ::fbthrift::Field::new("fine", ::fbthrift::TType::I32, 2),
            ::fbthrift::Field::new("questionable", ::fbthrift::TType::I32, 3),
            ::fbthrift::Field::new("reasonable", ::fbthrift::TType::I32, 1),
            ::fbthrift::Field::new("tags", ::fbthrift::TType::Set, 4),
        ];
        let mut field_reasonable = ::std::option::Option::None;
        let mut field_fine = ::std::option::Option::None;
        let mut field_questionable = ::std::option::Option::None;
        let mut field_tags = ::std::option::Option::None;
        let _ = p.read_struct_begin(|_| ())?;
        loop {
            let (_, fty, fid) = p.read_field_begin(|_| (), FIELDS)?;
            match (fty, fid as ::std::primitive::i32) {
                (::fbthrift::TType::Stop, _) => break,
                (::fbthrift::TType::I32, 1) => field_reasonable = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::I32, 2) => field_fine = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::I32, 3) => field_questionable = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (::fbthrift::TType::Set, 4) => field_tags = ::std::option::Option::Some(::fbthrift::Deserialize::read(p)?),
                (fty, _) => p.skip(fty)?,
            }
            p.read_field_end()?;
        }
        p.read_struct_end()?;
        ::std::result::Result::Ok(Self {
            reasonable: field_reasonable.unwrap_or_else(|| crate::types::Metasyntactic::FOO),
            fine: field_fine.unwrap_or_else(|| crate::types::Metasyntactic::BAR),
            questionable: field_questionable.unwrap_or_else(|| crate::types::Metasyntactic(-1)),
            tags: field_tags.unwrap_or_else(|| ::std::collections::BTreeSet::new()),
            _dot_dot_Default_default: self::dot_dot::OtherFields(()),
        })
    }
}


mod dot_dot {
    #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct OtherFields(pub(crate) ());

    #[allow(dead_code)] // if serde isn't being used
    pub(super) fn default_for_serde_deserialize() -> OtherFields {
        OtherFields(())
    }
}
