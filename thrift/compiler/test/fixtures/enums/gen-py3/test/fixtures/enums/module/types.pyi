#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#  @generated
#

import folly.iobuf as _fbthrift_iobuf
import thrift.py3.types
import thrift.py3.exceptions
from thrift.py3.types import __NotSet, NOTSET
import typing as _typing
from typing_extensions import Final

import sys
import itertools
import facebook.thrift.annotation.thrift.types as _facebook_thrift_annotation_thrift_types


__property__ = property


class Metasyntactic(thrift.py3.types.Enum):
    FOO: Metasyntactic = ...
    BAR: Metasyntactic = ...
    BAZ: Metasyntactic = ...
    BAX: Metasyntactic = ...
    Unspecified: Metasyntactic = ...


class SomeStruct(thrift.py3.types.Struct, _typing.Hashable):
    class __fbthrift_IsSet:
        reasonable: bool
        fine: bool
        questionable: bool
        tags: bool
        pass

    reasonable: Final[Metasyntactic] = ...

    fine: Final[Metasyntactic] = ...

    questionable: Final[Metasyntactic] = ...

    tags: Final[_typing.AbstractSet[int]] = ...

    def __init__(
        self, *,
        reasonable: _typing.Optional[Metasyntactic]=None,
        fine: _typing.Optional[Metasyntactic]=None,
        questionable: _typing.Optional[Metasyntactic]=None,
        tags: _typing.Optional[_typing.AbstractSet[int]]=None
    ) -> None: ...

    def __call__(
        self, *,
        reasonable: _typing.Union[Metasyntactic, '__NotSet', None]=NOTSET,
        fine: _typing.Union[Metasyntactic, '__NotSet', None]=NOTSET,
        questionable: _typing.Union[Metasyntactic, '__NotSet', None]=NOTSET,
        tags: _typing.Union[_typing.AbstractSet[int], '__NotSet', None]=NOTSET
    ) -> SomeStruct: ...

    def __reduce__(self) -> _typing.Tuple[_typing.Callable, _typing.Tuple[_typing.Type['SomeStruct'], bytes]]: ...
    def __hash__(self) -> int: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def __lt__(self, other: 'SomeStruct') -> bool: ...
    def __gt__(self, other: 'SomeStruct') -> bool: ...
    def __le__(self, other: 'SomeStruct') -> bool: ...
    def __ge__(self, other: 'SomeStruct') -> bool: ...

    def _to_python(self) -> "test.fixtures.enums.module.thrift_types.SomeStruct": ...   # type: ignore
    def _to_py3(self) -> SomeStruct: ...
    def _to_py_deprecated(self) -> "module.ttypes.SomeStruct": ...   # type: ignore

class Set__i32(_typing.AbstractSet[int], _typing.Hashable):
    def __init__(self, items: _typing.Optional[_typing.AbstractSet[int]]=None) -> None: ...
    def __len__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __copy__(self) -> _typing.AbstractSet[int]: ...
    def __contains__(self, x: object) -> bool: ...
    def union(self, other: _typing.AbstractSet[int]) -> 'Set__i32': ...
    def intersection(self, other: _typing.AbstractSet[int]) -> 'Set__i32': ...
    def difference(self, other: _typing.AbstractSet[int]) -> 'Set__i32': ...
    def symmetric_difference(self, other: _typing.AbstractSet[int]) -> 'Set__i32': ...
    def issubset(self, other: _typing.AbstractSet[int]) -> bool: ...
    def issuperset(self, other: _typing.AbstractSet[int]) -> bool: ...
    def __iter__(self) -> _typing.Iterator[int]: ...


