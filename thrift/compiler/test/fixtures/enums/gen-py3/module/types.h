/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#pragma once

#include <functional>
#include <folly/Range.h>

#include <thrift/lib/py3/enums.h>
#include "src/gen-cpp2/module_data.h"
#include "src/gen-cpp2/module_types.h"
#include "src/gen-cpp2/module_metadata.h"
namespace thrift {
namespace py3 {


template<>
const std::vector<std::pair<std::string_view, std::string_view>>& PyEnumTraits<
    ::test::fixtures::enums::Metasyntactic>::namesmap() {
  static const folly::Indestructible<NamesMap> pairs {
    {
    }
  };
  return *pairs;
}



template<>
void reset_field<::test::fixtures::enums::SomeStruct>(
    ::test::fixtures::enums::SomeStruct& obj, uint16_t index) {
  switch (index) {
    case 0:
      obj.reasonable_ref().copy_from(default_inst<::test::fixtures::enums::SomeStruct>().reasonable_ref());
      return;
    case 1:
      obj.fine_ref().copy_from(default_inst<::test::fixtures::enums::SomeStruct>().fine_ref());
      return;
    case 2:
      obj.questionable_ref().copy_from(default_inst<::test::fixtures::enums::SomeStruct>().questionable_ref());
      return;
    case 3:
      obj.tags_ref().copy_from(default_inst<::test::fixtures::enums::SomeStruct>().tags_ref());
      return;
  }
}

template<>
const std::unordered_map<std::string_view, std::string_view>& PyStructTraits<
    ::test::fixtures::enums::SomeStruct>::namesmap() {
  static const folly::Indestructible<NamesMap> map {
    {
    }
  };
  return *map;
}
} // namespace py3
} // namespace thrift
