
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT
 *  @generated
 *
 */

#include <folly/python/import.h>
#include <thrift/lib/python/capi/iobuf.h>
#include <thrift/lib/python/types.h>

#include <thrift/compiler/test/fixtures/enums/src/gen-python-capi/module/thrift_types_api.h>
#include <thrift/compiler/test/fixtures/enums/src/gen-python-capi/module/thrift_types_capi.h>


namespace apache {
namespace thrift {
namespace python {
namespace capi {
namespace {
bool ensure_module_imported() {
  static ::folly::python::import_cache_nocapture import((
      ::import_test__fixtures__enums__module__thrift_types_capi));
  return import();
}
} // namespace

ExtractorResult<::test::fixtures::enums::SomeStruct>
Extractor<::test::fixtures::enums::SomeStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::enums::SomeStruct>(
      "Module test.fixtures.enums.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__enums__module__SomeStruct(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::enums::SomeStruct>(
        "Thrift serialize error: SomeStruct");
  }
  return detail::deserialize_iobuf<::test::fixtures::enums::SomeStruct>(std::move(val));
}


ExtractorResult<::test::fixtures::enums::SomeStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::enums::SomeStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::enums::SomeStruct>(
      "Module test.fixtures.enums.module import error");
  }
  auto obj = StrongRef(init__test__fixtures__enums__module__SomeStruct(fbthrift_data));
  if (!obj) {
      return extractorError<::test::fixtures::enums::SomeStruct>(
          "Init from fbthrift error: SomeStruct");
  }
  return Extractor<::test::fixtures::enums::SomeStruct>{}(*obj);
}

int Extractor<::test::fixtures::enums::SomeStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.enums.module import error");
  }
  int result =
      can_extract__test__fixtures__enums__module__SomeStruct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: SomeStruct");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::enums::SomeStruct>::operator()(
    const ::test::fixtures::enums::SomeStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__enums__module__SomeStruct(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::enums::SomeStruct>>::operator()(
    const ::test::fixtures::enums::SomeStruct& val) {
  auto obj = StrongRef(Constructor<::test::fixtures::enums::SomeStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::test::fixtures::enums::MyStruct>
Extractor<::test::fixtures::enums::MyStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::enums::MyStruct>(
      "Module test.fixtures.enums.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__enums__module__MyStruct(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::enums::MyStruct>(
        "Thrift serialize error: MyStruct");
  }
  return detail::deserialize_iobuf<::test::fixtures::enums::MyStruct>(std::move(val));
}


ExtractorResult<::test::fixtures::enums::MyStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::enums::MyStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::enums::MyStruct>(
      "Module test.fixtures.enums.module import error");
  }
  auto obj = StrongRef(init__test__fixtures__enums__module__MyStruct(fbthrift_data));
  if (!obj) {
      return extractorError<::test::fixtures::enums::MyStruct>(
          "Init from fbthrift error: MyStruct");
  }
  return Extractor<::test::fixtures::enums::MyStruct>{}(*obj);
}

int Extractor<::test::fixtures::enums::MyStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.enums.module import error");
  }
  int result =
      can_extract__test__fixtures__enums__module__MyStruct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyStruct");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::enums::MyStruct>::operator()(
    const ::test::fixtures::enums::MyStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__enums__module__MyStruct(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::enums::MyStruct>>::operator()(
    const ::test::fixtures::enums::MyStruct& val) {
  auto obj = StrongRef(Constructor<::test::fixtures::enums::MyStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::test::fixtures::enums::Metasyntactic>
Extractor<::test::fixtures::enums::Metasyntactic>::operator()(PyObject* obj) {
  long val = PyLong_AsLong(obj);
  if (val == -1 && PyErr_Occurred()) {
    return extractorError<::test::fixtures::enums::Metasyntactic>(
        "Error getting python int value: Metasyntactic");
  }
  return static_cast<::test::fixtures::enums::Metasyntactic>(val);
}

int Extractor<::test::fixtures::enums::Metasyntactic>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.enums.module import error");
  }
  int result =
      can_extract__test__fixtures__enums__module__Metasyntactic(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: Metasyntactic");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::enums::Metasyntactic>::operator()(
    ::test::fixtures::enums::Metasyntactic val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__enums__module__Metasyntactic(
      static_cast<int64_t>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}

ExtractorResult<::test::fixtures::enums::MyEnum1>
Extractor<::test::fixtures::enums::MyEnum1>::operator()(PyObject* obj) {
  long val = PyLong_AsLong(obj);
  if (val == -1 && PyErr_Occurred()) {
    return extractorError<::test::fixtures::enums::MyEnum1>(
        "Error getting python int value: MyEnum1");
  }
  return static_cast<::test::fixtures::enums::MyEnum1>(val);
}

int Extractor<::test::fixtures::enums::MyEnum1>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.enums.module import error");
  }
  int result =
      can_extract__test__fixtures__enums__module__MyEnum1(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyEnum1");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::enums::MyEnum1>::operator()(
    ::test::fixtures::enums::MyEnum1 val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__enums__module__MyEnum1(
      static_cast<int64_t>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}

ExtractorResult<::test::fixtures::enums::MyEnum2>
Extractor<::test::fixtures::enums::MyEnum2>::operator()(PyObject* obj) {
  long val = PyLong_AsLong(obj);
  if (val == -1 && PyErr_Occurred()) {
    return extractorError<::test::fixtures::enums::MyEnum2>(
        "Error getting python int value: MyEnum2");
  }
  return static_cast<::test::fixtures::enums::MyEnum2>(val);
}

int Extractor<::test::fixtures::enums::MyEnum2>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.enums.module import error");
  }
  int result =
      can_extract__test__fixtures__enums__module__MyEnum2(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyEnum2");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::enums::MyEnum2>::operator()(
    ::test::fixtures::enums::MyEnum2 val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__enums__module__MyEnum2(
      static_cast<int64_t>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}

ExtractorResult<::test::fixtures::enums::MyEnum3>
Extractor<::test::fixtures::enums::MyEnum3>::operator()(PyObject* obj) {
  long val = PyLong_AsLong(obj);
  if (val == -1 && PyErr_Occurred()) {
    return extractorError<::test::fixtures::enums::MyEnum3>(
        "Error getting python int value: MyEnum3");
  }
  return static_cast<::test::fixtures::enums::MyEnum3>(val);
}

int Extractor<::test::fixtures::enums::MyEnum3>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.enums.module import error");
  }
  int result =
      can_extract__test__fixtures__enums__module__MyEnum3(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyEnum3");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::enums::MyEnum3>::operator()(
    ::test::fixtures::enums::MyEnum3 val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__enums__module__MyEnum3(
      static_cast<int64_t>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}

ExtractorResult<::test::fixtures::enums::MyEnum4>
Extractor<::test::fixtures::enums::MyEnum4>::operator()(PyObject* obj) {
  long val = PyLong_AsLong(obj);
  if (val == -1 && PyErr_Occurred()) {
    return extractorError<::test::fixtures::enums::MyEnum4>(
        "Error getting python int value: MyEnum4");
  }
  return static_cast<::test::fixtures::enums::MyEnum4>(val);
}

int Extractor<::test::fixtures::enums::MyEnum4>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.enums.module import error");
  }
  int result =
      can_extract__test__fixtures__enums__module__MyEnum4(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyEnum4");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::enums::MyEnum4>::operator()(
    ::test::fixtures::enums::MyEnum4 val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__enums__module__MyEnum4(
      static_cast<int64_t>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}

ExtractorResult<::test::fixtures::enums::MyBitmaskEnum1>
Extractor<::test::fixtures::enums::MyBitmaskEnum1>::operator()(PyObject* obj) {
  long val = PyLong_AsLong(obj);
  if (val == -1 && PyErr_Occurred()) {
    return extractorError<::test::fixtures::enums::MyBitmaskEnum1>(
        "Error getting python int value: MyBitmaskEnum1");
  }
  return static_cast<::test::fixtures::enums::MyBitmaskEnum1>(val);
}

int Extractor<::test::fixtures::enums::MyBitmaskEnum1>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.enums.module import error");
  }
  int result =
      can_extract__test__fixtures__enums__module__MyBitmaskEnum1(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyBitmaskEnum1");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::enums::MyBitmaskEnum1>::operator()(
    ::test::fixtures::enums::MyBitmaskEnum1 val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__enums__module__MyBitmaskEnum1(
      static_cast<int64_t>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}

ExtractorResult<::test::fixtures::enums::MyBitmaskEnum2>
Extractor<::test::fixtures::enums::MyBitmaskEnum2>::operator()(PyObject* obj) {
  long val = PyLong_AsLong(obj);
  if (val == -1 && PyErr_Occurred()) {
    return extractorError<::test::fixtures::enums::MyBitmaskEnum2>(
        "Error getting python int value: MyBitmaskEnum2");
  }
  return static_cast<::test::fixtures::enums::MyBitmaskEnum2>(val);
}

int Extractor<::test::fixtures::enums::MyBitmaskEnum2>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.enums.module import error");
  }
  int result =
      can_extract__test__fixtures__enums__module__MyBitmaskEnum2(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyBitmaskEnum2");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::enums::MyBitmaskEnum2>::operator()(
    ::test::fixtures::enums::MyBitmaskEnum2 val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__enums__module__MyBitmaskEnum2(
      static_cast<int64_t>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}

} // namespace capi
} // namespace python
} // namespace thrift
} // namespace apache
