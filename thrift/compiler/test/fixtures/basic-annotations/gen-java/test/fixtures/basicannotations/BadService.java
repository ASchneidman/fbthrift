/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.basicannotations;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.service.*;
import com.facebook.thrift.client.*;
import com.google.common.util.concurrent.ListenableFuture;
import java.io.*;
import java.util.*;

@SwiftGenerated
@com.facebook.swift.service.ThriftService("BadService")
public interface BadService extends java.io.Closeable {
    @com.facebook.swift.service.ThriftService("BadService")
    public interface Async extends java.io.Closeable {
        @java.lang.Override void close();

        @ThriftMethod(value = "bar")
        ListenableFuture<Integer> bar();

        default ListenableFuture<Integer> bar(
            RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        default ListenableFuture<ResponseWrapper<Integer>> barWrapper(
            RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }
        @com.facebook.swift.service.ThriftInteraction("BadInteraction")
        public interface BadInteraction extends java.io.Closeable {
            @ThriftMethod(value = "foo")
            ListenableFuture<Void> foo();

            ListenableFuture<Void> foo(
                RpcOptions rpcOptions);

            ListenableFuture<ResponseWrapper<Void>> fooWrapper(
                RpcOptions rpcOptions);

            @java.lang.Override
            void close();
        }

        public BadInteraction createBadInteraction();
    }
    @java.lang.Override void close();

    @ThriftMethod(value = "bar")
    int bar() throws org.apache.thrift.TException;

    default int bar(
        RpcOptions rpcOptions) throws org.apache.thrift.TException {
        throw new UnsupportedOperationException();
    }

    default ResponseWrapper<Integer> barWrapper(
        RpcOptions rpcOptions) throws org.apache.thrift.TException {
        throw new UnsupportedOperationException();
    }

    @com.facebook.swift.service.ThriftService("BadService")
    interface Reactive extends reactor.core.Disposable {
        @ThriftMethod(value = "bar")
        reactor.core.publisher.Mono<Integer> bar();

        default reactor.core.publisher.Mono<Integer> bar(RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        default reactor.core.publisher.Mono<ResponseWrapper<Integer>> barWrapper(RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        @com.facebook.swift.service.ThriftInteraction("BadInteraction")
        public interface BadInteraction extends reactor.core.Disposable {
            @ThriftMethod(value = "foo")
            reactor.core.publisher.Mono<Void> foo();

            reactor.core.publisher.Mono<Void> foo(RpcOptions rpcOptions);

            reactor.core.publisher.Mono<ResponseWrapper<Void>> fooWrapper(RpcOptions rpcOptions);

            @java.lang.Override
            void dispose();
        }

        public BadInteraction createBadInteraction();
    }
    @com.facebook.swift.service.ThriftInteraction("BadInteraction")
    public interface BadInteraction extends java.io.Closeable {
        @ThriftMethod(value = "foo")
        void foo() throws org.apache.thrift.TException;

        void foo(
            RpcOptions rpcOptions) throws org.apache.thrift.TException;

        ResponseWrapper<Void> fooWrapper(
            RpcOptions rpcOptions) throws org.apache.thrift.TException;

        @java.lang.Override
        void close();
    }

    BadInteraction createBadInteraction();
}
