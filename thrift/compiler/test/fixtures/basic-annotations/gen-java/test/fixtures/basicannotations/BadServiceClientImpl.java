/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.basicannotations;

import com.facebook.nifty.client.RequestChannel;
import com.facebook.swift.codec.*;
import com.facebook.swift.service.*;
import com.facebook.swift.service.metadata.*;
import com.facebook.thrift.client.*;
import com.facebook.thrift.util.FutureUtil;
import java.io.*;
import java.lang.reflect.Method;
import java.util.*;
import org.apache.thrift.ProtocolId;
import reactor.core.publisher.Mono;

@SwiftGenerated
@Deprecated
public class BadServiceClientImpl extends AbstractThriftClient implements BadService {

    // Method Handlers
    private ThriftMethodHandler barMethodHandler;
    // Interaction Handlers
    private ThriftMethodHandler fooIMethodHandler;

    // Method Exceptions
    private static final Class[] barExceptions = new Class[] {
        org.apache.thrift.TException.class};
    // Interaction Exceptions
    private static final Class[] fooIExceptions = new Class[] {
        org.apache.thrift.TException.class};

    public BadServiceClientImpl(
        RequestChannel channel,
        Map<Method, ThriftMethodHandler> methods,
        Map<String, String> headers,
        Map<String, String> persistentHeaders,
        List<? extends ThriftClientEventHandler> eventHandlers) {
      super(channel, headers, persistentHeaders, eventHandlers);

      Map<String, ThriftMethodHandler> methodHandlerMap = new HashMap<>();
      methods.forEach(
          (key, value) -> {
            methodHandlerMap.put(key.getName(), value);
          });

      // Set method handlers
      barMethodHandler = methodHandlerMap.get("bar");
      // Set interaction handlers
      fooIMethodHandler = methodHandlerMap.get("foo");
    }

    public BadServiceClientImpl(
        Map<String, String> headers,
        Map<String, String> persistentHeaders,
        Mono<? extends RpcClient> rpcClient,
        ThriftServiceMetadata serviceMetadata,
        ThriftCodecManager codecManager,
        ProtocolId protocolId,
        Map<Method, ThriftMethodHandler> methods) {
      super(headers, persistentHeaders, rpcClient, serviceMetadata, codecManager, protocolId);

      Map<String, ThriftMethodHandler> methodHandlerMap = new HashMap<>();
      methods.forEach(
          (key, value) -> {
            methodHandlerMap.put(key.getName(), value);
          });

      // Set method handlers
      barMethodHandler = methodHandlerMap.get("bar");
      // Set interaction handlers
      fooIMethodHandler = methodHandlerMap.get("foo");
    }

    @java.lang.Override
    public void close() {
        super.close();
    }


    @java.lang.Override
    public int bar() throws org.apache.thrift.TException {
      return barWrapper(RpcOptions.EMPTY).getData();
    }

    @java.lang.Override
    public int bar(
        RpcOptions rpcOptions) throws org.apache.thrift.TException {
      return barWrapper(rpcOptions).getData();
    }

    @java.lang.Override
    public ResponseWrapper<Integer> barWrapper(
        RpcOptions rpcOptions) throws org.apache.thrift.TException {
      try {
        return FutureUtil.get(executeWrapperWithOptions(barMethodHandler, barExceptions, rpcOptions));
      } catch (Throwable t) {
        if (t instanceof org.apache.thrift.TException) {
          throw (org.apache.thrift.TException) t;
        }
        throw new org.apache.thrift.TException(t);
      }
    }

    public class BadInteractionImpl implements BadInteraction {
      private final long interactionId;

      BadInteractionImpl(long interactionId) {
        this.interactionId = interactionId;
      }


      public void foo() throws org.apache.thrift.TException {
        fooWrapper(RpcOptions.EMPTY).getData();
      }

      public void foo(
      RpcOptions rpcOptions) throws org.apache.thrift.TException {
        fooWrapper(rpcOptions).getData();
      }

      public ResponseWrapper<Void> fooWrapper(
      RpcOptions _rpcOptions) throws org.apache.thrift.TException {
        try {
          RpcOptions rpcOptions = updateRpcOptions(_rpcOptions);
          return FutureUtil.get(executeWrapperWithOptions(fooIMethodHandler, fooIExceptions, rpcOptions));
        } catch (Throwable t) {
          if (t instanceof org.apache.thrift.TException) {
            throw (org.apache.thrift.TException) t;
          }
          throw new org.apache.thrift.TException(t);
        }
      }

      @java.lang.Override
      public void close() {
        activeInteractions.remove(interactionId);
      }

      private RpcOptions updateRpcOptions(RpcOptions _rpcOptions) {
        RpcOptions.Builder builder = new RpcOptions.Builder(_rpcOptions);
        if (activeInteractions.contains(interactionId)) {
          builder.setInteractionId(interactionId);
        } else {
          builder.setCreateInteractionId(interactionId).setInteractionId(0L);
          activeInteractions.add(interactionId);
        }
        return builder.build();
      }
    }

    public BadInteraction createBadInteraction() {
        return new BadInteractionImpl(interactionCounter.incrementAndGet());
    }
}
