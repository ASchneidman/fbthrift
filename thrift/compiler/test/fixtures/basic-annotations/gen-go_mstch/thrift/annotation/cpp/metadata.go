// @generated by Thrift for [[[ program path ]]]
// This file is probably not the place you want to edit!

package cpp // [[[ program thrift source path ]]]

import (
    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
    metadata "github.com/facebook/fbthrift/thrift/lib/thrift/metadata"
)

// (needed to ensure safety because of naive import list construction)
var _ = thrift.ZERO
var _ = metadata.GoUnusedProtection__

var structNames = []string{
    "cpp.Type",
    "cpp.Ref",
    "cpp.Lazy",
    "cpp.DisableLazyChecksum",
    "cpp.Adapter",
    "cpp.PackIsset",
    "cpp.MinimizePadding",
    "cpp.TriviallyRelocatable",
    "cpp.ScopedEnumAsUnionType",
    "cpp.StrongType",
    "cpp.FieldInterceptor",
    "cpp.UseOpEncode",
    "cpp.EnumType",
    "cpp.Frozen2Exclude",
    "cpp.Frozen2RequiresCompleteContainerParams",
}

var structMetadatas = []*metadata.ThriftStruct{
    metadata.NewThriftStruct().
    SetName("cpp.Type").
    SetIsUnion(false).
    SetFields(
        []*metadata.ThriftField{
            metadata.NewThriftField().
    SetId(1).
    SetName("name").
    SetIsOptional(false).
    SetType(
        metadata.NewThriftType().
    SetTPrimitive(
        metadata.ThriftPrimitiveType_THRIFT_STRING_TYPE.Ptr(),
    ),
    ),
            metadata.NewThriftField().
    SetId(2).
    SetName("template").
    SetIsOptional(false).
    SetType(
        metadata.NewThriftType().
    SetTPrimitive(
        metadata.ThriftPrimitiveType_THRIFT_STRING_TYPE.Ptr(),
    ),
    ),
        },
    ),
    metadata.NewThriftStruct().
    SetName("cpp.Ref").
    SetIsUnion(false).
    SetFields(
        []*metadata.ThriftField{
            metadata.NewThriftField().
    SetId(1).
    SetName("type").
    SetIsOptional(false).
    SetType(
        metadata.NewThriftType().
    SetTEnum(
        metadata.NewThriftEnumType().
            SetName("cpp.RefType"),
    ),
    ),
        },
    ),
    metadata.NewThriftStruct().
    SetName("cpp.Lazy").
    SetIsUnion(false).
    SetFields(
        []*metadata.ThriftField{
            metadata.NewThriftField().
    SetId(1).
    SetName("ref").
    SetIsOptional(false).
    SetType(
        metadata.NewThriftType().
    SetTPrimitive(
        metadata.ThriftPrimitiveType_THRIFT_BOOL_TYPE.Ptr(),
    ),
    ),
        },
    ),
    metadata.NewThriftStruct().
    SetName("cpp.DisableLazyChecksum").
    SetIsUnion(false).
    SetFields(
        []*metadata.ThriftField{
        },
    ),
    metadata.NewThriftStruct().
    SetName("cpp.Adapter").
    SetIsUnion(false).
    SetFields(
        []*metadata.ThriftField{
            metadata.NewThriftField().
    SetId(1).
    SetName("name").
    SetIsOptional(false).
    SetType(
        metadata.NewThriftType().
    SetTPrimitive(
        metadata.ThriftPrimitiveType_THRIFT_STRING_TYPE.Ptr(),
    ),
    ),
            metadata.NewThriftField().
    SetId(2).
    SetName("adaptedType").
    SetIsOptional(false).
    SetType(
        metadata.NewThriftType().
    SetTPrimitive(
        metadata.ThriftPrimitiveType_THRIFT_STRING_TYPE.Ptr(),
    ),
    ),
            metadata.NewThriftField().
    SetId(3).
    SetName("underlyingName").
    SetIsOptional(false).
    SetType(
        metadata.NewThriftType().
    SetTPrimitive(
        metadata.ThriftPrimitiveType_THRIFT_STRING_TYPE.Ptr(),
    ),
    ),
            metadata.NewThriftField().
    SetId(4).
    SetName("extraNamespace").
    SetIsOptional(false).
    SetType(
        metadata.NewThriftType().
    SetTPrimitive(
        metadata.ThriftPrimitiveType_THRIFT_STRING_TYPE.Ptr(),
    ),
    ),
            metadata.NewThriftField().
    SetId(5).
    SetName("moveOnly").
    SetIsOptional(false).
    SetType(
        metadata.NewThriftType().
    SetTPrimitive(
        metadata.ThriftPrimitiveType_THRIFT_BOOL_TYPE.Ptr(),
    ),
    ),
        },
    ),
    metadata.NewThriftStruct().
    SetName("cpp.PackIsset").
    SetIsUnion(false).
    SetFields(
        []*metadata.ThriftField{
            metadata.NewThriftField().
    SetId(1).
    SetName("atomic").
    SetIsOptional(false).
    SetType(
        metadata.NewThriftType().
    SetTPrimitive(
        metadata.ThriftPrimitiveType_THRIFT_BOOL_TYPE.Ptr(),
    ),
    ),
        },
    ),
    metadata.NewThriftStruct().
    SetName("cpp.MinimizePadding").
    SetIsUnion(false).
    SetFields(
        []*metadata.ThriftField{
        },
    ),
    metadata.NewThriftStruct().
    SetName("cpp.TriviallyRelocatable").
    SetIsUnion(false).
    SetFields(
        []*metadata.ThriftField{
        },
    ),
    metadata.NewThriftStruct().
    SetName("cpp.ScopedEnumAsUnionType").
    SetIsUnion(false).
    SetFields(
        []*metadata.ThriftField{
        },
    ),
    metadata.NewThriftStruct().
    SetName("cpp.StrongType").
    SetIsUnion(false).
    SetFields(
        []*metadata.ThriftField{
        },
    ),
    metadata.NewThriftStruct().
    SetName("cpp.FieldInterceptor").
    SetIsUnion(false).
    SetFields(
        []*metadata.ThriftField{
            metadata.NewThriftField().
    SetId(1).
    SetName("name").
    SetIsOptional(false).
    SetType(
        metadata.NewThriftType().
    SetTPrimitive(
        metadata.ThriftPrimitiveType_THRIFT_STRING_TYPE.Ptr(),
    ),
    ),
            metadata.NewThriftField().
    SetId(2).
    SetName("noinline").
    SetIsOptional(false).
    SetType(
        metadata.NewThriftType().
    SetTPrimitive(
        metadata.ThriftPrimitiveType_THRIFT_BOOL_TYPE.Ptr(),
    ),
    ),
        },
    ),
    metadata.NewThriftStruct().
    SetName("cpp.UseOpEncode").
    SetIsUnion(false).
    SetFields(
        []*metadata.ThriftField{
        },
    ),
    metadata.NewThriftStruct().
    SetName("cpp.EnumType").
    SetIsUnion(false).
    SetFields(
        []*metadata.ThriftField{
            metadata.NewThriftField().
    SetId(1).
    SetName("type").
    SetIsOptional(false).
    SetType(
        metadata.NewThriftType().
    SetTEnum(
        metadata.NewThriftEnumType().
            SetName("cpp.EnumUnderlyingType"),
    ),
    ),
        },
    ),
    metadata.NewThriftStruct().
    SetName("cpp.Frozen2Exclude").
    SetIsUnion(false).
    SetFields(
        []*metadata.ThriftField{
        },
    ),
    metadata.NewThriftStruct().
    SetName("cpp.Frozen2RequiresCompleteContainerParams").
    SetIsUnion(false).
    SetFields(
        []*metadata.ThriftField{
        },
    ),
}

var exceptionNames = []string{
}

var exceptionMetadatas = []*metadata.ThriftException{
}

var enumNames = []string{
    "cpp.RefType",
    "cpp.EnumUnderlyingType",
}

var enumMetadatas = []*metadata.ThriftEnum{
    metadata.NewThriftEnum().
    SetName("cpp.RefType").
    SetElements(
        map[int32]string{
            0: "Unique",
            1: "Shared",
            2: "SharedMutable",
        },
    ),
    metadata.NewThriftEnum().
    SetName("cpp.EnumUnderlyingType").
    SetElements(
        map[int32]string{
            0: "I8",
            1: "U8",
            2: "I16",
            3: "U16",
            4: "U32",
        },
    ),
}

var serviceNames = []string{
}

var serviceMetadatas = []*metadata.ThriftService{
}

// GetThriftMetadata returns complete Thrift metadata for current and imported packages.
func GetThriftMetadata() *metadata.ThriftMetadata {
    includedEnumsMetadatas := []map[string]*metadata.ThriftEnum{
        GetEnumsMetadata(),
    }
    includedStructsMetadatas := []map[string]*metadata.ThriftStruct{
        GetStructsMetadata(),
    }
    includedExceptionsMetadatas := []map[string]*metadata.ThriftException{
        GetExceptionsMetadata(),
    }
    includedServicesMetadatas := []map[string]*metadata.ThriftService{
        GetServicesMetadata(),
    }

	allEnums := make(map[string]*metadata.ThriftEnum)
	allStructs := make(map[string]*metadata.ThriftStruct)
	allExceptions := make(map[string]*metadata.ThriftException)
    allServices := make(map[string]*metadata.ThriftService)

    for _, includedEnumsMetadata := range includedEnumsMetadatas {
        for enumName, thriftEnum := range includedEnumsMetadata {
            allEnums[enumName] = thriftEnum
        }
    }
    for _, includedStructsMetadata := range includedStructsMetadatas {
        for structName, thriftStruct := range includedStructsMetadata {
            allStructs[structName] = thriftStruct
        }
    }
    for _, includedExceptionsMetadata := range includedExceptionsMetadatas {
        for exceptionName, thriftException := range includedExceptionsMetadata {
            allExceptions[exceptionName] = thriftException
        }
    }
    for _, includedServicesMetadata := range includedServicesMetadatas {
        for serviceName, thriftService := range includedServicesMetadata {
            allServices[serviceName] = thriftService
        }
    }

    return metadata.NewThriftMetadata().
        SetEnums(allEnums).
        SetStructs(allStructs).
        SetExceptions(allExceptions).
        SetServices(allServices)
}

// GetStructsMetadata returns Thrift metadata for enums in the current package.
func GetEnumsMetadata() map[string]*metadata.ThriftEnum {
    result := make(map[string]*metadata.ThriftEnum)
    for i, enumName := range enumNames {
        result[enumName] = enumMetadatas[i]
    }
    return result
}

// GetStructsMetadata returns Thrift metadata for structs in the current package.
func GetStructsMetadata() map[string]*metadata.ThriftStruct {
    result := make(map[string]*metadata.ThriftStruct)
    for i, structName := range structNames {
        result[structName] = structMetadatas[i]
    }
    return result
}

// GetStructsMetadata returns Thrift metadata for exceptions in the current package.
func GetExceptionsMetadata() map[string]*metadata.ThriftException {
    result := make(map[string]*metadata.ThriftException)
    for i, exceptionName := range exceptionNames {
        result[exceptionName] = exceptionMetadatas[i]
    }
    return result
}

// GetStructsMetadata returns Thrift metadata for services in the current package.
func GetServicesMetadata() map[string]*metadata.ThriftService {
    result := make(map[string]*metadata.ThriftService)
    for i, serviceName := range serviceNames {
        result[serviceName] = serviceMetadatas[i]
    }
    return result
}
