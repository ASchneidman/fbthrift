
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT
 *  @generated
 *
 */

#include <folly/python/import.h>
#include <thrift/lib/python/capi/iobuf.h>
#include <thrift/lib/python/types.h>

#include <thrift/compiler/test/fixtures/types/src/gen-python-capi/module/thrift_types_api.h>
#include <thrift/compiler/test/fixtures/types/src/gen-python-capi/module/thrift_types_capi.h>


namespace apache {
namespace thrift {
namespace python {
namespace capi {
namespace {
bool ensure_module_imported() {
  static ::folly::python::import_cache_nocapture import((
      ::import_apache__thrift__fixtures__types__module__thrift_types_capi));
  return import();
}
} // namespace

ExtractorResult<::apache::thrift::fixtures::types::empty_struct>
Extractor<::apache::thrift::fixtures::types::empty_struct>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a empty_struct");
      }
      return extractorError<::apache::thrift::fixtures::types::empty_struct>(
          "Marshal error: empty_struct");
  }
  return ::apache::thrift::fixtures::types::empty_struct{};
}

ExtractorResult<::apache::thrift::fixtures::types::empty_struct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::empty_struct>>::operator()(PyObject* fbThriftData) {
  ::apache::thrift::fixtures::types::empty_struct cpp;
  (void)fbThriftData;
  return cpp;
}


int Extractor<::apache::thrift::fixtures::types::empty_struct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__empty_struct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: empty_struct");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::fixtures::types::empty_struct>::operator()(
    const ::apache::thrift::fixtures::types::empty_struct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::empty_struct>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__apache__thrift__fixtures__types__module__empty_struct(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::empty_struct>>::operator()(
    FOLLY_MAYBE_UNUSED const ::apache::thrift::fixtures::types::empty_struct& val) {
  StrongRef fbthrift_data(createStructTuple(0));
  return std::move(fbthrift_data).release();
}


ExtractorResult<::apache::thrift::fixtures::types::decorated_struct>
Extractor<::apache::thrift::fixtures::types::decorated_struct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::decorated_struct>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__apache__thrift__fixtures__types__module__decorated_struct(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::apache::thrift::fixtures::types::decorated_struct>(
        "Thrift serialize error: decorated_struct");
  }
  return detail::deserialize_iobuf<::apache::thrift::fixtures::types::decorated_struct>(std::move(val));
}


ExtractorResult<::apache::thrift::fixtures::types::decorated_struct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::decorated_struct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::decorated_struct>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  auto obj = StrongRef(init__apache__thrift__fixtures__types__module__decorated_struct(fbthrift_data));
  if (!obj) {
      return extractorError<::apache::thrift::fixtures::types::decorated_struct>(
          "Init from fbthrift error: decorated_struct");
  }
  return Extractor<::apache::thrift::fixtures::types::decorated_struct>{}(*obj);
}

int Extractor<::apache::thrift::fixtures::types::decorated_struct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__decorated_struct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: decorated_struct");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::fixtures::types::decorated_struct>::operator()(
    const ::apache::thrift::fixtures::types::decorated_struct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__apache__thrift__fixtures__types__module__decorated_struct(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::decorated_struct>>::operator()(
    const ::apache::thrift::fixtures::types::decorated_struct& val) {
  auto obj = StrongRef(Constructor<::apache::thrift::fixtures::types::decorated_struct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::apache::thrift::fixtures::types::ContainerStruct>
Extractor<::apache::thrift::fixtures::types::ContainerStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::ContainerStruct>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__apache__thrift__fixtures__types__module__ContainerStruct(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::apache::thrift::fixtures::types::ContainerStruct>(
        "Thrift serialize error: ContainerStruct");
  }
  return detail::deserialize_iobuf<::apache::thrift::fixtures::types::ContainerStruct>(std::move(val));
}


ExtractorResult<::apache::thrift::fixtures::types::ContainerStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::ContainerStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::ContainerStruct>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  auto obj = StrongRef(init__apache__thrift__fixtures__types__module__ContainerStruct(fbthrift_data));
  if (!obj) {
      return extractorError<::apache::thrift::fixtures::types::ContainerStruct>(
          "Init from fbthrift error: ContainerStruct");
  }
  return Extractor<::apache::thrift::fixtures::types::ContainerStruct>{}(*obj);
}

int Extractor<::apache::thrift::fixtures::types::ContainerStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__ContainerStruct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: ContainerStruct");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::fixtures::types::ContainerStruct>::operator()(
    const ::apache::thrift::fixtures::types::ContainerStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__apache__thrift__fixtures__types__module__ContainerStruct(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ContainerStruct>>::operator()(
    const ::apache::thrift::fixtures::types::ContainerStruct& val) {
  auto obj = StrongRef(Constructor<::apache::thrift::fixtures::types::ContainerStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::apache::thrift::fixtures::types::CppTypeStruct>
Extractor<::apache::thrift::fixtures::types::CppTypeStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::CppTypeStruct>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__apache__thrift__fixtures__types__module__CppTypeStruct(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::apache::thrift::fixtures::types::CppTypeStruct>(
        "Thrift serialize error: CppTypeStruct");
  }
  return detail::deserialize_iobuf<::apache::thrift::fixtures::types::CppTypeStruct>(std::move(val));
}


ExtractorResult<::apache::thrift::fixtures::types::CppTypeStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::CppTypeStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::CppTypeStruct>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  auto obj = StrongRef(init__apache__thrift__fixtures__types__module__CppTypeStruct(fbthrift_data));
  if (!obj) {
      return extractorError<::apache::thrift::fixtures::types::CppTypeStruct>(
          "Init from fbthrift error: CppTypeStruct");
  }
  return Extractor<::apache::thrift::fixtures::types::CppTypeStruct>{}(*obj);
}

int Extractor<::apache::thrift::fixtures::types::CppTypeStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__CppTypeStruct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: CppTypeStruct");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::fixtures::types::CppTypeStruct>::operator()(
    const ::apache::thrift::fixtures::types::CppTypeStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__apache__thrift__fixtures__types__module__CppTypeStruct(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::CppTypeStruct>>::operator()(
    const ::apache::thrift::fixtures::types::CppTypeStruct& val) {
  auto obj = StrongRef(Constructor<::apache::thrift::fixtures::types::CppTypeStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::apache::thrift::fixtures::types::VirtualStruct>
Extractor<::apache::thrift::fixtures::types::VirtualStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::VirtualStruct>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__apache__thrift__fixtures__types__module__VirtualStruct(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::apache::thrift::fixtures::types::VirtualStruct>(
        "Thrift serialize error: VirtualStruct");
  }
  return detail::deserialize_iobuf<::apache::thrift::fixtures::types::VirtualStruct>(std::move(val));
}


ExtractorResult<::apache::thrift::fixtures::types::VirtualStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::VirtualStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::VirtualStruct>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  auto obj = StrongRef(init__apache__thrift__fixtures__types__module__VirtualStruct(fbthrift_data));
  if (!obj) {
      return extractorError<::apache::thrift::fixtures::types::VirtualStruct>(
          "Init from fbthrift error: VirtualStruct");
  }
  return Extractor<::apache::thrift::fixtures::types::VirtualStruct>{}(*obj);
}

int Extractor<::apache::thrift::fixtures::types::VirtualStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__VirtualStruct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: VirtualStruct");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::fixtures::types::VirtualStruct>::operator()(
    const ::apache::thrift::fixtures::types::VirtualStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__apache__thrift__fixtures__types__module__VirtualStruct(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::VirtualStruct>>::operator()(
    const ::apache::thrift::fixtures::types::VirtualStruct& val) {
  auto obj = StrongRef(Constructor<::apache::thrift::fixtures::types::VirtualStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::apache::thrift::fixtures::types::MyStructWithForwardRefEnum>
Extractor<::apache::thrift::fixtures::types::MyStructWithForwardRefEnum>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::MyStructWithForwardRefEnum>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__apache__thrift__fixtures__types__module__MyStructWithForwardRefEnum(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::apache::thrift::fixtures::types::MyStructWithForwardRefEnum>(
        "Thrift serialize error: MyStructWithForwardRefEnum");
  }
  return detail::deserialize_iobuf<::apache::thrift::fixtures::types::MyStructWithForwardRefEnum>(std::move(val));
}


ExtractorResult<::apache::thrift::fixtures::types::MyStructWithForwardRefEnum>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::MyStructWithForwardRefEnum>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::MyStructWithForwardRefEnum>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  auto obj = StrongRef(init__apache__thrift__fixtures__types__module__MyStructWithForwardRefEnum(fbthrift_data));
  if (!obj) {
      return extractorError<::apache::thrift::fixtures::types::MyStructWithForwardRefEnum>(
          "Init from fbthrift error: MyStructWithForwardRefEnum");
  }
  return Extractor<::apache::thrift::fixtures::types::MyStructWithForwardRefEnum>{}(*obj);
}

int Extractor<::apache::thrift::fixtures::types::MyStructWithForwardRefEnum>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__MyStructWithForwardRefEnum(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyStructWithForwardRefEnum");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::fixtures::types::MyStructWithForwardRefEnum>::operator()(
    const ::apache::thrift::fixtures::types::MyStructWithForwardRefEnum& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__apache__thrift__fixtures__types__module__MyStructWithForwardRefEnum(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::MyStructWithForwardRefEnum>>::operator()(
    const ::apache::thrift::fixtures::types::MyStructWithForwardRefEnum& val) {
  auto obj = StrongRef(Constructor<::apache::thrift::fixtures::types::MyStructWithForwardRefEnum>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::apache::thrift::fixtures::types::TrivialNumeric>
Extractor<::apache::thrift::fixtures::types::TrivialNumeric>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::TrivialNumeric>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__apache__thrift__fixtures__types__module__TrivialNumeric(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::apache::thrift::fixtures::types::TrivialNumeric>(
        "Thrift serialize error: TrivialNumeric");
  }
  return detail::deserialize_iobuf<::apache::thrift::fixtures::types::TrivialNumeric>(std::move(val));
}


ExtractorResult<::apache::thrift::fixtures::types::TrivialNumeric>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::TrivialNumeric>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::TrivialNumeric>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  auto obj = StrongRef(init__apache__thrift__fixtures__types__module__TrivialNumeric(fbthrift_data));
  if (!obj) {
      return extractorError<::apache::thrift::fixtures::types::TrivialNumeric>(
          "Init from fbthrift error: TrivialNumeric");
  }
  return Extractor<::apache::thrift::fixtures::types::TrivialNumeric>{}(*obj);
}

int Extractor<::apache::thrift::fixtures::types::TrivialNumeric>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__TrivialNumeric(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: TrivialNumeric");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::fixtures::types::TrivialNumeric>::operator()(
    const ::apache::thrift::fixtures::types::TrivialNumeric& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__apache__thrift__fixtures__types__module__TrivialNumeric(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::TrivialNumeric>>::operator()(
    const ::apache::thrift::fixtures::types::TrivialNumeric& val) {
  auto obj = StrongRef(Constructor<::apache::thrift::fixtures::types::TrivialNumeric>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::apache::thrift::fixtures::types::TrivialNestedWithDefault>
Extractor<::apache::thrift::fixtures::types::TrivialNestedWithDefault>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::TrivialNestedWithDefault>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__apache__thrift__fixtures__types__module__TrivialNestedWithDefault(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::apache::thrift::fixtures::types::TrivialNestedWithDefault>(
        "Thrift serialize error: TrivialNestedWithDefault");
  }
  return detail::deserialize_iobuf<::apache::thrift::fixtures::types::TrivialNestedWithDefault>(std::move(val));
}


ExtractorResult<::apache::thrift::fixtures::types::TrivialNestedWithDefault>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::TrivialNestedWithDefault>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::TrivialNestedWithDefault>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  auto obj = StrongRef(init__apache__thrift__fixtures__types__module__TrivialNestedWithDefault(fbthrift_data));
  if (!obj) {
      return extractorError<::apache::thrift::fixtures::types::TrivialNestedWithDefault>(
          "Init from fbthrift error: TrivialNestedWithDefault");
  }
  return Extractor<::apache::thrift::fixtures::types::TrivialNestedWithDefault>{}(*obj);
}

int Extractor<::apache::thrift::fixtures::types::TrivialNestedWithDefault>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__TrivialNestedWithDefault(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: TrivialNestedWithDefault");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::fixtures::types::TrivialNestedWithDefault>::operator()(
    const ::apache::thrift::fixtures::types::TrivialNestedWithDefault& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__apache__thrift__fixtures__types__module__TrivialNestedWithDefault(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::TrivialNestedWithDefault>>::operator()(
    const ::apache::thrift::fixtures::types::TrivialNestedWithDefault& val) {
  auto obj = StrongRef(Constructor<::apache::thrift::fixtures::types::TrivialNestedWithDefault>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::apache::thrift::fixtures::types::ComplexString>
Extractor<::apache::thrift::fixtures::types::ComplexString>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::ComplexString>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__apache__thrift__fixtures__types__module__ComplexString(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::apache::thrift::fixtures::types::ComplexString>(
        "Thrift serialize error: ComplexString");
  }
  return detail::deserialize_iobuf<::apache::thrift::fixtures::types::ComplexString>(std::move(val));
}


ExtractorResult<::apache::thrift::fixtures::types::ComplexString>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::ComplexString>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::ComplexString>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  auto obj = StrongRef(init__apache__thrift__fixtures__types__module__ComplexString(fbthrift_data));
  if (!obj) {
      return extractorError<::apache::thrift::fixtures::types::ComplexString>(
          "Init from fbthrift error: ComplexString");
  }
  return Extractor<::apache::thrift::fixtures::types::ComplexString>{}(*obj);
}

int Extractor<::apache::thrift::fixtures::types::ComplexString>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__ComplexString(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: ComplexString");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::fixtures::types::ComplexString>::operator()(
    const ::apache::thrift::fixtures::types::ComplexString& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__apache__thrift__fixtures__types__module__ComplexString(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ComplexString>>::operator()(
    const ::apache::thrift::fixtures::types::ComplexString& val) {
  auto obj = StrongRef(Constructor<::apache::thrift::fixtures::types::ComplexString>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::apache::thrift::fixtures::types::ComplexNestedWithDefault>
Extractor<::apache::thrift::fixtures::types::ComplexNestedWithDefault>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::ComplexNestedWithDefault>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__apache__thrift__fixtures__types__module__ComplexNestedWithDefault(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::apache::thrift::fixtures::types::ComplexNestedWithDefault>(
        "Thrift serialize error: ComplexNestedWithDefault");
  }
  return detail::deserialize_iobuf<::apache::thrift::fixtures::types::ComplexNestedWithDefault>(std::move(val));
}


ExtractorResult<::apache::thrift::fixtures::types::ComplexNestedWithDefault>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::ComplexNestedWithDefault>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::ComplexNestedWithDefault>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  auto obj = StrongRef(init__apache__thrift__fixtures__types__module__ComplexNestedWithDefault(fbthrift_data));
  if (!obj) {
      return extractorError<::apache::thrift::fixtures::types::ComplexNestedWithDefault>(
          "Init from fbthrift error: ComplexNestedWithDefault");
  }
  return Extractor<::apache::thrift::fixtures::types::ComplexNestedWithDefault>{}(*obj);
}

int Extractor<::apache::thrift::fixtures::types::ComplexNestedWithDefault>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__ComplexNestedWithDefault(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: ComplexNestedWithDefault");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::fixtures::types::ComplexNestedWithDefault>::operator()(
    const ::apache::thrift::fixtures::types::ComplexNestedWithDefault& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__apache__thrift__fixtures__types__module__ComplexNestedWithDefault(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ComplexNestedWithDefault>>::operator()(
    const ::apache::thrift::fixtures::types::ComplexNestedWithDefault& val) {
  auto obj = StrongRef(Constructor<::apache::thrift::fixtures::types::ComplexNestedWithDefault>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::apache::thrift::fixtures::types::MinPadding>
Extractor<::apache::thrift::fixtures::types::MinPadding>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::MinPadding>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__apache__thrift__fixtures__types__module__MinPadding(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::apache::thrift::fixtures::types::MinPadding>(
        "Thrift serialize error: MinPadding");
  }
  return detail::deserialize_iobuf<::apache::thrift::fixtures::types::MinPadding>(std::move(val));
}


ExtractorResult<::apache::thrift::fixtures::types::MinPadding>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::MinPadding>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::MinPadding>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  auto obj = StrongRef(init__apache__thrift__fixtures__types__module__MinPadding(fbthrift_data));
  if (!obj) {
      return extractorError<::apache::thrift::fixtures::types::MinPadding>(
          "Init from fbthrift error: MinPadding");
  }
  return Extractor<::apache::thrift::fixtures::types::MinPadding>{}(*obj);
}

int Extractor<::apache::thrift::fixtures::types::MinPadding>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__MinPadding(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MinPadding");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::fixtures::types::MinPadding>::operator()(
    const ::apache::thrift::fixtures::types::MinPadding& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__apache__thrift__fixtures__types__module__MinPadding(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::MinPadding>>::operator()(
    const ::apache::thrift::fixtures::types::MinPadding& val) {
  auto obj = StrongRef(Constructor<::apache::thrift::fixtures::types::MinPadding>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::apache::thrift::fixtures::types::MinPaddingWithCustomType>
Extractor<::apache::thrift::fixtures::types::MinPaddingWithCustomType>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::MinPaddingWithCustomType>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__apache__thrift__fixtures__types__module__MinPaddingWithCustomType(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::apache::thrift::fixtures::types::MinPaddingWithCustomType>(
        "Thrift serialize error: MinPaddingWithCustomType");
  }
  return detail::deserialize_iobuf<::apache::thrift::fixtures::types::MinPaddingWithCustomType>(std::move(val));
}


ExtractorResult<::apache::thrift::fixtures::types::MinPaddingWithCustomType>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::MinPaddingWithCustomType>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::MinPaddingWithCustomType>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  auto obj = StrongRef(init__apache__thrift__fixtures__types__module__MinPaddingWithCustomType(fbthrift_data));
  if (!obj) {
      return extractorError<::apache::thrift::fixtures::types::MinPaddingWithCustomType>(
          "Init from fbthrift error: MinPaddingWithCustomType");
  }
  return Extractor<::apache::thrift::fixtures::types::MinPaddingWithCustomType>{}(*obj);
}

int Extractor<::apache::thrift::fixtures::types::MinPaddingWithCustomType>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__MinPaddingWithCustomType(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MinPaddingWithCustomType");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::fixtures::types::MinPaddingWithCustomType>::operator()(
    const ::apache::thrift::fixtures::types::MinPaddingWithCustomType& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__apache__thrift__fixtures__types__module__MinPaddingWithCustomType(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::MinPaddingWithCustomType>>::operator()(
    const ::apache::thrift::fixtures::types::MinPaddingWithCustomType& val) {
  auto obj = StrongRef(Constructor<::apache::thrift::fixtures::types::MinPaddingWithCustomType>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::apache::thrift::fixtures::types::MyStruct>
Extractor<::apache::thrift::fixtures::types::MyStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::MyStruct>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__apache__thrift__fixtures__types__module__MyStruct(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::apache::thrift::fixtures::types::MyStruct>(
        "Thrift serialize error: MyStruct");
  }
  return detail::deserialize_iobuf<::apache::thrift::fixtures::types::MyStruct>(std::move(val));
}


ExtractorResult<::apache::thrift::fixtures::types::MyStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::MyStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::MyStruct>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  auto obj = StrongRef(init__apache__thrift__fixtures__types__module__MyStruct(fbthrift_data));
  if (!obj) {
      return extractorError<::apache::thrift::fixtures::types::MyStruct>(
          "Init from fbthrift error: MyStruct");
  }
  return Extractor<::apache::thrift::fixtures::types::MyStruct>{}(*obj);
}

int Extractor<::apache::thrift::fixtures::types::MyStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__MyStruct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyStruct");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::fixtures::types::MyStruct>::operator()(
    const ::apache::thrift::fixtures::types::MyStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__apache__thrift__fixtures__types__module__MyStruct(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::MyStruct>>::operator()(
    const ::apache::thrift::fixtures::types::MyStruct& val) {
  auto obj = StrongRef(Constructor<::apache::thrift::fixtures::types::MyStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::apache::thrift::fixtures::types::MyDataItem>
Extractor<::apache::thrift::fixtures::types::MyDataItem>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a MyDataItem");
      }
      return extractorError<::apache::thrift::fixtures::types::MyDataItem>(
          "Marshal error: MyDataItem");
  }
  return ::apache::thrift::fixtures::types::MyDataItem{};
}

ExtractorResult<::apache::thrift::fixtures::types::MyDataItem>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::MyDataItem>>::operator()(PyObject* fbThriftData) {
  ::apache::thrift::fixtures::types::MyDataItem cpp;
  (void)fbThriftData;
  return cpp;
}


int Extractor<::apache::thrift::fixtures::types::MyDataItem>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__MyDataItem(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyDataItem");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::fixtures::types::MyDataItem>::operator()(
    const ::apache::thrift::fixtures::types::MyDataItem& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::MyDataItem>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__apache__thrift__fixtures__types__module__MyDataItem(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::MyDataItem>>::operator()(
    FOLLY_MAYBE_UNUSED const ::apache::thrift::fixtures::types::MyDataItem& val) {
  StrongRef fbthrift_data(createStructTuple(0));
  return std::move(fbthrift_data).release();
}


ExtractorResult<::apache::thrift::fixtures::types::Renamed>
Extractor<::apache::thrift::fixtures::types::Renamed>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::Renamed>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__apache__thrift__fixtures__types__module__Renaming(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::apache::thrift::fixtures::types::Renamed>(
        "Thrift serialize error: Renaming");
  }
  return detail::deserialize_iobuf<::apache::thrift::fixtures::types::Renamed>(std::move(val));
}


ExtractorResult<::apache::thrift::fixtures::types::Renamed>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::Renamed>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::Renamed>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  auto obj = StrongRef(init__apache__thrift__fixtures__types__module__Renaming(fbthrift_data));
  if (!obj) {
      return extractorError<::apache::thrift::fixtures::types::Renamed>(
          "Init from fbthrift error: Renaming");
  }
  return Extractor<::apache::thrift::fixtures::types::Renamed>{}(*obj);
}

int Extractor<::apache::thrift::fixtures::types::Renamed>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__Renaming(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: Renaming");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::fixtures::types::Renamed>::operator()(
    const ::apache::thrift::fixtures::types::Renamed& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__apache__thrift__fixtures__types__module__Renaming(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::Renamed>>::operator()(
    const ::apache::thrift::fixtures::types::Renamed& val) {
  auto obj = StrongRef(Constructor<::apache::thrift::fixtures::types::Renamed>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::apache::thrift::fixtures::types::AnnotatedTypes>
Extractor<::apache::thrift::fixtures::types::AnnotatedTypes>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::AnnotatedTypes>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__apache__thrift__fixtures__types__module__AnnotatedTypes(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::apache::thrift::fixtures::types::AnnotatedTypes>(
        "Thrift serialize error: AnnotatedTypes");
  }
  return detail::deserialize_iobuf<::apache::thrift::fixtures::types::AnnotatedTypes>(std::move(val));
}


ExtractorResult<::apache::thrift::fixtures::types::AnnotatedTypes>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::AnnotatedTypes>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::AnnotatedTypes>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  auto obj = StrongRef(init__apache__thrift__fixtures__types__module__AnnotatedTypes(fbthrift_data));
  if (!obj) {
      return extractorError<::apache::thrift::fixtures::types::AnnotatedTypes>(
          "Init from fbthrift error: AnnotatedTypes");
  }
  return Extractor<::apache::thrift::fixtures::types::AnnotatedTypes>{}(*obj);
}

int Extractor<::apache::thrift::fixtures::types::AnnotatedTypes>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__AnnotatedTypes(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: AnnotatedTypes");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::fixtures::types::AnnotatedTypes>::operator()(
    const ::apache::thrift::fixtures::types::AnnotatedTypes& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__apache__thrift__fixtures__types__module__AnnotatedTypes(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::AnnotatedTypes>>::operator()(
    const ::apache::thrift::fixtures::types::AnnotatedTypes& val) {
  auto obj = StrongRef(Constructor<::apache::thrift::fixtures::types::AnnotatedTypes>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::apache::thrift::fixtures::types::ForwardUsageRoot>
Extractor<::apache::thrift::fixtures::types::ForwardUsageRoot>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::ForwardUsageRoot>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__apache__thrift__fixtures__types__module__ForwardUsageRoot(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::apache::thrift::fixtures::types::ForwardUsageRoot>(
        "Thrift serialize error: ForwardUsageRoot");
  }
  return detail::deserialize_iobuf<::apache::thrift::fixtures::types::ForwardUsageRoot>(std::move(val));
}


ExtractorResult<::apache::thrift::fixtures::types::ForwardUsageRoot>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::ForwardUsageRoot>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::ForwardUsageRoot>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  auto obj = StrongRef(init__apache__thrift__fixtures__types__module__ForwardUsageRoot(fbthrift_data));
  if (!obj) {
      return extractorError<::apache::thrift::fixtures::types::ForwardUsageRoot>(
          "Init from fbthrift error: ForwardUsageRoot");
  }
  return Extractor<::apache::thrift::fixtures::types::ForwardUsageRoot>{}(*obj);
}

int Extractor<::apache::thrift::fixtures::types::ForwardUsageRoot>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__ForwardUsageRoot(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: ForwardUsageRoot");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::fixtures::types::ForwardUsageRoot>::operator()(
    const ::apache::thrift::fixtures::types::ForwardUsageRoot& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__apache__thrift__fixtures__types__module__ForwardUsageRoot(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ForwardUsageRoot>>::operator()(
    const ::apache::thrift::fixtures::types::ForwardUsageRoot& val) {
  auto obj = StrongRef(Constructor<::apache::thrift::fixtures::types::ForwardUsageRoot>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::apache::thrift::fixtures::types::ForwardUsageStruct>
Extractor<::apache::thrift::fixtures::types::ForwardUsageStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::ForwardUsageStruct>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__apache__thrift__fixtures__types__module__ForwardUsageStruct(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::apache::thrift::fixtures::types::ForwardUsageStruct>(
        "Thrift serialize error: ForwardUsageStruct");
  }
  return detail::deserialize_iobuf<::apache::thrift::fixtures::types::ForwardUsageStruct>(std::move(val));
}


ExtractorResult<::apache::thrift::fixtures::types::ForwardUsageStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::ForwardUsageStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::ForwardUsageStruct>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  auto obj = StrongRef(init__apache__thrift__fixtures__types__module__ForwardUsageStruct(fbthrift_data));
  if (!obj) {
      return extractorError<::apache::thrift::fixtures::types::ForwardUsageStruct>(
          "Init from fbthrift error: ForwardUsageStruct");
  }
  return Extractor<::apache::thrift::fixtures::types::ForwardUsageStruct>{}(*obj);
}

int Extractor<::apache::thrift::fixtures::types::ForwardUsageStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__ForwardUsageStruct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: ForwardUsageStruct");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::fixtures::types::ForwardUsageStruct>::operator()(
    const ::apache::thrift::fixtures::types::ForwardUsageStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__apache__thrift__fixtures__types__module__ForwardUsageStruct(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ForwardUsageStruct>>::operator()(
    const ::apache::thrift::fixtures::types::ForwardUsageStruct& val) {
  auto obj = StrongRef(Constructor<::apache::thrift::fixtures::types::ForwardUsageStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::apache::thrift::fixtures::types::ForwardUsageByRef>
Extractor<::apache::thrift::fixtures::types::ForwardUsageByRef>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::ForwardUsageByRef>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__apache__thrift__fixtures__types__module__ForwardUsageByRef(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::apache::thrift::fixtures::types::ForwardUsageByRef>(
        "Thrift serialize error: ForwardUsageByRef");
  }
  return detail::deserialize_iobuf<::apache::thrift::fixtures::types::ForwardUsageByRef>(std::move(val));
}


ExtractorResult<::apache::thrift::fixtures::types::ForwardUsageByRef>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::ForwardUsageByRef>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::ForwardUsageByRef>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  auto obj = StrongRef(init__apache__thrift__fixtures__types__module__ForwardUsageByRef(fbthrift_data));
  if (!obj) {
      return extractorError<::apache::thrift::fixtures::types::ForwardUsageByRef>(
          "Init from fbthrift error: ForwardUsageByRef");
  }
  return Extractor<::apache::thrift::fixtures::types::ForwardUsageByRef>{}(*obj);
}

int Extractor<::apache::thrift::fixtures::types::ForwardUsageByRef>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__ForwardUsageByRef(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: ForwardUsageByRef");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::fixtures::types::ForwardUsageByRef>::operator()(
    const ::apache::thrift::fixtures::types::ForwardUsageByRef& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__apache__thrift__fixtures__types__module__ForwardUsageByRef(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::ForwardUsageByRef>>::operator()(
    const ::apache::thrift::fixtures::types::ForwardUsageByRef& val) {
  auto obj = StrongRef(Constructor<::apache::thrift::fixtures::types::ForwardUsageByRef>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::apache::thrift::fixtures::types::IncompleteMap>
Extractor<::apache::thrift::fixtures::types::IncompleteMap>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::IncompleteMap>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__apache__thrift__fixtures__types__module__IncompleteMap(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::apache::thrift::fixtures::types::IncompleteMap>(
        "Thrift serialize error: IncompleteMap");
  }
  return detail::deserialize_iobuf<::apache::thrift::fixtures::types::IncompleteMap>(std::move(val));
}


ExtractorResult<::apache::thrift::fixtures::types::IncompleteMap>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::IncompleteMap>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::IncompleteMap>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  auto obj = StrongRef(init__apache__thrift__fixtures__types__module__IncompleteMap(fbthrift_data));
  if (!obj) {
      return extractorError<::apache::thrift::fixtures::types::IncompleteMap>(
          "Init from fbthrift error: IncompleteMap");
  }
  return Extractor<::apache::thrift::fixtures::types::IncompleteMap>{}(*obj);
}

int Extractor<::apache::thrift::fixtures::types::IncompleteMap>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__IncompleteMap(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: IncompleteMap");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::fixtures::types::IncompleteMap>::operator()(
    const ::apache::thrift::fixtures::types::IncompleteMap& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__apache__thrift__fixtures__types__module__IncompleteMap(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::IncompleteMap>>::operator()(
    const ::apache::thrift::fixtures::types::IncompleteMap& val) {
  auto obj = StrongRef(Constructor<::apache::thrift::fixtures::types::IncompleteMap>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::apache::thrift::fixtures::types::IncompleteMapDep>
Extractor<::apache::thrift::fixtures::types::IncompleteMapDep>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a IncompleteMapDep");
      }
      return extractorError<::apache::thrift::fixtures::types::IncompleteMapDep>(
          "Marshal error: IncompleteMapDep");
  }
  return ::apache::thrift::fixtures::types::IncompleteMapDep{};
}

ExtractorResult<::apache::thrift::fixtures::types::IncompleteMapDep>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::IncompleteMapDep>>::operator()(PyObject* fbThriftData) {
  ::apache::thrift::fixtures::types::IncompleteMapDep cpp;
  (void)fbThriftData;
  return cpp;
}


int Extractor<::apache::thrift::fixtures::types::IncompleteMapDep>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__IncompleteMapDep(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: IncompleteMapDep");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::fixtures::types::IncompleteMapDep>::operator()(
    const ::apache::thrift::fixtures::types::IncompleteMapDep& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::IncompleteMapDep>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__apache__thrift__fixtures__types__module__IncompleteMapDep(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::IncompleteMapDep>>::operator()(
    FOLLY_MAYBE_UNUSED const ::apache::thrift::fixtures::types::IncompleteMapDep& val) {
  StrongRef fbthrift_data(createStructTuple(0));
  return std::move(fbthrift_data).release();
}


ExtractorResult<::apache::thrift::fixtures::types::CompleteMap>
Extractor<::apache::thrift::fixtures::types::CompleteMap>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::CompleteMap>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__apache__thrift__fixtures__types__module__CompleteMap(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::apache::thrift::fixtures::types::CompleteMap>(
        "Thrift serialize error: CompleteMap");
  }
  return detail::deserialize_iobuf<::apache::thrift::fixtures::types::CompleteMap>(std::move(val));
}


ExtractorResult<::apache::thrift::fixtures::types::CompleteMap>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::CompleteMap>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::CompleteMap>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  auto obj = StrongRef(init__apache__thrift__fixtures__types__module__CompleteMap(fbthrift_data));
  if (!obj) {
      return extractorError<::apache::thrift::fixtures::types::CompleteMap>(
          "Init from fbthrift error: CompleteMap");
  }
  return Extractor<::apache::thrift::fixtures::types::CompleteMap>{}(*obj);
}

int Extractor<::apache::thrift::fixtures::types::CompleteMap>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__CompleteMap(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: CompleteMap");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::fixtures::types::CompleteMap>::operator()(
    const ::apache::thrift::fixtures::types::CompleteMap& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__apache__thrift__fixtures__types__module__CompleteMap(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::CompleteMap>>::operator()(
    const ::apache::thrift::fixtures::types::CompleteMap& val) {
  auto obj = StrongRef(Constructor<::apache::thrift::fixtures::types::CompleteMap>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::apache::thrift::fixtures::types::CompleteMapDep>
Extractor<::apache::thrift::fixtures::types::CompleteMapDep>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a CompleteMapDep");
      }
      return extractorError<::apache::thrift::fixtures::types::CompleteMapDep>(
          "Marshal error: CompleteMapDep");
  }
  return ::apache::thrift::fixtures::types::CompleteMapDep{};
}

ExtractorResult<::apache::thrift::fixtures::types::CompleteMapDep>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::CompleteMapDep>>::operator()(PyObject* fbThriftData) {
  ::apache::thrift::fixtures::types::CompleteMapDep cpp;
  (void)fbThriftData;
  return cpp;
}


int Extractor<::apache::thrift::fixtures::types::CompleteMapDep>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__CompleteMapDep(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: CompleteMapDep");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::fixtures::types::CompleteMapDep>::operator()(
    const ::apache::thrift::fixtures::types::CompleteMapDep& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::CompleteMapDep>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__apache__thrift__fixtures__types__module__CompleteMapDep(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::CompleteMapDep>>::operator()(
    FOLLY_MAYBE_UNUSED const ::apache::thrift::fixtures::types::CompleteMapDep& val) {
  StrongRef fbthrift_data(createStructTuple(0));
  return std::move(fbthrift_data).release();
}


ExtractorResult<::apache::thrift::fixtures::types::IncompleteList>
Extractor<::apache::thrift::fixtures::types::IncompleteList>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::IncompleteList>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__apache__thrift__fixtures__types__module__IncompleteList(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::apache::thrift::fixtures::types::IncompleteList>(
        "Thrift serialize error: IncompleteList");
  }
  return detail::deserialize_iobuf<::apache::thrift::fixtures::types::IncompleteList>(std::move(val));
}


ExtractorResult<::apache::thrift::fixtures::types::IncompleteList>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::IncompleteList>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::IncompleteList>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  auto obj = StrongRef(init__apache__thrift__fixtures__types__module__IncompleteList(fbthrift_data));
  if (!obj) {
      return extractorError<::apache::thrift::fixtures::types::IncompleteList>(
          "Init from fbthrift error: IncompleteList");
  }
  return Extractor<::apache::thrift::fixtures::types::IncompleteList>{}(*obj);
}

int Extractor<::apache::thrift::fixtures::types::IncompleteList>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__IncompleteList(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: IncompleteList");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::fixtures::types::IncompleteList>::operator()(
    const ::apache::thrift::fixtures::types::IncompleteList& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__apache__thrift__fixtures__types__module__IncompleteList(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::IncompleteList>>::operator()(
    const ::apache::thrift::fixtures::types::IncompleteList& val) {
  auto obj = StrongRef(Constructor<::apache::thrift::fixtures::types::IncompleteList>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::apache::thrift::fixtures::types::IncompleteListDep>
Extractor<::apache::thrift::fixtures::types::IncompleteListDep>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a IncompleteListDep");
      }
      return extractorError<::apache::thrift::fixtures::types::IncompleteListDep>(
          "Marshal error: IncompleteListDep");
  }
  return ::apache::thrift::fixtures::types::IncompleteListDep{};
}

ExtractorResult<::apache::thrift::fixtures::types::IncompleteListDep>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::IncompleteListDep>>::operator()(PyObject* fbThriftData) {
  ::apache::thrift::fixtures::types::IncompleteListDep cpp;
  (void)fbThriftData;
  return cpp;
}


int Extractor<::apache::thrift::fixtures::types::IncompleteListDep>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__IncompleteListDep(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: IncompleteListDep");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::fixtures::types::IncompleteListDep>::operator()(
    const ::apache::thrift::fixtures::types::IncompleteListDep& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::IncompleteListDep>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__apache__thrift__fixtures__types__module__IncompleteListDep(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::IncompleteListDep>>::operator()(
    FOLLY_MAYBE_UNUSED const ::apache::thrift::fixtures::types::IncompleteListDep& val) {
  StrongRef fbthrift_data(createStructTuple(0));
  return std::move(fbthrift_data).release();
}


ExtractorResult<::apache::thrift::fixtures::types::CompleteList>
Extractor<::apache::thrift::fixtures::types::CompleteList>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::CompleteList>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__apache__thrift__fixtures__types__module__CompleteList(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::apache::thrift::fixtures::types::CompleteList>(
        "Thrift serialize error: CompleteList");
  }
  return detail::deserialize_iobuf<::apache::thrift::fixtures::types::CompleteList>(std::move(val));
}


ExtractorResult<::apache::thrift::fixtures::types::CompleteList>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::CompleteList>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::CompleteList>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  auto obj = StrongRef(init__apache__thrift__fixtures__types__module__CompleteList(fbthrift_data));
  if (!obj) {
      return extractorError<::apache::thrift::fixtures::types::CompleteList>(
          "Init from fbthrift error: CompleteList");
  }
  return Extractor<::apache::thrift::fixtures::types::CompleteList>{}(*obj);
}

int Extractor<::apache::thrift::fixtures::types::CompleteList>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__CompleteList(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: CompleteList");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::fixtures::types::CompleteList>::operator()(
    const ::apache::thrift::fixtures::types::CompleteList& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__apache__thrift__fixtures__types__module__CompleteList(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::CompleteList>>::operator()(
    const ::apache::thrift::fixtures::types::CompleteList& val) {
  auto obj = StrongRef(Constructor<::apache::thrift::fixtures::types::CompleteList>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::apache::thrift::fixtures::types::CompleteListDep>
Extractor<::apache::thrift::fixtures::types::CompleteListDep>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a CompleteListDep");
      }
      return extractorError<::apache::thrift::fixtures::types::CompleteListDep>(
          "Marshal error: CompleteListDep");
  }
  return ::apache::thrift::fixtures::types::CompleteListDep{};
}

ExtractorResult<::apache::thrift::fixtures::types::CompleteListDep>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::CompleteListDep>>::operator()(PyObject* fbThriftData) {
  ::apache::thrift::fixtures::types::CompleteListDep cpp;
  (void)fbThriftData;
  return cpp;
}


int Extractor<::apache::thrift::fixtures::types::CompleteListDep>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__CompleteListDep(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: CompleteListDep");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::fixtures::types::CompleteListDep>::operator()(
    const ::apache::thrift::fixtures::types::CompleteListDep& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::CompleteListDep>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__apache__thrift__fixtures__types__module__CompleteListDep(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::CompleteListDep>>::operator()(
    FOLLY_MAYBE_UNUSED const ::apache::thrift::fixtures::types::CompleteListDep& val) {
  StrongRef fbthrift_data(createStructTuple(0));
  return std::move(fbthrift_data).release();
}


ExtractorResult<::apache::thrift::fixtures::types::AdaptedList>
Extractor<::apache::thrift::fixtures::types::AdaptedList>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::AdaptedList>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__apache__thrift__fixtures__types__module__AdaptedList(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::apache::thrift::fixtures::types::AdaptedList>(
        "Thrift serialize error: AdaptedList");
  }
  return detail::deserialize_iobuf<::apache::thrift::fixtures::types::AdaptedList>(std::move(val));
}


ExtractorResult<::apache::thrift::fixtures::types::AdaptedList>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::AdaptedList>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::AdaptedList>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  auto obj = StrongRef(init__apache__thrift__fixtures__types__module__AdaptedList(fbthrift_data));
  if (!obj) {
      return extractorError<::apache::thrift::fixtures::types::AdaptedList>(
          "Init from fbthrift error: AdaptedList");
  }
  return Extractor<::apache::thrift::fixtures::types::AdaptedList>{}(*obj);
}

int Extractor<::apache::thrift::fixtures::types::AdaptedList>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__AdaptedList(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: AdaptedList");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::fixtures::types::AdaptedList>::operator()(
    const ::apache::thrift::fixtures::types::AdaptedList& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__apache__thrift__fixtures__types__module__AdaptedList(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::AdaptedList>>::operator()(
    const ::apache::thrift::fixtures::types::AdaptedList& val) {
  auto obj = StrongRef(Constructor<::apache::thrift::fixtures::types::AdaptedList>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::apache::thrift::fixtures::types::detail::AdaptedListDep>
Extractor<::apache::thrift::fixtures::types::detail::AdaptedListDep>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::detail::AdaptedListDep>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__apache__thrift__fixtures__types__module__AdaptedListDep(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::apache::thrift::fixtures::types::detail::AdaptedListDep>(
        "Thrift serialize error: AdaptedListDep");
  }
  return detail::deserialize_iobuf_to_adapted<
      ::apache::thrift::fixtures::types::detail::AdaptedListDep, IdentityAdapter<detail::AdaptedListDep>
    >(std::move(val));
}


ExtractorResult<::apache::thrift::fixtures::types::detail::AdaptedListDep>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::detail::AdaptedListDep>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::detail::AdaptedListDep>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  auto obj = StrongRef(init__apache__thrift__fixtures__types__module__AdaptedListDep(fbthrift_data));
  if (!obj) {
      return extractorError<::apache::thrift::fixtures::types::detail::AdaptedListDep>(
          "Init from fbthrift error: AdaptedListDep");
  }
  return Extractor<::apache::thrift::fixtures::types::detail::AdaptedListDep>{}(*obj);
}

int Extractor<::apache::thrift::fixtures::types::detail::AdaptedListDep>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__AdaptedListDep(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: AdaptedListDep");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::fixtures::types::detail::AdaptedListDep>::operator()(
    const ::apache::thrift::fixtures::types::detail::AdaptedListDep& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__apache__thrift__fixtures__types__module__AdaptedListDep(
      detail::serialize_adapted_to_iobuf<IdentityAdapter<detail::AdaptedListDep>>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::detail::AdaptedListDep>>::operator()(
    const ::apache::thrift::fixtures::types::detail::AdaptedListDep& val) {
  auto obj = StrongRef(Constructor<::apache::thrift::fixtures::types::detail::AdaptedListDep>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::apache::thrift::fixtures::types::DependentAdaptedList>
Extractor<::apache::thrift::fixtures::types::DependentAdaptedList>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::DependentAdaptedList>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__apache__thrift__fixtures__types__module__DependentAdaptedList(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::apache::thrift::fixtures::types::DependentAdaptedList>(
        "Thrift serialize error: DependentAdaptedList");
  }
  return detail::deserialize_iobuf<::apache::thrift::fixtures::types::DependentAdaptedList>(std::move(val));
}


ExtractorResult<::apache::thrift::fixtures::types::DependentAdaptedList>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::DependentAdaptedList>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::DependentAdaptedList>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  auto obj = StrongRef(init__apache__thrift__fixtures__types__module__DependentAdaptedList(fbthrift_data));
  if (!obj) {
      return extractorError<::apache::thrift::fixtures::types::DependentAdaptedList>(
          "Init from fbthrift error: DependentAdaptedList");
  }
  return Extractor<::apache::thrift::fixtures::types::DependentAdaptedList>{}(*obj);
}

int Extractor<::apache::thrift::fixtures::types::DependentAdaptedList>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__DependentAdaptedList(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: DependentAdaptedList");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::fixtures::types::DependentAdaptedList>::operator()(
    const ::apache::thrift::fixtures::types::DependentAdaptedList& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__apache__thrift__fixtures__types__module__DependentAdaptedList(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::DependentAdaptedList>>::operator()(
    const ::apache::thrift::fixtures::types::DependentAdaptedList& val) {
  auto obj = StrongRef(Constructor<::apache::thrift::fixtures::types::DependentAdaptedList>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::apache::thrift::fixtures::types::detail::DependentAdaptedListDep>
Extractor<::apache::thrift::fixtures::types::detail::DependentAdaptedListDep>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::detail::DependentAdaptedListDep>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__apache__thrift__fixtures__types__module__DependentAdaptedListDep(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::apache::thrift::fixtures::types::detail::DependentAdaptedListDep>(
        "Thrift serialize error: DependentAdaptedListDep");
  }
  return detail::deserialize_iobuf_to_adapted<
      ::apache::thrift::fixtures::types::detail::DependentAdaptedListDep, IdentityAdapter<detail::DependentAdaptedListDep>
    >(std::move(val));
}


ExtractorResult<::apache::thrift::fixtures::types::detail::DependentAdaptedListDep>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::detail::DependentAdaptedListDep>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::detail::DependentAdaptedListDep>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  auto obj = StrongRef(init__apache__thrift__fixtures__types__module__DependentAdaptedListDep(fbthrift_data));
  if (!obj) {
      return extractorError<::apache::thrift::fixtures::types::detail::DependentAdaptedListDep>(
          "Init from fbthrift error: DependentAdaptedListDep");
  }
  return Extractor<::apache::thrift::fixtures::types::detail::DependentAdaptedListDep>{}(*obj);
}

int Extractor<::apache::thrift::fixtures::types::detail::DependentAdaptedListDep>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__DependentAdaptedListDep(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: DependentAdaptedListDep");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::fixtures::types::detail::DependentAdaptedListDep>::operator()(
    const ::apache::thrift::fixtures::types::detail::DependentAdaptedListDep& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__apache__thrift__fixtures__types__module__DependentAdaptedListDep(
      detail::serialize_adapted_to_iobuf<IdentityAdapter<detail::DependentAdaptedListDep>>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::detail::DependentAdaptedListDep>>::operator()(
    const ::apache::thrift::fixtures::types::detail::DependentAdaptedListDep& val) {
  auto obj = StrongRef(Constructor<::apache::thrift::fixtures::types::detail::DependentAdaptedListDep>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::apache::thrift::fixtures::types::AllocatorAware>
Extractor<::apache::thrift::fixtures::types::AllocatorAware>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::AllocatorAware>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__apache__thrift__fixtures__types__module__AllocatorAware(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::apache::thrift::fixtures::types::AllocatorAware>(
        "Thrift serialize error: AllocatorAware");
  }
  return detail::deserialize_iobuf<::apache::thrift::fixtures::types::AllocatorAware>(std::move(val));
}


ExtractorResult<::apache::thrift::fixtures::types::AllocatorAware>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::AllocatorAware>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::AllocatorAware>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  auto obj = StrongRef(init__apache__thrift__fixtures__types__module__AllocatorAware(fbthrift_data));
  if (!obj) {
      return extractorError<::apache::thrift::fixtures::types::AllocatorAware>(
          "Init from fbthrift error: AllocatorAware");
  }
  return Extractor<::apache::thrift::fixtures::types::AllocatorAware>{}(*obj);
}

int Extractor<::apache::thrift::fixtures::types::AllocatorAware>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__AllocatorAware(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: AllocatorAware");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::fixtures::types::AllocatorAware>::operator()(
    const ::apache::thrift::fixtures::types::AllocatorAware& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__apache__thrift__fixtures__types__module__AllocatorAware(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::AllocatorAware>>::operator()(
    const ::apache::thrift::fixtures::types::AllocatorAware& val) {
  auto obj = StrongRef(Constructor<::apache::thrift::fixtures::types::AllocatorAware>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::apache::thrift::fixtures::types::AllocatorAware2>
Extractor<::apache::thrift::fixtures::types::AllocatorAware2>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::AllocatorAware2>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__apache__thrift__fixtures__types__module__AllocatorAware2(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::apache::thrift::fixtures::types::AllocatorAware2>(
        "Thrift serialize error: AllocatorAware2");
  }
  return detail::deserialize_iobuf<::apache::thrift::fixtures::types::AllocatorAware2>(std::move(val));
}


ExtractorResult<::apache::thrift::fixtures::types::AllocatorAware2>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::AllocatorAware2>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::AllocatorAware2>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  auto obj = StrongRef(init__apache__thrift__fixtures__types__module__AllocatorAware2(fbthrift_data));
  if (!obj) {
      return extractorError<::apache::thrift::fixtures::types::AllocatorAware2>(
          "Init from fbthrift error: AllocatorAware2");
  }
  return Extractor<::apache::thrift::fixtures::types::AllocatorAware2>{}(*obj);
}

int Extractor<::apache::thrift::fixtures::types::AllocatorAware2>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__AllocatorAware2(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: AllocatorAware2");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::fixtures::types::AllocatorAware2>::operator()(
    const ::apache::thrift::fixtures::types::AllocatorAware2& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__apache__thrift__fixtures__types__module__AllocatorAware2(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::AllocatorAware2>>::operator()(
    const ::apache::thrift::fixtures::types::AllocatorAware2& val) {
  auto obj = StrongRef(Constructor<::apache::thrift::fixtures::types::AllocatorAware2>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::apache::thrift::fixtures::types::TypedefStruct>
Extractor<::apache::thrift::fixtures::types::TypedefStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::TypedefStruct>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__apache__thrift__fixtures__types__module__TypedefStruct(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::apache::thrift::fixtures::types::TypedefStruct>(
        "Thrift serialize error: TypedefStruct");
  }
  return detail::deserialize_iobuf<::apache::thrift::fixtures::types::TypedefStruct>(std::move(val));
}


ExtractorResult<::apache::thrift::fixtures::types::TypedefStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::TypedefStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::TypedefStruct>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  auto obj = StrongRef(init__apache__thrift__fixtures__types__module__TypedefStruct(fbthrift_data));
  if (!obj) {
      return extractorError<::apache::thrift::fixtures::types::TypedefStruct>(
          "Init from fbthrift error: TypedefStruct");
  }
  return Extractor<::apache::thrift::fixtures::types::TypedefStruct>{}(*obj);
}

int Extractor<::apache::thrift::fixtures::types::TypedefStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__TypedefStruct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: TypedefStruct");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::fixtures::types::TypedefStruct>::operator()(
    const ::apache::thrift::fixtures::types::TypedefStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__apache__thrift__fixtures__types__module__TypedefStruct(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::TypedefStruct>>::operator()(
    const ::apache::thrift::fixtures::types::TypedefStruct& val) {
  auto obj = StrongRef(Constructor<::apache::thrift::fixtures::types::TypedefStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::apache::thrift::fixtures::types::StructWithDoubleUnderscores>
Extractor<::apache::thrift::fixtures::types::StructWithDoubleUnderscores>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::StructWithDoubleUnderscores>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__apache__thrift__fixtures__types__module__StructWithDoubleUnderscores(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::apache::thrift::fixtures::types::StructWithDoubleUnderscores>(
        "Thrift serialize error: StructWithDoubleUnderscores");
  }
  return detail::deserialize_iobuf<::apache::thrift::fixtures::types::StructWithDoubleUnderscores>(std::move(val));
}


ExtractorResult<::apache::thrift::fixtures::types::StructWithDoubleUnderscores>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::apache::thrift::fixtures::types::StructWithDoubleUnderscores>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::apache::thrift::fixtures::types::StructWithDoubleUnderscores>(
      "Module apache.thrift.fixtures.types.module import error");
  }
  auto obj = StrongRef(init__apache__thrift__fixtures__types__module__StructWithDoubleUnderscores(fbthrift_data));
  if (!obj) {
      return extractorError<::apache::thrift::fixtures::types::StructWithDoubleUnderscores>(
          "Init from fbthrift error: StructWithDoubleUnderscores");
  }
  return Extractor<::apache::thrift::fixtures::types::StructWithDoubleUnderscores>{}(*obj);
}

int Extractor<::apache::thrift::fixtures::types::StructWithDoubleUnderscores>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__StructWithDoubleUnderscores(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: StructWithDoubleUnderscores");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::fixtures::types::StructWithDoubleUnderscores>::operator()(
    const ::apache::thrift::fixtures::types::StructWithDoubleUnderscores& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__apache__thrift__fixtures__types__module__StructWithDoubleUnderscores(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::apache::thrift::fixtures::types::StructWithDoubleUnderscores>>::operator()(
    const ::apache::thrift::fixtures::types::StructWithDoubleUnderscores& val) {
  auto obj = StrongRef(Constructor<::apache::thrift::fixtures::types::StructWithDoubleUnderscores>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::apache::thrift::fixtures::types::has_bitwise_ops>
Extractor<::apache::thrift::fixtures::types::has_bitwise_ops>::operator()(PyObject* obj) {
  long val = PyLong_AsLong(obj);
  if (val == -1 && PyErr_Occurred()) {
    return extractorError<::apache::thrift::fixtures::types::has_bitwise_ops>(
        "Error getting python int value: has_bitwise_ops");
  }
  return static_cast<::apache::thrift::fixtures::types::has_bitwise_ops>(val);
}

int Extractor<::apache::thrift::fixtures::types::has_bitwise_ops>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__has_bitwise_ops(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: has_bitwise_ops");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::fixtures::types::has_bitwise_ops>::operator()(
    ::apache::thrift::fixtures::types::has_bitwise_ops val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__apache__thrift__fixtures__types__module__has_bitwise_ops(
      static_cast<int64_t>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}

ExtractorResult<::apache::thrift::fixtures::types::is_unscoped>
Extractor<::apache::thrift::fixtures::types::is_unscoped>::operator()(PyObject* obj) {
  long val = PyLong_AsLong(obj);
  if (val == -1 && PyErr_Occurred()) {
    return extractorError<::apache::thrift::fixtures::types::is_unscoped>(
        "Error getting python int value: is_unscoped");
  }
  return static_cast<::apache::thrift::fixtures::types::is_unscoped>(val);
}

int Extractor<::apache::thrift::fixtures::types::is_unscoped>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__is_unscoped(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: is_unscoped");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::fixtures::types::is_unscoped>::operator()(
    ::apache::thrift::fixtures::types::is_unscoped val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__apache__thrift__fixtures__types__module__is_unscoped(
      static_cast<int64_t>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}

ExtractorResult<::apache::thrift::fixtures::types::MyForwardRefEnum>
Extractor<::apache::thrift::fixtures::types::MyForwardRefEnum>::operator()(PyObject* obj) {
  long val = PyLong_AsLong(obj);
  if (val == -1 && PyErr_Occurred()) {
    return extractorError<::apache::thrift::fixtures::types::MyForwardRefEnum>(
        "Error getting python int value: MyForwardRefEnum");
  }
  return static_cast<::apache::thrift::fixtures::types::MyForwardRefEnum>(val);
}

int Extractor<::apache::thrift::fixtures::types::MyForwardRefEnum>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module apache.thrift.fixtures.types.module import error");
  }
  int result =
      can_extract__apache__thrift__fixtures__types__module__MyForwardRefEnum(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyForwardRefEnum");
  }
  return result;
}


PyObject* Constructor<::apache::thrift::fixtures::types::MyForwardRefEnum>::operator()(
    ::apache::thrift::fixtures::types::MyForwardRefEnum val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__apache__thrift__fixtures__types__module__MyForwardRefEnum(
      static_cast<int64_t>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}

} // namespace capi
} // namespace python
} // namespace thrift
} // namespace apache
