/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.basic;

import com.facebook.swift.codec.*;
import com.facebook.swift.codec.ThriftField.Requiredness;
import com.facebook.swift.service.*;
import com.facebook.thrift.client.*;
import com.google.common.util.concurrent.ListenableFuture;
import java.io.*;
import java.util.*;

@SwiftGenerated
@com.facebook.swift.service.ThriftService("MyService")
public interface MyService extends java.io.Closeable {
    @com.facebook.swift.service.ThriftService("MyService")
    public interface Async extends java.io.Closeable {
        @java.lang.Override void close();

        @ThriftMethod(value = "query")
        ListenableFuture<test.fixtures.basic.MyStruct> query(
            @com.facebook.swift.codec.ThriftField(value=1, name="u", requiredness=Requiredness.NONE) final test.fixtures.basic.MyUnion u);

        default ListenableFuture<test.fixtures.basic.MyStruct> query(
            @com.facebook.swift.codec.ThriftField(value=1, name="u", requiredness=Requiredness.NONE) final test.fixtures.basic.MyUnion u,
            RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        default ListenableFuture<ResponseWrapper<test.fixtures.basic.MyStruct>> queryWrapper(
            @com.facebook.swift.codec.ThriftField(value=1, name="u", requiredness=Requiredness.NONE) final test.fixtures.basic.MyUnion u,
            RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }
    }
    @java.lang.Override void close();

    @ThriftMethod(value = "query")
    test.fixtures.basic.MyStruct query(
        @com.facebook.swift.codec.ThriftField(value=1, name="u", requiredness=Requiredness.NONE) final test.fixtures.basic.MyUnion u) throws org.apache.thrift.TException;

    default test.fixtures.basic.MyStruct query(
        @com.facebook.swift.codec.ThriftField(value=1, name="u", requiredness=Requiredness.NONE) final test.fixtures.basic.MyUnion u,
        RpcOptions rpcOptions) throws org.apache.thrift.TException {
        throw new UnsupportedOperationException();
    }

    default ResponseWrapper<test.fixtures.basic.MyStruct> queryWrapper(
        @com.facebook.swift.codec.ThriftField(value=1, name="u", requiredness=Requiredness.NONE) final test.fixtures.basic.MyUnion u,
        RpcOptions rpcOptions) throws org.apache.thrift.TException {
        throw new UnsupportedOperationException();
    }

    @com.facebook.swift.service.ThriftService("MyService")
    interface Reactive extends reactor.core.Disposable {
        @ThriftMethod(value = "query")
        reactor.core.publisher.Mono<test.fixtures.basic.MyStruct> query(final test.fixtures.basic.MyUnion u);

        default reactor.core.publisher.Mono<test.fixtures.basic.MyStruct> query(final test.fixtures.basic.MyUnion u, RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

        default reactor.core.publisher.Mono<ResponseWrapper<test.fixtures.basic.MyStruct>> queryWrapper(final test.fixtures.basic.MyUnion u, RpcOptions rpcOptions) {
            throw new UnsupportedOperationException();
        }

    }
}
