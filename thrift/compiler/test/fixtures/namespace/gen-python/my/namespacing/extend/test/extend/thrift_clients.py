#
# Autogenerated by Thrift
#
# DO NOT EDIT
#  @generated
#

import typing as _typing

import apache.thrift.metadata.thrift_types as _fbthrift_metadata
import folly.iobuf as _fbthrift_iobuf
from thrift.python.client import (
    AsyncClient as _fbthrift_py3lite_AsyncClient,
    SyncClient as _fbthrift_py3lite_SyncClient,
    Client as _fbthrift_py3lite_Client,
)
import thrift.python.exceptions as _fbthrift_py3lite_exceptions
import thrift.python.types as _fbthrift_py3lite_types
import py3lite_module_root.my.namespacing.extend.test.extend.thrift_types
import py3lite_module_root.my.namespacing.extend.test.extend.thrift_metadata
import py3lite_module_root.my.namespacing.test.hsmodule.thrift_types
import py3lite_module_root.my.namespacing.test.hsmodule.thrift_clients


class ExtendTestService(_fbthrift_py3lite_Client["ExtendTestService.Async", "ExtendTestService.Sync"]):
    @staticmethod
    def __get_thrift_name__() -> str:
        return "extend.ExtendTestService"

    @staticmethod
    def __get_metadata__() -> _fbthrift_metadata.ThriftMetadata:
        return py3lite_module_root.my.namespacing.extend.test.extend.thrift_metadata.gen_metadata_service_ExtendTestService()

    class Async(py3lite_module_root.my.namespacing.test.hsmodule.thrift_clients.HsTestService.Async):
        @staticmethod
        def __get_thrift_name__() -> str:
            return "extend.ExtendTestService"

        @staticmethod
        def __get_metadata__() -> _fbthrift_metadata.ThriftMetadata:
            return py3lite_module_root.my.namespacing.extend.test.extend.thrift_metadata.gen_metadata_service_ExtendTestService()

        async def check(
            self,
            struct1: py3lite_module_root.my.namespacing.test.hsmodule.thrift_types.HsFoo
        ) -> bool:
            _fbthrift_resp = await self._send_request(
                "ExtendTestService",
                "check",
                py3lite_module_root.my.namespacing.extend.test.extend.thrift_types._fbthrift_ExtendTestService_check_args(
                    struct1=struct1,),
                py3lite_module_root.my.namespacing.extend.test.extend.thrift_types._fbthrift_ExtendTestService_check_result,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_py3lite_exceptions.ApplicationError(
                _fbthrift_py3lite_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )

    class Sync(py3lite_module_root.my.namespacing.test.hsmodule.thrift_clients.HsTestService.Sync):
        @staticmethod
        def __get_thrift_name__() -> str:
            return "extend.ExtendTestService"

        @staticmethod
        def __get_metadata__() -> _fbthrift_metadata.ThriftMetadata:
            return py3lite_module_root.my.namespacing.extend.test.extend.thrift_metadata.gen_metadata_service_ExtendTestService()

        def check(
            self,
            struct1: py3lite_module_root.my.namespacing.test.hsmodule.thrift_types.HsFoo
        ) -> bool:
            _fbthrift_resp = self._send_request(
                "ExtendTestService",
                "check",
                py3lite_module_root.my.namespacing.extend.test.extend.thrift_types._fbthrift_ExtendTestService_check_args(
                    struct1=struct1,),
                py3lite_module_root.my.namespacing.extend.test.extend.thrift_types._fbthrift_ExtendTestService_check_result,
            )
            # shortcut to success path for non-void returns
            if _fbthrift_resp.success is not None:
                return _fbthrift_resp.success
            raise _fbthrift_py3lite_exceptions.ApplicationError(
                _fbthrift_py3lite_exceptions.ApplicationErrorType.MISSING_RESULT,
                "Empty Response",
            )
