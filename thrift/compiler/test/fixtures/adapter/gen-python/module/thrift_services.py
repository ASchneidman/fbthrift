#
# Autogenerated by Thrift
#
# DO NOT EDIT
#  @generated
#

from __future__ import annotations

from abc import ABCMeta
import typing as _typing

import folly.iobuf as _fbthrift_iobuf

import apache.thrift.metadata.thrift_types as _fbthrift_metadata
from thrift.python.serializer import serialize_iobuf, deserialize, Protocol
from thrift.python.server import ServiceInterface, oneway, PythonUserException

import module.thrift_types
import module.thrift_metadata
import facebook.thrift.annotation.cpp.thrift_types
import facebook.thrift.annotation.hack.thrift_types
import facebook.thrift.annotation.python.thrift_types
import facebook.thrift.annotation.thrift.thrift_types

class ServiceInterface(
    ServiceInterface,
    metaclass=ABCMeta
):

    @staticmethod
    def service_name() -> bytes:
        return b"Service"

    # pyre-ignore[3]: it can return anything
    def getFunctionTable(self) -> _typing.Mapping[bytes, _typing.Callable[..., _typing.Any]]:
        functionTable = {
            b"func": self._fbthrift__handler_func,
        }
        return {**super().getFunctionTable(), **functionTable}

    @staticmethod
    def __get_thrift_name__() -> str:
        return "module.Service"

    @staticmethod
    def __get_metadata__() -> _fbthrift_metadata.ThriftMetadata:
        return module.thrift_metadata.gen_metadata_service_Service()



    async def func(
            self,
            arg1: str,
            arg2: str,
            arg3: module.thrift_types.Foo
        ) -> int:
        raise NotImplementedError("async def func is not implemented")

    async def _fbthrift__handler_func(self, args: _fbthrift_iobuf.IOBuf, protocol: Protocol) -> _fbthrift_iobuf.IOBuf:
        args_struct = deserialize(module.thrift_types._fbthrift_Service_func_args, args, protocol)
        value = await self.func(args_struct.arg1,args_struct.arg2,args_struct.arg3,)
        return_struct = module.thrift_types._fbthrift_Service_func_result(success=value)

        return serialize_iobuf(return_struct, protocol)

