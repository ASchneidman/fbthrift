
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT
 *  @generated
 *
 */

#include <folly/python/import.h>
#include <thrift/lib/python/capi/iobuf.h>
#include <thrift/lib/python/types.h>

#include <thrift/compiler/test/fixtures/adapter/src/gen-python-capi/with_containers/thrift_types_api.h>
#include <thrift/compiler/test/fixtures/adapter/src/gen-python-capi/with_containers/thrift_types_capi.h>


namespace apache {
namespace thrift {
namespace python {
namespace capi {
namespace {
bool ensure_module_imported() {
  static ::folly::python::import_cache_nocapture import((
      ::import_with_containers__thrift_types_capi));
  return import();
}
} // namespace

ExtractorResult<::cpp2::AnnotationWithContainers>
Extractor<::cpp2::AnnotationWithContainers>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::AnnotationWithContainers>(
      "Module with_containers import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__with_containers__AnnotationWithContainers(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::cpp2::AnnotationWithContainers>(
        "Thrift serialize error: AnnotationWithContainers");
  }
  return detail::deserialize_iobuf<::cpp2::AnnotationWithContainers>(std::move(val));
}


ExtractorResult<::cpp2::AnnotationWithContainers>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::cpp2::AnnotationWithContainers>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::AnnotationWithContainers>(
      "Module with_containers import error");
  }
  auto obj = StrongRef(init__with_containers__AnnotationWithContainers(fbthrift_data));
  if (!obj) {
      return extractorError<::cpp2::AnnotationWithContainers>(
          "Init from fbthrift error: AnnotationWithContainers");
  }
  return Extractor<::cpp2::AnnotationWithContainers>{}(*obj);
}

int Extractor<::cpp2::AnnotationWithContainers>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module with_containers import error");
  }
  int result =
      can_extract__with_containers__AnnotationWithContainers(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: AnnotationWithContainers");
  }
  return result;
}


PyObject* Constructor<::cpp2::AnnotationWithContainers>::operator()(
    const ::cpp2::AnnotationWithContainers& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__with_containers__AnnotationWithContainers(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::AnnotationWithContainers>>::operator()(
    const ::cpp2::AnnotationWithContainers& val) {
  auto obj = StrongRef(Constructor<::cpp2::AnnotationWithContainers>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::cpp2::MyStruct>
Extractor<::cpp2::MyStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::MyStruct>(
      "Module with_containers import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__with_containers__MyStruct(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::cpp2::MyStruct>(
        "Thrift serialize error: MyStruct");
  }
  return detail::deserialize_iobuf<::cpp2::MyStruct>(std::move(val));
}


ExtractorResult<::cpp2::MyStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::cpp2::MyStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::MyStruct>(
      "Module with_containers import error");
  }
  auto obj = StrongRef(init__with_containers__MyStruct(fbthrift_data));
  if (!obj) {
      return extractorError<::cpp2::MyStruct>(
          "Init from fbthrift error: MyStruct");
  }
  return Extractor<::cpp2::MyStruct>{}(*obj);
}

int Extractor<::cpp2::MyStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module with_containers import error");
  }
  int result =
      can_extract__with_containers__MyStruct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyStruct");
  }
  return result;
}


PyObject* Constructor<::cpp2::MyStruct>::operator()(
    const ::cpp2::MyStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__with_containers__MyStruct(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyStruct>>::operator()(
    const ::cpp2::MyStruct& val) {
  auto obj = StrongRef(Constructor<::cpp2::MyStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

} // namespace capi
} // namespace python
} // namespace thrift
} // namespace apache
