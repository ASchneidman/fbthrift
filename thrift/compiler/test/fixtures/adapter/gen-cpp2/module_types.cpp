/**
 * Autogenerated by Thrift for src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#include "thrift/compiler/test/fixtures/adapter/gen-cpp2/module_types.h"
#include "thrift/compiler/test/fixtures/adapter/gen-cpp2/module_types.tcc"

#include <thrift/lib/cpp2/gen/module_types_cpp.h>

#include "thrift/compiler/test/fixtures/adapter/gen-cpp2/module_data.h"


namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::cpp2::Foo>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::cpp2::Foo>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace cpp2 {

const char* Foo::__fbthrift_thrift_uri() {
  return "facebook.com/thrift/compiler/test/fixtures/adapter/src/module/Foo";
}

Foo::Foo(const Foo& srcObj) :
    __fbthrift_field_intField(srcObj.__fbthrift_field_intField),
    __fbthrift_field_optionalIntField(srcObj.__fbthrift_field_optionalIntField),
    __fbthrift_field_intFieldWithDefault(srcObj.__fbthrift_field_intFieldWithDefault),
    __fbthrift_field_setField(srcObj.__fbthrift_field_setField),
    __fbthrift_field_optionalSetField(srcObj.__fbthrift_field_optionalSetField),
    __fbthrift_field_mapField(srcObj.__fbthrift_field_mapField),
    __fbthrift_field_optionalMapField(srcObj.__fbthrift_field_optionalMapField),
    __fbthrift_field_binaryField(srcObj.__fbthrift_field_binaryField),
    __fbthrift_field_longField(srcObj.__fbthrift_field_longField),
    __fbthrift_field_adaptedLongField(srcObj.__fbthrift_field_adaptedLongField),
    __fbthrift_field_doubleAdaptedField(srcObj.__fbthrift_field_doubleAdaptedField),
    __isset(srcObj.__isset) {
  ::apache::thrift::adapt_detail::construct<my::Adapter1, 1>(__fbthrift_field_intField, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter1, 2>(__fbthrift_field_optionalIntField, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter1, 3>(__fbthrift_field_intFieldWithDefault, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter2, 4>(__fbthrift_field_setField, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter2, 5>(__fbthrift_field_optionalSetField, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter3, 6>(__fbthrift_field_mapField, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter3, 7>(__fbthrift_field_optionalMapField, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter3, 8>(__fbthrift_field_binaryField, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter1, 9>(__fbthrift_field_longField, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter2, 10>(__fbthrift_field_adaptedLongField, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter1, 11>(__fbthrift_field_doubleAdaptedField, *this);
}

Foo& Foo::operator=(const Foo& other) {
  Foo tmp(other);
  swap(*this, tmp);
  return *this;
}

Foo::Foo() :
      __fbthrift_field_intField(),
      __fbthrift_field_optionalIntField(),
      __fbthrift_field_intFieldWithDefault(::apache::thrift::adapt_detail::fromThriftField<my::Adapter1, 3>(static_cast<::std::int32_t>(13), *this)),
      __fbthrift_field_longField(),
      __fbthrift_field_adaptedLongField(),
      __fbthrift_field_doubleAdaptedField() {
  ::apache::thrift::adapt_detail::construct<my::Adapter1, 1>(__fbthrift_field_intField, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter1, 2>(__fbthrift_field_optionalIntField, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter1, 3>(__fbthrift_field_intFieldWithDefault, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter2, 4>(__fbthrift_field_setField, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter2, 5>(__fbthrift_field_optionalSetField, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter3, 6>(__fbthrift_field_mapField, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter3, 7>(__fbthrift_field_optionalMapField, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter3, 8>(__fbthrift_field_binaryField, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter1, 9>(__fbthrift_field_longField, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter2, 10>(__fbthrift_field_adaptedLongField, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter1, 11>(__fbthrift_field_doubleAdaptedField, *this);
}


Foo::~Foo() {}

Foo::Foo(FOLLY_MAYBE_UNUSED Foo&& other) noexcept  :
    __fbthrift_field_intField(std::move(other.__fbthrift_field_intField)),
    __fbthrift_field_optionalIntField(std::move(other.__fbthrift_field_optionalIntField)),
    __fbthrift_field_intFieldWithDefault(std::move(other.__fbthrift_field_intFieldWithDefault)),
    __fbthrift_field_setField(std::move(other.__fbthrift_field_setField)),
    __fbthrift_field_optionalSetField(std::move(other.__fbthrift_field_optionalSetField)),
    __fbthrift_field_mapField(std::move(other.__fbthrift_field_mapField)),
    __fbthrift_field_optionalMapField(std::move(other.__fbthrift_field_optionalMapField)),
    __fbthrift_field_binaryField(std::move(other.__fbthrift_field_binaryField)),
    __fbthrift_field_longField(std::move(other.__fbthrift_field_longField)),
    __fbthrift_field_adaptedLongField(std::move(other.__fbthrift_field_adaptedLongField)),
    __fbthrift_field_doubleAdaptedField(std::move(other.__fbthrift_field_doubleAdaptedField)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<my::Adapter1, 1>(__fbthrift_field_intField, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter1, 2>(__fbthrift_field_optionalIntField, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter1, 3>(__fbthrift_field_intFieldWithDefault, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter2, 4>(__fbthrift_field_setField, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter2, 5>(__fbthrift_field_optionalSetField, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter3, 6>(__fbthrift_field_mapField, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter3, 7>(__fbthrift_field_optionalMapField, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter3, 8>(__fbthrift_field_binaryField, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter1, 9>(__fbthrift_field_longField, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter2, 10>(__fbthrift_field_adaptedLongField, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter1, 11>(__fbthrift_field_doubleAdaptedField, *this);
}

Foo& Foo::operator=(FOLLY_MAYBE_UNUSED Foo&& other) noexcept {
    this->__fbthrift_field_intField = std::move(other.__fbthrift_field_intField);
    this->__fbthrift_field_optionalIntField = std::move(other.__fbthrift_field_optionalIntField);
    this->__fbthrift_field_intFieldWithDefault = std::move(other.__fbthrift_field_intFieldWithDefault);
    this->__fbthrift_field_setField = std::move(other.__fbthrift_field_setField);
    this->__fbthrift_field_optionalSetField = std::move(other.__fbthrift_field_optionalSetField);
    this->__fbthrift_field_mapField = std::move(other.__fbthrift_field_mapField);
    this->__fbthrift_field_optionalMapField = std::move(other.__fbthrift_field_optionalMapField);
    this->__fbthrift_field_binaryField = std::move(other.__fbthrift_field_binaryField);
    this->__fbthrift_field_longField = std::move(other.__fbthrift_field_longField);
    this->__fbthrift_field_adaptedLongField = std::move(other.__fbthrift_field_adaptedLongField);
    this->__fbthrift_field_doubleAdaptedField = std::move(other.__fbthrift_field_doubleAdaptedField);
    __isset = other.__isset;
    return *this;
}


Foo::Foo(apache::thrift::FragileConstructor, ::apache::thrift::adapt_detail::adapted_field_t<my::Adapter1, 1, ::std::int32_t, Foo> intField__arg, ::apache::thrift::adapt_detail::adapted_field_t<my::Adapter1, 2, ::std::int32_t, Foo> optionalIntField__arg, ::apache::thrift::adapt_detail::adapted_field_t<my::Adapter1, 3, ::std::int32_t, Foo> intFieldWithDefault__arg, ::cpp2::SetWithAdapter setField__arg, ::cpp2::SetWithAdapter optionalSetField__arg, ::apache::thrift::adapt_detail::adapted_field_t<my::Adapter3, 6, ::std::map<::std::string, ::cpp2::ListWithElemAdapter_withAdapter>, Foo> mapField__arg, ::apache::thrift::adapt_detail::adapted_field_t<my::Adapter3, 7, ::std::map<::std::string, ::cpp2::ListWithElemAdapter_withAdapter>, Foo> optionalMapField__arg, ::apache::thrift::adapt_detail::adapted_field_t<my::Adapter3, 8, ::std::string, Foo> binaryField__arg, ::cpp2::MyI64 longField__arg, ::apache::thrift::adapt_detail::adapted_field_t<my::Adapter2, 10, ::cpp2::MyI64, Foo> adaptedLongField__arg, ::cpp2::DoubleTypedefI64 doubleAdaptedField__arg) :
    __fbthrift_field_intField(std::move(intField__arg)),
    __fbthrift_field_optionalIntField(std::move(optionalIntField__arg)),
    __fbthrift_field_intFieldWithDefault(std::move(intFieldWithDefault__arg)),
    __fbthrift_field_setField(std::move(setField__arg)),
    __fbthrift_field_optionalSetField(std::move(optionalSetField__arg)),
    __fbthrift_field_mapField(std::move(mapField__arg)),
    __fbthrift_field_optionalMapField(std::move(optionalMapField__arg)),
    __fbthrift_field_binaryField(std::move(binaryField__arg)),
    __fbthrift_field_longField(std::move(longField__arg)),
    __fbthrift_field_adaptedLongField(std::move(adaptedLongField__arg)),
    __fbthrift_field_doubleAdaptedField(std::move(doubleAdaptedField__arg)) {
  ::apache::thrift::adapt_detail::construct<my::Adapter1, 1>(__fbthrift_field_intField, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter1, 2>(__fbthrift_field_optionalIntField, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter1, 3>(__fbthrift_field_intFieldWithDefault, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter2, 4>(__fbthrift_field_setField, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter2, 5>(__fbthrift_field_optionalSetField, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter3, 6>(__fbthrift_field_mapField, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter3, 7>(__fbthrift_field_optionalMapField, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter3, 8>(__fbthrift_field_binaryField, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter1, 9>(__fbthrift_field_longField, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter2, 10>(__fbthrift_field_adaptedLongField, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter1, 11>(__fbthrift_field_doubleAdaptedField, *this);
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
  __isset.set(folly::index_constant<7>(), true);
  __isset.set(folly::index_constant<8>(), true);
  __isset.set(folly::index_constant<9>(), true);
  __isset.set(folly::index_constant<10>(), true);
}


void Foo::__fbthrift_clear() {
  // clear all fields
  ::apache::thrift::adapt_detail::clear<my::Adapter1, 1>(__fbthrift_field_intField, *this);
  ::apache::thrift::adapt_detail::clear<my::Adapter1, 2>(__fbthrift_field_optionalIntField, *this);
  ::apache::thrift::adapt_detail::clear<my::Adapter1, 3>(__fbthrift_field_intFieldWithDefault, *this);
  ::apache::thrift::adapt_detail::clear<my::Adapter2, 4>(__fbthrift_field_setField, *this);
  ::apache::thrift::adapt_detail::clear<my::Adapter2, 5>(__fbthrift_field_optionalSetField, *this);
  ::apache::thrift::adapt_detail::clear<my::Adapter3, 6>(__fbthrift_field_mapField, *this);
  ::apache::thrift::adapt_detail::clear<my::Adapter3, 7>(__fbthrift_field_optionalMapField, *this);
  ::apache::thrift::adapt_detail::clear<my::Adapter3, 8>(__fbthrift_field_binaryField, *this);
  ::apache::thrift::adapt_detail::clear<my::Adapter1, 9>(__fbthrift_field_longField, *this);
  ::apache::thrift::adapt_detail::clear<my::Adapter2, 10>(__fbthrift_field_adaptedLongField, *this);
  ::apache::thrift::adapt_detail::clear<my::Adapter1, 11>(__fbthrift_field_doubleAdaptedField, *this);
  __isset = {};
}

void Foo::__fbthrift_clear_terse_fields() {
}

bool Foo::__fbthrift_is_empty() const {
  return false;
}

bool Foo::operator==(FOLLY_MAYBE_UNUSED const Foo& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (::apache::thrift::adapt_detail::not_equal<my::Adapter1>(lhs.__fbthrift_field_intField, rhs.__fbthrift_field_intField)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal_opt<my::Adapter1>(lhs.optionalIntField_ref(), rhs.optionalIntField_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<my::Adapter1>(lhs.__fbthrift_field_intFieldWithDefault, rhs.__fbthrift_field_intFieldWithDefault)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<my::Adapter2>(lhs.__fbthrift_field_setField, rhs.__fbthrift_field_setField)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal_opt<my::Adapter2>(lhs.optionalSetField_ref(), rhs.optionalSetField_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<my::Adapter3>(lhs.__fbthrift_field_mapField, rhs.__fbthrift_field_mapField)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal_opt<my::Adapter3>(lhs.optionalMapField_ref(), rhs.optionalMapField_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<my::Adapter3>(lhs.__fbthrift_field_binaryField, rhs.__fbthrift_field_binaryField)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<my::Adapter1>(lhs.__fbthrift_field_longField, rhs.__fbthrift_field_longField)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<my::Adapter2>(lhs.__fbthrift_field_adaptedLongField, rhs.__fbthrift_field_adaptedLongField)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<my::Adapter1>(lhs.__fbthrift_field_doubleAdaptedField, rhs.__fbthrift_field_doubleAdaptedField)) {
    return false;
  }
  return true;
}


void swap(FOLLY_MAYBE_UNUSED Foo& a, FOLLY_MAYBE_UNUSED Foo& b) {
  using ::std::swap;
  swap(a.intField_ref().value(), b.intField_ref().value());
  swap(a.optionalIntField_ref().value_unchecked(), b.optionalIntField_ref().value_unchecked());
  swap(a.intFieldWithDefault_ref().value(), b.intFieldWithDefault_ref().value());
  swap(a.setField_ref().value(), b.setField_ref().value());
  swap(a.optionalSetField_ref().value_unchecked(), b.optionalSetField_ref().value_unchecked());
  swap(a.mapField_ref().value(), b.mapField_ref().value());
  swap(a.optionalMapField_ref().value_unchecked(), b.optionalMapField_ref().value_unchecked());
  swap(a.binaryField_ref().value(), b.binaryField_ref().value());
  swap(a.longField_ref().value(), b.longField_ref().value());
  swap(a.adaptedLongField_ref().value(), b.adaptedLongField_ref().value());
  swap(a.doubleAdaptedField_ref().value(), b.doubleAdaptedField_ref().value());
  swap(a.__isset, b.__isset);
}

template void Foo::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Foo::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Foo::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Foo::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void Foo::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t Foo::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Foo::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Foo::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


} // cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::cpp2::Baz>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::cpp2::Baz>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache { namespace thrift {

constexpr std::size_t const TEnumTraits<::cpp2::Baz::Type>::size;
folly::Range<::cpp2::Baz::Type const*> const TEnumTraits<::cpp2::Baz::Type>::values = folly::range(TEnumDataStorage<::cpp2::Baz::Type>::values);
folly::Range<folly::StringPiece const*> const TEnumTraits<::cpp2::Baz::Type>::names = folly::range(TEnumDataStorage<::cpp2::Baz::Type>::names);

bool TEnumTraits<::cpp2::Baz::Type>::findName(type value, folly::StringPiece* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_name(value, out);
}

bool TEnumTraits<::cpp2::Baz::Type>::findValue(folly::StringPiece name, type* out) noexcept {
  return ::apache::thrift::detail::st::enum_find_value(name, out);
}
}} // apache::thrift
namespace cpp2 {

void Baz::__fbthrift_clear() {
  // clear all fields
  if (getType() == Type::__EMPTY__) { return; }
  switch(getType()) {
    case Type::intField:
      destruct(value_.intField);
      break;
    case Type::setField:
      destruct(value_.setField);
      break;
    case Type::mapField:
      destruct(value_.mapField);
      break;
    case Type::binaryField:
      destruct(value_.binaryField);
      break;
    case Type::longField:
      destruct(value_.longField);
      break;
    default:
      assert(false);
      break;
  }
  type_ = folly::to_underlying(Type::__EMPTY__);
}

bool Baz::__fbthrift_is_empty() const {
  return getType() == Type::__EMPTY__;
}

bool Baz::operator==(const Baz& rhs) const {
  if (getType() != rhs.getType()) { return false; }
  switch(getType()) {
    case Type::intField:
      return value_.intField == rhs.value_.intField;
    case Type::setField:
      return value_.setField == rhs.value_.setField;
    case Type::mapField:
      return value_.mapField == rhs.value_.mapField;
    case Type::binaryField:
      return value_.binaryField == rhs.value_.binaryField;
    case Type::longField:
      return value_.longField == rhs.value_.longField;
    default:
      return true;
  }
}

void swap(Baz& a, Baz& b) {
  Baz temp(std::move(a));
  a = std::move(b);
  b = std::move(temp);
}

template void Baz::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Baz::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Baz::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Baz::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void Baz::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t Baz::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Baz::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Baz::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


} // cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::cpp2::detail::DirectlyAdapted>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::cpp2::detail::DirectlyAdapted>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace cpp2 {namespace detail {



DirectlyAdapted::DirectlyAdapted(apache::thrift::FragileConstructor, ::std::int32_t field__arg) :
    __fbthrift_field_field(std::move(field__arg)) {
  __isset.set(folly::index_constant<0>(), true);
}


void DirectlyAdapted::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_field = ::std::int32_t();
  __isset = {};
}

void DirectlyAdapted::__fbthrift_clear_terse_fields() {
}

bool DirectlyAdapted::__fbthrift_is_empty() const {
  return false;
}

bool DirectlyAdapted::operator==(FOLLY_MAYBE_UNUSED const DirectlyAdapted& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.field_ref() == rhs.field_ref())) {
    return false;
  }
  return true;
}

bool DirectlyAdapted::operator<(FOLLY_MAYBE_UNUSED const DirectlyAdapted& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (!(lhs.field_ref() == rhs.field_ref())) {
    return lhs.field_ref() < rhs.field_ref();
  }
  return false;
}


void swap(FOLLY_MAYBE_UNUSED DirectlyAdapted& a, FOLLY_MAYBE_UNUSED DirectlyAdapted& b) {
  using ::std::swap;
  swap(a.field_ref().value(), b.field_ref().value());
  swap(a.__isset, b.__isset);
}

template void DirectlyAdapted::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t DirectlyAdapted::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t DirectlyAdapted::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t DirectlyAdapted::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void DirectlyAdapted::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t DirectlyAdapted::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t DirectlyAdapted::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t DirectlyAdapted::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


} // namespace detail
} // cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::cpp2::Bar>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::cpp2::Bar>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace cpp2 {

Bar::Bar(const Bar& srcObj) :
    __fbthrift_field_structField(srcObj.__fbthrift_field_structField),
    __fbthrift_field_optionalStructField(srcObj.__fbthrift_field_optionalStructField),
    __fbthrift_field_structListField(srcObj.__fbthrift_field_structListField),
    __fbthrift_field_optionalStructListField(srcObj.__fbthrift_field_optionalStructListField),
    __fbthrift_field_unionField(srcObj.__fbthrift_field_unionField),
    __fbthrift_field_optionalUnionField(srcObj.__fbthrift_field_optionalUnionField),
    __fbthrift_field_adaptedStructField(srcObj.__fbthrift_field_adaptedStructField),
    __isset(srcObj.__isset) {
  ::apache::thrift::adapt_detail::construct<my::Adapter1, 1>(__fbthrift_field_structField, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter1, 2>(__fbthrift_field_optionalStructField, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter1, 5>(__fbthrift_field_unionField, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter1, 6>(__fbthrift_field_optionalUnionField, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter, 7>(__fbthrift_field_adaptedStructField, *this);
}

Bar& Bar::operator=(const Bar& other) {
  Bar tmp(other);
  swap(*this, tmp);
  return *this;
}

Bar::Bar() {
  ::apache::thrift::adapt_detail::construct<my::Adapter1, 1>(__fbthrift_field_structField, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter1, 2>(__fbthrift_field_optionalStructField, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter1, 5>(__fbthrift_field_unionField, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter1, 6>(__fbthrift_field_optionalUnionField, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter, 7>(__fbthrift_field_adaptedStructField, *this);
}


Bar::~Bar() {}

Bar::Bar(FOLLY_MAYBE_UNUSED Bar&& other) noexcept  :
    __fbthrift_field_structField(std::move(other.__fbthrift_field_structField)),
    __fbthrift_field_optionalStructField(std::move(other.__fbthrift_field_optionalStructField)),
    __fbthrift_field_structListField(std::move(other.__fbthrift_field_structListField)),
    __fbthrift_field_optionalStructListField(std::move(other.__fbthrift_field_optionalStructListField)),
    __fbthrift_field_unionField(std::move(other.__fbthrift_field_unionField)),
    __fbthrift_field_optionalUnionField(std::move(other.__fbthrift_field_optionalUnionField)),
    __fbthrift_field_adaptedStructField(std::move(other.__fbthrift_field_adaptedStructField)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<my::Adapter1, 1>(__fbthrift_field_structField, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter1, 2>(__fbthrift_field_optionalStructField, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter1, 5>(__fbthrift_field_unionField, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter1, 6>(__fbthrift_field_optionalUnionField, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter, 7>(__fbthrift_field_adaptedStructField, *this);
}

Bar& Bar::operator=(FOLLY_MAYBE_UNUSED Bar&& other) noexcept {
    this->__fbthrift_field_structField = std::move(other.__fbthrift_field_structField);
    this->__fbthrift_field_optionalStructField = std::move(other.__fbthrift_field_optionalStructField);
    this->__fbthrift_field_structListField = std::move(other.__fbthrift_field_structListField);
    this->__fbthrift_field_optionalStructListField = std::move(other.__fbthrift_field_optionalStructListField);
    this->__fbthrift_field_unionField = std::move(other.__fbthrift_field_unionField);
    this->__fbthrift_field_optionalUnionField = std::move(other.__fbthrift_field_optionalUnionField);
    this->__fbthrift_field_adaptedStructField = std::move(other.__fbthrift_field_adaptedStructField);
    __isset = other.__isset;
    return *this;
}


Bar::Bar(apache::thrift::FragileConstructor, my::Cpp::Type1 structField__arg, ::apache::thrift::adapt_detail::adapted_field_t<my::Adapter1, 2, ::cpp2::Foo, Bar> optionalStructField__arg, ::std::vector<::cpp2::FooWithAdapter> structListField__arg, ::std::vector<::cpp2::FooWithAdapter> optionalStructListField__arg, ::apache::thrift::adapt_detail::adapted_field_t<my::Adapter1, 5, ::cpp2::Baz, Bar> unionField__arg, ::apache::thrift::adapt_detail::adapted_field_t<my::Adapter1, 6, ::cpp2::Baz, Bar> optionalUnionField__arg, ::cpp2::DirectlyAdapted adaptedStructField__arg) :
    __fbthrift_field_structField(std::move(structField__arg)),
    __fbthrift_field_optionalStructField(std::move(optionalStructField__arg)),
    __fbthrift_field_structListField(std::move(structListField__arg)),
    __fbthrift_field_optionalStructListField(std::move(optionalStructListField__arg)),
    __fbthrift_field_unionField(std::move(unionField__arg)),
    __fbthrift_field_optionalUnionField(std::move(optionalUnionField__arg)),
    __fbthrift_field_adaptedStructField(std::move(adaptedStructField__arg)) {
  ::apache::thrift::adapt_detail::construct<my::Adapter1, 1>(__fbthrift_field_structField, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter1, 2>(__fbthrift_field_optionalStructField, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter1, 5>(__fbthrift_field_unionField, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter1, 6>(__fbthrift_field_optionalUnionField, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter, 7>(__fbthrift_field_adaptedStructField, *this);
  __isset.set(folly::index_constant<0>(), true);
  __isset.set(folly::index_constant<1>(), true);
  __isset.set(folly::index_constant<2>(), true);
  __isset.set(folly::index_constant<3>(), true);
  __isset.set(folly::index_constant<4>(), true);
  __isset.set(folly::index_constant<5>(), true);
  __isset.set(folly::index_constant<6>(), true);
}


void Bar::__fbthrift_clear() {
  // clear all fields
  ::apache::thrift::adapt_detail::clear<my::Adapter1, 1>(__fbthrift_field_structField, *this);
  ::apache::thrift::adapt_detail::clear<my::Adapter1, 2>(__fbthrift_field_optionalStructField, *this);
  this->__fbthrift_field_structListField.clear();
  this->__fbthrift_field_optionalStructListField.clear();
  ::apache::thrift::adapt_detail::clear<my::Adapter1, 5>(__fbthrift_field_unionField, *this);
  ::apache::thrift::adapt_detail::clear<my::Adapter1, 6>(__fbthrift_field_optionalUnionField, *this);
  ::apache::thrift::adapt_detail::clear<my::Adapter, 7>(__fbthrift_field_adaptedStructField, *this);
  __isset = {};
}

void Bar::__fbthrift_clear_terse_fields() {
}

bool Bar::__fbthrift_is_empty() const {
  return false;
}

bool Bar::operator==(FOLLY_MAYBE_UNUSED const Bar& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (::apache::thrift::adapt_detail::not_equal<my::Adapter1>(lhs.__fbthrift_field_structField, rhs.__fbthrift_field_structField)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal_opt<my::Adapter1>(lhs.optionalStructField_ref(), rhs.optionalStructField_ref())) {
    return false;
  }
  if (!(lhs.structListField_ref() == rhs.structListField_ref())) {
    return false;
  }
  if (!(lhs.optionalStructListField_ref() == rhs.optionalStructListField_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<my::Adapter1>(lhs.__fbthrift_field_unionField, rhs.__fbthrift_field_unionField)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal_opt<my::Adapter1>(lhs.optionalUnionField_ref(), rhs.optionalUnionField_ref())) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<my::Adapter>(lhs.__fbthrift_field_adaptedStructField, rhs.__fbthrift_field_adaptedStructField)) {
    return false;
  }
  return true;
}

const ::std::vector<::cpp2::FooWithAdapter>& Bar::get_structListField() const& {
  return __fbthrift_field_structListField;
}

::std::vector<::cpp2::FooWithAdapter> Bar::get_structListField() && {
  return std::move(__fbthrift_field_structListField);
}

const ::std::vector<::cpp2::FooWithAdapter>* Bar::get_optionalStructListField() const& {
  return optionalStructListField_ref().has_value() ? std::addressof(__fbthrift_field_optionalStructListField) : nullptr;
}

::std::vector<::cpp2::FooWithAdapter>* Bar::get_optionalStructListField() & {
  return optionalStructListField_ref().has_value() ? std::addressof(__fbthrift_field_optionalStructListField) : nullptr;
}


void swap(FOLLY_MAYBE_UNUSED Bar& a, FOLLY_MAYBE_UNUSED Bar& b) {
  using ::std::swap;
  swap(a.structField_ref().value(), b.structField_ref().value());
  swap(a.optionalStructField_ref().value_unchecked(), b.optionalStructField_ref().value_unchecked());
  swap(a.structListField_ref().value(), b.structListField_ref().value());
  swap(a.optionalStructListField_ref().value_unchecked(), b.optionalStructListField_ref().value_unchecked());
  swap(a.unionField_ref().value(), b.unionField_ref().value());
  swap(a.optionalUnionField_ref().value_unchecked(), b.optionalUnionField_ref().value_unchecked());
  swap(a.adaptedStructField_ref().value(), b.adaptedStructField_ref().value());
  swap(a.__isset, b.__isset);
}

template void Bar::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Bar::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Bar::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Bar::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void Bar::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t Bar::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Bar::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Bar::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        Bar,
        ::apache::thrift::type_class::structure,
        ::cpp2::Foo>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        Bar,
        ::apache::thrift::type_class::structure,
        ::cpp2::Foo>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        Bar,
        ::apache::thrift::type_class::variant,
        ::cpp2::Baz>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        Bar,
        ::apache::thrift::type_class::variant,
        ::cpp2::Baz>,
    "inconsistent use of json option");
static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        Bar,
        ::apache::thrift::type_class::structure,
        ::cpp2::DirectlyAdapted>,
    "inconsistent use of json option");

} // cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::cpp2::StructWithFieldAdapter>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::cpp2::StructWithFieldAdapter>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace cpp2 {

StructWithFieldAdapter::StructWithFieldAdapter(const StructWithFieldAdapter& srcObj) :
    __fbthrift_field_field(srcObj.__fbthrift_field_field),
    shared_field(srcObj.shared_field),
    opt_shared_field(srcObj.opt_shared_field),
    __fbthrift_field_opt_boxed_field(srcObj.__fbthrift_field_opt_boxed_field),
    __isset(srcObj.__isset) {
  ::apache::thrift::adapt_detail::construct<my::Adapter1, 1>(__fbthrift_field_field, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter1, 2>(*shared_field, *this);
  if (opt_shared_field) ::apache::thrift::adapt_detail::construct<my::Adapter1, 3>(*opt_shared_field, *this);
  if (__fbthrift_field_opt_boxed_field) ::apache::thrift::adapt_detail::construct<my::Adapter1, 4>(*__fbthrift_field_opt_boxed_field, *this);
}

StructWithFieldAdapter& StructWithFieldAdapter::operator=(const StructWithFieldAdapter& other) {
  StructWithFieldAdapter tmp(other);
  swap(*this, tmp);
  return *this;
}

StructWithFieldAdapter::StructWithFieldAdapter(FOLLY_MAYBE_UNUSED StructWithFieldAdapter&& other) noexcept  :
    __fbthrift_field_field(std::move(other.__fbthrift_field_field)),
    shared_field(std::move(other.shared_field)),
    opt_shared_field(std::move(other.opt_shared_field)),
    __fbthrift_field_opt_boxed_field(std::move(other.__fbthrift_field_opt_boxed_field)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<my::Adapter1, 1>(__fbthrift_field_field, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter1, 2>(*shared_field, *this);
  if (opt_shared_field) ::apache::thrift::adapt_detail::construct<my::Adapter1, 3>(*opt_shared_field, *this);
  if (__fbthrift_field_opt_boxed_field) ::apache::thrift::adapt_detail::construct<my::Adapter1, 4>(*__fbthrift_field_opt_boxed_field, *this);
}

StructWithFieldAdapter& StructWithFieldAdapter::operator=(FOLLY_MAYBE_UNUSED StructWithFieldAdapter&& other) noexcept {
    this->__fbthrift_field_field = std::move(other.__fbthrift_field_field);
    this->shared_field = std::move(other.shared_field);
    this->opt_shared_field = std::move(other.opt_shared_field);
    this->__fbthrift_field_opt_boxed_field = std::move(other.__fbthrift_field_opt_boxed_field);
    __isset = other.__isset;
    return *this;
}


StructWithFieldAdapter::StructWithFieldAdapter(apache::thrift::FragileConstructor, ::apache::thrift::adapt_detail::adapted_field_t<my::Adapter1, 1, ::std::int32_t, StructWithFieldAdapter> field__arg, ::std::shared_ptr<const ::apache::thrift::adapt_detail::adapted_field_t<my::Adapter1, 2, ::std::int32_t, StructWithFieldAdapter>> shared_field__arg, ::std::shared_ptr<const ::apache::thrift::adapt_detail::adapted_field_t<my::Adapter1, 3, ::std::int32_t, StructWithFieldAdapter>> opt_shared_field__arg, ::apache::thrift::detail::boxed_value_ptr<::apache::thrift::adapt_detail::adapted_field_t<my::Adapter1, 4, ::std::int32_t, StructWithFieldAdapter>> opt_boxed_field__arg) :
    __fbthrift_field_field(std::move(field__arg)),
    shared_field(std::move(shared_field__arg)),
    opt_shared_field(std::move(opt_shared_field__arg)),
    __fbthrift_field_opt_boxed_field(std::move(opt_boxed_field__arg)) {
  ::apache::thrift::adapt_detail::construct<my::Adapter1, 1>(__fbthrift_field_field, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter1, 2>(*shared_field, *this);
  if (opt_shared_field) ::apache::thrift::adapt_detail::construct<my::Adapter1, 3>(*opt_shared_field, *this);
  if (__fbthrift_field_opt_boxed_field) ::apache::thrift::adapt_detail::construct<my::Adapter1, 4>(*__fbthrift_field_opt_boxed_field, *this);
  __isset.set(folly::index_constant<0>(), true);
}


void StructWithFieldAdapter::__fbthrift_clear() {
  // clear all fields
  ::apache::thrift::adapt_detail::clear<my::Adapter1, 1>(__fbthrift_field_field, *this);
  this->shared_field = ::apache::thrift::detail::make_mutable_smart_ptr<::std::shared_ptr<const ::apache::thrift::adapt_detail::adapted_field_t<my::Adapter1, 2, ::std::int32_t, StructWithFieldAdapter>>>();
  this->opt_shared_field.reset();
  this->__fbthrift_field_opt_boxed_field.reset();
  __isset = {};
}

void StructWithFieldAdapter::__fbthrift_clear_terse_fields() {
}

bool StructWithFieldAdapter::__fbthrift_is_empty() const {
  return false;
}

bool StructWithFieldAdapter::operator==(FOLLY_MAYBE_UNUSED const StructWithFieldAdapter& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (::apache::thrift::adapt_detail::not_equal<my::Adapter1>(lhs.__fbthrift_field_field, rhs.__fbthrift_field_field)) {
    return false;
  }
  if ((!::apache::thrift::detail::pointer_equal(lhs.shared_field_ref(), rhs.shared_field_ref()))) {
    return false;
  }
  if ((!::apache::thrift::detail::pointer_equal(lhs.opt_shared_field_ref(), rhs.opt_shared_field_ref()))) {
    return false;
  }
  if ((!::apache::thrift::detail::pointer_equal(lhs.opt_boxed_field_ref(), rhs.opt_boxed_field_ref()))) {
    return false;
  }
  return true;
}

bool StructWithFieldAdapter::operator<(FOLLY_MAYBE_UNUSED const StructWithFieldAdapter& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (::apache::thrift::adapt_detail::not_equal<my::Adapter1>(lhs.__fbthrift_field_field, rhs.__fbthrift_field_field)) {
    return ::apache::thrift::adapt_detail::less<my::Adapter1>(lhs.__fbthrift_field_field, rhs.__fbthrift_field_field);
  }
  if ((!::apache::thrift::detail::pointer_equal(lhs.shared_field_ref(), rhs.shared_field_ref()))) {
    return ::apache::thrift::detail::pointer_less(lhs.shared_field_ref(), rhs.shared_field_ref());
  }
  if ((!::apache::thrift::detail::pointer_equal(lhs.opt_shared_field_ref(), rhs.opt_shared_field_ref()))) {
    return ::apache::thrift::detail::pointer_less(lhs.opt_shared_field_ref(), rhs.opt_shared_field_ref());
  }
  if ((!::apache::thrift::detail::pointer_equal(lhs.opt_boxed_field_ref(), rhs.opt_boxed_field_ref()))) {
    return ::apache::thrift::detail::pointer_less(lhs.opt_boxed_field_ref(), rhs.opt_boxed_field_ref());
  }
  return false;
}


void swap(FOLLY_MAYBE_UNUSED StructWithFieldAdapter& a, FOLLY_MAYBE_UNUSED StructWithFieldAdapter& b) {
  using ::std::swap;
  swap(a.field_ref().value(), b.field_ref().value());
  swap(a.shared_field, b.shared_field);
  swap(a.opt_shared_field, b.opt_shared_field);
  swap(a.__fbthrift_field_opt_boxed_field, b.__fbthrift_field_opt_boxed_field);
  swap(a.__isset, b.__isset);
}

template void StructWithFieldAdapter::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t StructWithFieldAdapter::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t StructWithFieldAdapter::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t StructWithFieldAdapter::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void StructWithFieldAdapter::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t StructWithFieldAdapter::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t StructWithFieldAdapter::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t StructWithFieldAdapter::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


} // cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::cpp2::TerseAdaptedFields>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::cpp2::TerseAdaptedFields>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace cpp2 {

TerseAdaptedFields::TerseAdaptedFields(const TerseAdaptedFields& srcObj) :
    __fbthrift_field_int_field(srcObj.__fbthrift_field_int_field),
    __fbthrift_field_string_field(srcObj.__fbthrift_field_string_field),
    __fbthrift_field_set_field(srcObj.__fbthrift_field_set_field) {
  ::apache::thrift::adapt_detail::construct<my::Adapter1, 1>(__fbthrift_field_int_field, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter1, 2>(__fbthrift_field_string_field, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter1, 3>(__fbthrift_field_set_field, *this);
}

TerseAdaptedFields& TerseAdaptedFields::operator=(const TerseAdaptedFields& other) {
  TerseAdaptedFields tmp(other);
  swap(*this, tmp);
  return *this;
}

TerseAdaptedFields::TerseAdaptedFields(FOLLY_MAYBE_UNUSED TerseAdaptedFields&& other) noexcept  :
    __fbthrift_field_int_field(std::move(other.__fbthrift_field_int_field)),
    __fbthrift_field_string_field(std::move(other.__fbthrift_field_string_field)),
    __fbthrift_field_set_field(std::move(other.__fbthrift_field_set_field)) {
  ::apache::thrift::adapt_detail::construct<my::Adapter1, 1>(__fbthrift_field_int_field, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter1, 2>(__fbthrift_field_string_field, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter1, 3>(__fbthrift_field_set_field, *this);
}

TerseAdaptedFields& TerseAdaptedFields::operator=(FOLLY_MAYBE_UNUSED TerseAdaptedFields&& other) noexcept {
    this->__fbthrift_field_int_field = std::move(other.__fbthrift_field_int_field);
    this->__fbthrift_field_string_field = std::move(other.__fbthrift_field_string_field);
    this->__fbthrift_field_set_field = std::move(other.__fbthrift_field_set_field);
    return *this;
}


TerseAdaptedFields::TerseAdaptedFields(apache::thrift::FragileConstructor, ::apache::thrift::adapt_detail::adapted_field_t<my::Adapter1, 1, ::std::int32_t, TerseAdaptedFields> int_field__arg, ::apache::thrift::adapt_detail::adapted_field_t<my::Adapter1, 2, ::std::string, TerseAdaptedFields> string_field__arg, ::apache::thrift::adapt_detail::adapted_field_t<my::Adapter1, 3, ::std::set<::std::int32_t>, TerseAdaptedFields> set_field__arg) :
    __fbthrift_field_int_field(std::move(int_field__arg)),
    __fbthrift_field_string_field(std::move(string_field__arg)),
    __fbthrift_field_set_field(std::move(set_field__arg)) {
  ::apache::thrift::adapt_detail::construct<my::Adapter1, 1>(__fbthrift_field_int_field, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter1, 2>(__fbthrift_field_string_field, *this);
  ::apache::thrift::adapt_detail::construct<my::Adapter1, 3>(__fbthrift_field_set_field, *this);
}


void TerseAdaptedFields::__fbthrift_clear() {
  // clear all fields
  ::apache::thrift::adapt_detail::clear<my::Adapter1, 1>(__fbthrift_field_int_field, *this);
  ::apache::thrift::adapt_detail::clear<my::Adapter1, 2>(__fbthrift_field_string_field, *this);
  ::apache::thrift::adapt_detail::clear<my::Adapter1, 3>(__fbthrift_field_set_field, *this);
}

void TerseAdaptedFields::__fbthrift_clear_terse_fields() {
  ::apache::thrift::adapt_detail::clear<my::Adapter1, 1>(__fbthrift_field_int_field, *this);
  ::apache::thrift::adapt_detail::clear<my::Adapter1, 2>(__fbthrift_field_string_field, *this);
  ::apache::thrift::adapt_detail::clear<my::Adapter1, 3>(__fbthrift_field_set_field, *this);
}

bool TerseAdaptedFields::__fbthrift_is_empty() const {
  return this->__fbthrift_field_int_field == ::apache::thrift::adapt_detail::adapted_field_t<my::Adapter1, 1, ::std::int32_t, TerseAdaptedFields>() &&
 this->__fbthrift_field_string_field == ::apache::thrift::adapt_detail::adapted_field_t<my::Adapter1, 2, ::std::string, TerseAdaptedFields>() &&
 this->__fbthrift_field_set_field == ::apache::thrift::adapt_detail::adapted_field_t<my::Adapter1, 3, ::std::set<::std::int32_t>, TerseAdaptedFields>();
}

bool TerseAdaptedFields::operator==(FOLLY_MAYBE_UNUSED const TerseAdaptedFields& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (::apache::thrift::adapt_detail::not_equal<my::Adapter1>(lhs.__fbthrift_field_int_field, rhs.__fbthrift_field_int_field)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<my::Adapter1>(lhs.__fbthrift_field_string_field, rhs.__fbthrift_field_string_field)) {
    return false;
  }
  if (::apache::thrift::adapt_detail::not_equal<my::Adapter1>(lhs.__fbthrift_field_set_field, rhs.__fbthrift_field_set_field)) {
    return false;
  }
  return true;
}

bool TerseAdaptedFields::operator<(FOLLY_MAYBE_UNUSED const TerseAdaptedFields& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (::apache::thrift::adapt_detail::not_equal<my::Adapter1>(lhs.__fbthrift_field_int_field, rhs.__fbthrift_field_int_field)) {
    return ::apache::thrift::adapt_detail::less<my::Adapter1>(lhs.__fbthrift_field_int_field, rhs.__fbthrift_field_int_field);
  }
  if (::apache::thrift::adapt_detail::not_equal<my::Adapter1>(lhs.__fbthrift_field_string_field, rhs.__fbthrift_field_string_field)) {
    return ::apache::thrift::adapt_detail::less<my::Adapter1>(lhs.__fbthrift_field_string_field, rhs.__fbthrift_field_string_field);
  }
  if (::apache::thrift::adapt_detail::not_equal<my::Adapter1>(lhs.__fbthrift_field_set_field, rhs.__fbthrift_field_set_field)) {
    return ::apache::thrift::adapt_detail::less<my::Adapter1>(lhs.__fbthrift_field_set_field, rhs.__fbthrift_field_set_field);
  }
  return false;
}


void swap(FOLLY_MAYBE_UNUSED TerseAdaptedFields& a, FOLLY_MAYBE_UNUSED TerseAdaptedFields& b) {
  using ::std::swap;
  swap(a.int_field_ref().value(), b.int_field_ref().value());
  swap(a.string_field_ref().value(), b.string_field_ref().value());
  swap(a.set_field_ref().value(), b.set_field_ref().value());
}

template void TerseAdaptedFields::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t TerseAdaptedFields::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t TerseAdaptedFields::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t TerseAdaptedFields::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void TerseAdaptedFields::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t TerseAdaptedFields::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t TerseAdaptedFields::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t TerseAdaptedFields::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


} // cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::cpp2::A>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::cpp2::A>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace cpp2 {


A::A(apache::thrift::FragileConstructor) {}


void A::__fbthrift_clear() {
  // clear all fields
}

void A::__fbthrift_clear_terse_fields() {
}

bool A::__fbthrift_is_empty() const {
  return true;
}

bool A::operator==(FOLLY_MAYBE_UNUSED const A& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  return true;
}

bool A::operator<(FOLLY_MAYBE_UNUSED const A& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  return false;
}


void swap(FOLLY_MAYBE_UNUSED A& a, FOLLY_MAYBE_UNUSED A& b) {
  using ::std::swap;
}

template void A::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t A::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t A::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t A::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void A::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t A::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t A::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t A::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;


} // cpp2

namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::cpp2::B>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::cpp2::B>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace cpp2 {

B::B(const B& srcObj) :
    __fbthrift_field_a(srcObj.__fbthrift_field_a),
    __isset(srcObj.__isset) {
  ::apache::thrift::adapt_detail::construct<my::Adapter, 1>(__fbthrift_field_a, *this);
}

B& B::operator=(const B& other) {
  B tmp(other);
  swap(*this, tmp);
  return *this;
}

B::B(FOLLY_MAYBE_UNUSED B&& other) noexcept  :
    __fbthrift_field_a(std::move(other.__fbthrift_field_a)),
    __isset(other.__isset) {
  ::apache::thrift::adapt_detail::construct<my::Adapter, 1>(__fbthrift_field_a, *this);
}

B& B::operator=(FOLLY_MAYBE_UNUSED B&& other) noexcept {
    this->__fbthrift_field_a = std::move(other.__fbthrift_field_a);
    __isset = other.__isset;
    return *this;
}


B::B(apache::thrift::FragileConstructor, ::cpp2::AdaptedA a__arg) :
    __fbthrift_field_a(std::move(a__arg)) {
  ::apache::thrift::adapt_detail::construct<my::Adapter, 1>(__fbthrift_field_a, *this);
  __isset.set(folly::index_constant<0>(), true);
}


void B::__fbthrift_clear() {
  // clear all fields
  __isset = {};
}

void B::__fbthrift_clear_terse_fields() {
}

bool B::__fbthrift_is_empty() const {
  return false;
}

bool B::operator==(FOLLY_MAYBE_UNUSED const B& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (::apache::thrift::adapt_detail::not_equal<my::Adapter>(lhs.__fbthrift_field_a, rhs.__fbthrift_field_a)) {
    return false;
  }
  return true;
}

bool B::operator<(FOLLY_MAYBE_UNUSED const B& rhs) const {
  FOLLY_MAYBE_UNUSED auto& lhs = *this;
  if (::apache::thrift::adapt_detail::not_equal<my::Adapter>(lhs.__fbthrift_field_a, rhs.__fbthrift_field_a)) {
    return ::apache::thrift::adapt_detail::less<my::Adapter>(lhs.__fbthrift_field_a, rhs.__fbthrift_field_a);
  }
  return false;
}


void swap(FOLLY_MAYBE_UNUSED B& a, FOLLY_MAYBE_UNUSED B& b) {
  using ::std::swap;
  swap(a.a_ref().value(), b.a_ref().value());
  swap(a.__isset, b.__isset);
}

template void B::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t B::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t B::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t B::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void B::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t B::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t B::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t B::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

static_assert(
    ::apache::thrift::detail::st::gen_check_json<
        B,
        ::apache::thrift::type_class::structure,
        ::cpp2::AdaptedA>,
    "inconsistent use of json option");

} // cpp2

namespace cpp2 { namespace {
FOLLY_MAYBE_UNUSED FOLLY_ERASE void validateAdapters() {
  ::apache::thrift::adapt_detail::validateFieldAdapter<my::Adapter1, 1, ::std::int32_t, ::cpp2::Foo>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<my::Adapter1, 2, ::std::int32_t, ::cpp2::Foo>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<my::Adapter1, 3, ::std::int32_t, ::cpp2::Foo>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<my::Adapter2, 4, ::std::set<::std::string>, ::cpp2::Foo>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<my::Adapter2, 5, ::std::set<::std::string>, ::cpp2::Foo>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<my::Adapter3, 6, ::std::map<::std::string, ::cpp2::ListWithElemAdapter>, ::cpp2::Foo>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<my::Adapter3, 7, ::std::map<::std::string, ::cpp2::ListWithElemAdapter>, ::cpp2::Foo>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<my::Adapter3, 8, ::std::string, ::cpp2::Foo>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<my::Adapter1, 9, ::std::int64_t, ::cpp2::Foo>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<my::Adapter2, 10, ::std::int64_t, ::cpp2::Foo>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<my::Adapter1, 11, ::std::int64_t, ::cpp2::Foo>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<my::Adapter1, 1, ::std::int32_t, ::cpp2::Baz>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<my::Adapter2, 4, ::std::set<::std::string>, ::cpp2::Baz>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<my::Adapter3, 6, ::std::map<::std::string, ::cpp2::ListWithElemAdapter>, ::cpp2::Baz>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<my::Adapter1, 8, ::std::string, ::cpp2::Baz>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<my::Adapter1, 9, ::std::int64_t, ::cpp2::Baz>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<my::Adapter1, 1, ::cpp2::Foo, ::cpp2::Bar>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<my::Adapter1, 2, ::cpp2::Foo, ::cpp2::Bar>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<my::Adapter1, 5, ::cpp2::Baz, ::cpp2::Bar>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<my::Adapter1, 6, ::cpp2::Baz, ::cpp2::Bar>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<my::Adapter, 7, ::cpp2::detail::DirectlyAdapted, ::cpp2::Bar>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<my::Adapter1, 1, ::std::int32_t, ::cpp2::StructWithFieldAdapter>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<my::Adapter1, 2, ::std::int32_t, ::cpp2::StructWithFieldAdapter>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<my::Adapter1, 3, ::std::int32_t, ::cpp2::StructWithFieldAdapter>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<my::Adapter1, 4, ::std::int32_t, ::cpp2::StructWithFieldAdapter>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<my::Adapter1, 1, ::std::int32_t, ::cpp2::TerseAdaptedFields>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<my::Adapter1, 2, ::std::string, ::cpp2::TerseAdaptedFields>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<my::Adapter1, 3, ::std::set<::std::int32_t>, ::cpp2::TerseAdaptedFields>();
  ::apache::thrift::adapt_detail::validateFieldAdapter<my::Adapter, 1, ::cpp2::A, ::cpp2::B>();
  ::apache::thrift::adapt_detail::validateAdapter<my::Adapter1, ::std::int64_t>();
}
}} // cpp2
