/**
 * Autogenerated by Thrift for src/self-reference-annotated.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated @nocommit
 */
#include "thrift/compiler/test/fixtures/maps-with-incomplete-types/gen-cpp2/self-reference-annotated_types.h"
#include "thrift/compiler/test/fixtures/maps-with-incomplete-types/gen-cpp2/self-reference-annotated_types.tcc"

#include <thrift/lib/cpp2/gen/module_types_cpp.h>

#include "thrift/compiler/test/fixtures/maps-with-incomplete-types/gen-cpp2/self-reference-annotated_data.h"


namespace apache {
namespace thrift {
namespace detail {

void TccStructTraits<::apache::thrift::test::A>::translateFieldName(
    folly::StringPiece _fname,
    int16_t& fid,
    apache::thrift::protocol::TType& _ftype) noexcept {
  using data = apache::thrift::TStructDataStorage<::apache::thrift::test::A>;
  static const st::translate_field_name_table table{
      data::fields_size,
      data::fields_names.data(),
      data::fields_ids.data(),
      data::fields_types.data()};
  st::translate_field_name(_fname, fid, _ftype, table);
}

} // namespace detail
} // namespace thrift
} // namespace apache

namespace apache { namespace thrift { namespace test {

A::A(const A&) = default;
A& A::operator=(const A&) = default;
A::A(A&& other) noexcept  :
    __fbthrift_field_some_map(std::move(other.__fbthrift_field_some_map)),
    __isset(other.__isset) {
}

A& A::operator=(FOLLY_MAYBE_UNUSED A&& other) noexcept {
    this->__fbthrift_field_some_map = std::move(other.__fbthrift_field_some_map);
    __isset = other.__isset;
    return *this;
}


A::A(apache::thrift::FragileConstructor, std::map<::std::int32_t, ::apache::thrift::test::A> some_map__arg) :
    __fbthrift_field_some_map(std::move(some_map__arg)) {
  __isset.set(folly::index_constant<0>(), true);
}


void A::__fbthrift_clear() {
  // clear all fields
  this->__fbthrift_field_some_map.clear();
  __isset = {};
}

bool A::__fbthrift_is_empty() const {
  return !(this->__isset.get(0));
}

bool A::operator==(const A& rhs) const {
  (void)rhs;
  auto& lhs = *this;
  (void)lhs;
  if (!(lhs.some_map_ref() == rhs.some_map_ref())) {
    return false;
  }
  return true;
}

const std::map<::std::int32_t, ::apache::thrift::test::A>* A::get_some_map() const& {
  return some_map_ref().has_value() ? std::addressof(__fbthrift_field_some_map) : nullptr;
}

std::map<::std::int32_t, ::apache::thrift::test::A>* A::get_some_map() & {
  return some_map_ref().has_value() ? std::addressof(__fbthrift_field_some_map) : nullptr;
}


void swap(A& a, A& b) {
  using ::std::swap;
  swap(a.some_map_ref().value_unchecked(), b.some_map_ref().value_unchecked());
  swap(a.__isset, b.__isset);
}

template void A::readNoXfer<>(apache::thrift::BinaryProtocolReader*);
template uint32_t A::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t A::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t A::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template void A::readNoXfer<>(apache::thrift::CompactProtocolReader*);
template uint32_t A::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t A::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t A::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;



}}} // apache::thrift::test

namespace apache { namespace thrift { namespace test { namespace {
FOLLY_MAYBE_UNUSED FOLLY_ERASE void validateAdapters() {
}
}}}} // apache::thrift::test
