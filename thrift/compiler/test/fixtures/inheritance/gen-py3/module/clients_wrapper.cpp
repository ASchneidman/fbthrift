/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#include <src/gen-py3/module/clients_wrapper.h>

namespace cpp2 {


folly::SemiFuture<folly::Unit>
MyRootClientWrapper::do_root(
    apache::thrift::RpcOptions& rpcOptions) {
  auto* client = static_cast<::cpp2::MyRootAsyncClient*>(async_client_.get());
  return client->header_semifuture_do_root(
    rpcOptions
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

folly::SemiFuture<folly::Unit>
MyNodeClientWrapper::do_mid(
    apache::thrift::RpcOptions& rpcOptions) {
  auto* client = static_cast<::cpp2::MyNodeAsyncClient*>(async_client_.get());
  return client->header_semifuture_do_mid(
    rpcOptions
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

folly::SemiFuture<folly::Unit>
MyLeafClientWrapper::do_leaf(
    apache::thrift::RpcOptions& rpcOptions) {
  auto* client = static_cast<::cpp2::MyLeafAsyncClient*>(async_client_.get());
  return client->header_semifuture_do_leaf(
    rpcOptions
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

} // namespace cpp2
