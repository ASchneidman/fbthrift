/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

package test.fixtures.interactions;

import com.facebook.nifty.client.RequestChannel;
import com.facebook.swift.codec.*;
import com.facebook.swift.service.*;
import com.facebook.swift.service.metadata.*;
import com.facebook.thrift.client.*;
import com.facebook.thrift.util.FutureUtil;
import com.google.common.util.concurrent.ListenableFuture;
import java.io.*;
import java.lang.reflect.Method;
import java.util.*;
import org.apache.thrift.ProtocolId;
import reactor.core.publisher.Mono;

@SwiftGenerated
@Deprecated
public class MyServiceAsyncClientImpl extends AbstractThriftClient implements MyService.Async {

    // Method Handlers
    private ThriftMethodHandler fooMethodHandler;
    private ThriftMethodHandler interactMethodHandler;
    private ThriftMethodHandler interactFastMethodHandler;

    // Method Exceptions
    private static final Class[] fooExceptions = new Class[] {
        org.apache.thrift.TException.class};
    private static final Class[] interactExceptions = new Class[] {
        org.apache.thrift.TException.class};
    private static final Class[] interactFastExceptions = new Class[] {
        org.apache.thrift.TException.class};

    public MyServiceAsyncClientImpl(
        RequestChannel channel,
        Map<Method, ThriftMethodHandler> methods,
        Map<String, String> headers,
        Map<String, String> persistentHeaders,
        List<? extends ThriftClientEventHandler> eventHandlers) {
      this("MyService", channel, methods, headers, persistentHeaders, eventHandlers);
    }

    public MyServiceAsyncClientImpl(
        String serviceName,
        RequestChannel channel,
        Map<Method, ThriftMethodHandler> methods,
        Map<String, String> headers,
        Map<String, String> persistentHeaders,
        List<? extends ThriftClientEventHandler> eventHandlers) {
      super(serviceName, channel, headers, persistentHeaders, eventHandlers);

      Map<String, ThriftMethodHandler> methodHandlerMap = new HashMap<>();
      methods.forEach(
          (key, value) -> {
            methodHandlerMap.put(key.getName(), value);
          });

      // Set method handlers
      fooMethodHandler = methodHandlerMap.get("foo");
      interactMethodHandler = methodHandlerMap.get("interact");
      interactFastMethodHandler = methodHandlerMap.get("interactFast");
    }

    @java.lang.Override
    public void close() {
        super.close();
    }


    @java.lang.Override
    public ListenableFuture<Void> foo() {
        return foo(RpcOptions.EMPTY);
    }

    @java.lang.Override
    public ListenableFuture<Void> foo(
        RpcOptions rpcOptions) {
        return FutureUtil.transform(fooWrapper(rpcOptions));
    }

    @java.lang.Override
    public ListenableFuture<ResponseWrapper<Void>> fooWrapper(
        RpcOptions rpcOptions) {
        try {
          return executeWrapperWithOptions(fooMethodHandler, fooExceptions, rpcOptions);
        } catch (Throwable t) {
          throw new RuntimeTException(t.getMessage(), t);
        }
    }

    @java.lang.Override
    public ListenableFuture<Void> interact(
        int arg) {
        return interact(arg, RpcOptions.EMPTY);
    }

    @java.lang.Override
    public ListenableFuture<Void> interact(
        int arg,
        RpcOptions rpcOptions) {
        return FutureUtil.transform(interactWrapper(arg, rpcOptions));
    }

    @java.lang.Override
    public ListenableFuture<ResponseWrapper<Void>> interactWrapper(
        int arg,
        RpcOptions rpcOptions) {
        try {
          return executeWrapperWithOptions(interactMethodHandler, interactExceptions, rpcOptions, arg);
        } catch (Throwable t) {
          throw new RuntimeTException(t.getMessage(), t);
        }
    }

    @java.lang.Override
    public ListenableFuture<Integer> interactFast() {
        return interactFast(RpcOptions.EMPTY);
    }

    @java.lang.Override
    public ListenableFuture<Integer> interactFast(
        RpcOptions rpcOptions) {
        return FutureUtil.transform(interactFastWrapper(rpcOptions));
    }

    @java.lang.Override
    public ListenableFuture<ResponseWrapper<Integer>> interactFastWrapper(
        RpcOptions rpcOptions) {
        try {
          return executeWrapperWithOptions(interactFastMethodHandler, interactFastExceptions, rpcOptions);
        } catch (Throwable t) {
          throw new RuntimeTException(t.getMessage(), t);
        }
    }

    public MyInteraction createMyInteraction() {
        throw new RuntimeException("create interaction is not supported");
    }


    public MyInteractionFast createMyInteractionFast() {
        throw new RuntimeException("create interaction is not supported");
    }


    public SerialInteraction createSerialInteraction() {
        throw new RuntimeException("create interaction is not supported");
    }

}
