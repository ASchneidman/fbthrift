<?hh
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
class constants_CONSTANTS implements \IThriftConstants {
  /**
   * Original thrift constant:-
   * enum constants.Company my_company
   */
  const Company my_company = Company::FACEBOOK;

  /**
   * Original thrift constant:-
   * struct constants.Internship instagram
   */
  <<__Memoize>>
  public static function instagram()[]: Internship{
    return Internship::fromShape(
      shape(
        "weeks" => 12,
        "title" => "Software Engineer",
        "employer" => Company::INSTAGRAM,
        "compensation" => 1200.0,
        "school" => "Monters University",
      )
    );
  }

  /**
   * Original thrift constant:-
   * list<struct constants.Internship> internList
   */
  <<__Memoize>>
  public static function internList()[]: vec<Internship>{
    return vec[
      Internship::fromShape(
        shape(
          "weeks" => 12,
          "title" => "Software Engineer",
          "employer" => Company::INSTAGRAM,
          "compensation" => 1200.0,
          "school" => "Monters University",
        )
      ),
      Internship::fromShape(
        shape(
          "weeks" => 10,
          "title" => "Sales Intern",
          "employer" => Company::FACEBOOK,
          "compensation" => 1000.0,
        )
      ),
    ];
  }

  /**
   * Original thrift constant:-
   * list<struct constants.SWE> engineers
   */
  <<__Memoize>>
  public static function engineers()[]: vec<SWE>{
    return vec[
      SWE::fromShape(
        shape(
          "employer" => Company::FACEBOOK,
          "compensation" => 1000.0,
        )
      ),
      SWE::fromShape(
        shape(
          "employer" => Company::WHATSAPP,
          "compensation" => 1200.0,
        )
      ),
      SWE::fromShape(
        shape(
          "employer" => Company::OCULUS,
          "compensation" => 1200.0,
        )
      ),
    ];
  }


  public static function getAllStructuredAnnotations()[]: dict<string, dict<string, \IThriftStruct>> {
    return dict[
      'engineers' => dict[
        'AnnotationStruct' => AnnotationStruct::fromShape(
          shape(
          )
        ),
      ],
    ];
  }
}

