
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT
 *  @generated
 *
 */

#include <folly/python/import.h>
#include <thrift/lib/python/capi/iobuf.h>
#include <thrift/lib/python/types.h>

#include <thrift/compiler/test/fixtures/basic/src/gen-python-capi/module/thrift_types_api.h>
#include <thrift/compiler/test/fixtures/basic/src/gen-python-capi/module/thrift_types_capi.h>


namespace apache {
namespace thrift {
namespace python {
namespace capi {
namespace {
bool ensure_module_imported() {
  static ::folly::python::import_cache_nocapture import((
      ::import_test__fixtures__basic__module__thrift_types_capi));
  return import();
}
} // namespace

ExtractorResult<::test::fixtures::basic::MyStruct>
Extractor<::test::fixtures::basic::MyStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::basic::MyStruct>(
      "Module test.fixtures.basic.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__basic__module__MyStruct(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::basic::MyStruct>(
        "Thrift serialize error: MyStruct");
  }
  return detail::deserialize_iobuf<::test::fixtures::basic::MyStruct>(std::move(val));
}


ExtractorResult<::test::fixtures::basic::MyStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::basic::MyStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::basic::MyStruct>(
      "Module test.fixtures.basic.module import error");
  }
  auto obj = StrongRef(init__test__fixtures__basic__module__MyStruct(fbthrift_data));
  if (!obj) {
      return extractorError<::test::fixtures::basic::MyStruct>(
          "Init from fbthrift error: MyStruct");
  }
  return Extractor<::test::fixtures::basic::MyStruct>{}(*obj);
}

int Extractor<::test::fixtures::basic::MyStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.basic.module import error");
  }
  int result =
      can_extract__test__fixtures__basic__module__MyStruct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyStruct");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::basic::MyStruct>::operator()(
    const ::test::fixtures::basic::MyStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__basic__module__MyStruct(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic::MyStruct>>::operator()(
    const ::test::fixtures::basic::MyStruct& val) {
  auto obj = StrongRef(Constructor<::test::fixtures::basic::MyStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::test::fixtures::basic::MyDataItem>
Extractor<::test::fixtures::basic::MyDataItem>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a MyDataItem");
      }
      return extractorError<::test::fixtures::basic::MyDataItem>(
          "Marshal error: MyDataItem");
  }
  return ::test::fixtures::basic::MyDataItem{};
}

ExtractorResult<::test::fixtures::basic::MyDataItem>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::basic::MyDataItem>>::operator()(PyObject* fbThriftData) {
  ::test::fixtures::basic::MyDataItem cpp;
  (void)fbThriftData;
  return cpp;
}


int Extractor<::test::fixtures::basic::MyDataItem>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.basic.module import error");
  }
  int result =
      can_extract__test__fixtures__basic__module__MyDataItem(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyDataItem");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::basic::MyDataItem>::operator()(
    const ::test::fixtures::basic::MyDataItem& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic::MyDataItem>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__test__fixtures__basic__module__MyDataItem(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic::MyDataItem>>::operator()(
    FOLLY_MAYBE_UNUSED const ::test::fixtures::basic::MyDataItem& val) {
  StrongRef fbthrift_data(createStructTuple(0));
  return std::move(fbthrift_data).release();
}


ExtractorResult<::test::fixtures::basic::MyUnion>
Extractor<::test::fixtures::basic::MyUnion>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::basic::MyUnion>(
      "Module test.fixtures.basic.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__basic__module__MyUnion(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::basic::MyUnion>(
        "Thrift serialize error: MyUnion");
  }
  return detail::deserialize_iobuf<::test::fixtures::basic::MyUnion>(std::move(val));
}


ExtractorResult<::test::fixtures::basic::MyUnion>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::basic::MyUnion>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::basic::MyUnion>(
      "Module test.fixtures.basic.module import error");
  }
  auto obj = StrongRef(init__test__fixtures__basic__module__MyUnion(fbthrift_data));
  if (!obj) {
      return extractorError<::test::fixtures::basic::MyUnion>(
          "Init from fbthrift error: MyUnion");
  }
  return Extractor<::test::fixtures::basic::MyUnion>{}(*obj);
}

int Extractor<::test::fixtures::basic::MyUnion>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.basic.module import error");
  }
  int result =
      can_extract__test__fixtures__basic__module__MyUnion(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyUnion");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::basic::MyUnion>::operator()(
    const ::test::fixtures::basic::MyUnion& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__basic__module__MyUnion(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic::MyUnion>>::operator()(
    const ::test::fixtures::basic::MyUnion& val) {
  auto obj = StrongRef(Constructor<::test::fixtures::basic::MyUnion>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::test::fixtures::basic::ReservedKeyword>
Extractor<::test::fixtures::basic::ReservedKeyword>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::basic::ReservedKeyword>(
      "Module test.fixtures.basic.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__basic__module__ReservedKeyword(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::basic::ReservedKeyword>(
        "Thrift serialize error: ReservedKeyword");
  }
  return detail::deserialize_iobuf<::test::fixtures::basic::ReservedKeyword>(std::move(val));
}


ExtractorResult<::test::fixtures::basic::ReservedKeyword>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::basic::ReservedKeyword>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::basic::ReservedKeyword>(
      "Module test.fixtures.basic.module import error");
  }
  auto obj = StrongRef(init__test__fixtures__basic__module__ReservedKeyword(fbthrift_data));
  if (!obj) {
      return extractorError<::test::fixtures::basic::ReservedKeyword>(
          "Init from fbthrift error: ReservedKeyword");
  }
  return Extractor<::test::fixtures::basic::ReservedKeyword>{}(*obj);
}

int Extractor<::test::fixtures::basic::ReservedKeyword>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.basic.module import error");
  }
  int result =
      can_extract__test__fixtures__basic__module__ReservedKeyword(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: ReservedKeyword");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::basic::ReservedKeyword>::operator()(
    const ::test::fixtures::basic::ReservedKeyword& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__basic__module__ReservedKeyword(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic::ReservedKeyword>>::operator()(
    const ::test::fixtures::basic::ReservedKeyword& val) {
  auto obj = StrongRef(Constructor<::test::fixtures::basic::ReservedKeyword>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::test::fixtures::basic::UnionToBeRenamed>
Extractor<::test::fixtures::basic::UnionToBeRenamed>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::basic::UnionToBeRenamed>(
      "Module test.fixtures.basic.module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__test__fixtures__basic__module__UnionToBeRenamed(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::test::fixtures::basic::UnionToBeRenamed>(
        "Thrift serialize error: UnionToBeRenamed");
  }
  return detail::deserialize_iobuf<::test::fixtures::basic::UnionToBeRenamed>(std::move(val));
}


ExtractorResult<::test::fixtures::basic::UnionToBeRenamed>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::test::fixtures::basic::UnionToBeRenamed>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::test::fixtures::basic::UnionToBeRenamed>(
      "Module test.fixtures.basic.module import error");
  }
  auto obj = StrongRef(init__test__fixtures__basic__module__UnionToBeRenamed(fbthrift_data));
  if (!obj) {
      return extractorError<::test::fixtures::basic::UnionToBeRenamed>(
          "Init from fbthrift error: UnionToBeRenamed");
  }
  return Extractor<::test::fixtures::basic::UnionToBeRenamed>{}(*obj);
}

int Extractor<::test::fixtures::basic::UnionToBeRenamed>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.basic.module import error");
  }
  int result =
      can_extract__test__fixtures__basic__module__UnionToBeRenamed(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: UnionToBeRenamed");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::basic::UnionToBeRenamed>::operator()(
    const ::test::fixtures::basic::UnionToBeRenamed& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__basic__module__UnionToBeRenamed(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::test::fixtures::basic::UnionToBeRenamed>>::operator()(
    const ::test::fixtures::basic::UnionToBeRenamed& val) {
  auto obj = StrongRef(Constructor<::test::fixtures::basic::UnionToBeRenamed>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::test::fixtures::basic::MyEnum>
Extractor<::test::fixtures::basic::MyEnum>::operator()(PyObject* obj) {
  long val = PyLong_AsLong(obj);
  if (val == -1 && PyErr_Occurred()) {
    return extractorError<::test::fixtures::basic::MyEnum>(
        "Error getting python int value: MyEnum");
  }
  return static_cast<::test::fixtures::basic::MyEnum>(val);
}

int Extractor<::test::fixtures::basic::MyEnum>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.basic.module import error");
  }
  int result =
      can_extract__test__fixtures__basic__module__MyEnum(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyEnum");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::basic::MyEnum>::operator()(
    ::test::fixtures::basic::MyEnum val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__basic__module__MyEnum(
      static_cast<int64_t>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}

ExtractorResult<::test::fixtures::basic::HackEnum>
Extractor<::test::fixtures::basic::HackEnum>::operator()(PyObject* obj) {
  long val = PyLong_AsLong(obj);
  if (val == -1 && PyErr_Occurred()) {
    return extractorError<::test::fixtures::basic::HackEnum>(
        "Error getting python int value: HackEnum");
  }
  return static_cast<::test::fixtures::basic::HackEnum>(val);
}

int Extractor<::test::fixtures::basic::HackEnum>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module test.fixtures.basic.module import error");
  }
  int result =
      can_extract__test__fixtures__basic__module__HackEnum(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: HackEnum");
  }
  return result;
}


PyObject* Constructor<::test::fixtures::basic::HackEnum>::operator()(
    ::test::fixtures::basic::HackEnum val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__test__fixtures__basic__module__HackEnum(
      static_cast<int64_t>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}

} // namespace capi
} // namespace python
} // namespace thrift
} // namespace apache
