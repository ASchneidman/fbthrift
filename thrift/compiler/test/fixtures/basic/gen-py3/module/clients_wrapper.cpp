/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#include <src/gen-py3/module/clients_wrapper.h>

namespace cpp2 {


folly::SemiFuture<folly::Unit>
MyServiceClientWrapper::ping(
    apache::thrift::RpcOptions& rpcOptions) {
  auto* client = static_cast<::cpp2::MyServiceAsyncClient*>(async_client_.get());
  return client->header_semifuture_ping(
    rpcOptions
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

folly::SemiFuture<std::string>
MyServiceClientWrapper::getRandomData(
    apache::thrift::RpcOptions& rpcOptions) {
  auto* client = static_cast<::cpp2::MyServiceAsyncClient*>(async_client_.get());
  return client->header_semifuture_getRandomData(
    rpcOptions
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

folly::SemiFuture<folly::Unit>
MyServiceClientWrapper::sink(
    apache::thrift::RpcOptions& rpcOptions,
    int64_t arg_sink) {
  auto* client = static_cast<::cpp2::MyServiceAsyncClient*>(async_client_.get());
  return client->header_semifuture_sink(
    rpcOptions,
    arg_sink
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

folly::SemiFuture<folly::Unit>
MyServiceClientWrapper::putDataById(
    apache::thrift::RpcOptions& rpcOptions,
    int64_t arg_id,
    std::string arg_data) {
  auto* client = static_cast<::cpp2::MyServiceAsyncClient*>(async_client_.get());
  return client->header_semifuture_putDataById(
    rpcOptions,
    arg_id,
    arg_data
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

folly::SemiFuture<bool>
MyServiceClientWrapper::hasDataById(
    apache::thrift::RpcOptions& rpcOptions,
    int64_t arg_id) {
  auto* client = static_cast<::cpp2::MyServiceAsyncClient*>(async_client_.get());
  return client->header_semifuture_hasDataById(
    rpcOptions,
    arg_id
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

folly::SemiFuture<std::string>
MyServiceClientWrapper::getDataById(
    apache::thrift::RpcOptions& rpcOptions,
    int64_t arg_id) {
  auto* client = static_cast<::cpp2::MyServiceAsyncClient*>(async_client_.get());
  return client->header_semifuture_getDataById(
    rpcOptions,
    arg_id
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

folly::SemiFuture<folly::Unit>
MyServiceClientWrapper::deleteDataById(
    apache::thrift::RpcOptions& rpcOptions,
    int64_t arg_id) {
  auto* client = static_cast<::cpp2::MyServiceAsyncClient*>(async_client_.get());
  return client->header_semifuture_deleteDataById(
    rpcOptions,
    arg_id
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

folly::SemiFuture<folly::Unit>
MyServiceClientWrapper::lobDataById(
    apache::thrift::RpcOptions& rpcOptions,
    int64_t arg_id,
    std::string arg_data) {
  auto* client = static_cast<::cpp2::MyServiceAsyncClient*>(async_client_.get());
  return client->semifuture_lobDataById(
    rpcOptions,
    arg_id,
    arg_data
  );
  
}

folly::SemiFuture<std::string>
DbMixedStackArgumentsClientWrapper::getDataByKey0(
    apache::thrift::RpcOptions& rpcOptions,
    std::string arg_key) {
  auto* client = static_cast<::cpp2::DbMixedStackArgumentsAsyncClient*>(async_client_.get());
  return client->header_semifuture_getDataByKey0(
    rpcOptions,
    arg_key
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

folly::SemiFuture<std::string>
DbMixedStackArgumentsClientWrapper::getDataByKey1(
    apache::thrift::RpcOptions& rpcOptions,
    std::string arg_key) {
  auto* client = static_cast<::cpp2::DbMixedStackArgumentsAsyncClient*>(async_client_.get());
  return client->header_semifuture_getDataByKey1(
    rpcOptions,
    arg_key
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

} // namespace cpp2
