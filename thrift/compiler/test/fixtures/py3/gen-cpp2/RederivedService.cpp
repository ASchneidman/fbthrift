/**
 * Autogenerated by Thrift for src/module.thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "thrift/compiler/test/fixtures/py3/gen-cpp2/RederivedService.h"
#include "thrift/compiler/test/fixtures/py3/gen-cpp2/RederivedService.tcc"
#include "thrift/compiler/test/fixtures/py3/gen-cpp2/module_metadata.h"
#include <thrift/lib/cpp2/gen/service_cpp.h>

namespace py3 { namespace simple {
std::unique_ptr<apache::thrift::AsyncProcessor> RederivedServiceSvIf::getProcessor() {
  return std::make_unique<RederivedServiceAsyncProcessor>(this);
}


::std::int32_t RederivedServiceSvIf::get_seven() {
  apache::thrift::detail::si::throw_app_exn_unimplemented("get_seven");
}

folly::SemiFuture<::std::int32_t> RederivedServiceSvIf::semifuture_get_seven() {
  auto expected{apache::thrift::detail::si::InvocationType::SemiFuture};
  __fbthrift_invocation_get_seven.compare_exchange_strong(expected, apache::thrift::detail::si::InvocationType::Sync, std::memory_order_relaxed);
  return apache::thrift::detail::si::semifuture([&] {
    return get_seven();
  });
}

folly::Future<::std::int32_t> RederivedServiceSvIf::future_get_seven() {
  auto expected{apache::thrift::detail::si::InvocationType::Future};
  __fbthrift_invocation_get_seven.compare_exchange_strong(expected, apache::thrift::detail::si::InvocationType::SemiFuture, std::memory_order_relaxed);
  auto ka = getThreadManager()->getKeepAlive(getRequestContext()->getRequestExecutionScope(), apache::thrift::concurrency::ThreadManager::Source::INTERNAL);
  return apache::thrift::detail::si::future(semifuture_get_seven(), std::move(ka));
}

void RederivedServiceSvIf::async_tm_get_seven(std::unique_ptr<apache::thrift::HandlerCallback<::std::int32_t>> callback) {
  // It's possible the coroutine versions will delegate to a future-based
  // version. If that happens, we need the RequestParams arguments to be
  // available to the future through the thread-local backchannel, so we set that up
  // for all cases.
  apache::thrift::detail::si::async_tm_prep(this, callback.get());
  switch (__fbthrift_invocation_get_seven.load(std::memory_order_relaxed)) {
    case apache::thrift::detail::si::InvocationType::AsyncTm:
    {
      auto expected{apache::thrift::detail::si::InvocationType::AsyncTm};
      __fbthrift_invocation_get_seven.compare_exchange_strong(expected, apache::thrift::detail::si::InvocationType::Future, std::memory_order_relaxed);
      apache::thrift::detail::si::async_tm_future(std::move(callback), [&] {
        return future_get_seven();
      });
      return;
    }
    case apache::thrift::detail::si::InvocationType::SemiFuture:
    {
      apache::thrift::detail::si::async_tm_semifuture(std::move(callback), [&] {
        return semifuture_get_seven(); });
      return;
    }
    case apache::thrift::detail::si::InvocationType::Sync:
    {
      try {
        callback->result(get_seven());
      } catch (...) {
        callback->exception(std::current_exception());
      }
      return;
    }
    case apache::thrift::detail::si::InvocationType::Future:
    {
      apache::thrift::detail::si::async_tm_future(std::move(callback), [&] {
        return future_get_seven();
      });
      return;
    }
    default:
    {
      folly::assume_unreachable();
    }
  }
}

::std::int32_t RederivedServiceSvNull::get_seven() {
  return 0;
}



const char* RederivedServiceAsyncProcessor::getServiceName() {
  return "RederivedService";
}

void RederivedServiceAsyncProcessor::getServiceMetadata(apache::thrift::metadata::ThriftServiceMetadataResponse& response) {
  ::apache::thrift::detail::md::ServiceMetadata<RederivedServiceSvIf>::gen(*response.metadata_ref(), *response.context_ref());
}

void RederivedServiceAsyncProcessor::processSerializedCompressedRequest(apache::thrift::ResponseChannelRequest::UniquePtr req, apache::thrift::SerializedCompressedRequest&& serializedRequest, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  apache::thrift::detail::ap::process(this, std::move(req), std::move(serializedRequest), protType, context, eb, tm);
}

std::shared_ptr<folly::RequestContext> RederivedServiceAsyncProcessor::getBaseContextForRequest() {
  return iface_->getBaseContextForRequest();
}

const RederivedServiceAsyncProcessor::ProcessMap& RederivedServiceAsyncProcessor::getBinaryProtocolProcessMap() {
  return binaryProcessMap_;
}

const RederivedServiceAsyncProcessor::ProcessMap RederivedServiceAsyncProcessor::binaryProcessMap_ {
  {"get_seven", &RederivedServiceAsyncProcessor::setUpAndProcess_get_seven<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
};

const RederivedServiceAsyncProcessor::ProcessMap& RederivedServiceAsyncProcessor::getCompactProtocolProcessMap() {
  return compactProcessMap_;
}

const RederivedServiceAsyncProcessor::ProcessMap RederivedServiceAsyncProcessor::compactProcessMap_ {
  {"get_seven", &RederivedServiceAsyncProcessor::setUpAndProcess_get_seven<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
};

}} // py3::simple
