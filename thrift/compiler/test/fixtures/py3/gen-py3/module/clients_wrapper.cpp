/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#include <src/gen-py3/module/clients_wrapper.h>

namespace py3 {
namespace simple {


folly::SemiFuture<int32_t>
SimpleServiceClientWrapper::get_five(
    apache::thrift::RpcOptions& rpcOptions) {
  auto* client = static_cast<::py3::simple::SimpleServiceAsyncClient*>(async_client_.get());
  return client->header_semifuture_get_five(
    rpcOptions
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

folly::SemiFuture<int32_t>
SimpleServiceClientWrapper::add_five(
    apache::thrift::RpcOptions& rpcOptions,
    int32_t arg_num) {
  auto* client = static_cast<::py3::simple::SimpleServiceAsyncClient*>(async_client_.get());
  return client->header_semifuture_add_five(
    rpcOptions,
    arg_num
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

folly::SemiFuture<folly::Unit>
SimpleServiceClientWrapper::do_nothing(
    apache::thrift::RpcOptions& rpcOptions) {
  auto* client = static_cast<::py3::simple::SimpleServiceAsyncClient*>(async_client_.get());
  return client->header_semifuture_do_nothing(
    rpcOptions
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

folly::SemiFuture<std::string>
SimpleServiceClientWrapper::concat(
    apache::thrift::RpcOptions& rpcOptions,
    std::string arg_first,
    std::string arg_second) {
  auto* client = static_cast<::py3::simple::SimpleServiceAsyncClient*>(async_client_.get());
  return client->header_semifuture_concat(
    rpcOptions,
    arg_first,
    arg_second
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

folly::SemiFuture<int32_t>
SimpleServiceClientWrapper::get_value(
    apache::thrift::RpcOptions& rpcOptions,
    ::py3::simple::SimpleStruct arg_simple_struct) {
  auto* client = static_cast<::py3::simple::SimpleServiceAsyncClient*>(async_client_.get());
  return client->header_semifuture_get_value(
    rpcOptions,
    arg_simple_struct
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

folly::SemiFuture<bool>
SimpleServiceClientWrapper::negate(
    apache::thrift::RpcOptions& rpcOptions,
    bool arg_input) {
  auto* client = static_cast<::py3::simple::SimpleServiceAsyncClient*>(async_client_.get());
  return client->header_semifuture_negate(
    rpcOptions,
    arg_input
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

folly::SemiFuture<int8_t>
SimpleServiceClientWrapper::tiny(
    apache::thrift::RpcOptions& rpcOptions,
    int8_t arg_input) {
  auto* client = static_cast<::py3::simple::SimpleServiceAsyncClient*>(async_client_.get());
  return client->header_semifuture_tiny(
    rpcOptions,
    arg_input
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

folly::SemiFuture<int16_t>
SimpleServiceClientWrapper::small(
    apache::thrift::RpcOptions& rpcOptions,
    int16_t arg_input) {
  auto* client = static_cast<::py3::simple::SimpleServiceAsyncClient*>(async_client_.get());
  return client->header_semifuture_small(
    rpcOptions,
    arg_input
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

folly::SemiFuture<int64_t>
SimpleServiceClientWrapper::big(
    apache::thrift::RpcOptions& rpcOptions,
    int64_t arg_input) {
  auto* client = static_cast<::py3::simple::SimpleServiceAsyncClient*>(async_client_.get());
  return client->header_semifuture_big(
    rpcOptions,
    arg_input
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

folly::SemiFuture<double>
SimpleServiceClientWrapper::two(
    apache::thrift::RpcOptions& rpcOptions,
    double arg_input) {
  auto* client = static_cast<::py3::simple::SimpleServiceAsyncClient*>(async_client_.get());
  return client->header_semifuture_two(
    rpcOptions,
    arg_input
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

folly::SemiFuture<folly::Unit>
SimpleServiceClientWrapper::expected_exception(
    apache::thrift::RpcOptions& rpcOptions) {
  auto* client = static_cast<::py3::simple::SimpleServiceAsyncClient*>(async_client_.get());
  return client->header_semifuture_expected_exception(
    rpcOptions
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

folly::SemiFuture<int32_t>
SimpleServiceClientWrapper::unexpected_exception(
    apache::thrift::RpcOptions& rpcOptions) {
  auto* client = static_cast<::py3::simple::SimpleServiceAsyncClient*>(async_client_.get());
  return client->header_semifuture_unexpected_exception(
    rpcOptions
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

folly::SemiFuture<int32_t>
SimpleServiceClientWrapper::sum_i16_list(
    apache::thrift::RpcOptions& rpcOptions,
    std::vector<int16_t> arg_numbers) {
  auto* client = static_cast<::py3::simple::SimpleServiceAsyncClient*>(async_client_.get());
  return client->header_semifuture_sum_i16_list(
    rpcOptions,
    arg_numbers
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

folly::SemiFuture<int32_t>
SimpleServiceClientWrapper::sum_i32_list(
    apache::thrift::RpcOptions& rpcOptions,
    std::vector<int32_t> arg_numbers) {
  auto* client = static_cast<::py3::simple::SimpleServiceAsyncClient*>(async_client_.get());
  return client->header_semifuture_sum_i32_list(
    rpcOptions,
    arg_numbers
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

folly::SemiFuture<int32_t>
SimpleServiceClientWrapper::sum_i64_list(
    apache::thrift::RpcOptions& rpcOptions,
    std::vector<int64_t> arg_numbers) {
  auto* client = static_cast<::py3::simple::SimpleServiceAsyncClient*>(async_client_.get());
  return client->header_semifuture_sum_i64_list(
    rpcOptions,
    arg_numbers
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

folly::SemiFuture<std::string>
SimpleServiceClientWrapper::concat_many(
    apache::thrift::RpcOptions& rpcOptions,
    std::vector<std::string> arg_words) {
  auto* client = static_cast<::py3::simple::SimpleServiceAsyncClient*>(async_client_.get());
  return client->header_semifuture_concat_many(
    rpcOptions,
    arg_words
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

folly::SemiFuture<int32_t>
SimpleServiceClientWrapper::count_structs(
    apache::thrift::RpcOptions& rpcOptions,
    std::vector<::py3::simple::SimpleStruct> arg_items) {
  auto* client = static_cast<::py3::simple::SimpleServiceAsyncClient*>(async_client_.get());
  return client->header_semifuture_count_structs(
    rpcOptions,
    arg_items
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

folly::SemiFuture<int32_t>
SimpleServiceClientWrapper::sum_set(
    apache::thrift::RpcOptions& rpcOptions,
    std::set<int32_t> arg_numbers) {
  auto* client = static_cast<::py3::simple::SimpleServiceAsyncClient*>(async_client_.get());
  return client->header_semifuture_sum_set(
    rpcOptions,
    arg_numbers
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

folly::SemiFuture<bool>
SimpleServiceClientWrapper::contains_word(
    apache::thrift::RpcOptions& rpcOptions,
    std::set<std::string> arg_words,
    std::string arg_word) {
  auto* client = static_cast<::py3::simple::SimpleServiceAsyncClient*>(async_client_.get());
  return client->header_semifuture_contains_word(
    rpcOptions,
    arg_words,
    arg_word
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

folly::SemiFuture<std::string>
SimpleServiceClientWrapper::get_map_value(
    apache::thrift::RpcOptions& rpcOptions,
    std::map<std::string,std::string> arg_words,
    std::string arg_key) {
  auto* client = static_cast<::py3::simple::SimpleServiceAsyncClient*>(async_client_.get());
  return client->header_semifuture_get_map_value(
    rpcOptions,
    arg_words,
    arg_key
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

folly::SemiFuture<int16_t>
SimpleServiceClientWrapper::map_length(
    apache::thrift::RpcOptions& rpcOptions,
    std::map<std::string,::py3::simple::SimpleStruct> arg_items) {
  auto* client = static_cast<::py3::simple::SimpleServiceAsyncClient*>(async_client_.get());
  return client->header_semifuture_map_length(
    rpcOptions,
    arg_items
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

folly::SemiFuture<int16_t>
SimpleServiceClientWrapper::sum_map_values(
    apache::thrift::RpcOptions& rpcOptions,
    std::map<std::string,int16_t> arg_items) {
  auto* client = static_cast<::py3::simple::SimpleServiceAsyncClient*>(async_client_.get());
  return client->header_semifuture_sum_map_values(
    rpcOptions,
    arg_items
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

folly::SemiFuture<int32_t>
SimpleServiceClientWrapper::complex_sum_i32(
    apache::thrift::RpcOptions& rpcOptions,
    ::py3::simple::ComplexStruct arg_counter) {
  auto* client = static_cast<::py3::simple::SimpleServiceAsyncClient*>(async_client_.get());
  return client->header_semifuture_complex_sum_i32(
    rpcOptions,
    arg_counter
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

folly::SemiFuture<std::string>
SimpleServiceClientWrapper::repeat_name(
    apache::thrift::RpcOptions& rpcOptions,
    ::py3::simple::ComplexStruct arg_counter) {
  auto* client = static_cast<::py3::simple::SimpleServiceAsyncClient*>(async_client_.get());
  return client->header_semifuture_repeat_name(
    rpcOptions,
    arg_counter
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

folly::SemiFuture<::py3::simple::SimpleStruct>
SimpleServiceClientWrapper::get_struct(
    apache::thrift::RpcOptions& rpcOptions) {
  auto* client = static_cast<::py3::simple::SimpleServiceAsyncClient*>(async_client_.get());
  return client->header_semifuture_get_struct(
    rpcOptions
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

folly::SemiFuture<std::vector<int32_t>>
SimpleServiceClientWrapper::fib(
    apache::thrift::RpcOptions& rpcOptions,
    int16_t arg_n) {
  auto* client = static_cast<::py3::simple::SimpleServiceAsyncClient*>(async_client_.get());
  return client->header_semifuture_fib(
    rpcOptions,
    arg_n
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

folly::SemiFuture<std::set<std::string>>
SimpleServiceClientWrapper::unique_words(
    apache::thrift::RpcOptions& rpcOptions,
    std::vector<std::string> arg_words) {
  auto* client = static_cast<::py3::simple::SimpleServiceAsyncClient*>(async_client_.get());
  return client->header_semifuture_unique_words(
    rpcOptions,
    arg_words
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

folly::SemiFuture<std::map<std::string,int16_t>>
SimpleServiceClientWrapper::words_count(
    apache::thrift::RpcOptions& rpcOptions,
    std::vector<std::string> arg_words) {
  auto* client = static_cast<::py3::simple::SimpleServiceAsyncClient*>(async_client_.get());
  return client->header_semifuture_words_count(
    rpcOptions,
    arg_words
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

folly::SemiFuture<::py3::simple::AnEnum>
SimpleServiceClientWrapper::set_enum(
    apache::thrift::RpcOptions& rpcOptions,
    ::py3::simple::AnEnum arg_in_enum) {
  auto* client = static_cast<::py3::simple::SimpleServiceAsyncClient*>(async_client_.get());
  return client->header_semifuture_set_enum(
    rpcOptions,
    arg_in_enum
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

folly::SemiFuture<std::vector<std::vector<int32_t>>>
SimpleServiceClientWrapper::list_of_lists(
    apache::thrift::RpcOptions& rpcOptions,
    int16_t arg_num_lists,
    int16_t arg_num_items) {
  auto* client = static_cast<::py3::simple::SimpleServiceAsyncClient*>(async_client_.get());
  return client->header_semifuture_list_of_lists(
    rpcOptions,
    arg_num_lists,
    arg_num_items
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

folly::SemiFuture<std::map<std::string,std::map<std::string,int32_t>>>
SimpleServiceClientWrapper::word_character_frequency(
    apache::thrift::RpcOptions& rpcOptions,
    std::string arg_sentence) {
  auto* client = static_cast<::py3::simple::SimpleServiceAsyncClient*>(async_client_.get());
  return client->header_semifuture_word_character_frequency(
    rpcOptions,
    arg_sentence
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

folly::SemiFuture<std::vector<std::set<std::string>>>
SimpleServiceClientWrapper::list_of_sets(
    apache::thrift::RpcOptions& rpcOptions,
    std::string arg_some_words) {
  auto* client = static_cast<::py3::simple::SimpleServiceAsyncClient*>(async_client_.get());
  return client->header_semifuture_list_of_sets(
    rpcOptions,
    arg_some_words
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

folly::SemiFuture<int32_t>
SimpleServiceClientWrapper::nested_map_argument(
    apache::thrift::RpcOptions& rpcOptions,
    std::map<std::string,std::vector<::py3::simple::SimpleStruct>> arg_struct_map) {
  auto* client = static_cast<::py3::simple::SimpleServiceAsyncClient*>(async_client_.get());
  return client->header_semifuture_nested_map_argument(
    rpcOptions,
    arg_struct_map
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

folly::SemiFuture<std::string>
SimpleServiceClientWrapper::make_sentence(
    apache::thrift::RpcOptions& rpcOptions,
    std::vector<std::vector<std::string>> arg_word_chars) {
  auto* client = static_cast<::py3::simple::SimpleServiceAsyncClient*>(async_client_.get());
  return client->header_semifuture_make_sentence(
    rpcOptions,
    arg_word_chars
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

folly::SemiFuture<std::set<int32_t>>
SimpleServiceClientWrapper::get_union(
    apache::thrift::RpcOptions& rpcOptions,
    std::vector<std::set<int32_t>> arg_sets) {
  auto* client = static_cast<::py3::simple::SimpleServiceAsyncClient*>(async_client_.get());
  return client->header_semifuture_get_union(
    rpcOptions,
    arg_sets
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

folly::SemiFuture<std::set<std::string>>
SimpleServiceClientWrapper::get_keys(
    apache::thrift::RpcOptions& rpcOptions,
    std::vector<std::map<std::string,std::string>> arg_string_map) {
  auto* client = static_cast<::py3::simple::SimpleServiceAsyncClient*>(async_client_.get());
  return client->header_semifuture_get_keys(
    rpcOptions,
    arg_string_map
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

folly::SemiFuture<double>
SimpleServiceClientWrapper::lookup_double(
    apache::thrift::RpcOptions& rpcOptions,
    int32_t arg_key) {
  auto* client = static_cast<::py3::simple::SimpleServiceAsyncClient*>(async_client_.get());
  return client->header_semifuture_lookup_double(
    rpcOptions,
    arg_key
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

folly::SemiFuture<std::string>
SimpleServiceClientWrapper::retrieve_binary(
    apache::thrift::RpcOptions& rpcOptions,
    std::string arg_something) {
  auto* client = static_cast<::py3::simple::SimpleServiceAsyncClient*>(async_client_.get());
  return client->header_semifuture_retrieve_binary(
    rpcOptions,
    arg_something
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

folly::SemiFuture<std::set<std::string>>
SimpleServiceClientWrapper::contain_binary(
    apache::thrift::RpcOptions& rpcOptions,
    std::vector<std::string> arg_binaries) {
  auto* client = static_cast<::py3::simple::SimpleServiceAsyncClient*>(async_client_.get());
  return client->header_semifuture_contain_binary(
    rpcOptions,
    arg_binaries
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

folly::SemiFuture<std::vector<::py3::simple::AnEnum>>
SimpleServiceClientWrapper::contain_enum(
    apache::thrift::RpcOptions& rpcOptions,
    std::vector<::py3::simple::AnEnum> arg_the_enum) {
  auto* client = static_cast<::py3::simple::SimpleServiceAsyncClient*>(async_client_.get());
  return client->header_semifuture_contain_enum(
    rpcOptions,
    arg_the_enum
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

folly::SemiFuture<::py3::simple::BinaryUnionStruct>
SimpleServiceClientWrapper::get_binary_union_struct(
    apache::thrift::RpcOptions& rpcOptions,
    ::py3::simple::BinaryUnion arg_u) {
  auto* client = static_cast<::py3::simple::SimpleServiceAsyncClient*>(async_client_.get());
  return client->header_semifuture_get_binary_union_struct(
    rpcOptions,
    arg_u
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

folly::SemiFuture<int32_t>
DerivedServiceClientWrapper::get_six(
    apache::thrift::RpcOptions& rpcOptions) {
  auto* client = static_cast<::py3::simple::DerivedServiceAsyncClient*>(async_client_.get());
  return client->header_semifuture_get_six(
    rpcOptions
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

folly::SemiFuture<int32_t>
RederivedServiceClientWrapper::get_seven(
    apache::thrift::RpcOptions& rpcOptions) {
  auto* client = static_cast<::py3::simple::RederivedServiceAsyncClient*>(async_client_.get());
  return client->header_semifuture_get_seven(
    rpcOptions
  ).deferValue([&](auto pair){
      auto& header = *pair.second;
      if (!header.getHeaders().empty()) {
        rpcOptions.setReadHeaders(header.releaseHeaders());
      }
      return std::move(pair.first);
  });
  
}

} // namespace py3
} // namespace simple
