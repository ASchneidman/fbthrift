
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT
 *  @generated
 *
 */

#include <folly/python/import.h>
#include <thrift/lib/python/capi/iobuf.h>
#include <thrift/lib/python/types.h>

#include <thrift/compiler/test/fixtures/complex-struct/src/gen-python-capi/module/thrift_types_api.h>
#include <thrift/compiler/test/fixtures/complex-struct/src/gen-python-capi/module/thrift_types_capi.h>


namespace apache {
namespace thrift {
namespace python {
namespace capi {
namespace {
bool ensure_module_imported() {
  static ::folly::python::import_cache_nocapture import((
      ::import_module__thrift_types_capi));
  return import();
}
} // namespace

ExtractorResult<::cpp2::MyStructFloatFieldThrowExp>
Extractor<::cpp2::MyStructFloatFieldThrowExp>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::MyStructFloatFieldThrowExp>(
      "Module module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__module__MyStructFloatFieldThrowExp(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::cpp2::MyStructFloatFieldThrowExp>(
        "Thrift serialize error: MyStructFloatFieldThrowExp");
  }
  return detail::deserialize_iobuf<::cpp2::MyStructFloatFieldThrowExp>(std::move(val));
}


ExtractorResult<::cpp2::MyStructFloatFieldThrowExp>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::cpp2::MyStructFloatFieldThrowExp>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::MyStructFloatFieldThrowExp>(
      "Module module import error");
  }
  auto obj = StrongRef(init__module__MyStructFloatFieldThrowExp(fbthrift_data));
  if (!obj) {
      return extractorError<::cpp2::MyStructFloatFieldThrowExp>(
          "Init from fbthrift error: MyStructFloatFieldThrowExp");
  }
  return Extractor<::cpp2::MyStructFloatFieldThrowExp>{}(*obj);
}

int Extractor<::cpp2::MyStructFloatFieldThrowExp>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module module import error");
  }
  int result =
      can_extract__module__MyStructFloatFieldThrowExp(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyStructFloatFieldThrowExp");
  }
  return result;
}


PyObject* Constructor<::cpp2::MyStructFloatFieldThrowExp>::operator()(
    const ::cpp2::MyStructFloatFieldThrowExp& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__module__MyStructFloatFieldThrowExp(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyStructFloatFieldThrowExp>>::operator()(
    const ::cpp2::MyStructFloatFieldThrowExp& val) {
  auto obj = StrongRef(Constructor<::cpp2::MyStructFloatFieldThrowExp>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::cpp2::MyStructMapFloatThrowExp>
Extractor<::cpp2::MyStructMapFloatThrowExp>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::MyStructMapFloatThrowExp>(
      "Module module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__module__MyStructMapFloatThrowExp(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::cpp2::MyStructMapFloatThrowExp>(
        "Thrift serialize error: MyStructMapFloatThrowExp");
  }
  return detail::deserialize_iobuf<::cpp2::MyStructMapFloatThrowExp>(std::move(val));
}


ExtractorResult<::cpp2::MyStructMapFloatThrowExp>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::cpp2::MyStructMapFloatThrowExp>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::MyStructMapFloatThrowExp>(
      "Module module import error");
  }
  auto obj = StrongRef(init__module__MyStructMapFloatThrowExp(fbthrift_data));
  if (!obj) {
      return extractorError<::cpp2::MyStructMapFloatThrowExp>(
          "Init from fbthrift error: MyStructMapFloatThrowExp");
  }
  return Extractor<::cpp2::MyStructMapFloatThrowExp>{}(*obj);
}

int Extractor<::cpp2::MyStructMapFloatThrowExp>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module module import error");
  }
  int result =
      can_extract__module__MyStructMapFloatThrowExp(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyStructMapFloatThrowExp");
  }
  return result;
}


PyObject* Constructor<::cpp2::MyStructMapFloatThrowExp>::operator()(
    const ::cpp2::MyStructMapFloatThrowExp& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__module__MyStructMapFloatThrowExp(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyStructMapFloatThrowExp>>::operator()(
    const ::cpp2::MyStructMapFloatThrowExp& val) {
  auto obj = StrongRef(Constructor<::cpp2::MyStructMapFloatThrowExp>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::cpp2::MyStruct>
Extractor<::cpp2::MyStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::MyStruct>(
      "Module module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__module__MyStruct(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::cpp2::MyStruct>(
        "Thrift serialize error: MyStruct");
  }
  return detail::deserialize_iobuf<::cpp2::MyStruct>(std::move(val));
}


ExtractorResult<::cpp2::MyStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::cpp2::MyStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::MyStruct>(
      "Module module import error");
  }
  auto obj = StrongRef(init__module__MyStruct(fbthrift_data));
  if (!obj) {
      return extractorError<::cpp2::MyStruct>(
          "Init from fbthrift error: MyStruct");
  }
  return Extractor<::cpp2::MyStruct>{}(*obj);
}

int Extractor<::cpp2::MyStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module module import error");
  }
  int result =
      can_extract__module__MyStruct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyStruct");
  }
  return result;
}


PyObject* Constructor<::cpp2::MyStruct>::operator()(
    const ::cpp2::MyStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__module__MyStruct(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyStruct>>::operator()(
    const ::cpp2::MyStruct& val) {
  auto obj = StrongRef(Constructor<::cpp2::MyStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::cpp2::SimpleStruct>
Extractor<::cpp2::SimpleStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::SimpleStruct>(
      "Module module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__module__SimpleStruct(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::cpp2::SimpleStruct>(
        "Thrift serialize error: SimpleStruct");
  }
  return detail::deserialize_iobuf<::cpp2::SimpleStruct>(std::move(val));
}


ExtractorResult<::cpp2::SimpleStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::cpp2::SimpleStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::SimpleStruct>(
      "Module module import error");
  }
  auto obj = StrongRef(init__module__SimpleStruct(fbthrift_data));
  if (!obj) {
      return extractorError<::cpp2::SimpleStruct>(
          "Init from fbthrift error: SimpleStruct");
  }
  return Extractor<::cpp2::SimpleStruct>{}(*obj);
}

int Extractor<::cpp2::SimpleStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module module import error");
  }
  int result =
      can_extract__module__SimpleStruct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: SimpleStruct");
  }
  return result;
}


PyObject* Constructor<::cpp2::SimpleStruct>::operator()(
    const ::cpp2::SimpleStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__module__SimpleStruct(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::SimpleStruct>>::operator()(
    const ::cpp2::SimpleStruct& val) {
  auto obj = StrongRef(Constructor<::cpp2::SimpleStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::cpp2::defaultStruct>
Extractor<::cpp2::defaultStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::defaultStruct>(
      "Module module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__module__defaultStruct(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::cpp2::defaultStruct>(
        "Thrift serialize error: defaultStruct");
  }
  return detail::deserialize_iobuf<::cpp2::defaultStruct>(std::move(val));
}


ExtractorResult<::cpp2::defaultStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::cpp2::defaultStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::defaultStruct>(
      "Module module import error");
  }
  auto obj = StrongRef(init__module__defaultStruct(fbthrift_data));
  if (!obj) {
      return extractorError<::cpp2::defaultStruct>(
          "Init from fbthrift error: defaultStruct");
  }
  return Extractor<::cpp2::defaultStruct>{}(*obj);
}

int Extractor<::cpp2::defaultStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module module import error");
  }
  int result =
      can_extract__module__defaultStruct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: defaultStruct");
  }
  return result;
}


PyObject* Constructor<::cpp2::defaultStruct>::operator()(
    const ::cpp2::defaultStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__module__defaultStruct(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::defaultStruct>>::operator()(
    const ::cpp2::defaultStruct& val) {
  auto obj = StrongRef(Constructor<::cpp2::defaultStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::cpp2::MyStructTypeDef>
Extractor<::cpp2::MyStructTypeDef>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::MyStructTypeDef>(
      "Module module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__module__MyStructTypeDef(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::cpp2::MyStructTypeDef>(
        "Thrift serialize error: MyStructTypeDef");
  }
  return detail::deserialize_iobuf<::cpp2::MyStructTypeDef>(std::move(val));
}


ExtractorResult<::cpp2::MyStructTypeDef>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::cpp2::MyStructTypeDef>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::MyStructTypeDef>(
      "Module module import error");
  }
  auto obj = StrongRef(init__module__MyStructTypeDef(fbthrift_data));
  if (!obj) {
      return extractorError<::cpp2::MyStructTypeDef>(
          "Init from fbthrift error: MyStructTypeDef");
  }
  return Extractor<::cpp2::MyStructTypeDef>{}(*obj);
}

int Extractor<::cpp2::MyStructTypeDef>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module module import error");
  }
  int result =
      can_extract__module__MyStructTypeDef(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyStructTypeDef");
  }
  return result;
}


PyObject* Constructor<::cpp2::MyStructTypeDef>::operator()(
    const ::cpp2::MyStructTypeDef& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__module__MyStructTypeDef(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyStructTypeDef>>::operator()(
    const ::cpp2::MyStructTypeDef& val) {
  auto obj = StrongRef(Constructor<::cpp2::MyStructTypeDef>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::cpp2::MyDataItem>
Extractor<::cpp2::MyDataItem>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a MyDataItem");
      }
      return extractorError<::cpp2::MyDataItem>(
          "Marshal error: MyDataItem");
  }
  return ::cpp2::MyDataItem{};
}

ExtractorResult<::cpp2::MyDataItem>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::cpp2::MyDataItem>>::operator()(PyObject* fbThriftData) {
  ::cpp2::MyDataItem cpp;
  (void)fbThriftData;
  return cpp;
}


int Extractor<::cpp2::MyDataItem>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module module import error");
  }
  int result =
      can_extract__module__MyDataItem(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyDataItem");
  }
  return result;
}


PyObject* Constructor<::cpp2::MyDataItem>::operator()(
    const ::cpp2::MyDataItem& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyDataItem>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__module__MyDataItem(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyDataItem>>::operator()(
    FOLLY_MAYBE_UNUSED const ::cpp2::MyDataItem& val) {
  StrongRef fbthrift_data(createStructTuple(0));
  return std::move(fbthrift_data).release();
}


ExtractorResult<::cpp2::MyUnion>
Extractor<::cpp2::MyUnion>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::MyUnion>(
      "Module module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__module__MyUnion(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::cpp2::MyUnion>(
        "Thrift serialize error: MyUnion");
  }
  return detail::deserialize_iobuf<::cpp2::MyUnion>(std::move(val));
}


ExtractorResult<::cpp2::MyUnion>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::cpp2::MyUnion>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::MyUnion>(
      "Module module import error");
  }
  auto obj = StrongRef(init__module__MyUnion(fbthrift_data));
  if (!obj) {
      return extractorError<::cpp2::MyUnion>(
          "Init from fbthrift error: MyUnion");
  }
  return Extractor<::cpp2::MyUnion>{}(*obj);
}

int Extractor<::cpp2::MyUnion>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module module import error");
  }
  int result =
      can_extract__module__MyUnion(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyUnion");
  }
  return result;
}


PyObject* Constructor<::cpp2::MyUnion>::operator()(
    const ::cpp2::MyUnion& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__module__MyUnion(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyUnion>>::operator()(
    const ::cpp2::MyUnion& val) {
  auto obj = StrongRef(Constructor<::cpp2::MyUnion>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::cpp2::MyUnionFloatFieldThrowExp>
Extractor<::cpp2::MyUnionFloatFieldThrowExp>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::MyUnionFloatFieldThrowExp>(
      "Module module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__module__MyUnionFloatFieldThrowExp(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::cpp2::MyUnionFloatFieldThrowExp>(
        "Thrift serialize error: MyUnionFloatFieldThrowExp");
  }
  return detail::deserialize_iobuf<::cpp2::MyUnionFloatFieldThrowExp>(std::move(val));
}


ExtractorResult<::cpp2::MyUnionFloatFieldThrowExp>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::cpp2::MyUnionFloatFieldThrowExp>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::MyUnionFloatFieldThrowExp>(
      "Module module import error");
  }
  auto obj = StrongRef(init__module__MyUnionFloatFieldThrowExp(fbthrift_data));
  if (!obj) {
      return extractorError<::cpp2::MyUnionFloatFieldThrowExp>(
          "Init from fbthrift error: MyUnionFloatFieldThrowExp");
  }
  return Extractor<::cpp2::MyUnionFloatFieldThrowExp>{}(*obj);
}

int Extractor<::cpp2::MyUnionFloatFieldThrowExp>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module module import error");
  }
  int result =
      can_extract__module__MyUnionFloatFieldThrowExp(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyUnionFloatFieldThrowExp");
  }
  return result;
}


PyObject* Constructor<::cpp2::MyUnionFloatFieldThrowExp>::operator()(
    const ::cpp2::MyUnionFloatFieldThrowExp& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__module__MyUnionFloatFieldThrowExp(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::MyUnionFloatFieldThrowExp>>::operator()(
    const ::cpp2::MyUnionFloatFieldThrowExp& val) {
  auto obj = StrongRef(Constructor<::cpp2::MyUnionFloatFieldThrowExp>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::cpp2::ComplexNestedStruct>
Extractor<::cpp2::ComplexNestedStruct>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::ComplexNestedStruct>(
      "Module module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__module__ComplexNestedStruct(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::cpp2::ComplexNestedStruct>(
        "Thrift serialize error: ComplexNestedStruct");
  }
  return detail::deserialize_iobuf<::cpp2::ComplexNestedStruct>(std::move(val));
}


ExtractorResult<::cpp2::ComplexNestedStruct>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::cpp2::ComplexNestedStruct>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::ComplexNestedStruct>(
      "Module module import error");
  }
  auto obj = StrongRef(init__module__ComplexNestedStruct(fbthrift_data));
  if (!obj) {
      return extractorError<::cpp2::ComplexNestedStruct>(
          "Init from fbthrift error: ComplexNestedStruct");
  }
  return Extractor<::cpp2::ComplexNestedStruct>{}(*obj);
}

int Extractor<::cpp2::ComplexNestedStruct>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module module import error");
  }
  int result =
      can_extract__module__ComplexNestedStruct(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: ComplexNestedStruct");
  }
  return result;
}


PyObject* Constructor<::cpp2::ComplexNestedStruct>::operator()(
    const ::cpp2::ComplexNestedStruct& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__module__ComplexNestedStruct(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::ComplexNestedStruct>>::operator()(
    const ::cpp2::ComplexNestedStruct& val) {
  auto obj = StrongRef(Constructor<::cpp2::ComplexNestedStruct>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::cpp2::TypeRemapped>
Extractor<::cpp2::TypeRemapped>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::TypeRemapped>(
      "Module module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__module__TypeRemapped(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::cpp2::TypeRemapped>(
        "Thrift serialize error: TypeRemapped");
  }
  return detail::deserialize_iobuf<::cpp2::TypeRemapped>(std::move(val));
}


ExtractorResult<::cpp2::TypeRemapped>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::cpp2::TypeRemapped>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::TypeRemapped>(
      "Module module import error");
  }
  auto obj = StrongRef(init__module__TypeRemapped(fbthrift_data));
  if (!obj) {
      return extractorError<::cpp2::TypeRemapped>(
          "Init from fbthrift error: TypeRemapped");
  }
  return Extractor<::cpp2::TypeRemapped>{}(*obj);
}

int Extractor<::cpp2::TypeRemapped>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module module import error");
  }
  int result =
      can_extract__module__TypeRemapped(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: TypeRemapped");
  }
  return result;
}


PyObject* Constructor<::cpp2::TypeRemapped>::operator()(
    const ::cpp2::TypeRemapped& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__module__TypeRemapped(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::TypeRemapped>>::operator()(
    const ::cpp2::TypeRemapped& val) {
  auto obj = StrongRef(Constructor<::cpp2::TypeRemapped>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::cpp2::emptyXcep>
Extractor<::cpp2::emptyXcep>::operator()(PyObject* obj) {
  int tCheckResult = typeCheck(obj);
  if (tCheckResult != 1) {
      if (tCheckResult == 0) {
        PyErr_SetString(PyExc_TypeError, "Not a emptyXcep");
      }
      return extractorError<::cpp2::emptyXcep>(
          "Marshal error: emptyXcep");
  }
  return ::cpp2::emptyXcep{};
}

ExtractorResult<::cpp2::emptyXcep>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::cpp2::emptyXcep>>::operator()(PyObject* fbThriftData) {
  ::cpp2::emptyXcep cpp;
  (void)fbThriftData;
  return cpp;
}


int Extractor<::cpp2::emptyXcep>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module module import error");
  }
  int result =
      can_extract__module__emptyXcep(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: emptyXcep");
  }
  return result;
}


PyObject* Constructor<::cpp2::emptyXcep>::operator()(
    const ::cpp2::emptyXcep& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::emptyXcep>> ctor;
  StrongRef fbthrift_data(ctor(val));
  if (!fbthrift_data) {
    return nullptr;
  }
  return init__module__emptyXcep(*fbthrift_data);
}

PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::emptyXcep>>::operator()(
    FOLLY_MAYBE_UNUSED const ::cpp2::emptyXcep& val) {
  StrongRef fbthrift_data(createStructTuple(0));
  return std::move(fbthrift_data).release();
}


ExtractorResult<::cpp2::reqXcep>
Extractor<::cpp2::reqXcep>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::reqXcep>(
      "Module module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__module__reqXcep(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::cpp2::reqXcep>(
        "Thrift serialize error: reqXcep");
  }
  return detail::deserialize_iobuf<::cpp2::reqXcep>(std::move(val));
}


ExtractorResult<::cpp2::reqXcep>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::cpp2::reqXcep>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::reqXcep>(
      "Module module import error");
  }
  auto obj = StrongRef(init__module__reqXcep(fbthrift_data));
  if (!obj) {
      return extractorError<::cpp2::reqXcep>(
          "Init from fbthrift error: reqXcep");
  }
  return Extractor<::cpp2::reqXcep>{}(*obj);
}

int Extractor<::cpp2::reqXcep>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module module import error");
  }
  int result =
      can_extract__module__reqXcep(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: reqXcep");
  }
  return result;
}


PyObject* Constructor<::cpp2::reqXcep>::operator()(
    const ::cpp2::reqXcep& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__module__reqXcep(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::reqXcep>>::operator()(
    const ::cpp2::reqXcep& val) {
  auto obj = StrongRef(Constructor<::cpp2::reqXcep>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getExceptionThriftData(*obj);
}

ExtractorResult<::cpp2::optXcep>
Extractor<::cpp2::optXcep>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::optXcep>(
      "Module module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__module__optXcep(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::cpp2::optXcep>(
        "Thrift serialize error: optXcep");
  }
  return detail::deserialize_iobuf<::cpp2::optXcep>(std::move(val));
}


ExtractorResult<::cpp2::optXcep>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::cpp2::optXcep>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::optXcep>(
      "Module module import error");
  }
  auto obj = StrongRef(init__module__optXcep(fbthrift_data));
  if (!obj) {
      return extractorError<::cpp2::optXcep>(
          "Init from fbthrift error: optXcep");
  }
  return Extractor<::cpp2::optXcep>{}(*obj);
}

int Extractor<::cpp2::optXcep>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module module import error");
  }
  int result =
      can_extract__module__optXcep(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: optXcep");
  }
  return result;
}


PyObject* Constructor<::cpp2::optXcep>::operator()(
    const ::cpp2::optXcep& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__module__optXcep(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::optXcep>>::operator()(
    const ::cpp2::optXcep& val) {
  auto obj = StrongRef(Constructor<::cpp2::optXcep>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getExceptionThriftData(*obj);
}

ExtractorResult<::cpp2::complexException>
Extractor<::cpp2::complexException>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::complexException>(
      "Module module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__module__complexException(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::cpp2::complexException>(
        "Thrift serialize error: complexException");
  }
  return detail::deserialize_iobuf<::cpp2::complexException>(std::move(val));
}


ExtractorResult<::cpp2::complexException>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::cpp2::complexException>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::complexException>(
      "Module module import error");
  }
  auto obj = StrongRef(init__module__complexException(fbthrift_data));
  if (!obj) {
      return extractorError<::cpp2::complexException>(
          "Init from fbthrift error: complexException");
  }
  return Extractor<::cpp2::complexException>{}(*obj);
}

int Extractor<::cpp2::complexException>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module module import error");
  }
  int result =
      can_extract__module__complexException(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: complexException");
  }
  return result;
}


PyObject* Constructor<::cpp2::complexException>::operator()(
    const ::cpp2::complexException& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__module__complexException(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::complexException>>::operator()(
    const ::cpp2::complexException& val) {
  auto obj = StrongRef(Constructor<::cpp2::complexException>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getExceptionThriftData(*obj);
}

ExtractorResult<::cpp2::MyEnum>
Extractor<::cpp2::MyEnum>::operator()(PyObject* obj) {
  long val = PyLong_AsLong(obj);
  if (val == -1 && PyErr_Occurred()) {
    return extractorError<::cpp2::MyEnum>(
        "Error getting python int value: MyEnum");
  }
  return static_cast<::cpp2::MyEnum>(val);
}

int Extractor<::cpp2::MyEnum>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module module import error");
  }
  int result =
      can_extract__module__MyEnum(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: MyEnum");
  }
  return result;
}


PyObject* Constructor<::cpp2::MyEnum>::operator()(
    ::cpp2::MyEnum val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__module__MyEnum(
      static_cast<int64_t>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}

} // namespace capi
} // namespace python
} // namespace thrift
} // namespace apache
