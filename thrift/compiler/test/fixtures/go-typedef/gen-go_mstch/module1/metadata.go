// @generated by Thrift for [[[ program path ]]]
// This file is probably not the place you want to edit!

package module1 // [[[ program thrift source path ]]]

import (
    module0 "module0"
    thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
    metadata "github.com/facebook/fbthrift/thrift/lib/thrift/metadata"
)

var _ = module0.GoUnusedProtection__
// (needed to ensure safety because of naive import list construction)
var _ = thrift.ZERO
var _ = metadata.GoUnusedProtection__

// Premade Thrift types
var (
    premadeThriftType_string = metadata.NewThriftType().SetTPrimitive(
        metadata.ThriftPrimitiveType_THRIFT_STRING_TYPE.Ptr(),
            )
    premadeThriftType_module1_Plate = metadata.NewThriftType().SetTTypedef(
        metadata.NewThriftTypedefType().
            SetName("module1.Plate").
            SetUnderlyingType(premadeThriftType_string),
            )
    premadeThriftType_i32 = metadata.NewThriftType().SetTPrimitive(
        metadata.ThriftPrimitiveType_THRIFT_I32_TYPE.Ptr(),
            )
    premadeThriftType_module1_Year = metadata.NewThriftType().SetTTypedef(
        metadata.NewThriftTypedefType().
            SetName("module1.Year").
            SetUnderlyingType(premadeThriftType_i32),
            )
    premadeThriftType_list_string = metadata.NewThriftType().SetTList(
        metadata.NewThriftListType().
            SetValueType(premadeThriftType_string),
            )
    premadeThriftType_module1_Drivers = metadata.NewThriftType().SetTTypedef(
        metadata.NewThriftTypedefType().
            SetName("module1.Drivers").
            SetUnderlyingType(premadeThriftType_list_string),
            )
    premadeThriftType_module0_Accessory = metadata.NewThriftType().SetTStruct(
        metadata.NewThriftStructType().
            SetName("module0.Accessory"),
            )
    premadeThriftType_module1_Accessory = metadata.NewThriftType().SetTTypedef(
        metadata.NewThriftTypedefType().
            SetName("module1.Accessory").
            SetUnderlyingType(premadeThriftType_module0_Accessory),
            )
    premadeThriftType_list_module1_Accessory = metadata.NewThriftType().SetTList(
        metadata.NewThriftListType().
            SetValueType(premadeThriftType_module1_Accessory),
            )
    premadeThriftType_module0_PartName = metadata.NewThriftType().SetTStruct(
        metadata.NewThriftStructType().
            SetName("module0.PartName"),
            )
    premadeThriftType_module1_PartName = metadata.NewThriftType().SetTTypedef(
        metadata.NewThriftTypedefType().
            SetName("module1.PartName").
            SetUnderlyingType(premadeThriftType_module0_PartName),
            )
    premadeThriftType_map_i32_module1_PartName = metadata.NewThriftType().SetTMap(
        metadata.NewThriftMapType().
            SetKeyType(premadeThriftType_i32).
            SetValueType(premadeThriftType_module1_PartName),
            )
    premadeThriftType_i64 = metadata.NewThriftType().SetTPrimitive(
        metadata.ThriftPrimitiveType_THRIFT_I64_TYPE.Ptr(),
            )
    premadeThriftType_module1_MapKey = metadata.NewThriftType().SetTStruct(
        metadata.NewThriftStructType().
            SetName("module1.MapKey"),
            )
    premadeThriftType_map_module1_MapKey_string = metadata.NewThriftType().SetTMap(
        metadata.NewThriftMapType().
            SetKeyType(premadeThriftType_module1_MapKey).
            SetValueType(premadeThriftType_string),
            )
    premadeThriftType_module1_Automobile = metadata.NewThriftType().SetTStruct(
        metadata.NewThriftStructType().
            SetName("module1.Automobile"),
            )
    premadeThriftType_module1_Car = metadata.NewThriftType().SetTTypedef(
        metadata.NewThriftTypedefType().
            SetName("module1.Car").
            SetUnderlyingType(premadeThriftType_module1_Automobile),
            )
    premadeThriftType_list_module1_Automobile = metadata.NewThriftType().SetTList(
        metadata.NewThriftListType().
            SetValueType(premadeThriftType_module1_Automobile),
            )
    premadeThriftType_list_module1_Car = metadata.NewThriftType().SetTList(
        metadata.NewThriftListType().
            SetValueType(premadeThriftType_module1_Car),
            )
)

var structMetadatas = []*metadata.ThriftStruct{
    metadata.NewThriftStruct().
    SetName("module1.Automobile").
    SetIsUnion(false).
    SetFields(
        []*metadata.ThriftField{
            metadata.NewThriftField().
    SetId(1).
    SetName("plate").
    SetIsOptional(false).
    SetType(premadeThriftType_module1_Plate),
            metadata.NewThriftField().
    SetId(2).
    SetName("previous_plate").
    SetIsOptional(true).
    SetType(premadeThriftType_module1_Plate),
            metadata.NewThriftField().
    SetId(3).
    SetName("first_plate").
    SetIsOptional(true).
    SetType(premadeThriftType_module1_Plate),
            metadata.NewThriftField().
    SetId(4).
    SetName("year").
    SetIsOptional(false).
    SetType(premadeThriftType_module1_Year),
            metadata.NewThriftField().
    SetId(5).
    SetName("drivers").
    SetIsOptional(false).
    SetType(premadeThriftType_module1_Drivers),
            metadata.NewThriftField().
    SetId(6).
    SetName("Accessories").
    SetIsOptional(false).
    SetType(premadeThriftType_list_module1_Accessory),
            metadata.NewThriftField().
    SetId(7).
    SetName("PartNames").
    SetIsOptional(false).
    SetType(premadeThriftType_map_i32_module1_PartName),
        },
    ),
    metadata.NewThriftStruct().
    SetName("module1.MapKey").
    SetIsUnion(false).
    SetFields(
        []*metadata.ThriftField{
            metadata.NewThriftField().
    SetId(1).
    SetName("num").
    SetIsOptional(false).
    SetType(premadeThriftType_i64),
            metadata.NewThriftField().
    SetId(2).
    SetName("strval").
    SetIsOptional(false).
    SetType(premadeThriftType_string),
        },
    ),
    metadata.NewThriftStruct().
    SetName("module1.MapContainer").
    SetIsUnion(false).
    SetFields(
        []*metadata.ThriftField{
            metadata.NewThriftField().
    SetId(1).
    SetName("mapval").
    SetIsOptional(false).
    SetType(premadeThriftType_map_module1_MapKey_string),
        },
    ),
    metadata.NewThriftStruct().
    SetName("module1.Pair").
    SetIsUnion(false).
    SetFields(
        []*metadata.ThriftField{
            metadata.NewThriftField().
    SetId(1).
    SetName("automobile").
    SetIsOptional(false).
    SetType(premadeThriftType_module1_Automobile),
            metadata.NewThriftField().
    SetId(2).
    SetName("car").
    SetIsOptional(false).
    SetType(premadeThriftType_module1_Car),
        },
    ),
    metadata.NewThriftStruct().
    SetName("module1.Collection").
    SetIsUnion(false).
    SetFields(
        []*metadata.ThriftField{
            metadata.NewThriftField().
    SetId(1).
    SetName("automobiles").
    SetIsOptional(false).
    SetType(premadeThriftType_list_module1_Automobile),
            metadata.NewThriftField().
    SetId(2).
    SetName("cars").
    SetIsOptional(false).
    SetType(premadeThriftType_list_module1_Car),
        },
    ),
}

var exceptionMetadatas = []*metadata.ThriftException{
}

var enumMetadatas = []*metadata.ThriftEnum{
}

var serviceMetadatas = []*metadata.ThriftService{
    metadata.NewThriftService().
    SetName("module1.Finder").
    SetFunctions(
        []*metadata.ThriftFunction{
            metadata.NewThriftFunction().
    SetName("byPlate").
    SetIsOneway(false).
    SetReturnType(premadeThriftType_module1_Automobile).
    SetArguments(
        []*metadata.ThriftField{
            metadata.NewThriftField().
    SetId(1).
    SetName("plate").
    SetIsOptional(false).
    SetType(premadeThriftType_module1_Plate),
        },
    ),
            metadata.NewThriftFunction().
    SetName("aliasByPlate").
    SetIsOneway(false).
    SetReturnType(premadeThriftType_module1_Car).
    SetArguments(
        []*metadata.ThriftField{
            metadata.NewThriftField().
    SetId(1).
    SetName("plate").
    SetIsOptional(false).
    SetType(premadeThriftType_module1_Plate),
        },
    ),
            metadata.NewThriftFunction().
    SetName("previousPlate").
    SetIsOneway(false).
    SetReturnType(premadeThriftType_module1_Plate).
    SetArguments(
        []*metadata.ThriftField{
            metadata.NewThriftField().
    SetId(1).
    SetName("plate").
    SetIsOptional(false).
    SetType(premadeThriftType_module1_Plate),
        },
    ),
        },
    ),
}

// GetThriftMetadata returns complete Thrift metadata for current and imported packages.
func GetThriftMetadata() *metadata.ThriftMetadata {
    includedEnumsMetadatas := []map[string]*metadata.ThriftEnum{
        GetEnumsMetadata(),
        module0.GetEnumsMetadata(),
    }
    includedStructsMetadatas := []map[string]*metadata.ThriftStruct{
        GetStructsMetadata(),
        module0.GetStructsMetadata(),
    }
    includedExceptionsMetadatas := []map[string]*metadata.ThriftException{
        GetExceptionsMetadata(),
        module0.GetExceptionsMetadata(),
    }
    includedServicesMetadatas := []map[string]*metadata.ThriftService{
        GetServicesMetadata(),
        module0.GetServicesMetadata(),
    }

	allEnums := make(map[string]*metadata.ThriftEnum)
	allStructs := make(map[string]*metadata.ThriftStruct)
	allExceptions := make(map[string]*metadata.ThriftException)
    allServices := make(map[string]*metadata.ThriftService)

    for _, includedEnumsMetadata := range includedEnumsMetadatas {
        for enumName, thriftEnum := range includedEnumsMetadata {
            allEnums[enumName] = thriftEnum
        }
    }
    for _, includedStructsMetadata := range includedStructsMetadatas {
        for structName, thriftStruct := range includedStructsMetadata {
            allStructs[structName] = thriftStruct
        }
    }
    for _, includedExceptionsMetadata := range includedExceptionsMetadatas {
        for exceptionName, thriftException := range includedExceptionsMetadata {
            allExceptions[exceptionName] = thriftException
        }
    }
    for _, includedServicesMetadata := range includedServicesMetadatas {
        for serviceName, thriftService := range includedServicesMetadata {
            allServices[serviceName] = thriftService
        }
    }

    return metadata.NewThriftMetadata().
        SetEnums(allEnums).
        SetStructs(allStructs).
        SetExceptions(allExceptions).
        SetServices(allServices)
}

// GetStructsMetadata returns Thrift metadata for enums in the current package.
func GetEnumsMetadata() map[string]*metadata.ThriftEnum {
    result := make(map[string]*metadata.ThriftEnum)
    for _, enumMetadata := range enumMetadatas {
        result[enumMetadata.GetName()] = enumMetadata
    }
    return result
}

// GetStructsMetadata returns Thrift metadata for structs in the current package.
func GetStructsMetadata() map[string]*metadata.ThriftStruct {
    result := make(map[string]*metadata.ThriftStruct)
    for _, structMetadata := range structMetadatas {
        result[structMetadata.GetName()] = structMetadata
    }
    return result
}

// GetStructsMetadata returns Thrift metadata for exceptions in the current package.
func GetExceptionsMetadata() map[string]*metadata.ThriftException {
    result := make(map[string]*metadata.ThriftException)
    for _, exceptionMetadata := range exceptionMetadatas {
        result[exceptionMetadata.GetName()] = exceptionMetadata
    }
    return result
}

// GetStructsMetadata returns Thrift metadata for services in the current package.
func GetServicesMetadata() map[string]*metadata.ThriftService {
    result := make(map[string]*metadata.ThriftService)
    for _, serviceMetadata := range serviceMetadatas {
        result[serviceMetadata.GetName()] = serviceMetadata
    }
    return result
}
