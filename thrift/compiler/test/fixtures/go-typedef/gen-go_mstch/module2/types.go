// @generated by Thrift for [[[ program path ]]]
// This file is probably not the place you want to edit!

package module2 // [[[ program thrift source path ]]]

import (
  "fmt"

  "github.com/facebook/fbthrift/thrift/lib/go/thrift"
)


// (needed to ensure safety because of naive import list construction)
var _ = fmt.Printf
var _ = thrift.ZERO


type Enum int32

const (
    Enum_A Enum = 0
    Enum_B Enum = 1
    Enum_C Enum = 2
)

// Enum value maps for Enum
var (
    Enum_name = map[Enum]string {
        Enum_A: "A",
        Enum_B: "B",
        Enum_C: "C",
    }

    Enum_value = map[string]Enum {
        "A": Enum_A,
        "B": Enum_B,
        "C": Enum_C,
    }

    // Deprecated: Use Enum_name instead.
    EnumToName = Enum_name

    // Deprecated: Use Enum_value instead.
    EnumToValue = Enum_value

    // Deprecated: Use Enum_name instead (e.g. `for name, _ := range Enum_name {}`).
    EnumNames = []string{
        "A",
        "B",
        "C",
    }

    // Deprecated: Use Enum_value instead (e.g. `for value, _ := range Enum_value {}`).
    EnumValues = []Enum{
        0,
        1,
        2,
    }
)

func (x Enum) String() string {
    if v, ok := EnumToName[x]; ok {
        return v
    }
    return "<UNSET>"
}

func (x Enum) Ptr() *Enum {
    return &x
}

// Deprecated: Use Enum_value instead (e.g. `x, ok := Enum_value["name"]`).
func EnumFromString(s string) (Enum, error) {
    if v, ok := Enum_value[s]; ok {
        return v, nil
    }
    return Enum(0), fmt.Errorf("not a valid Enum string")
}

// Deprecated: Use Enum.Ptr() instead.
func EnumPtr(v Enum) *Enum {
    return &v
}

