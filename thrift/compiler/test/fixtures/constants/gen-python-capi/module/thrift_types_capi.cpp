
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT
 *  @generated
 *
 */

#include <folly/python/import.h>
#include <thrift/lib/python/capi/iobuf.h>
#include <thrift/lib/python/types.h>

#include <thrift/compiler/test/fixtures/constants/src/gen-python-capi/module/thrift_types_api.h>
#include <thrift/compiler/test/fixtures/constants/src/gen-python-capi/module/thrift_types_capi.h>


namespace apache {
namespace thrift {
namespace python {
namespace capi {
namespace {
bool ensure_module_imported() {
  static ::folly::python::import_cache_nocapture import((
      ::import_module__thrift_types_capi));
  return import();
}
} // namespace

ExtractorResult<::cpp2::Internship>
Extractor<::cpp2::Internship>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::Internship>(
      "Module module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__module__Internship(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::cpp2::Internship>(
        "Thrift serialize error: Internship");
  }
  return detail::deserialize_iobuf<::cpp2::Internship>(std::move(val));
}


ExtractorResult<::cpp2::Internship>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::cpp2::Internship>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::Internship>(
      "Module module import error");
  }
  auto obj = StrongRef(init__module__Internship(fbthrift_data));
  if (!obj) {
      return extractorError<::cpp2::Internship>(
          "Init from fbthrift error: Internship");
  }
  return Extractor<::cpp2::Internship>{}(*obj);
}

int Extractor<::cpp2::Internship>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module module import error");
  }
  int result =
      can_extract__module__Internship(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: Internship");
  }
  return result;
}


PyObject* Constructor<::cpp2::Internship>::operator()(
    const ::cpp2::Internship& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__module__Internship(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::Internship>>::operator()(
    const ::cpp2::Internship& val) {
  auto obj = StrongRef(Constructor<::cpp2::Internship>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::cpp2::Range>
Extractor<::cpp2::Range>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::Range>(
      "Module module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__module__Range(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::cpp2::Range>(
        "Thrift serialize error: Range");
  }
  return detail::deserialize_iobuf<::cpp2::Range>(std::move(val));
}


ExtractorResult<::cpp2::Range>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::cpp2::Range>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::Range>(
      "Module module import error");
  }
  auto obj = StrongRef(init__module__Range(fbthrift_data));
  if (!obj) {
      return extractorError<::cpp2::Range>(
          "Init from fbthrift error: Range");
  }
  return Extractor<::cpp2::Range>{}(*obj);
}

int Extractor<::cpp2::Range>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module module import error");
  }
  int result =
      can_extract__module__Range(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: Range");
  }
  return result;
}


PyObject* Constructor<::cpp2::Range>::operator()(
    const ::cpp2::Range& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__module__Range(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::Range>>::operator()(
    const ::cpp2::Range& val) {
  auto obj = StrongRef(Constructor<::cpp2::Range>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::cpp2::struct1>
Extractor<::cpp2::struct1>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::struct1>(
      "Module module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__module__struct1(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::cpp2::struct1>(
        "Thrift serialize error: struct1");
  }
  return detail::deserialize_iobuf<::cpp2::struct1>(std::move(val));
}


ExtractorResult<::cpp2::struct1>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::cpp2::struct1>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::struct1>(
      "Module module import error");
  }
  auto obj = StrongRef(init__module__struct1(fbthrift_data));
  if (!obj) {
      return extractorError<::cpp2::struct1>(
          "Init from fbthrift error: struct1");
  }
  return Extractor<::cpp2::struct1>{}(*obj);
}

int Extractor<::cpp2::struct1>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module module import error");
  }
  int result =
      can_extract__module__struct1(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: struct1");
  }
  return result;
}


PyObject* Constructor<::cpp2::struct1>::operator()(
    const ::cpp2::struct1& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__module__struct1(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::struct1>>::operator()(
    const ::cpp2::struct1& val) {
  auto obj = StrongRef(Constructor<::cpp2::struct1>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::cpp2::struct2>
Extractor<::cpp2::struct2>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::struct2>(
      "Module module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__module__struct2(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::cpp2::struct2>(
        "Thrift serialize error: struct2");
  }
  return detail::deserialize_iobuf<::cpp2::struct2>(std::move(val));
}


ExtractorResult<::cpp2::struct2>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::cpp2::struct2>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::struct2>(
      "Module module import error");
  }
  auto obj = StrongRef(init__module__struct2(fbthrift_data));
  if (!obj) {
      return extractorError<::cpp2::struct2>(
          "Init from fbthrift error: struct2");
  }
  return Extractor<::cpp2::struct2>{}(*obj);
}

int Extractor<::cpp2::struct2>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module module import error");
  }
  int result =
      can_extract__module__struct2(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: struct2");
  }
  return result;
}


PyObject* Constructor<::cpp2::struct2>::operator()(
    const ::cpp2::struct2& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__module__struct2(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::struct2>>::operator()(
    const ::cpp2::struct2& val) {
  auto obj = StrongRef(Constructor<::cpp2::struct2>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::cpp2::struct3>
Extractor<::cpp2::struct3>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::struct3>(
      "Module module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__module__struct3(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::cpp2::struct3>(
        "Thrift serialize error: struct3");
  }
  return detail::deserialize_iobuf<::cpp2::struct3>(std::move(val));
}


ExtractorResult<::cpp2::struct3>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::cpp2::struct3>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::struct3>(
      "Module module import error");
  }
  auto obj = StrongRef(init__module__struct3(fbthrift_data));
  if (!obj) {
      return extractorError<::cpp2::struct3>(
          "Init from fbthrift error: struct3");
  }
  return Extractor<::cpp2::struct3>{}(*obj);
}

int Extractor<::cpp2::struct3>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module module import error");
  }
  int result =
      can_extract__module__struct3(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: struct3");
  }
  return result;
}


PyObject* Constructor<::cpp2::struct3>::operator()(
    const ::cpp2::struct3& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__module__struct3(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::struct3>>::operator()(
    const ::cpp2::struct3& val) {
  auto obj = StrongRef(Constructor<::cpp2::struct3>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::cpp2::struct4>
Extractor<::cpp2::struct4>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::struct4>(
      "Module module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__module__struct4(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::cpp2::struct4>(
        "Thrift serialize error: struct4");
  }
  return detail::deserialize_iobuf<::cpp2::struct4>(std::move(val));
}


ExtractorResult<::cpp2::struct4>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::cpp2::struct4>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::struct4>(
      "Module module import error");
  }
  auto obj = StrongRef(init__module__struct4(fbthrift_data));
  if (!obj) {
      return extractorError<::cpp2::struct4>(
          "Init from fbthrift error: struct4");
  }
  return Extractor<::cpp2::struct4>{}(*obj);
}

int Extractor<::cpp2::struct4>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module module import error");
  }
  int result =
      can_extract__module__struct4(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: struct4");
  }
  return result;
}


PyObject* Constructor<::cpp2::struct4>::operator()(
    const ::cpp2::struct4& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__module__struct4(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::struct4>>::operator()(
    const ::cpp2::struct4& val) {
  auto obj = StrongRef(Constructor<::cpp2::struct4>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::cpp2::union1>
Extractor<::cpp2::union1>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::union1>(
      "Module module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__module__union1(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::cpp2::union1>(
        "Thrift serialize error: union1");
  }
  return detail::deserialize_iobuf<::cpp2::union1>(std::move(val));
}


ExtractorResult<::cpp2::union1>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::cpp2::union1>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::union1>(
      "Module module import error");
  }
  auto obj = StrongRef(init__module__union1(fbthrift_data));
  if (!obj) {
      return extractorError<::cpp2::union1>(
          "Init from fbthrift error: union1");
  }
  return Extractor<::cpp2::union1>{}(*obj);
}

int Extractor<::cpp2::union1>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module module import error");
  }
  int result =
      can_extract__module__union1(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: union1");
  }
  return result;
}


PyObject* Constructor<::cpp2::union1>::operator()(
    const ::cpp2::union1& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__module__union1(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::union1>>::operator()(
    const ::cpp2::union1& val) {
  auto obj = StrongRef(Constructor<::cpp2::union1>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::cpp2::union2>
Extractor<::cpp2::union2>::operator()(PyObject* obj) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::union2>(
      "Module module import error");
  }
  std::unique_ptr<folly::IOBuf> val(
      extract__module__union2(obj));
  if (!val) {
    CHECK(PyErr_Occurred());
    return extractorError<::cpp2::union2>(
        "Thrift serialize error: union2");
  }
  return detail::deserialize_iobuf<::cpp2::union2>(std::move(val));
}


ExtractorResult<::cpp2::union2>
Extractor<::apache::thrift::python::capi::ComposedStruct<
    ::cpp2::union2>>::operator()(PyObject* fbthrift_data) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return extractorError<::cpp2::union2>(
      "Module module import error");
  }
  auto obj = StrongRef(init__module__union2(fbthrift_data));
  if (!obj) {
      return extractorError<::cpp2::union2>(
          "Init from fbthrift error: union2");
  }
  return Extractor<::cpp2::union2>{}(*obj);
}

int Extractor<::cpp2::union2>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module module import error");
  }
  int result =
      can_extract__module__union2(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: union2");
  }
  return result;
}


PyObject* Constructor<::cpp2::union2>::operator()(
    const ::cpp2::union2& val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__module__union2(
      detail::serialize_to_iobuf(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}


PyObject* Constructor<::apache::thrift::python::capi::ComposedStruct<
        ::cpp2::union2>>::operator()(
    const ::cpp2::union2& val) {
  auto obj = StrongRef(Constructor<::cpp2::union2>{}(val));
  if (!obj) {
    return nullptr;
  }
  return getThriftData(*obj);
}

ExtractorResult<::cpp2::EmptyEnum>
Extractor<::cpp2::EmptyEnum>::operator()(PyObject* obj) {
  long val = PyLong_AsLong(obj);
  if (val == -1 && PyErr_Occurred()) {
    return extractorError<::cpp2::EmptyEnum>(
        "Error getting python int value: EmptyEnum");
  }
  return static_cast<::cpp2::EmptyEnum>(val);
}

int Extractor<::cpp2::EmptyEnum>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module module import error");
  }
  int result =
      can_extract__module__EmptyEnum(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: EmptyEnum");
  }
  return result;
}


PyObject* Constructor<::cpp2::EmptyEnum>::operator()(
    ::cpp2::EmptyEnum val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__module__EmptyEnum(
      static_cast<int64_t>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}

ExtractorResult<::cpp2::City>
Extractor<::cpp2::City>::operator()(PyObject* obj) {
  long val = PyLong_AsLong(obj);
  if (val == -1 && PyErr_Occurred()) {
    return extractorError<::cpp2::City>(
        "Error getting python int value: City");
  }
  return static_cast<::cpp2::City>(val);
}

int Extractor<::cpp2::City>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module module import error");
  }
  int result =
      can_extract__module__City(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: City");
  }
  return result;
}


PyObject* Constructor<::cpp2::City>::operator()(
    ::cpp2::City val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__module__City(
      static_cast<int64_t>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}

ExtractorResult<::cpp2::Company>
Extractor<::cpp2::Company>::operator()(PyObject* obj) {
  long val = PyLong_AsLong(obj);
  if (val == -1 && PyErr_Occurred()) {
    return extractorError<::cpp2::Company>(
        "Error getting python int value: Company");
  }
  return static_cast<::cpp2::Company>(val);
}

int Extractor<::cpp2::Company>::typeCheck(PyObject* obj) {
  if (!ensure_module_imported()) {
    ::folly::python::handlePythonError(
      "Module module import error");
  }
  int result =
      can_extract__module__Company(obj);
  if (result < 0) {
    ::folly::python::handlePythonError(
      "Unexpected type check error: Company");
  }
  return result;
}


PyObject* Constructor<::cpp2::Company>::operator()(
    ::cpp2::Company val) {
  if (!ensure_module_imported()) {
    DCHECK(PyErr_Occurred() != nullptr);
    return nullptr;
  }
  auto ptr = construct__module__Company(
      static_cast<int64_t>(val));
  if (!ptr) {
    CHECK(PyErr_Occurred());
  }
  return ptr;
}

} // namespace capi
} // namespace python
} // namespace thrift
} // namespace apache
